
build/2.2.E.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4823      	ldr	r0, [pc, #140]	; (8000250 <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f00c fcad 	bl	800cb30 <__core_init>
 80001d6:	f008 ffeb 	bl	80091b0 <__early_init>
 80001da:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001de:	491d      	ldr	r1, [pc, #116]	; (8000254 <endfiniloop+0xa>)
 80001e0:	4a1d      	ldr	r2, [pc, #116]	; (8000258 <endfiniloop+0xe>)

080001e2 <msloop>:
 80001e2:	4291      	cmp	r1, r2
 80001e4:	bf3c      	itt	cc
 80001e6:	f841 0b04 	strcc.w	r0, [r1], #4
 80001ea:	e7fa      	bcc.n	80001e2 <msloop>
 80001ec:	491b      	ldr	r1, [pc, #108]	; (800025c <endfiniloop+0x12>)
 80001ee:	4a18      	ldr	r2, [pc, #96]	; (8000250 <endfiniloop+0x6>)

080001f0 <psloop>:
 80001f0:	4291      	cmp	r1, r2
 80001f2:	bf3c      	itt	cc
 80001f4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f8:	e7fa      	bcc.n	80001f0 <psloop>
 80001fa:	4919      	ldr	r1, [pc, #100]	; (8000260 <endfiniloop+0x16>)
 80001fc:	4a19      	ldr	r2, [pc, #100]	; (8000264 <endfiniloop+0x1a>)
 80001fe:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <endfiniloop+0x1e>)

08000200 <dloop>:
 8000200:	429a      	cmp	r2, r3
 8000202:	bf3e      	ittt	cc
 8000204:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000208:	f842 0b04 	strcc.w	r0, [r2], #4
 800020c:	e7f8      	bcc.n	8000200 <dloop>
 800020e:	2000      	movs	r0, #0
 8000210:	4916      	ldr	r1, [pc, #88]	; (800026c <endfiniloop+0x22>)
 8000212:	4a17      	ldr	r2, [pc, #92]	; (8000270 <endfiniloop+0x26>)

08000214 <bloop>:
 8000214:	4291      	cmp	r1, r2
 8000216:	bf3c      	itt	cc
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
 800021c:	e7fa      	bcc.n	8000214 <bloop>
 800021e:	f00c fc47 	bl	800cab0 <__init_ram_areas>
 8000222:	f00c fc7d 	bl	800cb20 <__late_init>
 8000226:	4c13      	ldr	r4, [pc, #76]	; (8000274 <endfiniloop+0x2a>)
 8000228:	4d13      	ldr	r5, [pc, #76]	; (8000278 <endfiniloop+0x2e>)

0800022a <initloop>:
 800022a:	42ac      	cmp	r4, r5
 800022c:	da03      	bge.n	8000236 <endinitloop>
 800022e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000232:	4788      	blx	r1
 8000234:	e7f9      	b.n	800022a <initloop>

08000236 <endinitloop>:
 8000236:	f006 fcb3 	bl	8006ba0 <main>
 800023a:	4c10      	ldr	r4, [pc, #64]	; (800027c <endfiniloop+0x32>)
 800023c:	4d10      	ldr	r5, [pc, #64]	; (8000280 <endfiniloop+0x36>)

0800023e <finiloop>:
 800023e:	42ac      	cmp	r4, r5
 8000240:	da03      	bge.n	800024a <endfiniloop>
 8000242:	f854 1b04 	ldr.w	r1, [r4], #4
 8000246:	4788      	blx	r1
 8000248:	e7f9      	b.n	800023e <finiloop>

0800024a <endfiniloop>:
 800024a:	f00c bc61 	b.w	800cb10 <__default_exit>
 800024e:	0000      	.short	0x0000
 8000250:	20000800 	.word	0x20000800
 8000254:	20000000 	.word	0x20000000
 8000258:	20000400 	.word	0x20000400
 800025c:	20000400 	.word	0x20000400
 8000260:	08010318 	.word	0x08010318
 8000264:	20000800 	.word	0x20000800
 8000268:	20000900 	.word	0x20000900
 800026c:	20000900 	.word	0x20000900
 8000270:	20001d10 	.word	0x20001d10
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	080001c0 	.word	0x080001c0
 8000280:	080001c0 	.word	0x080001c0
	...

08000290 <_port_switch>:
 8000290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000294:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000298:	68c3      	ldr	r3, [r0, #12]
 800029a:	469d      	mov	sp, r3
 800029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a0 <_port_thread_start>:
 80002a0:	f00c fa4e 	bl	800c740 <_dbg_check_unlock>
 80002a4:	f00b ffcc 	bl	800c240 <_stats_stop_measure_crit_thd>
 80002a8:	2300      	movs	r3, #0
 80002aa:	f383 8811 	msr	BASEPRI, r3
 80002ae:	4628      	mov	r0, r5
 80002b0:	47a0      	blx	r4
 80002b2:	2000      	movs	r0, #0
 80002b4:	f00c fb94 	bl	800c9e0 <chThdExit>

080002b8 <_port_switch_from_isr>:
 80002b8:	f00b ffda 	bl	800c270 <_stats_start_measure_crit_thd>
 80002bc:	f00c fa50 	bl	800c760 <_dbg_check_lock>
 80002c0:	f00b fffe 	bl	800c2c0 <chSchDoReschedule>
 80002c4:	f00c fa3c 	bl	800c740 <_dbg_check_unlock>
 80002c8:	f00b ffba 	bl	800c240 <_stats_stop_measure_crit_thd>

080002cc <_port_exit_from_isr>:
 80002cc:	df00      	svc	0
 80002ce:	e7fe      	b.n	80002ce <_port_exit_from_isr+0x2>

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b97c 	b.w	80005e0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	468c      	mov	ip, r1
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	9e08      	ldr	r6, [sp, #32]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d151      	bne.n	80003b4 <__udivmoddi4+0xb4>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d96d      	bls.n	80003f2 <__udivmoddi4+0xf2>
 8000316:	fab2 fe82 	clz	lr, r2
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d00b      	beq.n	8000338 <__udivmoddi4+0x38>
 8000320:	f1ce 0c20 	rsb	ip, lr, #32
 8000324:	fa01 f50e 	lsl.w	r5, r1, lr
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000330:	ea4c 0c05 	orr.w	ip, ip, r5
 8000334:	fa00 f40e 	lsl.w	r4, r0, lr
 8000338:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800033c:	0c25      	lsrs	r5, r4, #16
 800033e:	fbbc f8fa 	udiv	r8, ip, sl
 8000342:	fa1f f987 	uxth.w	r9, r7
 8000346:	fb0a cc18 	mls	ip, sl, r8, ip
 800034a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800034e:	fb08 f309 	mul.w	r3, r8, r9
 8000352:	42ab      	cmp	r3, r5
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x6c>
 8000356:	19ed      	adds	r5, r5, r7
 8000358:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800035c:	f080 8123 	bcs.w	80005a6 <__udivmoddi4+0x2a6>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f240 8120 	bls.w	80005a6 <__udivmoddi4+0x2a6>
 8000366:	f1a8 0802 	sub.w	r8, r8, #2
 800036a:	443d      	add	r5, r7
 800036c:	1aed      	subs	r5, r5, r3
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb5 f0fa 	udiv	r0, r5, sl
 8000374:	fb0a 5510 	mls	r5, sl, r0, r5
 8000378:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800037c:	fb00 f909 	mul.w	r9, r0, r9
 8000380:	45a1      	cmp	r9, r4
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x98>
 8000384:	19e4      	adds	r4, r4, r7
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038a:	f080 810a 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800038e:	45a1      	cmp	r9, r4
 8000390:	f240 8107 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 0409 	sub.w	r4, r4, r9
 800039c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a0:	2100      	movs	r1, #0
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d061      	beq.n	800046a <__udivmoddi4+0x16a>
 80003a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003aa:	2300      	movs	r3, #0
 80003ac:	6034      	str	r4, [r6, #0]
 80003ae:	6073      	str	r3, [r6, #4]
 80003b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0xc8>
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d054      	beq.n	8000466 <__udivmoddi4+0x166>
 80003bc:	2100      	movs	r1, #0
 80003be:	e886 0021 	stmia.w	r6, {r0, r5}
 80003c2:	4608      	mov	r0, r1
 80003c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c8:	fab3 f183 	clz	r1, r3
 80003cc:	2900      	cmp	r1, #0
 80003ce:	f040 808e 	bne.w	80004ee <__udivmoddi4+0x1ee>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xdc>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80fa 	bhi.w	80005d0 <__udivmoddi4+0x2d0>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb65 0503 	sbc.w	r5, r5, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	46ac      	mov	ip, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d03f      	beq.n	800046a <__udivmoddi4+0x16a>
 80003ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	b912      	cbnz	r2, 80003fa <__udivmoddi4+0xfa>
 80003f4:	2701      	movs	r7, #1
 80003f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003fa:	fab7 fe87 	clz	lr, r7
 80003fe:	f1be 0f00 	cmp.w	lr, #0
 8000402:	d134      	bne.n	800046e <__udivmoddi4+0x16e>
 8000404:	1beb      	subs	r3, r5, r7
 8000406:	0c3a      	lsrs	r2, r7, #16
 8000408:	fa1f fc87 	uxth.w	ip, r7
 800040c:	2101      	movs	r1, #1
 800040e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000412:	0c25      	lsrs	r5, r4, #16
 8000414:	fb02 3318 	mls	r3, r2, r8, r3
 8000418:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800041c:	fb0c f308 	mul.w	r3, ip, r8
 8000420:	42ab      	cmp	r3, r5
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x134>
 8000424:	19ed      	adds	r5, r5, r7
 8000426:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x132>
 800042c:	42ab      	cmp	r3, r5
 800042e:	f200 80d1 	bhi.w	80005d4 <__udivmoddi4+0x2d4>
 8000432:	4680      	mov	r8, r0
 8000434:	1aed      	subs	r5, r5, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb5 f0f2 	udiv	r0, r5, r2
 800043c:	fb02 5510 	mls	r5, r2, r0, r5
 8000440:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000444:	fb0c fc00 	mul.w	ip, ip, r0
 8000448:	45a4      	cmp	ip, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x15c>
 800044c:	19e4      	adds	r4, r4, r7
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x15a>
 8000454:	45a4      	cmp	ip, r4
 8000456:	f200 80b8 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 040c 	sub.w	r4, r4, ip
 8000460:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000464:	e79d      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000466:	4631      	mov	r1, r6
 8000468:	4630      	mov	r0, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	f1ce 0420 	rsb	r4, lr, #32
 8000472:	fa05 f30e 	lsl.w	r3, r5, lr
 8000476:	fa07 f70e 	lsl.w	r7, r7, lr
 800047a:	fa20 f804 	lsr.w	r8, r0, r4
 800047e:	0c3a      	lsrs	r2, r7, #16
 8000480:	fa25 f404 	lsr.w	r4, r5, r4
 8000484:	ea48 0803 	orr.w	r8, r8, r3
 8000488:	fbb4 f1f2 	udiv	r1, r4, r2
 800048c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000490:	fb02 4411 	mls	r4, r2, r1, r4
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800049c:	fb01 f30c 	mul.w	r3, r1, ip
 80004a0:	42ab      	cmp	r3, r5
 80004a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x1bc>
 80004a8:	19ed      	adds	r5, r5, r7
 80004aa:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80004ae:	f080 808a 	bcs.w	80005c6 <__udivmoddi4+0x2c6>
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	f240 8087 	bls.w	80005c6 <__udivmoddi4+0x2c6>
 80004b8:	3902      	subs	r1, #2
 80004ba:	443d      	add	r5, r7
 80004bc:	1aeb      	subs	r3, r5, r3
 80004be:	fa1f f588 	uxth.w	r5, r8
 80004c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004c6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ce:	fb00 f30c 	mul.w	r3, r0, ip
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x1e6>
 80004d6:	19ed      	adds	r5, r5, r7
 80004d8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004dc:	d26f      	bcs.n	80005be <__udivmoddi4+0x2be>
 80004de:	42ab      	cmp	r3, r5
 80004e0:	d96d      	bls.n	80005be <__udivmoddi4+0x2be>
 80004e2:	3802      	subs	r0, #2
 80004e4:	443d      	add	r5, r7
 80004e6:	1aeb      	subs	r3, r5, r3
 80004e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ec:	e78f      	b.n	800040e <__udivmoddi4+0x10e>
 80004ee:	f1c1 0720 	rsb	r7, r1, #32
 80004f2:	fa22 f807 	lsr.w	r8, r2, r7
 80004f6:	408b      	lsls	r3, r1
 80004f8:	fa05 f401 	lsl.w	r4, r5, r1
 80004fc:	ea48 0303 	orr.w	r3, r8, r3
 8000500:	fa20 fe07 	lsr.w	lr, r0, r7
 8000504:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000508:	40fd      	lsrs	r5, r7
 800050a:	ea4e 0e04 	orr.w	lr, lr, r4
 800050e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000512:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000516:	fb0c 5519 	mls	r5, ip, r9, r5
 800051a:	fa1f f883 	uxth.w	r8, r3
 800051e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000522:	fb09 f408 	mul.w	r4, r9, r8
 8000526:	42ac      	cmp	r4, r5
 8000528:	fa02 f201 	lsl.w	r2, r2, r1
 800052c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000530:	d908      	bls.n	8000544 <__udivmoddi4+0x244>
 8000532:	18ed      	adds	r5, r5, r3
 8000534:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000538:	d243      	bcs.n	80005c2 <__udivmoddi4+0x2c2>
 800053a:	42ac      	cmp	r4, r5
 800053c:	d941      	bls.n	80005c2 <__udivmoddi4+0x2c2>
 800053e:	f1a9 0902 	sub.w	r9, r9, #2
 8000542:	441d      	add	r5, r3
 8000544:	1b2d      	subs	r5, r5, r4
 8000546:	fa1f fe8e 	uxth.w	lr, lr
 800054a:	fbb5 f0fc 	udiv	r0, r5, ip
 800054e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000552:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000556:	fb00 f808 	mul.w	r8, r0, r8
 800055a:	45a0      	cmp	r8, r4
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x26e>
 800055e:	18e4      	adds	r4, r4, r3
 8000560:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000564:	d229      	bcs.n	80005ba <__udivmoddi4+0x2ba>
 8000566:	45a0      	cmp	r8, r4
 8000568:	d927      	bls.n	80005ba <__udivmoddi4+0x2ba>
 800056a:	3802      	subs	r0, #2
 800056c:	441c      	add	r4, r3
 800056e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000572:	eba4 0408 	sub.w	r4, r4, r8
 8000576:	fba0 8902 	umull	r8, r9, r0, r2
 800057a:	454c      	cmp	r4, r9
 800057c:	46c6      	mov	lr, r8
 800057e:	464d      	mov	r5, r9
 8000580:	d315      	bcc.n	80005ae <__udivmoddi4+0x2ae>
 8000582:	d012      	beq.n	80005aa <__udivmoddi4+0x2aa>
 8000584:	b156      	cbz	r6, 800059c <__udivmoddi4+0x29c>
 8000586:	ebba 030e 	subs.w	r3, sl, lr
 800058a:	eb64 0405 	sbc.w	r4, r4, r5
 800058e:	fa04 f707 	lsl.w	r7, r4, r7
 8000592:	40cb      	lsrs	r3, r1
 8000594:	431f      	orrs	r7, r3
 8000596:	40cc      	lsrs	r4, r1
 8000598:	6037      	str	r7, [r6, #0]
 800059a:	6074      	str	r4, [r6, #4]
 800059c:	2100      	movs	r1, #0
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	4618      	mov	r0, r3
 80005a4:	e6f8      	b.n	8000398 <__udivmoddi4+0x98>
 80005a6:	4690      	mov	r8, r2
 80005a8:	e6e0      	b.n	800036c <__udivmoddi4+0x6c>
 80005aa:	45c2      	cmp	sl, r8
 80005ac:	d2ea      	bcs.n	8000584 <__udivmoddi4+0x284>
 80005ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b2:	eb69 0503 	sbc.w	r5, r9, r3
 80005b6:	3801      	subs	r0, #1
 80005b8:	e7e4      	b.n	8000584 <__udivmoddi4+0x284>
 80005ba:	4628      	mov	r0, r5
 80005bc:	e7d7      	b.n	800056e <__udivmoddi4+0x26e>
 80005be:	4640      	mov	r0, r8
 80005c0:	e791      	b.n	80004e6 <__udivmoddi4+0x1e6>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e7be      	b.n	8000544 <__udivmoddi4+0x244>
 80005c6:	4601      	mov	r1, r0
 80005c8:	e778      	b.n	80004bc <__udivmoddi4+0x1bc>
 80005ca:	3802      	subs	r0, #2
 80005cc:	443c      	add	r4, r7
 80005ce:	e745      	b.n	800045c <__udivmoddi4+0x15c>
 80005d0:	4608      	mov	r0, r1
 80005d2:	e708      	b.n	80003e6 <__udivmoddi4+0xe6>
 80005d4:	f1a8 0802 	sub.w	r8, r8, #2
 80005d8:	443d      	add	r5, r7
 80005da:	e72b      	b.n	8000434 <__udivmoddi4+0x134>
 80005dc:	0000      	movs	r0, r0
	...

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
	...

080005f0 <strlen>:
 80005f0:	f890 f000 	pld	[r0]
 80005f4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 80005f8:	f020 0107 	bic.w	r1, r0, #7
 80005fc:	f06f 0c00 	mvn.w	ip, #0
 8000600:	f010 0407 	ands.w	r4, r0, #7
 8000604:	f891 f020 	pld	[r1, #32]
 8000608:	f040 8049 	bne.w	800069e <strlen+0xae>
 800060c:	f04f 0400 	mov.w	r4, #0
 8000610:	f06f 0007 	mvn.w	r0, #7
 8000614:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000618:	f891 f040 	pld	[r1, #64]	; 0x40
 800061c:	f100 0008 	add.w	r0, r0, #8
 8000620:	fa82 f24c 	uadd8	r2, r2, ip
 8000624:	faa4 f28c 	sel	r2, r4, ip
 8000628:	fa83 f34c 	uadd8	r3, r3, ip
 800062c:	faa2 f38c 	sel	r3, r2, ip
 8000630:	bb4b      	cbnz	r3, 8000686 <strlen+0x96>
 8000632:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000636:	fa82 f24c 	uadd8	r2, r2, ip
 800063a:	f100 0008 	add.w	r0, r0, #8
 800063e:	faa4 f28c 	sel	r2, r4, ip
 8000642:	fa83 f34c 	uadd8	r3, r3, ip
 8000646:	faa2 f38c 	sel	r3, r2, ip
 800064a:	b9e3      	cbnz	r3, 8000686 <strlen+0x96>
 800064c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000650:	fa82 f24c 	uadd8	r2, r2, ip
 8000654:	f100 0008 	add.w	r0, r0, #8
 8000658:	faa4 f28c 	sel	r2, r4, ip
 800065c:	fa83 f34c 	uadd8	r3, r3, ip
 8000660:	faa2 f38c 	sel	r3, r2, ip
 8000664:	b97b      	cbnz	r3, 8000686 <strlen+0x96>
 8000666:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800066a:	f101 0120 	add.w	r1, r1, #32
 800066e:	fa82 f24c 	uadd8	r2, r2, ip
 8000672:	f100 0008 	add.w	r0, r0, #8
 8000676:	faa4 f28c 	sel	r2, r4, ip
 800067a:	fa83 f34c 	uadd8	r3, r3, ip
 800067e:	faa2 f38c 	sel	r3, r2, ip
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0c6      	beq.n	8000614 <strlen+0x24>
 8000686:	2a00      	cmp	r2, #0
 8000688:	bf04      	itt	eq
 800068a:	3004      	addeq	r0, #4
 800068c:	461a      	moveq	r2, r3
 800068e:	ba12      	rev	r2, r2
 8000690:	fab2 f282 	clz	r2, r2
 8000694:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000698:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800069c:	4770      	bx	lr
 800069e:	e9d1 2300 	ldrd	r2, r3, [r1]
 80006a2:	f004 0503 	and.w	r5, r4, #3
 80006a6:	f1c4 0000 	rsb	r0, r4, #0
 80006aa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80006ae:	f014 0f04 	tst.w	r4, #4
 80006b2:	f891 f040 	pld	[r1, #64]	; 0x40
 80006b6:	fa0c f505 	lsl.w	r5, ip, r5
 80006ba:	ea62 0205 	orn	r2, r2, r5
 80006be:	bf1c      	itt	ne
 80006c0:	ea63 0305 	ornne	r3, r3, r5
 80006c4:	4662      	movne	r2, ip
 80006c6:	f04f 0400 	mov.w	r4, #0
 80006ca:	e7a9      	b.n	8000620 <strlen+0x30>
 80006cc:	0000      	movs	r0, r0
	...

080006d0 <Thread1.lto_priv.65>:
};

//TAREA PARA CONTROLAR LA EMR3 
static THD_WORKING_AREA(waThread1, 256);
static THD_FUNCTION(Thread1, arg) 
{
 80006d0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80006d4:	4bb3      	ldr	r3, [pc, #716]	; (80009a4 <Thread1.lto_priv.65+0x2d4>)
 80006d6:	4ab4      	ldr	r2, [pc, #720]	; (80009a8 <Thread1.lto_priv.65+0x2d8>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	4cb4      	ldr	r4, [pc, #720]	; (80009ac <Thread1.lto_priv.65+0x2dc>)
 80006dc:	f8df 9304 	ldr.w	r9, [pc, #772]	; 80009e4 <Thread1.lto_priv.65+0x314>
 80006e0:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 80009cc <Thread1.lto_priv.65+0x2fc>
    uint32_t vol_real;
    uint64_t total_vol;
    uint64_t total_vol2;

          
    DIREC = (palReadPad(GPIOB,IN_4)*8) + (palReadPad(GPIOD,IN_3)*4) + (palReadPad(GPIOD,IN_2)*2) + (palReadPad(GPIOD,IN_1)*1);
 80006e4:	f8df b300 	ldr.w	fp, [pc, #768]	; 80009e8 <Thread1.lto_priv.65+0x318>
 80006e8:	619a      	str	r2, [r3, #24]
 80006ea:	b097      	sub	sp, #92	; 0x5c
 80006ec:	4bb0      	ldr	r3, [pc, #704]	; (80009b0 <Thread1.lto_priv.65+0x2e0>)
 80006ee:	f8db 0010 	ldr.w	r0, [fp, #16]
 80006f2:	6919      	ldr	r1, [r3, #16]
 80006f4:	691a      	ldr	r2, [r3, #16]
 80006f6:	691b      	ldr	r3, [r3, #16]
 80006f8:	f3c0 3080 	ubfx	r0, r0, #14, #1
 80006fc:	f3c1 2100 	ubfx	r1, r1, #8, #1
 8000700:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8000704:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8000708:	eb02 0241 	add.w	r2, r2, r1, lsl #1

    if(palReadPad(GPIOB,IN_5) == 1 && DIREC == 0X00)
 800070c:	f8db 1010 	ldr.w	r1, [fp, #16]
    DIREC = (palReadPad(GPIOB,IN_4)*8) + (palReadPad(GPIOD,IN_3)*4) + (palReadPad(GPIOD,IN_2)*2) + (palReadPad(GPIOD,IN_1)*1);
 8000710:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8000714:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    if(palReadPad(GPIOB,IN_5) == 1 && DIREC == 0X00)
 8000718:	04cd      	lsls	r5, r1, #19
    DIREC = (palReadPad(GPIOB,IN_4)*8) + (palReadPad(GPIOD,IN_3)*4) + (palReadPad(GPIOD,IN_2)*2) + (palReadPad(GPIOD,IN_1)*1);
 800071a:	b29b      	uxth	r3, r3
    if(palReadPad(GPIOB,IN_5) == 1 && DIREC == 0X00)
 800071c:	d502      	bpl.n	8000724 <Thread1.lto_priv.65+0x54>
 800071e:	2b00      	cmp	r3, #0
 8000720:	f000 8164 	beq.w	80009ec <Thread1.lto_priv.65+0x31c>
    {
        LCDInit();
        LCDBegin(16,2);   
    }

    switch(DIREC)
 8000724:	2b05      	cmp	r3, #5
 8000726:	f200 8229 	bhi.w	8000b7c <Thread1.lto_priv.65+0x4ac>
 800072a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800072e:	0163      	.short	0x0163
 8000730:	00fa0094 	.word	0x00fa0094
 8000734:	0024003c 	.word	0x0024003c
 8000738:	0006      	.short	0x0006
	return (dato_emr3[num]);
}

void write_eeprom(uint8_t num ,uint8_t inf )
{
	dato_emr3[num] = inf;
 800073a:	2300      	movs	r3, #0

        case 0X05://LOG

            write_eeprom(lado1,0x00);
            write_eeprom(lado2,0x00);
            ACTU=0X01;
 800073c:	2501      	movs	r5, #1

            LCDPrintRow( 0,"      LOG       ");
 800073e:	489d      	ldr	r0, [pc, #628]	; (80009b4 <Thread1.lto_priv.65+0x2e4>)
 8000740:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
 8000744:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
            ACTU=0X01;
 8000748:	f889 5000 	strb.w	r5, [r9]
            LCDPrintRow( 0,"      LOG       ");
 800074c:	f00e fa80 	bl	800ec50 <LCDPrintRow.constprop.3>

                           

                if(palReadPad(GPIOB,IN_5) == 1 && read_eeprom(log) == 0)
 8000750:	f8db 3010 	ldr.w	r3, [fp, #16]
 8000754:	f413 5f80 	tst.w	r3, #4096	; 0x1000
	return (dato_emr3[num]);
 8000758:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800075c:	f000 8219 	beq.w	8000b92 <Thread1.lto_priv.65+0x4c2>
 8000760:	2b00      	cmp	r3, #0
 8000762:	f000 8381 	beq.w	8000e68 <Thread1.lto_priv.65+0x798>

                    LCDPrintRow2( 0,"      OFF       ");
                    chThdSleepMilliseconds(300);    
                }

                else if( read_eeprom(log) == 1)
 8000766:	2b01      	cmp	r3, #1
 8000768:	f000 839c 	beq.w	8000ea4 <Thread1.lto_priv.65+0x7d4>

                }



                chThdSleepMilliseconds(100);
 800076c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000770:	f00c f966 	bl	800ca40 <chThdSleep>
 8000774:	e7ba      	b.n	80006ec <Thread1.lto_priv.65+0x1c>
	dato_emr3[num] = inf;
 8000776:	2300      	movs	r3, #0
            ACTU=0X01;
 8000778:	2201      	movs	r2, #1
            LCDPrintRow( 0,"     PRICE      ");
 800077a:	488f      	ldr	r0, [pc, #572]	; (80009b8 <Thread1.lto_priv.65+0x2e8>)
 800077c:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
 8000780:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
            ACTU=0X01;
 8000784:	f889 2000 	strb.w	r2, [r9]
            LCDPrintRow( 0,"     PRICE      ");
 8000788:	f00e fa62 	bl	800ec50 <LCDPrintRow.constprop.3>
            if(read_eeprom(consola) == 0X01 && read_eeprom(estado1) == 0X06 && (read_eeprom(estado2) == 0X06 || read_eeprom(turno_aux) == 1))
 800078c:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8000790:	2b01      	cmp	r3, #1
 8000792:	f000 8211 	beq.w	8000bb8 <Thread1.lto_priv.65+0x4e8>
                LCDPrintRow2( 0,"    DISABLED    ");
 8000796:	4889      	ldr	r0, [pc, #548]	; (80009bc <Thread1.lto_priv.65+0x2ec>)
 8000798:	f00e ff42 	bl	800f620 <LCDPrintRow2.constprop.2>
            chThdSleepMilliseconds(200);
 800079c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007a0:	f00c f94e 	bl	800ca40 <chThdSleep>
 80007a4:	e7a2      	b.n	80006ec <Thread1.lto_priv.65+0x1c>
 80007a6:	2300      	movs	r3, #0
            ACTU=0X01;
 80007a8:	2201      	movs	r2, #1
            LCDPrintRow( 0,"    CONSOLE     ");
 80007aa:	4885      	ldr	r0, [pc, #532]	; (80009c0 <Thread1.lto_priv.65+0x2f0>)
 80007ac:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
 80007b0:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
            ACTU=0X01;
 80007b4:	f889 2000 	strb.w	r2, [r9]
            LCDPrintRow( 0,"    CONSOLE     ");
 80007b8:	f00e fa4a 	bl	800ec50 <LCDPrintRow.constprop.3>
            if((ACTU == 0X00 || ACTU == 0X01) && read_eeprom(estado1) == 0X06 && (read_eeprom(estado2) == 0X06 || read_eeprom(turno_aux) == 1))
 80007bc:	f899 3000 	ldrb.w	r3, [r9]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d8e8      	bhi.n	8000796 <Thread1.lto_priv.65+0xc6>
 80007c4:	7823      	ldrb	r3, [r4, #0]
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d1e5      	bne.n	8000796 <Thread1.lto_priv.65+0xc6>
 80007ca:	78a3      	ldrb	r3, [r4, #2]
 80007cc:	2b06      	cmp	r3, #6
 80007ce:	d003      	beq.n	80007d8 <Thread1.lto_priv.65+0x108>
 80007d0:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d1de      	bne.n	8000796 <Thread1.lto_priv.65+0xc6>
                ACTU=0X01;
 80007d8:	2501      	movs	r5, #1
 80007da:	f889 5000 	strb.w	r5, [r9]
                if(palReadPad(GPIOB,IN_5) == 0)
 80007de:	f8db 3010 	ldr.w	r3, [fp, #16]
 80007e2:	04db      	lsls	r3, r3, #19
 80007e4:	f100 85b4 	bmi.w	8001350 <Thread1.lto_priv.65+0xc80>
                    if ( (palReadPad(GPIOD,IN_8)==0) && (palReadPad(GPIOC,IN_7)==0) && (palReadPad(GPIOC,IN_6) == 1 )) 
 80007e8:	4b71      	ldr	r3, [pc, #452]	; (80009b0 <Thread1.lto_priv.65+0x2e0>)
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	045f      	lsls	r7, r3, #17
 80007ee:	f100 85c5 	bmi.w	800137c <Thread1.lto_priv.65+0xcac>
 80007f2:	4b74      	ldr	r3, [pc, #464]	; (80009c4 <Thread1.lto_priv.65+0x2f4>)
 80007f4:	691a      	ldr	r2, [r3, #16]
 80007f6:	0656      	lsls	r6, r2, #25
 80007f8:	f100 85c0 	bmi.w	800137c <Thread1.lto_priv.65+0xcac>
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	05d8      	lsls	r0, r3, #23
 8000800:	f140 85bc 	bpl.w	800137c <Thread1.lto_priv.65+0xcac>
                        cons_emr3=1; //SIN LAZO DE CORRIENTE
 8000804:	4a70      	ldr	r2, [pc, #448]	; (80009c8 <Thread1.lto_priv.65+0x2f8>)
                        lcd_out [8]='1';
 8000806:	2331      	movs	r3, #49	; 0x31
                        cons_emr3=1; //SIN LAZO DE CORRIENTE
 8000808:	7015      	strb	r5, [r2, #0]
                        lcd_out [8]='1';
 800080a:	f88a 3008 	strb.w	r3, [sl, #8]
                    lcd_out [0]=' ';
 800080e:	2320      	movs	r3, #32
                    lcd_out [7]='0';
 8000810:	2230      	movs	r2, #48	; 0x30
                    LCDPrintRow2(0,lcd_out);
 8000812:	486e      	ldr	r0, [pc, #440]	; (80009cc <Thread1.lto_priv.65+0x2fc>)
                    lcd_out [0]=' ';
 8000814:	f88a 3000 	strb.w	r3, [sl]
                    lcd_out [1]=' ';
 8000818:	f88a 3001 	strb.w	r3, [sl, #1]
                    lcd_out [2]=' ';
 800081c:	f88a 3002 	strb.w	r3, [sl, #2]
                    lcd_out [3]=' ';
 8000820:	f88a 3003 	strb.w	r3, [sl, #3]
                    lcd_out [4]=' ';
 8000824:	f88a 3004 	strb.w	r3, [sl, #4]
                    lcd_out [5]=' ';
 8000828:	f88a 3005 	strb.w	r3, [sl, #5]
                    lcd_out [6]=' ';
 800082c:	f88a 3006 	strb.w	r3, [sl, #6]
                    lcd_out [9]=' ';
 8000830:	f88a 3009 	strb.w	r3, [sl, #9]
                    lcd_out [10]=' ';
 8000834:	f88a 300a 	strb.w	r3, [sl, #10]
                    lcd_out [11]=' ';
 8000838:	f88a 300b 	strb.w	r3, [sl, #11]
                    lcd_out [12]=' ';
 800083c:	f88a 300c 	strb.w	r3, [sl, #12]
                    lcd_out [13]=' ';
 8000840:	f88a 300d 	strb.w	r3, [sl, #13]
                    lcd_out [14]=' ';
 8000844:	f88a 300e 	strb.w	r3, [sl, #14]
                    lcd_out [15]=' ';
 8000848:	f88a 300f 	strb.w	r3, [sl, #15]
                    lcd_out [7]='0';
 800084c:	f88a 2007 	strb.w	r2, [sl, #7]
                    LCDPrintRow2(0,lcd_out);
 8000850:	f00e fee6 	bl	800f620 <LCDPrintRow2.constprop.2>
 8000854:	e7a2      	b.n	800079c <Thread1.lto_priv.65+0xcc>
 8000856:	2300      	movs	r3, #0
            ACTU=0X01;
 8000858:	2201      	movs	r2, #1
            LCDPrintRow( 0,"   ADDRESS 1    ");
 800085a:	485d      	ldr	r0, [pc, #372]	; (80009d0 <Thread1.lto_priv.65+0x300>)
 800085c:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
 8000860:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
            ACTU=0X01;
 8000864:	f889 2000 	strb.w	r2, [r9]
            LCDPrintRow( 0,"   ADDRESS 1    ");
 8000868:	f00e f9f2 	bl	800ec50 <LCDPrintRow.constprop.3>
            if((ACTU == 0X00 || ACTU == 0X01) && read_eeprom(estado1) == 0X06 && (read_eeprom(estado2) == 0X06 || read_eeprom(turno_aux) == 1))
 800086c:	f899 3000 	ldrb.w	r3, [r9]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d890      	bhi.n	8000796 <Thread1.lto_priv.65+0xc6>
	return (dato_emr3[num]);
 8000874:	7823      	ldrb	r3, [r4, #0]
 8000876:	2b06      	cmp	r3, #6
 8000878:	d18d      	bne.n	8000796 <Thread1.lto_priv.65+0xc6>
 800087a:	78a2      	ldrb	r2, [r4, #2]
 800087c:	2a06      	cmp	r2, #6
 800087e:	d003      	beq.n	8000888 <Thread1.lto_priv.65+0x1b8>
 8000880:	f894 207f 	ldrb.w	r2, [r4, #127]	; 0x7f
 8000884:	2a01      	cmp	r2, #1
 8000886:	d186      	bne.n	8000796 <Thread1.lto_priv.65+0xc6>
                ACTU=0X01;
 8000888:	2501      	movs	r5, #1
 800088a:	f889 5000 	strb.w	r5, [r9]
                if(palReadPad(GPIOB,IN_5) == 0)
 800088e:	f8db 2010 	ldr.w	r2, [fp, #16]
 8000892:	04d0      	lsls	r0, r2, #19
 8000894:	f100 852c 	bmi.w	80012f0 <Thread1.lto_priv.65+0xc20>
                    if(palReadPad(GPIOB,BUT_1) == 1) sel_pos=1;
 8000898:	f8db 2010 	ldr.w	r2, [fp, #16]
 800089c:	0551      	lsls	r1, r2, #21
 800089e:	f140 872e 	bpl.w	80016fe <Thread1.lto_priv.65+0x102e>
 80008a2:	4a4c      	ldr	r2, [pc, #304]	; (80009d4 <Thread1.lto_priv.65+0x304>)
 80008a4:	7015      	strb	r5, [r2, #0]
                        if ( (!palReadPad(GPIOD,IN_8)) && (!palReadPad(GPIOC,IN_7)) && (!palReadPad(GPIOC,IN_6))) 
 80008a6:	4a42      	ldr	r2, [pc, #264]	; (80009b0 <Thread1.lto_priv.65+0x2e0>)
 80008a8:	6912      	ldr	r2, [r2, #16]
 80008aa:	0457      	lsls	r7, r2, #17
 80008ac:	f101 817f 	bmi.w	8001bae <Thread1.lto_priv.65+0x14de>
 80008b0:	4a44      	ldr	r2, [pc, #272]	; (80009c4 <Thread1.lto_priv.65+0x2f4>)
 80008b2:	6911      	ldr	r1, [r2, #16]
 80008b4:	064e      	lsls	r6, r1, #25
 80008b6:	f101 817a 	bmi.w	8001bae <Thread1.lto_priv.65+0x14de>
 80008ba:	6912      	ldr	r2, [r2, #16]
 80008bc:	05d5      	lsls	r5, r2, #23
 80008be:	f101 8176 	bmi.w	8001bae <Thread1.lto_priv.65+0x14de>
                            POS1_A=0X01;
 80008c2:	4a45      	ldr	r2, [pc, #276]	; (80009d8 <Thread1.lto_priv.65+0x308>)
 80008c4:	2301      	movs	r3, #1
 80008c6:	7013      	strb	r3, [r2, #0]
 80008c8:	78e0      	ldrb	r0, [r4, #3]
                    if(POS1_A == read_eeprom(pos2))  
 80008ca:	4283      	cmp	r3, r0
 80008cc:	f000 8784 	beq.w	80017d8 <Thread1.lto_priv.65+0x1108>
                    if(POS2_A == read_eeprom(pos1))  
 80008d0:	4618      	mov	r0, r3
                    lcd_out [0]=' ';
 80008d2:	2520      	movs	r5, #32
                    lcd_out [7]='0'; 
 80008d4:	2330      	movs	r3, #48	; 0x30
                    lcd_out [0]=' ';
 80008d6:	f88a 5000 	strb.w	r5, [sl]
                    lcd_out [1]=' ';
 80008da:	f88a 5001 	strb.w	r5, [sl, #1]
                    lcd_out [2]=' ';
 80008de:	f88a 5002 	strb.w	r5, [sl, #2]
                    lcd_out [3]=' ';
 80008e2:	f88a 5003 	strb.w	r5, [sl, #3]
                    lcd_out [4]=' ';
 80008e6:	f88a 5004 	strb.w	r5, [sl, #4]
                    lcd_out [5]=' ';
 80008ea:	f88a 5005 	strb.w	r5, [sl, #5]
                    lcd_out [6]=' ';
 80008ee:	f88a 5006 	strb.w	r5, [sl, #6]
                    lcd_out [7]='0'; 
 80008f2:	f88a 3007 	strb.w	r3, [sl, #7]
                    lcd_out [8]=ascii(POS2_A);
 80008f6:	f00e fd13 	bl	800f320 <ascii>
 80008fa:	f88a 0008 	strb.w	r0, [sl, #8]
                    LCDPrintRow2( 0,lcd_out);
 80008fe:	4833      	ldr	r0, [pc, #204]	; (80009cc <Thread1.lto_priv.65+0x2fc>)
                    lcd_out [9]=' ';
 8000900:	f88a 5009 	strb.w	r5, [sl, #9]
                    lcd_out [10]=' ';
 8000904:	f88a 500a 	strb.w	r5, [sl, #10]
                    lcd_out [11]=' ';
 8000908:	f88a 500b 	strb.w	r5, [sl, #11]
                    lcd_out [12]=' ';
 800090c:	f88a 500c 	strb.w	r5, [sl, #12]
                    lcd_out [13]=' ';
 8000910:	f88a 500d 	strb.w	r5, [sl, #13]
                    lcd_out [14]=' ';
 8000914:	f88a 500e 	strb.w	r5, [sl, #14]
                    lcd_out [15]=' ';
 8000918:	f88a 500f 	strb.w	r5, [sl, #15]
                    LCDPrintRow2( 0,lcd_out);
 800091c:	f00e fe80 	bl	800f620 <LCDPrintRow2.constprop.2>
 8000920:	e73c      	b.n	800079c <Thread1.lto_priv.65+0xcc>
	dato_emr3[num] = inf;
 8000922:	2300      	movs	r3, #0
            ACTU=0X01;
 8000924:	2201      	movs	r2, #1
            LCDPrintRow( 0,"   ADDRESS 2    ");
 8000926:	482d      	ldr	r0, [pc, #180]	; (80009dc <Thread1.lto_priv.65+0x30c>)
 8000928:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
 800092c:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
            ACTU=0X01;
 8000930:	f889 2000 	strb.w	r2, [r9]
            LCDPrintRow( 0,"   ADDRESS 2    ");
 8000934:	f00e f98c 	bl	800ec50 <LCDPrintRow.constprop.3>
            if((ACTU == 0X00 || ACTU == 0X01) && read_eeprom(estado1) == 0X06 && (read_eeprom(estado2) == 0X06 || read_eeprom(turno_aux) == 1))
 8000938:	f899 3000 	ldrb.w	r3, [r9]
 800093c:	2b01      	cmp	r3, #1
 800093e:	f63f af2a 	bhi.w	8000796 <Thread1.lto_priv.65+0xc6>
	return (dato_emr3[num]);
 8000942:	7823      	ldrb	r3, [r4, #0]
 8000944:	2b06      	cmp	r3, #6
 8000946:	f47f af26 	bne.w	8000796 <Thread1.lto_priv.65+0xc6>
 800094a:	78a2      	ldrb	r2, [r4, #2]
 800094c:	2a06      	cmp	r2, #6
 800094e:	d004      	beq.n	800095a <Thread1.lto_priv.65+0x28a>
 8000950:	f894 207f 	ldrb.w	r2, [r4, #127]	; 0x7f
 8000954:	2a01      	cmp	r2, #1
 8000956:	f47f af1e 	bne.w	8000796 <Thread1.lto_priv.65+0xc6>
                ACTU=0X01;
 800095a:	2501      	movs	r5, #1
 800095c:	f889 5000 	strb.w	r5, [r9]
                if(palReadPad(GPIOB,IN_5) == 0)
 8000960:	f8db 2010 	ldr.w	r2, [fp, #16]
 8000964:	04d7      	lsls	r7, r2, #19
 8000966:	f100 84dc 	bmi.w	8001322 <Thread1.lto_priv.65+0xc52>
                    if(palReadPad(GPIOB,BUT_1) == 1) sel_pos=1;
 800096a:	f8db 2010 	ldr.w	r2, [fp, #16]
 800096e:	0556      	lsls	r6, r2, #21
 8000970:	f140 86fc 	bpl.w	800176c <Thread1.lto_priv.65+0x109c>
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <Thread1.lto_priv.65+0x304>)
 8000976:	7015      	strb	r5, [r2, #0]
                        if ( (palReadPad(GPIOD,IN_8)==0) && (palReadPad(GPIOC,IN_7)==0) && (palReadPad(GPIOC,IN_6) == 0 )) 
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <Thread1.lto_priv.65+0x2e0>)
 800097a:	6912      	ldr	r2, [r2, #16]
 800097c:	0450      	lsls	r0, r2, #17
 800097e:	f101 8142 	bmi.w	8001c06 <Thread1.lto_priv.65+0x1536>
 8000982:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <Thread1.lto_priv.65+0x2f4>)
 8000984:	6911      	ldr	r1, [r2, #16]
 8000986:	0649      	lsls	r1, r1, #25
 8000988:	f101 813d 	bmi.w	8001c06 <Thread1.lto_priv.65+0x1536>
 800098c:	6912      	ldr	r2, [r2, #16]
 800098e:	05d2      	lsls	r2, r2, #23
 8000990:	f101 8139 	bmi.w	8001c06 <Thread1.lto_priv.65+0x1536>
                            POS2_A=0X01;
 8000994:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <Thread1.lto_priv.65+0x310>)
 8000996:	2301      	movs	r3, #1
 8000998:	7013      	strb	r3, [r2, #0]
 800099a:	7860      	ldrb	r0, [r4, #1]
                    if(POS2_A == read_eeprom(pos1))  
 800099c:	4283      	cmp	r3, r0
 800099e:	d197      	bne.n	80008d0 <Thread1.lto_priv.65+0x200>
 80009a0:	f000 bfab 	b.w	80018fa <Thread1.lto_priv.65+0x122a>
 80009a4:	20001698 	.word	0x20001698
 80009a8:	0800f6b0 	.word	0x0800f6b0
 80009ac:	20001c74 	.word	0x20001c74
 80009b0:	40020c00 	.word	0x40020c00
 80009b4:	0800f780 	.word	0x0800f780
 80009b8:	0800f76c 	.word	0x0800f76c
 80009bc:	0800f6cc 	.word	0x0800f6cc
 80009c0:	0800f730 	.word	0x0800f730
 80009c4:	40020800 	.word	0x40020800
 80009c8:	20000903 	.word	0x20000903
 80009cc:	20000910 	.word	0x20000910
 80009d0:	0800f6e0 	.word	0x0800f6e0
 80009d4:	20000920 	.word	0x20000920
 80009d8:	20000901 	.word	0x20000901
 80009dc:	0800f71c 	.word	0x0800f71c
 80009e0:	20000902 	.word	0x20000902
 80009e4:	20000900 	.word	0x20000900
 80009e8:	40020400 	.word	0x40020400
        LCDInit();
 80009ec:	f00b f968 	bl	800bcc0 <LCDInit>
        LCDBegin(16,2);   
 80009f0:	f00e f8d6 	bl	800eba0 <LCDBegin.constprop.4>
 80009f4:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
            if( read_eeprom(consola) == 2 || read_eeprom(consola) == 1 || read_eeprom(consola) == 4)
 80009f8:	1e43      	subs	r3, r0, #1
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d902      	bls.n	8000a04 <Thread1.lto_priv.65+0x334>
 80009fe:	2804      	cmp	r0, #4
 8000a00:	f040 8246 	bne.w	8000e90 <Thread1.lto_priv.65+0x7c0>
                if(ACTU != 0X00)
 8000a04:	f899 5000 	ldrb.w	r5, [r9]
 8000a08:	2d00      	cmp	r5, #0
 8000a0a:	f040 80cd 	bne.w	8000ba8 <Thread1.lto_priv.65+0x4d8>
 8000a0e:	f894 7087 	ldrb.w	r7, [r4, #135]	; 0x87
                    if(read_eeprom(pasos1) != 0X00)
 8000a12:	2f00      	cmp	r7, #0
 8000a14:	f000 8122 	beq.w	8000c5c <Thread1.lto_priv.65+0x58c>
                        lcd_out [0] = ascii(read_eeprom(consola));
 8000a18:	f00e fc82 	bl	800f320 <ascii>
                        lcd_out [1] = ' ';
 8000a1c:	2620      	movs	r6, #32
                        lcd_out [0] = ascii(read_eeprom(consola));
 8000a1e:	f88a 0000 	strb.w	r0, [sl]
                        lcd_out [4] = ascii(read_eeprom(pasos1));
 8000a22:	4638      	mov	r0, r7
                        lcd_out [1] = ' ';
 8000a24:	f88a 6001 	strb.w	r6, [sl, #1]
                        lcd_out [2] = ' ';
 8000a28:	f88a 6002 	strb.w	r6, [sl, #2]
                        lcd_out [3] = ' ';
 8000a2c:	f88a 6003 	strb.w	r6, [sl, #3]
                        lcd_out [4] = ascii(read_eeprom(pasos1));
 8000a30:	f00e fc76 	bl	800f320 <ascii>
 8000a34:	f88a 0004 	strb.w	r0, [sl, #4]
                        lcd_out [5] = ascii(read_eeprom(pasos2));
 8000a38:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
 8000a3c:	f00e fc70 	bl	800f320 <ascii>
 8000a40:	f88a 0005 	strb.w	r0, [sl, #5]
                        lcd_out [7] = ascii(read_eeprom(log));
 8000a44:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
                        lcd_out [6] = ' ';
 8000a48:	f88a 6006 	strb.w	r6, [sl, #6]
                        lcd_out [7] = ascii(read_eeprom(log));
 8000a4c:	f00e fc68 	bl	800f320 <ascii>
                        if( read_eeprom(lado1) == 0x01)
 8000a50:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
                        lcd_out [8] = ' ';
 8000a54:	f88a 6008 	strb.w	r6, [sl, #8]
                        if( read_eeprom(lado1) == 0x01)
 8000a58:	2b01      	cmp	r3, #1
                        lcd_out [7] = ascii(read_eeprom(log));
 8000a5a:	f88a 0007 	strb.w	r0, [sl, #7]
                        if( read_eeprom(lado1) == 0x01)
 8000a5e:	f000 8260 	beq.w	8000f22 <Thread1.lto_priv.65+0x852>
                            lcd_out [10]='F';
 8000a62:	2346      	movs	r3, #70	; 0x46
                            lcd_out [9]='O';
 8000a64:	224f      	movs	r2, #79	; 0x4f
 8000a66:	f88a 2009 	strb.w	r2, [sl, #9]
                            lcd_out [10]='F';
 8000a6a:	f88a 300a 	strb.w	r3, [sl, #10]
                            lcd_out [11]='F';
 8000a6e:	f88a 300b 	strb.w	r3, [sl, #11]
                        if(read_eeprom(lado2)  == 0x01)
 8000a72:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	f000 8242 	beq.w	8000f00 <Thread1.lto_priv.65+0x830>
                            lcd_out [14]='F';
 8000a7c:	2346      	movs	r3, #70	; 0x46
                            lcd_out [13]='O';
 8000a7e:	224f      	movs	r2, #79	; 0x4f
 8000a80:	f88a 200d 	strb.w	r2, [sl, #13]
                            lcd_out [14]='F';
 8000a84:	f88a 300e 	strb.w	r3, [sl, #14]
                            lcd_out [15]='F';
 8000a88:	f88a 300f 	strb.w	r3, [sl, #15]
                        lcd_out [12]=' ';
 8000a8c:	2320      	movs	r3, #32
                        LCDPrintRow( 0,lcd_out);
 8000a8e:	48c8      	ldr	r0, [pc, #800]	; (8000db0 <Thread1.lto_priv.65+0x6e0>)
                        lcd_out [12]=' ';
 8000a90:	f88a 300c 	strb.w	r3, [sl, #12]
                        LCDPrintRow( 0,lcd_out);
 8000a94:	f00e f8dc 	bl	800ec50 <LCDPrintRow.constprop.3>
                    lcd_out [0]=' ';
 8000a98:	2320      	movs	r3, #32
                    lcd_out [2]='P';
 8000a9a:	2250      	movs	r2, #80	; 0x50
                    lcd_out [0]=' ';
 8000a9c:	f88a 3000 	strb.w	r3, [sl]
                    lcd_out [1]=' ';
 8000aa0:	f88a 3001 	strb.w	r3, [sl, #1]
                    lcd_out [3]='R';
 8000aa4:	2352      	movs	r3, #82	; 0x52
                    lcd_out [2]='P';
 8000aa6:	f88a 2002 	strb.w	r2, [sl, #2]
                    lcd_out [3]='R';
 8000aaa:	f88a 3003 	strb.w	r3, [sl, #3]
                    lcd_out [4]='I';
 8000aae:	2249      	movs	r2, #73	; 0x49
                    lcd_out [5]='C';
 8000ab0:	2343      	movs	r3, #67	; 0x43
                    lcd_out [4]='I';
 8000ab2:	f88a 2004 	strb.w	r2, [sl, #4]
                    lcd_out [5]='C';
 8000ab6:	f88a 3005 	strb.w	r3, [sl, #5]
                    lcd_out [6]='E';
 8000aba:	2245      	movs	r2, #69	; 0x45
                    lcd_out [7]=':';
 8000abc:	233a      	movs	r3, #58	; 0x3a
                    lcd_out [8]= ascii(read_eeprom(ppu1_level1));
 8000abe:	7960      	ldrb	r0, [r4, #5]
                    lcd_out [7]=':';
 8000ac0:	f88a 3007 	strb.w	r3, [sl, #7]
                    lcd_out [6]='E';
 8000ac4:	f88a 2006 	strb.w	r2, [sl, #6]
                    lcd_out [8]= ascii(read_eeprom(ppu1_level1));
 8000ac8:	f00e fc2a 	bl	800f320 <ascii>
 8000acc:	7923      	ldrb	r3, [r4, #4]
 8000ace:	f88a 0008 	strb.w	r0, [sl, #8]
                    if(read_eeprom(pppu) == 0X03)
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	f000 81b5 	beq.w	8000e42 <Thread1.lto_priv.65+0x772>
                    else if(read_eeprom(pppu) == 0X02)
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	f000 81cf 	beq.w	8000e7c <Thread1.lto_priv.65+0x7ac>
                    else if(read_eeprom(pppu) == 0X01)
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	f000 81e8 	beq.w	8000eb4 <Thread1.lto_priv.65+0x7e4>
                    else if(read_eeprom(pppu) == 0X00)
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	f000 81f8 	beq.w	8000eda <Thread1.lto_priv.65+0x80a>
                    lcd_out [13]= ' ';
 8000aea:	2320      	movs	r3, #32
                    LCDPrintRow2( 0,lcd_out);
 8000aec:	48b0      	ldr	r0, [pc, #704]	; (8000db0 <Thread1.lto_priv.65+0x6e0>)
                    lcd_out [13]= ' ';
 8000aee:	f88a 300d 	strb.w	r3, [sl, #13]
                    lcd_out [14]= ' ';
 8000af2:	f88a 300e 	strb.w	r3, [sl, #14]
                    lcd_out [15]= ' ';
 8000af6:	f88a 300f 	strb.w	r3, [sl, #15]
                    LCDPrintRow2( 0,lcd_out);
 8000afa:	f00e fd91 	bl	800f620 <LCDPrintRow2.constprop.2>
                    if(read_eeprom(lado1) == 0x00) chThdSleepMilliseconds(2000);
 8000afe:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f000 8164 	beq.w	8000dd0 <Thread1.lto_priv.65+0x700>
                    if(read_eeprom(turno_aux) == 0x01) TURNO = 0X01;
 8000b08:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	f000 8168 	beq.w	8000de2 <Thread1.lto_priv.65+0x712>
                    if (TURNO == 0X01)
 8000b12:	4ba8      	ldr	r3, [pc, #672]	; (8000db4 <Thread1.lto_priv.65+0x6e4>)
 8000b14:	781e      	ldrb	r6, [r3, #0]
 8000b16:	2e01      	cmp	r6, #1
 8000b18:	f000 8165 	beq.w	8000de6 <Thread1.lto_priv.65+0x716>
                    else if (TURNO == 0X02)
 8000b1c:	2e02      	cmp	r6, #2
 8000b1e:	f47f ade5 	bne.w	80006ec <Thread1.lto_priv.65+0x1c>
                        if(read_eeprom(stop2) == 0x01 && read_eeprom(pausa2) == 0x01)
 8000b22:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8000b2c:	f000 820a 	beq.w	8000f44 <Thread1.lto_priv.65+0x874>
                        else if(read_eeprom(pausa2) == 0x01 && read_eeprom(estado2) == 0X0C)
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	f000 8216 	beq.w	8000f62 <Thread1.lto_priv.65+0x892>
	dato_emr3[num] = inf;
 8000b36:	2300      	movs	r3, #0
                        ButtonEmr(ESTADO_DISPLAY,TURNO);
 8000b38:	4631      	mov	r1, r6
 8000b3a:	2003      	movs	r0, #3
 8000b3c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8000b40:	f00b fffe 	bl	800cb40 <ButtonEmr>
                        uartStartReceive(&UARTD1, 8, recibo);
 8000b44:	a908      	add	r1, sp, #32
 8000b46:	2008      	movs	r0, #8
 8000b48:	f00e fa3a 	bl	800efc0 <uartStartReceive.constprop.23>
                        chThdSleepMilliseconds(500);
 8000b4c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b50:	f00b ff76 	bl	800ca40 <chThdSleep>
                        uartStopReceive(&UARTD1);
 8000b54:	f00e fa94 	bl	800f080 <uartStopReceive.constprop.21>
                        if(read_eeprom(log) == 1) emr3_log(&recibo,8,2);
 8000b58:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	f000 83c1 	beq.w	80012e4 <Thread1.lto_priv.65+0xc14>
                        desconexion(TURNO);
 8000b62:	4b94      	ldr	r3, [pc, #592]	; (8000db4 <Thread1.lto_priv.65+0x6e4>)
 8000b64:	7818      	ldrb	r0, [r3, #0]
 8000b66:	f00e fc7b 	bl	800f460 <desconexion>
                        if(read_eeprom(lado2) == 0X01)
 8000b6a:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	f000 827a 	beq.w	8001068 <Thread1.lto_priv.65+0x998>
                            TURNO = 0X01;
 8000b74:	4a8f      	ldr	r2, [pc, #572]	; (8000db4 <Thread1.lto_priv.65+0x6e4>)
 8000b76:	2301      	movs	r3, #1
 8000b78:	7013      	strb	r3, [r2, #0]
 8000b7a:	e5b7      	b.n	80006ec <Thread1.lto_priv.65+0x1c>

        break;

        default:

            LCDPrintRow( 0,"    INSEPET     ");
 8000b7c:	488e      	ldr	r0, [pc, #568]	; (8000db8 <Thread1.lto_priv.65+0x6e8>)
 8000b7e:	f00e f867 	bl	800ec50 <LCDPrintRow.constprop.3>
            LCDPrintRow2( 0,"    DISABLED    ");
 8000b82:	488e      	ldr	r0, [pc, #568]	; (8000dbc <Thread1.lto_priv.65+0x6ec>)
 8000b84:	f00e fd4c 	bl	800f620 <LCDPrintRow2.constprop.2>
            chThdSleepMilliseconds(200);
 8000b88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b8c:	f00b ff58 	bl	800ca40 <chThdSleep>
 8000b90:	e5ac      	b.n	80006ec <Thread1.lto_priv.65+0x1c>
                else if( read_eeprom(log) == 0x00)
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f47f ade7 	bne.w	8000766 <Thread1.lto_priv.65+0x96>
                    LCDPrintRow2( 0,"      OFF       ");
 8000b98:	4889      	ldr	r0, [pc, #548]	; (8000dc0 <Thread1.lto_priv.65+0x6f0>)
 8000b9a:	f00e fd41 	bl	800f620 <LCDPrintRow2.constprop.2>
                    chThdSleepMilliseconds(300);    
 8000b9e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ba2:	f00b ff4d 	bl	800ca40 <chThdSleep>
 8000ba6:	e5e1      	b.n	800076c <Thread1.lto_priv.65+0x9c>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 8000bae:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
                    ACTU=0;
 8000bb2:	f889 3000 	strb.w	r3, [r9]
 8000bb6:	e599      	b.n	80006ec <Thread1.lto_priv.65+0x1c>
            if(read_eeprom(consola) == 0X01 && read_eeprom(estado1) == 0X06 && (read_eeprom(estado2) == 0X06 || read_eeprom(turno_aux) == 1))
 8000bb8:	7823      	ldrb	r3, [r4, #0]
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	f47f adeb 	bne.w	8000796 <Thread1.lto_priv.65+0xc6>
 8000bc0:	78a3      	ldrb	r3, [r4, #2]
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d004      	beq.n	8000bd0 <Thread1.lto_priv.65+0x500>
 8000bc6:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	f47f ade3 	bne.w	8000796 <Thread1.lto_priv.65+0xc6>
                if ((palReadPad(GPIOD,IN_8) == 0) && (palReadPad(GPIOC,IN_7) == 0) && (palReadPad(GPIOC,IN_6) == 0 )) 
 8000bd0:	4b7c      	ldr	r3, [pc, #496]	; (8000dc4 <Thread1.lto_priv.65+0x6f4>)
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	0459      	lsls	r1, r3, #17
 8000bd6:	f100 81da 	bmi.w	8000f8e <Thread1.lto_priv.65+0x8be>
 8000bda:	4b7b      	ldr	r3, [pc, #492]	; (8000dc8 <Thread1.lto_priv.65+0x6f8>)
 8000bdc:	691a      	ldr	r2, [r3, #16]
 8000bde:	0652      	lsls	r2, r2, #25
 8000be0:	f100 81d5 	bmi.w	8000f8e <Thread1.lto_priv.65+0x8be>
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	05df      	lsls	r7, r3, #23
 8000be8:	f100 81d1 	bmi.w	8000f8e <Thread1.lto_priv.65+0x8be>
                    if(palReadPad(GPIOB,BUT_1) == 1)
 8000bec:	f8db 3010 	ldr.w	r3, [fp, #16]
 8000bf0:	055e      	lsls	r6, r3, #21
 8000bf2:	f101 824f 	bmi.w	8002094 <Thread1.lto_priv.65+0x19c4>
                    else if (palReadPad(GPIOE,BUT_2) == 1)
 8000bf6:	4b75      	ldr	r3, [pc, #468]	; (8000dcc <Thread1.lto_priv.65+0x6fc>)
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	045d      	lsls	r5, r3, #17
 8000bfc:	f101 8241 	bmi.w	8002082 <Thread1.lto_priv.65+0x19b2>
 8000c00:	7960      	ldrb	r0, [r4, #5]
                lcd_out [0]=' ';
 8000c02:	2320      	movs	r3, #32
 8000c04:	f88a 3000 	strb.w	r3, [sl]
                lcd_out [1]=' ';
 8000c08:	f88a 3001 	strb.w	r3, [sl, #1]
                lcd_out [2]=' ';
 8000c0c:	f88a 3002 	strb.w	r3, [sl, #2]
                lcd_out [3]=' ';
 8000c10:	f88a 3003 	strb.w	r3, [sl, #3]
                lcd_out [4]=' ';
 8000c14:	f88a 3004 	strb.w	r3, [sl, #4]
                lcd_out [5]= ascii(read_eeprom(ppu1_level1));
 8000c18:	f00e fb82 	bl	800f320 <ascii>
	return (dato_emr3[num]);
 8000c1c:	7923      	ldrb	r3, [r4, #4]
 8000c1e:	f88a 0005 	strb.w	r0, [sl, #5]
                if(read_eeprom(pppu) == 0X03)
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	f000 84f4 	beq.w	8001610 <Thread1.lto_priv.65+0xf40>
                else if(read_eeprom(pppu) == 0X02)
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	f000 85ba 	beq.w	80017a2 <Thread1.lto_priv.65+0x10d2>
                else if(read_eeprom(pppu) == 0X01)
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	f000 866d 	beq.w	800190e <Thread1.lto_priv.65+0x123e>
                else if(read_eeprom(pppu) == 0X00)
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f000 86d9 	beq.w	80019ec <Thread1.lto_priv.65+0x131c>
                lcd_out [10]=' ';
 8000c3a:	2320      	movs	r3, #32
                LCDPrintRow2(0,lcd_out);
 8000c3c:	485c      	ldr	r0, [pc, #368]	; (8000db0 <Thread1.lto_priv.65+0x6e0>)
                lcd_out [10]=' ';
 8000c3e:	f88a 300a 	strb.w	r3, [sl, #10]
                lcd_out [11]=' ';
 8000c42:	f88a 300b 	strb.w	r3, [sl, #11]
                lcd_out [12]=' ';
 8000c46:	f88a 300c 	strb.w	r3, [sl, #12]
                lcd_out [13]=' ';
 8000c4a:	f88a 300d 	strb.w	r3, [sl, #13]
                lcd_out [14]=' ';
 8000c4e:	f88a 300e 	strb.w	r3, [sl, #14]
                lcd_out [15]=' ';
 8000c52:	f88a 300f 	strb.w	r3, [sl, #15]
                LCDPrintRow2(0,lcd_out);
 8000c56:	f00e fce3 	bl	800f620 <LCDPrintRow2.constprop.2>
 8000c5a:	e59f      	b.n	800079c <Thread1.lto_priv.65+0xcc>
                        lcd_out [0]='C';
 8000c5c:	2243      	movs	r2, #67	; 0x43
 8000c5e:	f88a 2000 	strb.w	r2, [sl]
                        lcd_out [6]='C';
 8000c62:	f88a 2006 	strb.w	r2, [sl, #6]
                        lcd_out [1]='U';
 8000c66:	2255      	movs	r2, #85	; 0x55
 8000c68:	f88a 2001 	strb.w	r2, [sl, #1]
                        lcd_out [2]='R';
 8000c6c:	2252      	movs	r2, #82	; 0x52
 8000c6e:	f88a 2002 	strb.w	r2, [sl, #2]
                        lcd_out [3]='R';
 8000c72:	f88a 2003 	strb.w	r2, [sl, #3]
                        lcd_out [4]='E';
 8000c76:	2245      	movs	r2, #69	; 0x45
 8000c78:	f88a 2004 	strb.w	r2, [sl, #4]
                        lcd_out [5]='N';
 8000c7c:	224e      	movs	r2, #78	; 0x4e
 8000c7e:	f88a 2005 	strb.w	r2, [sl, #5]
                        switch(read_eeprom(PD))  
 8000c82:	7ee3      	ldrb	r3, [r4, #27]
                        lcd_out [7]='Y';
 8000c84:	2259      	movs	r2, #89	; 0x59
 8000c86:	f88a 2007 	strb.w	r2, [sl, #7]
                        lcd_out [8]=':';
 8000c8a:	223a      	movs	r2, #58	; 0x3a
 8000c8c:	f88a 2008 	strb.w	r2, [sl, #8]
                        switch(read_eeprom(PD))  
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d826      	bhi.n	8000ce2 <Thread1.lto_priv.65+0x612>
 8000c94:	e8df f003 	tbb	[pc, r3]
 8000c98:	0271294d 	.word	0x0271294d
                                lcd_out [9] = ascii(read_eeprom(d1_1));
 8000c9c:	7f20      	ldrb	r0, [r4, #28]
 8000c9e:	f00e fb3f 	bl	800f320 <ascii>
 8000ca2:	f88a 0009 	strb.w	r0, [sl, #9]
                                lcd_out [10] = ascii(read_eeprom(d2_1));
 8000ca6:	7f60      	ldrb	r0, [r4, #29]
 8000ca8:	f00e fb3a 	bl	800f320 <ascii>
 8000cac:	f88a 000a 	strb.w	r0, [sl, #10]
                                lcd_out [11] = ascii(read_eeprom(d3_1));
 8000cb0:	7fa0      	ldrb	r0, [r4, #30]
 8000cb2:	f00e fb35 	bl	800f320 <ascii>
                                lcd_out [12] = '.';
 8000cb6:	232e      	movs	r3, #46	; 0x2e
                                lcd_out [11] = ascii(read_eeprom(d3_1));
 8000cb8:	f88a 000b 	strb.w	r0, [sl, #11]
                                lcd_out [13] = ascii(read_eeprom(d4_1));   
 8000cbc:	7fe0      	ldrb	r0, [r4, #31]
                                lcd_out [12] = '.';
 8000cbe:	f88a 300c 	strb.w	r3, [sl, #12]
                                lcd_out [13] = ascii(read_eeprom(d4_1));   
 8000cc2:	f00e fb2d 	bl	800f320 <ascii>
 8000cc6:	f88a 000d 	strb.w	r0, [sl, #13]
                                lcd_out [14] = ascii(read_eeprom(d5_1)); 
 8000cca:	f894 0020 	ldrb.w	r0, [r4, #32]
 8000cce:	f00e fb27 	bl	800f320 <ascii>
 8000cd2:	f88a 000e 	strb.w	r0, [sl, #14]
                                lcd_out [15] = ascii(read_eeprom(d6_1));  
 8000cd6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8000cda:	f00e fb21 	bl	800f320 <ascii>
 8000cde:	f88a 000f 	strb.w	r0, [sl, #15]
                        LCDPrintRow( 0,lcd_out);
 8000ce2:	4833      	ldr	r0, [pc, #204]	; (8000db0 <Thread1.lto_priv.65+0x6e0>)
 8000ce4:	f00d ffb4 	bl	800ec50 <LCDPrintRow.constprop.3>
 8000ce8:	e6d6      	b.n	8000a98 <Thread1.lto_priv.65+0x3c8>
                                lcd_out [9] = ascii(read_eeprom(d1_1));
 8000cea:	7f20      	ldrb	r0, [r4, #28]
 8000cec:	f00e fb18 	bl	800f320 <ascii>
 8000cf0:	f88a 0009 	strb.w	r0, [sl, #9]
                                lcd_out [10] = ascii(read_eeprom(d2_1));
 8000cf4:	7f60      	ldrb	r0, [r4, #29]
 8000cf6:	f00e fb13 	bl	800f320 <ascii>
 8000cfa:	f88a 000a 	strb.w	r0, [sl, #10]
                                lcd_out [11] = ascii(read_eeprom(d3_1));
 8000cfe:	7fa0      	ldrb	r0, [r4, #30]
 8000d00:	f00e fb0e 	bl	800f320 <ascii>
 8000d04:	f88a 000b 	strb.w	r0, [sl, #11]
                                lcd_out [12] = ascii(read_eeprom(d4_1));   
 8000d08:	7fe0      	ldrb	r0, [r4, #31]
 8000d0a:	f00e fb09 	bl	800f320 <ascii>
 8000d0e:	f88a 000c 	strb.w	r0, [sl, #12]
                                lcd_out [13] = ascii(read_eeprom(d5_1));
 8000d12:	f894 0020 	ldrb.w	r0, [r4, #32]
 8000d16:	f00e fb03 	bl	800f320 <ascii>
                                lcd_out [14] = '.'; 
 8000d1a:	232e      	movs	r3, #46	; 0x2e
                                lcd_out [13] = ascii(read_eeprom(d5_1));
 8000d1c:	f88a 000d 	strb.w	r0, [sl, #13]
                                lcd_out [15] = ascii(read_eeprom(d6_1));
 8000d20:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
                                lcd_out [14] = '.'; 
 8000d24:	f88a 300e 	strb.w	r3, [sl, #14]
                                lcd_out [15] = ascii(read_eeprom(d6_1));
 8000d28:	f00e fafa 	bl	800f320 <ascii>
 8000d2c:	f88a 000f 	strb.w	r0, [sl, #15]
 8000d30:	e7d7      	b.n	8000ce2 <Thread1.lto_priv.65+0x612>
                                lcd_out [9] = ascii(read_eeprom(d1_1));
 8000d32:	7f20      	ldrb	r0, [r4, #28]
 8000d34:	f00e faf4 	bl	800f320 <ascii>
 8000d38:	f88a 0009 	strb.w	r0, [sl, #9]
                                lcd_out [10] = ascii(read_eeprom(d2_1));
 8000d3c:	7f60      	ldrb	r0, [r4, #29]
 8000d3e:	f00e faef 	bl	800f320 <ascii>
 8000d42:	f88a 000a 	strb.w	r0, [sl, #10]
                                lcd_out [11] = ascii(read_eeprom(d3_1));
 8000d46:	7fa0      	ldrb	r0, [r4, #30]
 8000d48:	f00e faea 	bl	800f320 <ascii>
 8000d4c:	f88a 000b 	strb.w	r0, [sl, #11]
                                lcd_out [12] = ascii(read_eeprom(d4_1));   
 8000d50:	7fe0      	ldrb	r0, [r4, #31]
 8000d52:	f00e fae5 	bl	800f320 <ascii>
 8000d56:	f88a 000c 	strb.w	r0, [sl, #12]
                                lcd_out [13] = ascii(read_eeprom(d5_1));
 8000d5a:	f894 0020 	ldrb.w	r0, [r4, #32]
 8000d5e:	f00e fadf 	bl	800f320 <ascii>
 8000d62:	f88a 000d 	strb.w	r0, [sl, #13]
                                lcd_out [14] = ascii(read_eeprom(d6_1)); 
 8000d66:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8000d6a:	f00e fad9 	bl	800f320 <ascii>
                                lcd_out [15] = ' ';
 8000d6e:	2320      	movs	r3, #32
                                lcd_out [14] = ascii(read_eeprom(d6_1)); 
 8000d70:	f88a 000e 	strb.w	r0, [sl, #14]
                                lcd_out [15] = ' ';
 8000d74:	f88a 300f 	strb.w	r3, [sl, #15]
 8000d78:	e7b3      	b.n	8000ce2 <Thread1.lto_priv.65+0x612>
                                lcd_out [9] = ascii(read_eeprom(d1_1));
 8000d7a:	7f20      	ldrb	r0, [r4, #28]
 8000d7c:	f00e fad0 	bl	800f320 <ascii>
 8000d80:	f88a 0009 	strb.w	r0, [sl, #9]
                                lcd_out [10] = ascii(read_eeprom(d2_1));
 8000d84:	7f60      	ldrb	r0, [r4, #29]
 8000d86:	f00e facb 	bl	800f320 <ascii>
 8000d8a:	f88a 000a 	strb.w	r0, [sl, #10]
                                lcd_out [11] = ascii(read_eeprom(d3_1));
 8000d8e:	7fa0      	ldrb	r0, [r4, #30]
 8000d90:	f00e fac6 	bl	800f320 <ascii>
 8000d94:	f88a 000b 	strb.w	r0, [sl, #11]
                                lcd_out [12] = ascii(read_eeprom(d4_1));   
 8000d98:	7fe0      	ldrb	r0, [r4, #31]
 8000d9a:	f00e fac1 	bl	800f320 <ascii>
                                lcd_out [13] = '.';
 8000d9e:	232e      	movs	r3, #46	; 0x2e
                                lcd_out [12] = ascii(read_eeprom(d4_1));   
 8000da0:	f88a 000c 	strb.w	r0, [sl, #12]
                                lcd_out [13] = '.';
 8000da4:	f88a 300d 	strb.w	r3, [sl, #13]
                                lcd_out [14] = ascii(read_eeprom(d5_1)); 
 8000da8:	f894 0020 	ldrb.w	r0, [r4, #32]
 8000dac:	e78f      	b.n	8000cce <Thread1.lto_priv.65+0x5fe>
 8000dae:	bf00      	nop
 8000db0:	20000910 	.word	0x20000910
 8000db4:	20000800 	.word	0x20000800
 8000db8:	0800f7bc 	.word	0x0800f7bc
 8000dbc:	0800f6cc 	.word	0x0800f6cc
 8000dc0:	0800f7a8 	.word	0x0800f7a8
 8000dc4:	40020c00 	.word	0x40020c00
 8000dc8:	40020800 	.word	0x40020800
 8000dcc:	40021000 	.word	0x40021000
                    if(read_eeprom(lado1) == 0x00) chThdSleepMilliseconds(2000);
 8000dd0:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000dd4:	f00b fe34 	bl	800ca40 <chThdSleep>
                    if(read_eeprom(turno_aux) == 0x01) TURNO = 0X01;
 8000dd8:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	f47f ae98 	bne.w	8000b12 <Thread1.lto_priv.65+0x442>
 8000de2:	4a9a      	ldr	r2, [pc, #616]	; (800104c <Thread1.lto_priv.65+0x97c>)
 8000de4:	7013      	strb	r3, [r2, #0]
                        if(read_eeprom(stop1) == 0x01 && read_eeprom(pausa1) == 0x01)
 8000de6:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8000dea:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	f000 80ea 	beq.w	8000fc8 <Thread1.lto_priv.65+0x8f8>
                        else if(read_eeprom(pausa1) == 0x01 && read_eeprom(estado1) == 0X0C)
 8000df4:	2901      	cmp	r1, #1
 8000df6:	f000 80f6 	beq.w	8000fe6 <Thread1.lto_priv.65+0x916>
                        ButtonEmr(ESTADO_DISPLAY,TURNO);
 8000dfa:	4a94      	ldr	r2, [pc, #592]	; (800104c <Thread1.lto_priv.65+0x97c>)
	dato_emr3[num] = inf;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	7811      	ldrb	r1, [r2, #0]
 8000e00:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8000e04:	2003      	movs	r0, #3
 8000e06:	f00b fe9b 	bl	800cb40 <ButtonEmr>
                        uartStartReceive(&UARTD1, 8, recibo);
 8000e0a:	a908      	add	r1, sp, #32
 8000e0c:	2008      	movs	r0, #8
 8000e0e:	f00e f8d7 	bl	800efc0 <uartStartReceive.constprop.23>
                        chThdSleepMilliseconds(500);
 8000e12:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e16:	f00b fe13 	bl	800ca40 <chThdSleep>
                        uartStopReceive(&UARTD1);
 8000e1a:	f00e f931 	bl	800f080 <uartStopReceive.constprop.21>
                        if(read_eeprom(log) == 1) emr3_log(&recibo,8,2);
 8000e1e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	f000 82d0 	beq.w	80013c8 <Thread1.lto_priv.65+0xcf8>
                        desconexion(TURNO);
 8000e28:	4b88      	ldr	r3, [pc, #544]	; (800104c <Thread1.lto_priv.65+0x97c>)
 8000e2a:	7818      	ldrb	r0, [r3, #0]
 8000e2c:	f00e fb18 	bl	800f460 <desconexion>
                        if(read_eeprom(lado1) == 0X01)
 8000e30:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	f000 81c6 	beq.w	80011c6 <Thread1.lto_priv.65+0xaf6>
                            TURNO = 0X02;
 8000e3a:	4a84      	ldr	r2, [pc, #528]	; (800104c <Thread1.lto_priv.65+0x97c>)
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	7013      	strb	r3, [r2, #0]
 8000e40:	e454      	b.n	80006ec <Thread1.lto_priv.65+0x1c>
                        lcd_out [9] = '.';
 8000e42:	232e      	movs	r3, #46	; 0x2e
                        lcd_out [10] = ascii(read_eeprom(ppu2_level1));
 8000e44:	79a0      	ldrb	r0, [r4, #6]
                        lcd_out [9] = '.';
 8000e46:	f88a 3009 	strb.w	r3, [sl, #9]
                        lcd_out [10] = ascii(read_eeprom(ppu2_level1));
 8000e4a:	f00e fa69 	bl	800f320 <ascii>
 8000e4e:	f88a 000a 	strb.w	r0, [sl, #10]
                        lcd_out [11] = ascii(read_eeprom(ppu3_level1));
 8000e52:	79e0      	ldrb	r0, [r4, #7]
                        lcd_out [11] = ascii(read_eeprom(ppu3_level1));
 8000e54:	f00e fa64 	bl	800f320 <ascii>
 8000e58:	f88a 000b 	strb.w	r0, [sl, #11]
                        lcd_out [12] = ascii(read_eeprom(ppu4_level1));
 8000e5c:	7a20      	ldrb	r0, [r4, #8]
 8000e5e:	f00e fa5f 	bl	800f320 <ascii>
 8000e62:	f88a 000c 	strb.w	r0, [sl, #12]
 8000e66:	e640      	b.n	8000aea <Thread1.lto_priv.65+0x41a>
                    LCDPrintRow2( 0,"       ON       ");
 8000e68:	4879      	ldr	r0, [pc, #484]	; (8001050 <Thread1.lto_priv.65+0x980>)
 8000e6a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8000e6e:	f00e fbd7 	bl	800f620 <LCDPrintRow2.constprop.2>
                    chThdSleepMilliseconds(300);
 8000e72:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e76:	f00b fde3 	bl	800ca40 <chThdSleep>
 8000e7a:	e477      	b.n	800076c <Thread1.lto_priv.65+0x9c>
                        lcd_out [9] = ascii(read_eeprom(ppu2_level1));
 8000e7c:	79a0      	ldrb	r0, [r4, #6]
 8000e7e:	f00e fa4f 	bl	800f320 <ascii>
                        lcd_out [10] = '.';
 8000e82:	232e      	movs	r3, #46	; 0x2e
                        lcd_out [9] = ascii(read_eeprom(ppu2_level1));
 8000e84:	f88a 0009 	strb.w	r0, [sl, #9]
                        lcd_out [10] = '.';
 8000e88:	f88a 300a 	strb.w	r3, [sl, #10]
                        lcd_out [11] = ascii(read_eeprom(ppu3_level1));
 8000e8c:	79e0      	ldrb	r0, [r4, #7]
 8000e8e:	e7e1      	b.n	8000e54 <Thread1.lto_priv.65+0x784>
                LCDPrintRow(0,"   CONSOLE 03   ");
 8000e90:	4870      	ldr	r0, [pc, #448]	; (8001054 <Thread1.lto_priv.65+0x984>)
 8000e92:	f00d fedd 	bl	800ec50 <LCDPrintRow.constprop.3>
                LCDPrintRow2( 0,"    DISABLED    ");
 8000e96:	4870      	ldr	r0, [pc, #448]	; (8001058 <Thread1.lto_priv.65+0x988>)
 8000e98:	f00e fbc2 	bl	800f620 <LCDPrintRow2.constprop.2>
                chThdSleepMilliseconds(10);
 8000e9c:	2064      	movs	r0, #100	; 0x64
 8000e9e:	f00b fdcf 	bl	800ca40 <chThdSleep>
 8000ea2:	e423      	b.n	80006ec <Thread1.lto_priv.65+0x1c>
                    LCDPrintRow2( 0,"       ON       ");
 8000ea4:	486a      	ldr	r0, [pc, #424]	; (8001050 <Thread1.lto_priv.65+0x980>)
 8000ea6:	f00e fbbb 	bl	800f620 <LCDPrintRow2.constprop.2>
                    chThdSleepMilliseconds(300);
 8000eaa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000eae:	f00b fdc7 	bl	800ca40 <chThdSleep>
 8000eb2:	e45b      	b.n	800076c <Thread1.lto_priv.65+0x9c>
                        lcd_out [9] = ascii(read_eeprom(ppu2_level1));
 8000eb4:	79a0      	ldrb	r0, [r4, #6]
 8000eb6:	f00e fa33 	bl	800f320 <ascii>
 8000eba:	f88a 0009 	strb.w	r0, [sl, #9]
                        lcd_out [10] = ascii(read_eeprom(ppu3_level1));
 8000ebe:	79e0      	ldrb	r0, [r4, #7]
 8000ec0:	f00e fa2e 	bl	800f320 <ascii>
                        lcd_out [11] = '.';
 8000ec4:	232e      	movs	r3, #46	; 0x2e
                        lcd_out [10] = ascii(read_eeprom(ppu3_level1));
 8000ec6:	f88a 000a 	strb.w	r0, [sl, #10]
                        lcd_out [12] = ascii(read_eeprom(ppu4_level1));
 8000eca:	7a20      	ldrb	r0, [r4, #8]
                        lcd_out [11] = '.';
 8000ecc:	f88a 300b 	strb.w	r3, [sl, #11]
                        lcd_out [12] = ascii(read_eeprom(ppu4_level1));
 8000ed0:	f00e fa26 	bl	800f320 <ascii>
 8000ed4:	f88a 000c 	strb.w	r0, [sl, #12]
 8000ed8:	e607      	b.n	8000aea <Thread1.lto_priv.65+0x41a>
                        lcd_out [9] = ascii(read_eeprom(ppu2_level1));
 8000eda:	79a0      	ldrb	r0, [r4, #6]
 8000edc:	f00e fa20 	bl	800f320 <ascii>
 8000ee0:	f88a 0009 	strb.w	r0, [sl, #9]
                        lcd_out [10] = ascii(read_eeprom(ppu3_level1));
 8000ee4:	79e0      	ldrb	r0, [r4, #7]
 8000ee6:	f00e fa1b 	bl	800f320 <ascii>
 8000eea:	f88a 000a 	strb.w	r0, [sl, #10]
                        lcd_out [11] = ascii(read_eeprom(ppu4_level1));
 8000eee:	7a20      	ldrb	r0, [r4, #8]
 8000ef0:	f00e fa16 	bl	800f320 <ascii>
                        lcd_out [12] = '.';
 8000ef4:	232e      	movs	r3, #46	; 0x2e
                        lcd_out [11] = ascii(read_eeprom(ppu4_level1));
 8000ef6:	f88a 000b 	strb.w	r0, [sl, #11]
                        lcd_out [12] = '.';
 8000efa:	f88a 300c 	strb.w	r3, [sl, #12]
 8000efe:	e5f4      	b.n	8000aea <Thread1.lto_priv.65+0x41a>
                            lcd_out [13]= ascii(read_eeprom(estado2));
 8000f00:	78a0      	ldrb	r0, [r4, #2]
 8000f02:	f00e fa0d 	bl	800f320 <ascii>
 8000f06:	f88a 000d 	strb.w	r0, [sl, #13]
                            lcd_out [14]= ascii(read_eeprom(pos2));
 8000f0a:	78e0      	ldrb	r0, [r4, #3]
 8000f0c:	f00e fa08 	bl	800f320 <ascii>
 8000f10:	f88a 000e 	strb.w	r0, [sl, #14]
                            lcd_out [15]= ascii(read_eeprom(preset_2));
 8000f14:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 8000f18:	f00e fa02 	bl	800f320 <ascii>
 8000f1c:	f88a 000f 	strb.w	r0, [sl, #15]
 8000f20:	e5b4      	b.n	8000a8c <Thread1.lto_priv.65+0x3bc>
                            lcd_out [9] = ascii(read_eeprom(estado1));
 8000f22:	7820      	ldrb	r0, [r4, #0]
 8000f24:	f00e f9fc 	bl	800f320 <ascii>
 8000f28:	f88a 0009 	strb.w	r0, [sl, #9]
                            lcd_out [10]= ascii(read_eeprom(pos1));
 8000f2c:	7860      	ldrb	r0, [r4, #1]
 8000f2e:	f00e f9f7 	bl	800f320 <ascii>
 8000f32:	f88a 000a 	strb.w	r0, [sl, #10]
                            lcd_out [11]= ascii(read_eeprom(preset_1));
 8000f36:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8000f3a:	f00e f9f1 	bl	800f320 <ascii>
 8000f3e:	f88a 000b 	strb.w	r0, [sl, #11]
 8000f42:	e596      	b.n	8000a72 <Thread1.lto_priv.65+0x3a2>
                        if(read_eeprom(stop2) == 0x01 && read_eeprom(pausa2) == 0x01)
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	f47f adf6 	bne.w	8000b36 <Thread1.lto_priv.65+0x466>
                            ButtonEmr(TECLADO_PAUSA,TURNO);
 8000f4a:	4631      	mov	r1, r6
 8000f4c:	2027      	movs	r0, #39	; 0x27
 8000f4e:	f00b fdf7 	bl	800cb40 <ButtonEmr>
                            data_recibo(7);
 8000f52:	f00e fb85 	bl	800f660 <data_recibo.constprop.1>
 8000f56:	2300      	movs	r3, #0
 8000f58:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	; (800104c <Thread1.lto_priv.65+0x97c>)
 8000f5e:	781e      	ldrb	r6, [r3, #0]
 8000f60:	e5e9      	b.n	8000b36 <Thread1.lto_priv.65+0x466>
	return (dato_emr3[num]);
 8000f62:	78a3      	ldrb	r3, [r4, #2]
                        else if(read_eeprom(pausa2) == 0x01 && read_eeprom(estado2) == 0X0C)
 8000f64:	2b0c      	cmp	r3, #12
 8000f66:	f000 848c 	beq.w	8001882 <Thread1.lto_priv.65+0x11b2>
                        else if(read_eeprom(pausa2) == 0x01 && read_eeprom(estado2) == 0X09)
 8000f6a:	2b09      	cmp	r3, #9
 8000f6c:	f47f ade3 	bne.w	8000b36 <Thread1.lto_priv.65+0x466>
                            ButtonEmr(INICIO,TURNO);
 8000f70:	4631      	mov	r1, r6
 8000f72:	2008      	movs	r0, #8
 8000f74:	f00b fde4 	bl	800cb40 <ButtonEmr>
                            data_recibo(7);
 8000f78:	f00e fb72 	bl	800f660 <data_recibo.constprop.1>
 8000f7c:	4933      	ldr	r1, [pc, #204]	; (800104c <Thread1.lto_priv.65+0x97c>)
	dato_emr3[num] = inf;
 8000f7e:	220a      	movs	r2, #10
 8000f80:	2300      	movs	r3, #0
 8000f82:	780e      	ldrb	r6, [r1, #0]
 8000f84:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
 8000f88:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 8000f8c:	e5d3      	b.n	8000b36 <Thread1.lto_priv.65+0x466>
                else if ( palReadPad(GPIOD,IN_8)==0 && (palReadPad(GPIOC,IN_7) == 0) && (palReadPad(GPIOC,IN_6) == 1 )) 
 8000f8e:	4b33      	ldr	r3, [pc, #204]	; (800105c <Thread1.lto_priv.65+0x98c>)
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	0458      	lsls	r0, r3, #17
 8000f94:	d43a      	bmi.n	800100c <Thread1.lto_priv.65+0x93c>
 8000f96:	4b32      	ldr	r3, [pc, #200]	; (8001060 <Thread1.lto_priv.65+0x990>)
 8000f98:	691a      	ldr	r2, [r3, #16]
 8000f9a:	0651      	lsls	r1, r2, #25
 8000f9c:	d436      	bmi.n	800100c <Thread1.lto_priv.65+0x93c>
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	05da      	lsls	r2, r3, #23
 8000fa2:	d533      	bpl.n	800100c <Thread1.lto_priv.65+0x93c>
                    if(palReadPad(GPIOB,BUT_1) == 1)
 8000fa4:	f8db 3010 	ldr.w	r3, [fp, #16]
 8000fa8:	055b      	lsls	r3, r3, #21
 8000faa:	f101 80e5 	bmi.w	8002178 <Thread1.lto_priv.65+0x1aa8>
                    else if (palReadPad(GPIOE,BUT_2) == 1)
 8000fae:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <Thread1.lto_priv.65+0x994>)
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	045f      	lsls	r7, r3, #17
 8000fb4:	f57f ae24 	bpl.w	8000c00 <Thread1.lto_priv.65+0x530>
	return (dato_emr3[num]);
 8000fb8:	79e3      	ldrb	r3, [r4, #7]
                        if (read_eeprom(ppu3_level1) > 0X00) 
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f43f ae20 	beq.w	8000c00 <Thread1.lto_priv.65+0x530>
                            write_eeprom(ppu3_level1,read_eeprom(ppu3_level1) - 1);
 8000fc0:	3b01      	subs	r3, #1
	dato_emr3[num] = inf;
 8000fc2:	71e3      	strb	r3, [r4, #7]
 8000fc4:	7960      	ldrb	r0, [r4, #5]
 8000fc6:	e61c      	b.n	8000c02 <Thread1.lto_priv.65+0x532>
                        if(read_eeprom(stop1) == 0x01 && read_eeprom(pausa1) == 0x01)
 8000fc8:	2901      	cmp	r1, #1
 8000fca:	f47f af16 	bne.w	8000dfa <Thread1.lto_priv.65+0x72a>
                            ButtonEmr(TECLADO_PAUSA,TURNO);
 8000fce:	2027      	movs	r0, #39	; 0x27
 8000fd0:	f00b fdb6 	bl	800cb40 <ButtonEmr>
                            data_recibo(7);
 8000fd4:	f00e fb44 	bl	800f660 <data_recibo.constprop.1>
 8000fd8:	220a      	movs	r2, #10
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
 8000fe0:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
 8000fe4:	e709      	b.n	8000dfa <Thread1.lto_priv.65+0x72a>
	return (dato_emr3[num]);
 8000fe6:	7823      	ldrb	r3, [r4, #0]
                        else if(read_eeprom(pausa1) == 0x01 && read_eeprom(estado1) == 0X0C)
 8000fe8:	2b0c      	cmp	r3, #12
 8000fea:	f000 84d6 	beq.w	800199a <Thread1.lto_priv.65+0x12ca>
                        else if(read_eeprom(pausa1) == 0x01 && read_eeprom(estado1) == 0X09)
 8000fee:	2b09      	cmp	r3, #9
 8000ff0:	f47f af03 	bne.w	8000dfa <Thread1.lto_priv.65+0x72a>
                            ButtonEmr(INICIO,TURNO);
 8000ff4:	2008      	movs	r0, #8
 8000ff6:	f00b fda3 	bl	800cb40 <ButtonEmr>
                            data_recibo(7);
 8000ffa:	f00e fb31 	bl	800f660 <data_recibo.constprop.1>
	dato_emr3[num] = inf;
 8000ffe:	220a      	movs	r2, #10
 8001000:	2300      	movs	r3, #0
 8001002:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
 8001006:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 800100a:	e6f6      	b.n	8000dfa <Thread1.lto_priv.65+0x72a>
                else if ((palReadPad(GPIOD,IN_8)==0) && (palReadPad(GPIOC,IN_7)==1) && (palReadPad(GPIOC,IN_6) == 0)) 
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <Thread1.lto_priv.65+0x98c>)
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	045e      	lsls	r6, r3, #17
 8001012:	f100 80b8 	bmi.w	8001186 <Thread1.lto_priv.65+0xab6>
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <Thread1.lto_priv.65+0x990>)
 8001018:	691a      	ldr	r2, [r3, #16]
 800101a:	0655      	lsls	r5, r2, #25
 800101c:	f140 80b3 	bpl.w	8001186 <Thread1.lto_priv.65+0xab6>
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	05d8      	lsls	r0, r3, #23
 8001024:	f100 80af 	bmi.w	8001186 <Thread1.lto_priv.65+0xab6>
                    if(palReadPad(GPIOB,BUT_1) == 1)
 8001028:	f8db 3010 	ldr.w	r3, [fp, #16]
 800102c:	0559      	lsls	r1, r3, #21
 800102e:	f101 8102 	bmi.w	8002236 <Thread1.lto_priv.65+0x1b66>
                    else if (palReadPad(GPIOE,BUT_2) == 1)
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <Thread1.lto_priv.65+0x994>)
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	045a      	lsls	r2, r3, #17
 8001038:	f57f ade2 	bpl.w	8000c00 <Thread1.lto_priv.65+0x530>
	return (dato_emr3[num]);
 800103c:	79a3      	ldrb	r3, [r4, #6]
                        if (read_eeprom(ppu2_level1) > 0X00) 
 800103e:	2b00      	cmp	r3, #0
 8001040:	f43f adde 	beq.w	8000c00 <Thread1.lto_priv.65+0x530>
                            write_eeprom(ppu2_level1,read_eeprom(ppu2_level1) - 1);
 8001044:	3b01      	subs	r3, #1
	dato_emr3[num] = inf;
 8001046:	71a3      	strb	r3, [r4, #6]
 8001048:	7960      	ldrb	r0, [r4, #5]
 800104a:	e5da      	b.n	8000c02 <Thread1.lto_priv.65+0x532>
 800104c:	20000800 	.word	0x20000800
 8001050:	0800f794 	.word	0x0800f794
 8001054:	0800f6b8 	.word	0x0800f6b8
 8001058:	0800f6cc 	.word	0x0800f6cc
 800105c:	40020c00 	.word	0x40020c00
 8001060:	40020800 	.word	0x40020800
 8001064:	40021000 	.word	0x40021000
                            ButtonEmr(ESTADO_DISPLAY,TURNO);
 8001068:	4bce      	ldr	r3, [pc, #824]	; (80013a4 <Thread1.lto_priv.65+0xcd4>)
 800106a:	2003      	movs	r0, #3
 800106c:	7819      	ldrb	r1, [r3, #0]
 800106e:	f00b fd67 	bl	800cb40 <ButtonEmr>
                            uartStartReceive(&UARTD1, 8, recibo);
 8001072:	a908      	add	r1, sp, #32
 8001074:	2008      	movs	r0, #8
 8001076:	f00d ffa3 	bl	800efc0 <uartStartReceive.constprop.23>
                            chThdSleepMilliseconds(500);
 800107a:	f241 3088 	movw	r0, #5000	; 0x1388
 800107e:	f00b fcdf 	bl	800ca40 <chThdSleep>
                            uartStopReceive(&UARTD1);
 8001082:	f00d fffd 	bl	800f080 <uartStopReceive.constprop.21>
	return (dato_emr3[num]);
 8001086:	78a3      	ldrb	r3, [r4, #2]
                            if((read_eeprom(estado2) == 0X06 || read_eeprom(estado2) == 0X08) && read_eeprom(pasos2) == 0X00)
 8001088:	2b06      	cmp	r3, #6
 800108a:	f000 81b9 	beq.w	8001400 <Thread1.lto_priv.65+0xd30>
 800108e:	2b08      	cmp	r3, #8
 8001090:	f000 81b6 	beq.w	8001400 <Thread1.lto_priv.65+0xd30>
 8001094:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
                            if(read_eeprom(pasos2) == 0X00)
 8001098:	2b00      	cmp	r3, #0
 800109a:	f040 81b6 	bne.w	800140a <Thread1.lto_priv.65+0xd3a>
                                if(recibo[0X04] == 0X08)
 800109e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 80010a2:	2a08      	cmp	r2, #8
 80010a4:	f47f ad66 	bne.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                                    if(recibo[0X05] == 0X00 && (read_eeprom(estado2) == 0X06 || read_eeprom(estado2) == 0X07))
 80010a8:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
 80010ac:	2e00      	cmp	r6, #0
 80010ae:	f001 82ba 	beq.w	8002626 <Thread1.lto_priv.65+0x1f56>
                                    else if(recibo[0X05] == 0X02)
 80010b2:	2e02      	cmp	r6, #2
 80010b4:	f001 82a4 	beq.w	8002600 <Thread1.lto_priv.65+0x1f30>
                                    else if(recibo[0X05] == 0X03 && read_eeprom(estado2) == 0X06)
 80010b8:	2e03      	cmp	r6, #3
 80010ba:	f47f ad5b 	bne.w	8000b74 <Thread1.lto_priv.65+0x4a4>
 80010be:	78a3      	ldrb	r3, [r4, #2]
 80010c0:	2b06      	cmp	r3, #6
 80010c2:	f001 82b7 	beq.w	8002634 <Thread1.lto_priv.65+0x1f64>
                                    else if(recibo[0X05] == 0X03 && read_eeprom(estado2) == 0X08)
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	f47f ad54 	bne.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                                        ButtonEmr(TECLADO_FIN,TURNO);
 80010cc:	4bb5      	ldr	r3, [pc, #724]	; (80013a4 <Thread1.lto_priv.65+0xcd4>)
 80010ce:	2002      	movs	r0, #2
 80010d0:	7819      	ldrb	r1, [r3, #0]
 80010d2:	f00b fd35 	bl	800cb40 <ButtonEmr>
                                        data_recibo(7);
 80010d6:	f00e fac3 	bl	800f660 <data_recibo.constprop.1>
                                        punto = mult(read_eeprom(pppu));
 80010da:	7920      	ldrb	r0, [r4, #4]
 80010dc:	f00d fa00 	bl	800e4e0 <mult>
                                        valor = ((read_eeprom(ppu1_level1)*1000) + (read_eeprom(ppu2_level1)*100) + (read_eeprom(ppu3_level1)*10) + (read_eeprom(ppu4_level1)*1));
 80010e0:	79a3      	ldrb	r3, [r4, #6]
 80010e2:	7962      	ldrb	r2, [r4, #5]
 80010e4:	79e6      	ldrb	r6, [r4, #7]
 80010e6:	7a21      	ldrb	r1, [r4, #8]
 80010e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80010ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80010f6:	fb07 3202 	mla	r2, r7, r2, r3
 80010fa:	230a      	movs	r3, #10
 80010fc:	fb13 2306 	smlabb	r3, r3, r6, r2
 8001100:	440b      	add	r3, r1
                                        valor_float=valor%punto;
 8001102:	fbb3 f2f0 	udiv	r2, r3, r0
 8001106:	fb00 3312 	mls	r3, r0, r2, r3
                                        f_pf(valor,valor_float,1);
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
                                        valor=valor/punto;
 800110e:	9201      	str	r2, [sp, #4]
                                        f_pf(valor,valor_float,1);
 8001110:	2201      	movs	r2, #1
                                        valor_float=valor%punto;
 8001112:	9302      	str	r3, [sp, #8]
                                        f_pf(valor,valor_float,1);
 8001114:	f00d fadc 	bl	800e6d0 <f_pf>
                                        ButtonEmr(ENVIAR_PPU,TURNO);
 8001118:	4ba2      	ldr	r3, [pc, #648]	; (80013a4 <Thread1.lto_priv.65+0xcd4>)
 800111a:	201c      	movs	r0, #28
 800111c:	7819      	ldrb	r1, [r3, #0]
 800111e:	f00b fd0f 	bl	800cb40 <ButtonEmr>
                                        data_recibo(7); 
 8001122:	f00e fa9d 	bl	800f660 <data_recibo.constprop.1>
 8001126:	f894 6088 	ldrb.w	r6, [r4, #136]	; 0x88
                            if(read_eeprom(pasos2) == 0X02)
 800112a:	2e02      	cmp	r6, #2
 800112c:	f040 8175 	bne.w	800141a <Thread1.lto_priv.65+0xd4a>
                                ButtonEmr(TECLADO_FIN,TURNO);
 8001130:	4b9c      	ldr	r3, [pc, #624]	; (80013a4 <Thread1.lto_priv.65+0xcd4>)
 8001132:	2002      	movs	r0, #2
 8001134:	7819      	ldrb	r1, [r3, #0]
 8001136:	f00b fd03 	bl	800cb40 <ButtonEmr>
                                data_recibo(7); 
 800113a:	f00e fa91 	bl	800f660 <data_recibo.constprop.1>
                                write_eeprom(level,(B9 & 0XF0));                                                                                          
 800113e:	7b62      	ldrb	r2, [r4, #13]
 8001140:	f022 020f 	bic.w	r2, r2, #15
	dato_emr3[num] = inf;
 8001144:	2300      	movs	r3, #0
 8001146:	2101      	movs	r1, #1
 8001148:	7362      	strb	r2, [r4, #13]
 800114a:	2203      	movs	r2, #3
 800114c:	f884 1095 	strb.w	r1, [r4, #149]	; 0x95
 8001150:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8001154:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8001158:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800115c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8001160:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 8001164:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
 8001168:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
 800116c:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
 8001170:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
 8001174:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
 8001178:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 800117c:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 8001180:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
 8001184:	e4f6      	b.n	8000b74 <Thread1.lto_priv.65+0x4a4>
                else if ((palReadPad(GPIOD,IN_8)==1) && (palReadPad(GPIOC,IN_7)==0) && (palReadPad(GPIOC,IN_6) == 0 )) 
 8001186:	4b88      	ldr	r3, [pc, #544]	; (80013a8 <Thread1.lto_priv.65+0xcd8>)
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	045b      	lsls	r3, r3, #17
 800118c:	f57f ad38 	bpl.w	8000c00 <Thread1.lto_priv.65+0x530>
 8001190:	4b86      	ldr	r3, [pc, #536]	; (80013ac <Thread1.lto_priv.65+0xcdc>)
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	0657      	lsls	r7, r2, #25
 8001196:	f53f ad33 	bmi.w	8000c00 <Thread1.lto_priv.65+0x530>
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	05de      	lsls	r6, r3, #23
 800119e:	f53f ad2f 	bmi.w	8000c00 <Thread1.lto_priv.65+0x530>
                    if(palReadPad(GPIOB,BUT_1) == 1)
 80011a2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80011a6:	055d      	lsls	r5, r3, #21
 80011a8:	f101 803c 	bmi.w	8002224 <Thread1.lto_priv.65+0x1b54>
                    else if (palReadPad(GPIOE,BUT_2) == 1)
 80011ac:	4b80      	ldr	r3, [pc, #512]	; (80013b0 <Thread1.lto_priv.65+0xce0>)
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	0458      	lsls	r0, r3, #17
 80011b2:	f57f ad25 	bpl.w	8000c00 <Thread1.lto_priv.65+0x530>
	return (dato_emr3[num]);
 80011b6:	7960      	ldrb	r0, [r4, #5]
                        if (read_eeprom(ppu1_level1) > 0X00) 
 80011b8:	2800      	cmp	r0, #0
 80011ba:	f43f ad22 	beq.w	8000c02 <Thread1.lto_priv.65+0x532>
                            write_eeprom(ppu1_level1,read_eeprom(ppu1_level1) - 1);
 80011be:	3801      	subs	r0, #1
 80011c0:	b2c0      	uxtb	r0, r0
	dato_emr3[num] = inf;
 80011c2:	7160      	strb	r0, [r4, #5]
 80011c4:	e51d      	b.n	8000c02 <Thread1.lto_priv.65+0x532>
                            ButtonEmr(ESTADO_DISPLAY,TURNO);
 80011c6:	4b77      	ldr	r3, [pc, #476]	; (80013a4 <Thread1.lto_priv.65+0xcd4>)
 80011c8:	2003      	movs	r0, #3
 80011ca:	7819      	ldrb	r1, [r3, #0]
 80011cc:	f00b fcb8 	bl	800cb40 <ButtonEmr>
                            uartStartReceive(&UARTD1, 8, recibo);
 80011d0:	a908      	add	r1, sp, #32
 80011d2:	2008      	movs	r0, #8
 80011d4:	f00d fef4 	bl	800efc0 <uartStartReceive.constprop.23>
                            chThdSleepMilliseconds(500);
 80011d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80011dc:	f00b fc30 	bl	800ca40 <chThdSleep>
                            uartStopReceive(&UARTD1);
 80011e0:	f00d ff4e 	bl	800f080 <uartStopReceive.constprop.21>
	return (dato_emr3[num]);
 80011e4:	7823      	ldrb	r3, [r4, #0]
                            if((read_eeprom(estado1) == 0X06 || read_eeprom(estado1) == 0X08) && read_eeprom(pasos1) == 0X00)
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	f000 8226 	beq.w	8001638 <Thread1.lto_priv.65+0xf68>
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	f000 8223 	beq.w	8001638 <Thread1.lto_priv.65+0xf68>
 80011f2:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
                            if(read_eeprom(pasos1) == 0X00)
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f040 8223 	bne.w	8001642 <Thread1.lto_priv.65+0xf72>
                                if(recibo[0X04] == 0X08)
 80011fc:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8001200:	2a08      	cmp	r2, #8
 8001202:	f47f ae1a 	bne.w	8000e3a <Thread1.lto_priv.65+0x76a>
                                    if(recibo[0X05] == 0X00 && (read_eeprom(estado1) == 0X06 || read_eeprom(estado1) == 0X07))
 8001206:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
 800120a:	2e00      	cmp	r6, #0
 800120c:	f001 801a 	beq.w	8002244 <Thread1.lto_priv.65+0x1b74>
                                    else if(recibo[0X05] == 0X02)
 8001210:	2e02      	cmp	r6, #2
 8001212:	f003 801e 	beq.w	8004252 <Thread1.lto_priv.65+0x3b82>
                                    else if(recibo[0X05] == 0X03 && read_eeprom(estado1) == 0X06)
 8001216:	2e03      	cmp	r6, #3
 8001218:	f47f ae0f 	bne.w	8000e3a <Thread1.lto_priv.65+0x76a>
 800121c:	7823      	ldrb	r3, [r4, #0]
 800121e:	2b06      	cmp	r3, #6
 8001220:	f001 8018 	beq.w	8002254 <Thread1.lto_priv.65+0x1b84>
                                    else if(recibo[0X05] == 0X03 && read_eeprom(estado1) == 0X08)
 8001224:	2b08      	cmp	r3, #8
 8001226:	f47f ae08 	bne.w	8000e3a <Thread1.lto_priv.65+0x76a>
                                        ButtonEmr(TECLADO_FIN,TURNO);
 800122a:	4b5e      	ldr	r3, [pc, #376]	; (80013a4 <Thread1.lto_priv.65+0xcd4>)
 800122c:	2002      	movs	r0, #2
 800122e:	7819      	ldrb	r1, [r3, #0]
 8001230:	f00b fc86 	bl	800cb40 <ButtonEmr>
                                        data_recibo(7);
 8001234:	f00e fa14 	bl	800f660 <data_recibo.constprop.1>
                                        punto = mult(read_eeprom(pppu));
 8001238:	7920      	ldrb	r0, [r4, #4]
 800123a:	f00d f951 	bl	800e4e0 <mult>
                                        valor = ((read_eeprom(ppu1_level1)*1000) + (read_eeprom(ppu2_level1)*100) + (read_eeprom(ppu3_level1)*10) + (read_eeprom(ppu4_level1)*1));
 800123e:	79a3      	ldrb	r3, [r4, #6]
 8001240:	7962      	ldrb	r2, [r4, #5]
 8001242:	79e6      	ldrb	r6, [r4, #7]
 8001244:	7a21      	ldrb	r1, [r4, #8]
 8001246:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800124a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8001254:	fb07 3202 	mla	r2, r7, r2, r3
 8001258:	230a      	movs	r3, #10
 800125a:	fb13 2306 	smlabb	r3, r3, r6, r2
 800125e:	440b      	add	r3, r1
                                        valor_float=valor%punto;
 8001260:	fbb3 f2f0 	udiv	r2, r3, r0
 8001264:	fb00 3312 	mls	r3, r0, r2, r3
                                        f_pf(valor,valor_float,1);
 8001268:	4619      	mov	r1, r3
 800126a:	4610      	mov	r0, r2
                                        valor=valor/punto;
 800126c:	9201      	str	r2, [sp, #4]
                                        f_pf(valor,valor_float,1);
 800126e:	2201      	movs	r2, #1
                                        valor_float=valor%punto;
 8001270:	9302      	str	r3, [sp, #8]
                                        f_pf(valor,valor_float,1);
 8001272:	f00d fa2d 	bl	800e6d0 <f_pf>
                                        ButtonEmr(ENVIAR_PPU,TURNO);
 8001276:	4b4b      	ldr	r3, [pc, #300]	; (80013a4 <Thread1.lto_priv.65+0xcd4>)
 8001278:	201c      	movs	r0, #28
 800127a:	7819      	ldrb	r1, [r3, #0]
 800127c:	f00b fc60 	bl	800cb40 <ButtonEmr>
                                        data_recibo(7); 
 8001280:	f00e f9ee 	bl	800f660 <data_recibo.constprop.1>
 8001284:	f894 6087 	ldrb.w	r6, [r4, #135]	; 0x87
                            if(read_eeprom(pasos1) == 0X02)
 8001288:	2e02      	cmp	r6, #2
 800128a:	f040 81e2 	bne.w	8001652 <Thread1.lto_priv.65+0xf82>
                                ButtonEmr(TECLADO_FIN,TURNO);
 800128e:	4b45      	ldr	r3, [pc, #276]	; (80013a4 <Thread1.lto_priv.65+0xcd4>)
 8001290:	2002      	movs	r0, #2
 8001292:	7819      	ldrb	r1, [r3, #0]
 8001294:	f00b fc54 	bl	800cb40 <ButtonEmr>
                                data_recibo(7); 
 8001298:	f00e f9e2 	bl	800f660 <data_recibo.constprop.1>
                                write_eeprom(level,(B9 & 0X0F));
 800129c:	7b62      	ldrb	r2, [r4, #13]
 800129e:	f002 020f 	and.w	r2, r2, #15
	dato_emr3[num] = inf;
 80012a2:	2300      	movs	r3, #0
 80012a4:	2101      	movs	r1, #1
 80012a6:	7362      	strb	r2, [r4, #13]
 80012a8:	2203      	movs	r2, #3
 80012aa:	f884 1095 	strb.w	r1, [r4, #149]	; 0x95
 80012ae:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80012b2:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
 80012b6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80012ba:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80012be:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80012c2:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
 80012c6:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 80012ca:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80012ce:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 80012d2:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 80012d6:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 80012da:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 80012de:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
 80012e2:	e5aa      	b.n	8000e3a <Thread1.lto_priv.65+0x76a>
                        if(read_eeprom(log) == 1) emr3_log(&recibo,8,2);
 80012e4:	2202      	movs	r2, #2
 80012e6:	2108      	movs	r1, #8
 80012e8:	a808      	add	r0, sp, #32
 80012ea:	f00c ff19 	bl	800e120 <emr3_log>
 80012ee:	e438      	b.n	8000b62 <Thread1.lto_priv.65+0x492>
                else if (palReadPad(GPIOB,IN_5) == 1 && read_eeprom(pos1) != POS1_A)
 80012f0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80012f4:	04da      	lsls	r2, r3, #19
 80012f6:	f100 82ac 	bmi.w	8001852 <Thread1.lto_priv.65+0x1182>
                else if (palReadPad(GPIOB,IN_5) == 1 &&  read_eeprom(pos1) ==  POS1_A)
 80012fa:	f8db 3010 	ldr.w	r3, [fp, #16]
 80012fe:	04db      	lsls	r3, r3, #19
 8001300:	f57f aa4c 	bpl.w	800079c <Thread1.lto_priv.65+0xcc>
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <Thread1.lto_priv.65+0xce4>)
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	7863      	ldrb	r3, [r4, #1]
 800130a:	429a      	cmp	r2, r3
 800130c:	f47f aa46 	bne.w	800079c <Thread1.lto_priv.65+0xcc>
                    LCDPrintRow2( 0,"   ADDRESS OK   ");
 8001310:	4829      	ldr	r0, [pc, #164]	; (80013b8 <Thread1.lto_priv.65+0xce8>)
 8001312:	f00e f985 	bl	800f620 <LCDPrintRow2.constprop.2>
                    chThdSleepMilliseconds(500);
 8001316:	f241 3088 	movw	r0, #5000	; 0x1388
 800131a:	f00b fb91 	bl	800ca40 <chThdSleep>
 800131e:	f7ff ba3d 	b.w	800079c <Thread1.lto_priv.65+0xcc>
                else if (palReadPad(GPIOB,IN_5) == 1 && read_eeprom(pos2) != POS2_A)
 8001322:	f8db 3010 	ldr.w	r3, [fp, #16]
 8001326:	04d9      	lsls	r1, r3, #19
 8001328:	f100 8327 	bmi.w	800197a <Thread1.lto_priv.65+0x12aa>
                else if (palReadPad(GPIOB,IN_5) == 1 && read_eeprom(pos2) ==  POS2_A)
 800132c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8001330:	04da      	lsls	r2, r3, #19
 8001332:	f57f aa33 	bpl.w	800079c <Thread1.lto_priv.65+0xcc>
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <Thread1.lto_priv.65+0xcec>)
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	78e3      	ldrb	r3, [r4, #3]
 800133c:	429a      	cmp	r2, r3
 800133e:	f47f aa2d 	bne.w	800079c <Thread1.lto_priv.65+0xcc>
                    LCDPrintRow2( 0,"   ADDRESS OK   ");
 8001342:	481d      	ldr	r0, [pc, #116]	; (80013b8 <Thread1.lto_priv.65+0xce8>)
 8001344:	f00e f96c 	bl	800f620 <LCDPrintRow2.constprop.2>
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <Thread1.lto_priv.65+0xcec>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	70e3      	strb	r3, [r4, #3]
 800134e:	e28f      	b.n	8001870 <Thread1.lto_priv.65+0x11a0>
                else if (palReadPad(GPIOB,IN_5) == 1 && read_eeprom(consola) != cons_emr3)
 8001350:	f8db 3010 	ldr.w	r3, [fp, #16]
 8001354:	04de      	lsls	r6, r3, #19
 8001356:	f100 82ee 	bmi.w	8001936 <Thread1.lto_priv.65+0x1266>
                else if (palReadPad(GPIOB,IN_5) == 1 && read_eeprom(consola) == cons_emr3)
 800135a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800135e:	04d8      	lsls	r0, r3, #19
 8001360:	f57f aa1c 	bpl.w	800079c <Thread1.lto_priv.65+0xcc>
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <Thread1.lto_priv.65+0xcf0>)
 8001366:	781a      	ldrb	r2, [r3, #0]
 8001368:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 800136c:	429a      	cmp	r2, r3
 800136e:	f47f aa15 	bne.w	800079c <Thread1.lto_priv.65+0xcc>
                    LCDPrintRow2( 0,"   CONSOLE OK   ");
 8001372:	4814      	ldr	r0, [pc, #80]	; (80013c4 <Thread1.lto_priv.65+0xcf4>)
 8001374:	f00e f954 	bl	800f620 <LCDPrintRow2.constprop.2>
 8001378:	f7ff ba10 	b.w	800079c <Thread1.lto_priv.65+0xcc>
                    else if ( (palReadPad(GPIOD,IN_8)==0) && (palReadPad(GPIOC,IN_7)==1) && (palReadPad(GPIOC,IN_6) == 0 )) 
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <Thread1.lto_priv.65+0xcd8>)
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	0459      	lsls	r1, r3, #17
 8001382:	d427      	bmi.n	80013d4 <Thread1.lto_priv.65+0xd04>
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <Thread1.lto_priv.65+0xcdc>)
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	0652      	lsls	r2, r2, #25
 800138a:	d523      	bpl.n	80013d4 <Thread1.lto_priv.65+0xd04>
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	05df      	lsls	r7, r3, #23
 8001390:	d420      	bmi.n	80013d4 <Thread1.lto_priv.65+0xd04>
                        cons_emr3=2; //CONSOLA
 8001392:	490b      	ldr	r1, [pc, #44]	; (80013c0 <Thread1.lto_priv.65+0xcf0>)
 8001394:	2202      	movs	r2, #2
                        lcd_out [8]='2';
 8001396:	2332      	movs	r3, #50	; 0x32
                        cons_emr3=2; //CONSOLA
 8001398:	700a      	strb	r2, [r1, #0]
                        lcd_out [8]='2';
 800139a:	f88a 3008 	strb.w	r3, [sl, #8]
 800139e:	f7ff ba36 	b.w	800080e <Thread1.lto_priv.65+0x13e>
 80013a2:	bf00      	nop
 80013a4:	20000800 	.word	0x20000800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40021000 	.word	0x40021000
 80013b4:	20000901 	.word	0x20000901
 80013b8:	0800f708 	.word	0x0800f708
 80013bc:	20000902 	.word	0x20000902
 80013c0:	20000903 	.word	0x20000903
 80013c4:	0800f758 	.word	0x0800f758
                        if(read_eeprom(log) == 1) emr3_log(&recibo,8,2);
 80013c8:	2202      	movs	r2, #2
 80013ca:	2108      	movs	r1, #8
 80013cc:	a808      	add	r0, sp, #32
 80013ce:	f00c fea7 	bl	800e120 <emr3_log>
 80013d2:	e529      	b.n	8000e28 <Thread1.lto_priv.65+0x758>
                    else if ((palReadPad(GPIOD,IN_8)==0) && (palReadPad(GPIOC,IN_7)==1) && (palReadPad(GPIOC,IN_6) == 1 )) 
 80013d4:	4bd7      	ldr	r3, [pc, #860]	; (8001734 <Thread1.lto_priv.65+0x1064>)
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	045e      	lsls	r6, r3, #17
 80013da:	f100 8106 	bmi.w	80015ea <Thread1.lto_priv.65+0xf1a>
 80013de:	4bd6      	ldr	r3, [pc, #856]	; (8001738 <Thread1.lto_priv.65+0x1068>)
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	0655      	lsls	r5, r2, #25
 80013e4:	f140 8101 	bpl.w	80015ea <Thread1.lto_priv.65+0xf1a>
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	05d8      	lsls	r0, r3, #23
 80013ec:	f140 80fd 	bpl.w	80015ea <Thread1.lto_priv.65+0xf1a>
                        cons_emr3=3; //FUERA TOTAL DE CONSOLA
 80013f0:	49d2      	ldr	r1, [pc, #840]	; (800173c <Thread1.lto_priv.65+0x106c>)
 80013f2:	2203      	movs	r2, #3
                        lcd_out [8]='3';
 80013f4:	2333      	movs	r3, #51	; 0x33
                        cons_emr3=3; //FUERA TOTAL DE CONSOLA
 80013f6:	700a      	strb	r2, [r1, #0]
                        lcd_out [8]='3';
 80013f8:	f88a 3008 	strb.w	r3, [sl, #8]
 80013fc:	f7ff ba07 	b.w	800080e <Thread1.lto_priv.65+0x13e>
	return (dato_emr3[num]);
 8001400:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
                            if((read_eeprom(estado2) == 0X06 || read_eeprom(estado2) == 0X08) && read_eeprom(pasos2) == 0X00)
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 8305 	beq.w	8001a14 <Thread1.lto_priv.65+0x1344>
                            else if(read_eeprom(pasos2) == 0X0A)
 800140a:	2b0a      	cmp	r3, #10
 800140c:	f000 850b 	beq.w	8001e26 <Thread1.lto_priv.65+0x1756>
 8001410:	f894 6088 	ldrb.w	r6, [r4, #136]	; 0x88
                            if(read_eeprom(pasos2) == 0X02)
 8001414:	2e02      	cmp	r6, #2
 8001416:	f43f ae8b 	beq.w	8001130 <Thread1.lto_priv.65+0xa60>
                            else if (read_eeprom(pasos2) == 0X03)
 800141a:	2e03      	cmp	r6, #3
 800141c:	f000 81e6 	beq.w	80017ec <Thread1.lto_priv.65+0x111c>
                            else if (read_eeprom(pasos2) == 0X04)
 8001420:	2e04      	cmp	r6, #4
 8001422:	f000 831f 	beq.w	8001a64 <Thread1.lto_priv.65+0x1394>
                            else if(read_eeprom(pasos2) == 0X05)
 8001426:	2e05      	cmp	r6, #5
 8001428:	f000 83d1 	beq.w	8001bce <Thread1.lto_priv.65+0x14fe>
                            else if (read_eeprom(pasos2) == 0X07) 
 800142c:	2e07      	cmp	r6, #7
 800142e:	f000 841e 	beq.w	8001c6e <Thread1.lto_priv.65+0x159e>
                            else if (read_eeprom(pasos2) == 0X08) 
 8001432:	2e08      	cmp	r6, #8
 8001434:	f043 8014 	bne.w	8004460 <Thread1.lto_priv.65+0x3d90>
                                ButtonEmr(LEER_DISPLAY,TURNO);
 8001438:	4ac1      	ldr	r2, [pc, #772]	; (8001740 <Thread1.lto_priv.65+0x1070>)
	dato_emr3[num] = inf;
 800143a:	230a      	movs	r3, #10
 800143c:	7811      	ldrb	r1, [r2, #0]
 800143e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 8001442:	2004      	movs	r0, #4
 8001444:	f00b fb7c 	bl	800cb40 <ButtonEmr>
                                uartStartReceive(&UARTD1, 16, recibo_parcial);
 8001448:	a90f      	add	r1, sp, #60	; 0x3c
 800144a:	2010      	movs	r0, #16
 800144c:	f00d fdb8 	bl	800efc0 <uartStartReceive.constprop.23>
                                chThdSleepMilliseconds(500);
 8001450:	f241 3088 	movw	r0, #5000	; 0x1388
 8001454:	f00b faf4 	bl	800ca40 <chThdSleep>
                                uartStopReceive(&UARTD1); 
 8001458:	f00d fe12 	bl	800f080 <uartStopReceive.constprop.21>
                                if(read_eeprom(log) == 1) emr3_log(&recibo_parcial,16,2);  
 800145c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8001460:	2b01      	cmp	r3, #1
 8001462:	f002 87f6 	beq.w	8004452 <Thread1.lto_priv.65+0x3d82>
 8001466:	f10d 031f 	add.w	r3, sp, #31
                                    recibo[i]=0x00;
 800146a:	2200      	movs	r2, #0
 800146c:	f803 2f01 	strb.w	r2, [r3, #1]!
                                for(i=0;i<14;i++)
 8001470:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
 8001474:	428b      	cmp	r3, r1
 8001476:	d1f9      	bne.n	800146c <Thread1.lto_priv.65+0xd9c>
 8001478:	aa10      	add	r2, sp, #64	; 0x40
 800147a:	2305      	movs	r3, #5
                                    if(recibo_parcial[i] != 0X2E && recibo_parcial[i] != 0X2C)
 800147c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001480:	f001 00fd 	and.w	r0, r1, #253	; 0xfd
 8001484:	282c      	cmp	r0, #44	; 0x2c
 8001486:	d005      	beq.n	8001494 <Thread1.lto_priv.65+0xdc4>
                                        recibo[j] = recibo_parcial[i];
 8001488:	a816      	add	r0, sp, #88	; 0x58
 800148a:	4418      	add	r0, r3
                                        j++;
 800148c:	3301      	adds	r3, #1
                                        recibo[j] = recibo_parcial[i];
 800148e:	f800 1c38 	strb.w	r1, [r0, #-56]
                                        j++;
 8001492:	b2db      	uxtb	r3, r3
                                for(i=5;i<14;i++)
 8001494:	f10d 0149 	add.w	r1, sp, #73	; 0x49
 8001498:	428a      	cmp	r2, r1
 800149a:	d1ef      	bne.n	800147c <Thread1.lto_priv.65+0xdac>
                                B6=0X0F & recibo[11];
 800149c:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
                                B5=0X0F & recibo[10];
 80014a0:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
                                if(recibo[0x05] == 0x01)
 80014a4:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
                                B4=0X0F & recibo[9];
 80014a8:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
                                B3=0X0F & recibo[8];
 80014ac:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
                                B2=0X0F & recibo[7];
 80014b0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
                                B1=0X0F & recibo[6];
 80014b4:	f89d 8026 	ldrb.w	r8, [sp, #38]	; 0x26
                                B6=0X0F & recibo[11];
 80014b8:	f000 000f 	and.w	r0, r0, #15
                                B5=0X0F & recibo[10];
 80014bc:	f001 010f 	and.w	r1, r1, #15
                                if(recibo[0x05] == 0x01)
 80014c0:	2e01      	cmp	r6, #1
                                B6=0X0F & recibo[11];
 80014c2:	9004      	str	r0, [sp, #16]
                                B5=0X0F & recibo[10];
 80014c4:	9105      	str	r1, [sp, #20]
                                B4=0X0F & recibo[9];
 80014c6:	f003 030f 	and.w	r3, r3, #15
                                B3=0X0F & recibo[8];
 80014ca:	f007 070f 	and.w	r7, r7, #15
                                B2=0X0F & recibo[7];
 80014ce:	f002 020f 	and.w	r2, r2, #15
                                B1=0X0F & recibo[6];
 80014d2:	f008 080f 	and.w	r8, r8, #15
                                if(recibo[0x05] == 0x01)
 80014d6:	f002 855b 	beq.w	8003f90 <Thread1.lto_priv.65+0x38c0>
 80014da:	9306      	str	r3, [sp, #24]
                                    ButtonEmr(TECLADO_MODO,TURNO);
 80014dc:	4b98      	ldr	r3, [pc, #608]	; (8001740 <Thread1.lto_priv.65+0x1070>)
 80014de:	9207      	str	r2, [sp, #28]
 80014e0:	7819      	ldrb	r1, [r3, #0]
 80014e2:	2001      	movs	r0, #1
                                else if(recibo[0x05] == 0x00)
 80014e4:	2e00      	cmp	r6, #0
 80014e6:	f040 81f0 	bne.w	80018ca <Thread1.lto_priv.65+0x11fa>
                                    ButtonEmr(TECLADO_MODO,TURNO);
 80014ea:	f00b fb29 	bl	800cb40 <ButtonEmr>
                                    data_recibo(7);                                        
 80014ee:	f00e f8b7 	bl	800f660 <data_recibo.constprop.1>
                                    vol_real = ((B1*100000) + (B2*10000) + (B3*1000) + (B4*100) + (B5*10) + B6);
 80014f2:	9a07      	ldr	r2, [sp, #28]
 80014f4:	4893      	ldr	r0, [pc, #588]	; (8001744 <Thread1.lto_priv.65+0x1074>)
 80014f6:	9b06      	ldr	r3, [sp, #24]
 80014f8:	f242 7110 	movw	r1, #10000	; 0x2710
 80014fc:	fb01 f202 	mul.w	r2, r1, r2
 8001500:	fb00 2808 	mla	r8, r0, r8, r2
 8001504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001508:	2564      	movs	r5, #100	; 0x64
 800150a:	fb02 8707 	mla	r7, r2, r7, r8
 800150e:	fb15 7703 	smlabb	r7, r5, r3, r7
 8001512:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001516:	250a      	movs	r5, #10
 8001518:	fb15 7503 	smlabb	r5, r5, r3, r7
                                    if(vol_real == 0) din_real = 0;
 800151c:	9b04      	ldr	r3, [sp, #16]
 800151e:	18ed      	adds	r5, r5, r3
 8001520:	f042 8712 	bne.w	8004348 <Thread1.lto_priv.65+0x3c78>
 8001524:	9506      	str	r5, [sp, #24]
 8001526:	9505      	str	r5, [sp, #20]
 8001528:	9504      	str	r5, [sp, #16]
 800152a:	46ae      	mov	lr, r5
 800152c:	46ac      	mov	ip, r5
                                    write_eeprom(real_vol26,(vol_real%10));                                    
 800152e:	4b86      	ldr	r3, [pc, #536]	; (8001748 <Thread1.lto_priv.65+0x1078>)
                                    vol_real = vol_real/10;
 8001530:	4986      	ldr	r1, [pc, #536]	; (800174c <Thread1.lto_priv.65+0x107c>)
 8001532:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 8001536:	096f      	lsrs	r7, r5, #5
 8001538:	fba1 1707 	umull	r1, r7, r1, r7
                                    write_eeprom(real_vol26,(vol_real%10));                                    
 800153c:	fba3 0105 	umull	r0, r1, r3, r5
                                    vol_real = vol_real/10;
 8001540:	4883      	ldr	r0, [pc, #524]	; (8001750 <Thread1.lto_priv.65+0x1080>)
 8001542:	f884 e068 	strb.w	lr, [r4, #104]	; 0x68
 8001546:	fba0 0805 	umull	r0, r8, r0, r5
                                    vol_real = vol_real/10;
 800154a:	4882      	ldr	r0, [pc, #520]	; (8001754 <Thread1.lto_priv.65+0x1084>)
 800154c:	f884 c069 	strb.w	ip, [r4, #105]	; 0x69
 8001550:	fba0 0605 	umull	r0, r6, r0, r5
                                    vol_real = vol_real/10;
 8001554:	4880      	ldr	r0, [pc, #512]	; (8001758 <Thread1.lto_priv.65+0x1088>)
                                    write_eeprom(real_vol26,(vol_real%10));                                    
 8001556:	08c9      	lsrs	r1, r1, #3
                                    vol_real = vol_real/10;
 8001558:	fba0 2005 	umull	r2, r0, r0, r5
 800155c:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8001560:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
                                    write_eeprom(real_vol25,(vol_real%10));
 8001564:	fba3 e201 	umull	lr, r2, r3, r1
 8001568:	08d2      	lsrs	r2, r2, #3
 800156a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                                    vol_real = vol_real/10;
 800156e:	09ff      	lsrs	r7, r7, #7
                                    write_eeprom(real_vol25,(vol_real%10));
 8001570:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
                                    write_eeprom(real_vol26,(vol_real%10));                                    
 8001574:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001578:	eba5 0541 	sub.w	r5, r5, r1, lsl #1
                                    write_eeprom(real_vol21,(vol_real%10));                                   
 800157c:	fba3 e107 	umull	lr, r1, r3, r7
 8001580:	08c9      	lsrs	r1, r1, #3
                                    vol_real = vol_real/10;
 8001582:	ea4f 1858 	mov.w	r8, r8, lsr #5
                                    vol_real = vol_real/10;
 8001586:	09b6      	lsrs	r6, r6, #6
                                    vol_real = vol_real/10;
 8001588:	0b40      	lsrs	r0, r0, #13
                                    write_eeprom(real_vol21,(vol_real%10));                                   
 800158a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800158e:	eba7 0741 	sub.w	r7, r7, r1, lsl #1
                                    write_eeprom(real_vol24,(vol_real%10));
 8001592:	fba3 e108 	umull	lr, r1, r3, r8
                                    write_eeprom(real_vol23,(vol_real%10));
 8001596:	fba3 ce06 	umull	ip, lr, r3, r6
                                    write_eeprom(real_vol22,(vol_real%10));
 800159a:	fba3 c300 	umull	ip, r3, r3, r0
 800159e:	08db      	lsrs	r3, r3, #3
 80015a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                    write_eeprom(real_vol24,(vol_real%10));
 80015a4:	08c9      	lsrs	r1, r1, #3
                                    write_eeprom(real_vol23,(vol_real%10));
 80015a6:	ea4f 0ede 	mov.w	lr, lr, lsr #3
                                    write_eeprom(real_vol22,(vol_real%10));
 80015aa:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
                                    write_eeprom(real_vol24,(vol_real%10));
 80015ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80015b2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80015b6:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
                                    write_eeprom(real_vol23,(vol_real%10));
 80015ba:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
                                    write_eeprom(real_vol24,(vol_real%10));
 80015be:	eba8 0141 	sub.w	r1, r8, r1, lsl #1
                                    write_eeprom(real_vol23,(vol_real%10));
 80015c2:	eba6 0e4e 	sub.w	lr, r6, lr, lsl #1
 80015c6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80015ca:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
                                    write_eeprom(real_vol25,(vol_real%10));
 80015ce:	f884 2077 	strb.w	r2, [r4, #119]	; 0x77
                                    write_eeprom(real_vol26,(vol_real%10));                                    
 80015d2:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
                                    write_eeprom(real_vol21,(vol_real%10));                                   
 80015d6:	f884 7073 	strb.w	r7, [r4, #115]	; 0x73
                                    write_eeprom(real_vol24,(vol_real%10));
 80015da:	f884 1076 	strb.w	r1, [r4, #118]	; 0x76
                                    write_eeprom(real_vol23,(vol_real%10));
 80015de:	f884 e075 	strb.w	lr, [r4, #117]	; 0x75
                                    write_eeprom(real_vol22,(vol_real%10));
 80015e2:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 80015e6:	f7ff bac5 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                    else if ((palReadPad(GPIOD,IN_8)==1) && (palReadPad(GPIOC,IN_7)==0) && (palReadPad(GPIOC,IN_6) == 0 )) 
 80015ea:	4b52      	ldr	r3, [pc, #328]	; (8001734 <Thread1.lto_priv.65+0x1064>)
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	0459      	lsls	r1, r3, #17
 80015f0:	d57d      	bpl.n	80016ee <Thread1.lto_priv.65+0x101e>
 80015f2:	4b51      	ldr	r3, [pc, #324]	; (8001738 <Thread1.lto_priv.65+0x1068>)
 80015f4:	691a      	ldr	r2, [r3, #16]
 80015f6:	0652      	lsls	r2, r2, #25
 80015f8:	d479      	bmi.n	80016ee <Thread1.lto_priv.65+0x101e>
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	05df      	lsls	r7, r3, #23
 80015fe:	d476      	bmi.n	80016ee <Thread1.lto_priv.65+0x101e>
                        cons_emr3=4; //FUERA TOTAL DE CONSOLA
 8001600:	494e      	ldr	r1, [pc, #312]	; (800173c <Thread1.lto_priv.65+0x106c>)
 8001602:	2204      	movs	r2, #4
                        lcd_out [8]='4';
 8001604:	2334      	movs	r3, #52	; 0x34
                        cons_emr3=4; //FUERA TOTAL DE CONSOLA
 8001606:	700a      	strb	r2, [r1, #0]
                        lcd_out [8]='4';
 8001608:	f88a 3008 	strb.w	r3, [sl, #8]
 800160c:	f7ff b8ff 	b.w	800080e <Thread1.lto_priv.65+0x13e>
                    lcd_out [6] = '.';
 8001610:	232e      	movs	r3, #46	; 0x2e
                    lcd_out [7] = ascii(read_eeprom(ppu2_level1));
 8001612:	79a0      	ldrb	r0, [r4, #6]
                    lcd_out [6] = '.';
 8001614:	f88a 3006 	strb.w	r3, [sl, #6]
                    lcd_out [7] = ascii(read_eeprom(ppu2_level1));
 8001618:	f00d fe82 	bl	800f320 <ascii>
 800161c:	f88a 0007 	strb.w	r0, [sl, #7]
                    lcd_out [8] = ascii(read_eeprom(ppu3_level1));
 8001620:	79e0      	ldrb	r0, [r4, #7]
                    lcd_out [8] = ascii(read_eeprom(ppu3_level1));
 8001622:	f00d fe7d 	bl	800f320 <ascii>
 8001626:	f88a 0008 	strb.w	r0, [sl, #8]
                    lcd_out [9] = ascii(read_eeprom(ppu4_level1));
 800162a:	7a20      	ldrb	r0, [r4, #8]
 800162c:	f00d fe78 	bl	800f320 <ascii>
 8001630:	f88a 0009 	strb.w	r0, [sl, #9]
 8001634:	f7ff bb01 	b.w	8000c3a <Thread1.lto_priv.65+0x56a>
	return (dato_emr3[num]);
 8001638:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
                            if((read_eeprom(estado1) == 0X06 || read_eeprom(estado1) == 0X08) && read_eeprom(pasos1) == 0X00)
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 8279 	beq.w	8001b34 <Thread1.lto_priv.65+0x1464>
                            else if(read_eeprom(pasos1) == 0X0A)
 8001642:	2b0a      	cmp	r3, #10
 8001644:	f000 835b 	beq.w	8001cfe <Thread1.lto_priv.65+0x162e>
 8001648:	f894 6087 	ldrb.w	r6, [r4, #135]	; 0x87
                            if(read_eeprom(pasos1) == 0X02)
 800164c:	2e02      	cmp	r6, #2
 800164e:	f43f ae1e 	beq.w	800128e <Thread1.lto_priv.65+0xbbe>
                            else if (read_eeprom(pasos1) == 0X03)
 8001652:	2e03      	cmp	r6, #3
 8001654:	f000 8232 	beq.w	8001abc <Thread1.lto_priv.65+0x13ec>
                            else if (read_eeprom(pasos1) == 0X04)
 8001658:	2e04      	cmp	r6, #4
 800165a:	f000 8293 	beq.w	8001b84 <Thread1.lto_priv.65+0x14b4>
                            else if(read_eeprom(pasos1) == 0X05)
 800165e:	2e05      	cmp	r6, #5
 8001660:	f000 8494 	beq.w	8001f8c <Thread1.lto_priv.65+0x18bc>
                            else if (read_eeprom(pasos1) == 0X07) 
 8001664:	2e07      	cmp	r6, #7
 8001666:	f000 846b 	beq.w	8001f40 <Thread1.lto_priv.65+0x1870>
                            else if (read_eeprom(pasos1) == 0X08) 
 800166a:	2e08      	cmp	r6, #8
 800166c:	f001 802e 	beq.w	80026cc <Thread1.lto_priv.65+0x1ffc>
                            else if (read_eeprom(pasos1) == 0X0B)
 8001670:	2e0b      	cmp	r6, #11
 8001672:	f041 8151 	bne.w	8002918 <Thread1.lto_priv.65+0x2248>
                                ButtonEmr(HORAS,TURNO);
 8001676:	4b32      	ldr	r3, [pc, #200]	; (8001740 <Thread1.lto_priv.65+0x1070>)
 8001678:	2020      	movs	r0, #32
 800167a:	7819      	ldrb	r1, [r3, #0]
 800167c:	f00b fa60 	bl	800cb40 <ButtonEmr>
                                uartStartReceive(&UARTD1, 10, recibo);
 8001680:	a908      	add	r1, sp, #32
 8001682:	200a      	movs	r0, #10
 8001684:	f00d fc9c 	bl	800efc0 <uartStartReceive.constprop.23>
                                chThdSleepMilliseconds(500);
 8001688:	f241 3088 	movw	r0, #5000	; 0x1388
 800168c:	f00b f9d8 	bl	800ca40 <chThdSleep>
                                uartStopReceive(&UARTD1);
 8001690:	f00d fcf6 	bl	800f080 <uartStopReceive.constprop.21>
                                if(read_eeprom(log) == 1) emr3_log(&recibo,10,2);
 8001694:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8001698:	2b01      	cmp	r3, #1
 800169a:	f001 84e4 	beq.w	8003066 <Thread1.lto_priv.65+0x2996>
                                if(recibo[4] ==  0X69)
 800169e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80016a2:	2b69      	cmp	r3, #105	; 0x69
 80016a4:	f001 84d3 	beq.w	800304e <Thread1.lto_priv.65+0x297e>
                                ButtonEmr(PEDIR_VENTA,TURNO);
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <Thread1.lto_priv.65+0x1070>)
 80016aa:	2024      	movs	r0, #36	; 0x24
 80016ac:	7819      	ldrb	r1, [r3, #0]
 80016ae:	f00b fa47 	bl	800cb40 <ButtonEmr>
                                uartStartReceive(&UARTD1, 23, recibo_parcial);
 80016b2:	a90f      	add	r1, sp, #60	; 0x3c
 80016b4:	2017      	movs	r0, #23
 80016b6:	f00d fc83 	bl	800efc0 <uartStartReceive.constprop.23>
                                chThdSleepMilliseconds(500);
 80016ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80016be:	f00b f9bf 	bl	800ca40 <chThdSleep>
                                uartStopReceive(&UARTD1);
 80016c2:	f00d fcdd 	bl	800f080 <uartStopReceive.constprop.21>
                                if(read_eeprom(log) == 1) emr3_log(&recibo_parcial,15,2);
 80016c6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	f001 84c4 	beq.w	8003058 <Thread1.lto_priv.65+0x2988>
                                if(recibo_parcial[4] == 0x67 && recibo_parcial[14] == 0X7E)
 80016d0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
                                float_data = 0x00;
 80016d4:	4a21      	ldr	r2, [pc, #132]	; (800175c <Thread1.lto_priv.65+0x108c>)
 80016d6:	2000      	movs	r0, #0
 80016d8:	2100      	movs	r1, #0
                                if(recibo_parcial[4] == 0x67 && recibo_parcial[14] == 0X7E)
 80016da:	2b67      	cmp	r3, #103	; 0x67
                                float_data = 0x00;
 80016dc:	e9c2 0100 	strd	r0, r1, [r2]
                                if(recibo_parcial[4] == 0x67 && recibo_parcial[14] == 0X7E)
 80016e0:	f001 82c0 	beq.w	8002c64 <Thread1.lto_priv.65+0x2594>
	dato_emr3[num] = inf;
 80016e4:	230b      	movs	r3, #11
 80016e6:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 80016ea:	f7ff bba6 	b.w	8000e3a <Thread1.lto_priv.65+0x76a>
                        lcd_out [8]= ascii(read_eeprom(consola));
 80016ee:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80016f2:	f00d fe15 	bl	800f320 <ascii>
 80016f6:	f88a 0008 	strb.w	r0, [sl, #8]
 80016fa:	f7ff b888 	b.w	800080e <Thread1.lto_priv.65+0x13e>
                    else if (palReadPad(GPIOE,BUT_2) == 1) sel_pos=2;
 80016fe:	4a18      	ldr	r2, [pc, #96]	; (8001760 <Thread1.lto_priv.65+0x1090>)
 8001700:	6912      	ldr	r2, [r2, #16]
 8001702:	0452      	lsls	r2, r2, #17
 8001704:	d557      	bpl.n	80017b6 <Thread1.lto_priv.65+0x10e6>
 8001706:	4a17      	ldr	r2, [pc, #92]	; (8001764 <Thread1.lto_priv.65+0x1094>)
 8001708:	2302      	movs	r3, #2
 800170a:	7013      	strb	r3, [r2, #0]
                        if ( (palReadPad(GPIOD,IN_8)==0) && (palReadPad(GPIOC,IN_7)==0) && (palReadPad(GPIOC,IN_6) == 0 )) 
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <Thread1.lto_priv.65+0x1064>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	045e      	lsls	r6, r3, #17
 8001712:	f100 82dd 	bmi.w	8001cd0 <Thread1.lto_priv.65+0x1600>
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <Thread1.lto_priv.65+0x1068>)
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	0655      	lsls	r5, r2, #25
 800171c:	f100 82d8 	bmi.w	8001cd0 <Thread1.lto_priv.65+0x1600>
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	05d8      	lsls	r0, r3, #23
 8001724:	f100 82d4 	bmi.w	8001cd0 <Thread1.lto_priv.65+0x1600>
                            POS1_A=0X09;
 8001728:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <Thread1.lto_priv.65+0x1098>)
 800172a:	2309      	movs	r3, #9
 800172c:	7013      	strb	r3, [r2, #0]
 800172e:	f7ff b8cb 	b.w	80008c8 <Thread1.lto_priv.65+0x1f8>
 8001732:	bf00      	nop
 8001734:	40020c00 	.word	0x40020c00
 8001738:	40020800 	.word	0x40020800
 800173c:	20000903 	.word	0x20000903
 8001740:	20000800 	.word	0x20000800
 8001744:	000186a0 	.word	0x000186a0
 8001748:	cccccccd 	.word	0xcccccccd
 800174c:	0a7c5ac5 	.word	0x0a7c5ac5
 8001750:	51eb851f 	.word	0x51eb851f
 8001754:	10624dd3 	.word	0x10624dd3
 8001758:	d1b71759 	.word	0xd1b71759
 800175c:	20000908 	.word	0x20000908
 8001760:	40021000 	.word	0x40021000
 8001764:	20000920 	.word	0x20000920
 8001768:	20000901 	.word	0x20000901
                    else if (palReadPad(GPIOE,BUT_2) == 1) sel_pos=2;
 800176c:	4ac8      	ldr	r2, [pc, #800]	; (8001a90 <Thread1.lto_priv.65+0x13c0>)
 800176e:	6912      	ldr	r2, [r2, #16]
 8001770:	0455      	lsls	r5, r2, #17
 8001772:	f140 80b0 	bpl.w	80018d6 <Thread1.lto_priv.65+0x1206>
 8001776:	4ac7      	ldr	r2, [pc, #796]	; (8001a94 <Thread1.lto_priv.65+0x13c4>)
 8001778:	2302      	movs	r3, #2
 800177a:	7013      	strb	r3, [r2, #0]
                        if ( (palReadPad(GPIOD,IN_8) == 0) && (palReadPad(GPIOC,IN_7) == 0) && (palReadPad(GPIOC,IN_6) == 0 )) 
 800177c:	4bc6      	ldr	r3, [pc, #792]	; (8001a98 <Thread1.lto_priv.65+0x13c8>)
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	0459      	lsls	r1, r3, #17
 8001782:	f100 8336 	bmi.w	8001df2 <Thread1.lto_priv.65+0x1722>
 8001786:	4bc5      	ldr	r3, [pc, #788]	; (8001a9c <Thread1.lto_priv.65+0x13cc>)
 8001788:	691a      	ldr	r2, [r3, #16]
 800178a:	0652      	lsls	r2, r2, #25
 800178c:	f100 8331 	bmi.w	8001df2 <Thread1.lto_priv.65+0x1722>
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	05df      	lsls	r7, r3, #23
 8001794:	f100 832d 	bmi.w	8001df2 <Thread1.lto_priv.65+0x1722>
                            POS2_A=0X09;
 8001798:	4ac1      	ldr	r2, [pc, #772]	; (8001aa0 <Thread1.lto_priv.65+0x13d0>)
 800179a:	2309      	movs	r3, #9
 800179c:	7013      	strb	r3, [r2, #0]
 800179e:	f7ff b8fc 	b.w	800099a <Thread1.lto_priv.65+0x2ca>
                    lcd_out [6] = ascii(read_eeprom(ppu2_level1));
 80017a2:	79a0      	ldrb	r0, [r4, #6]
 80017a4:	f00d fdbc 	bl	800f320 <ascii>
                    lcd_out [7] = '.';
 80017a8:	232e      	movs	r3, #46	; 0x2e
                    lcd_out [6] = ascii(read_eeprom(ppu2_level1));
 80017aa:	f88a 0006 	strb.w	r0, [sl, #6]
                    lcd_out [7] = '.';
 80017ae:	f88a 3007 	strb.w	r3, [sl, #7]
                    lcd_out [8] = ascii(read_eeprom(ppu3_level1));
 80017b2:	79e0      	ldrb	r0, [r4, #7]
 80017b4:	e735      	b.n	8001622 <Thread1.lto_priv.65+0xf52>
                    if (sel_pos == 0)
 80017b6:	4ab7      	ldr	r2, [pc, #732]	; (8001a94 <Thread1.lto_priv.65+0x13c4>)
 80017b8:	7812      	ldrb	r2, [r2, #0]
 80017ba:	b19a      	cbz	r2, 80017e4 <Thread1.lto_priv.65+0x1114>
                    else if (sel_pos == 1)
 80017bc:	2a01      	cmp	r2, #1
 80017be:	f43f a872 	beq.w	80008a6 <Thread1.lto_priv.65+0x1d6>
                    else if (sel_pos == 2)
 80017c2:	2a02      	cmp	r2, #2
 80017c4:	d0a2      	beq.n	800170c <Thread1.lto_priv.65+0x103c>
 80017c6:	4bb7      	ldr	r3, [pc, #732]	; (8001aa4 <Thread1.lto_priv.65+0x13d4>)
 80017c8:	7818      	ldrb	r0, [r3, #0]
                    if(POS1_A == read_eeprom(pos2))  
 80017ca:	78e3      	ldrb	r3, [r4, #3]
 80017cc:	4283      	cmp	r3, r0
 80017ce:	f47f a880 	bne.w	80008d2 <Thread1.lto_priv.65+0x202>
                        if(POS1_A == 0X0F) POS1_A=0X00;
 80017d2:	280f      	cmp	r0, #15
 80017d4:	f000 86da 	beq.w	800258c <Thread1.lto_priv.65+0x1ebc>
                        else POS1_A++;
 80017d8:	3001      	adds	r0, #1
 80017da:	4bb2      	ldr	r3, [pc, #712]	; (8001aa4 <Thread1.lto_priv.65+0x13d4>)
 80017dc:	b2c0      	uxtb	r0, r0
 80017de:	7018      	strb	r0, [r3, #0]
 80017e0:	f7ff b877 	b.w	80008d2 <Thread1.lto_priv.65+0x202>
                        POS1_A = read_eeprom(pos1);
 80017e4:	4baf      	ldr	r3, [pc, #700]	; (8001aa4 <Thread1.lto_priv.65+0x13d4>)
	return (dato_emr3[num]);
 80017e6:	7860      	ldrb	r0, [r4, #1]
 80017e8:	7018      	strb	r0, [r3, #0]
 80017ea:	e7ee      	b.n	80017ca <Thread1.lto_priv.65+0x10fa>
                                punto = mult(read_eeprom(pppu));
 80017ec:	7920      	ldrb	r0, [r4, #4]
 80017ee:	f00c fe77 	bl	800e4e0 <mult>
                                valor = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 80017f2:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 80017f6:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
 80017fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                punto = mult(read_eeprom(pppu));
 8001802:	4601      	mov	r1, r0
                                valor = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	f894 0093 	ldrb.w	r0, [r4, #147]	; 0x93
 800180a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800180e:	fb05 3202 	mla	r2, r5, r2, r3
 8001812:	f894 5094 	ldrb.w	r5, [r4, #148]	; 0x94
 8001816:	230a      	movs	r3, #10
 8001818:	fb13 2300 	smlabb	r3, r3, r0, r2
 800181c:	442b      	add	r3, r5
                                f_pf(valor,valor_float,1);
 800181e:	2201      	movs	r2, #1
                                valor_float = valor%punto;
 8001820:	fbb3 f0f1 	udiv	r0, r3, r1
                                f_pf(valor,valor_float,1);
 8001824:	fb01 3110 	mls	r1, r1, r0, r3
 8001828:	f00c ff52 	bl	800e6d0 <f_pf>
                                ButtonEmr(ENVIAR_PPU,TURNO);
 800182c:	4b9e      	ldr	r3, [pc, #632]	; (8001aa8 <Thread1.lto_priv.65+0x13d8>)
 800182e:	201c      	movs	r0, #28
 8001830:	7819      	ldrb	r1, [r3, #0]
 8001832:	f00b f985 	bl	800cb40 <ButtonEmr>
                                data_recibo(7);
 8001836:	f00d ff13 	bl	800f660 <data_recibo.constprop.1>
                                if(aux_pasos != 0x00)
 800183a:	4b9c      	ldr	r3, [pc, #624]	; (8001aac <Thread1.lto_priv.65+0x13dc>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 81f1 	beq.w	8001c26 <Thread1.lto_priv.65+0x1556>
                                    if(aux_pasos == 0x02)
 8001844:	2b02      	cmp	r3, #2
 8001846:	f000 86a6 	beq.w	8002596 <Thread1.lto_priv.65+0x1ec6>
	dato_emr3[num] = inf;
 800184a:	f884 6088 	strb.w	r6, [r4, #136]	; 0x88
 800184e:	f7ff b991 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                else if (palReadPad(GPIOB,IN_5) == 1 && read_eeprom(pos1) != POS1_A)
 8001852:	4b94      	ldr	r3, [pc, #592]	; (8001aa4 <Thread1.lto_priv.65+0x13d4>)
 8001854:	7862      	ldrb	r2, [r4, #1]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	f000 8340 	beq.w	8001ede <Thread1.lto_priv.65+0x180e>
                    Status_1(0x06);
 800185e:	2006      	movs	r0, #6
 8001860:	7063      	strb	r3, [r4, #1]
 8001862:	f00b ffcd 	bl	800d800 <Status_1>
                    LCDPrintRow2( 0,"  SAVE ADDRESS  ");
 8001866:	4892      	ldr	r0, [pc, #584]	; (8001ab0 <Thread1.lto_priv.65+0x13e0>)
 8001868:	f884 5082 	strb.w	r5, [r4, #130]	; 0x82
 800186c:	f00d fed8 	bl	800f620 <LCDPrintRow2.constprop.2>
                    chThdSleepMilliseconds(500);
 8001870:	f241 3088 	movw	r0, #5000	; 0x1388
 8001874:	f00b f8e4 	bl	800ca40 <chThdSleep>
                    sel_pos=0;
 8001878:	4a86      	ldr	r2, [pc, #536]	; (8001a94 <Thread1.lto_priv.65+0x13c4>)
 800187a:	2300      	movs	r3, #0
 800187c:	7013      	strb	r3, [r2, #0]
 800187e:	f7fe bf8d 	b.w	800079c <Thread1.lto_priv.65+0xcc>
                            ButtonEmr(ESTADO_DISPLAY,TURNO);
 8001882:	4631      	mov	r1, r6
 8001884:	2003      	movs	r0, #3
 8001886:	f00b f95b 	bl	800cb40 <ButtonEmr>
                            uartStartReceive(&UARTD1, 8, recibo);
 800188a:	a908      	add	r1, sp, #32
 800188c:	2008      	movs	r0, #8
 800188e:	f00d fb97 	bl	800efc0 <uartStartReceive.constprop.23>
                            chThdSleepMilliseconds(500);
 8001892:	f241 3088 	movw	r0, #5000	; 0x1388
 8001896:	f00b f8d3 	bl	800ca40 <chThdSleep>
                            uartStopReceive(&UARTD1);
 800189a:	f00d fbf1 	bl	800f080 <uartStopReceive.constprop.21>
                            if(recibo[0X04] == 0X08)
 800189e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	f47f a966 	bne.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                                if(recibo[0X05] != 0X02) 
 80018a8:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	f43f a961 	beq.w	8000b74 <Thread1.lto_priv.65+0x4a4>
 80018b2:	210b      	movs	r1, #11
 80018b4:	2200      	movs	r2, #0
                                    if(recibo[0X05] == 0x04)
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	f884 1088 	strb.w	r1, [r4, #136]	; 0x88
 80018bc:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
 80018c0:	f47f a958 	bne.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                                        ButtonEmr(TECLADO_FIN,TURNO);
 80018c4:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <Thread1.lto_priv.65+0x13d8>)
 80018c6:	7819      	ldrb	r1, [r3, #0]
 80018c8:	4630      	mov	r0, r6
 80018ca:	f00b f939 	bl	800cb40 <ButtonEmr>
                                        data_recibo(7);
 80018ce:	f00d fec7 	bl	800f660 <data_recibo.constprop.1>
 80018d2:	f7ff b94f 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                    if(sel_pos == 0)
 80018d6:	4a6f      	ldr	r2, [pc, #444]	; (8001a94 <Thread1.lto_priv.65+0x13c4>)
 80018d8:	7812      	ldrb	r2, [r2, #0]
 80018da:	b1a2      	cbz	r2, 8001906 <Thread1.lto_priv.65+0x1236>
                    else if (sel_pos==1)
 80018dc:	2a01      	cmp	r2, #1
 80018de:	f43f a84b 	beq.w	8000978 <Thread1.lto_priv.65+0x2a8>
                    else if (sel_pos == 2)
 80018e2:	2a02      	cmp	r2, #2
 80018e4:	f43f af4a 	beq.w	800177c <Thread1.lto_priv.65+0x10ac>
 80018e8:	4b6d      	ldr	r3, [pc, #436]	; (8001aa0 <Thread1.lto_priv.65+0x13d0>)
 80018ea:	7818      	ldrb	r0, [r3, #0]
                    if(POS2_A == read_eeprom(pos1))  
 80018ec:	7863      	ldrb	r3, [r4, #1]
 80018ee:	4283      	cmp	r3, r0
 80018f0:	f47e afef 	bne.w	80008d2 <Thread1.lto_priv.65+0x202>
                        if(POS2_A == 0X0F) POS2_A=0X00;
 80018f4:	280f      	cmp	r0, #15
 80018f6:	f000 866e 	beq.w	80025d6 <Thread1.lto_priv.65+0x1f06>
                        else POS2_A++;
 80018fa:	3001      	adds	r0, #1
 80018fc:	4b68      	ldr	r3, [pc, #416]	; (8001aa0 <Thread1.lto_priv.65+0x13d0>)
 80018fe:	b2c0      	uxtb	r0, r0
 8001900:	7018      	strb	r0, [r3, #0]
 8001902:	f7fe bfe6 	b.w	80008d2 <Thread1.lto_priv.65+0x202>
                        POS2_A = read_eeprom(pos2);
 8001906:	4b66      	ldr	r3, [pc, #408]	; (8001aa0 <Thread1.lto_priv.65+0x13d0>)
	return (dato_emr3[num]);
 8001908:	78e0      	ldrb	r0, [r4, #3]
 800190a:	7018      	strb	r0, [r3, #0]
 800190c:	e7ee      	b.n	80018ec <Thread1.lto_priv.65+0x121c>
                    lcd_out [6] = ascii(read_eeprom(ppu2_level1));
 800190e:	79a0      	ldrb	r0, [r4, #6]
 8001910:	f00d fd06 	bl	800f320 <ascii>
 8001914:	f88a 0006 	strb.w	r0, [sl, #6]
                    lcd_out [7] = ascii(read_eeprom(ppu3_level1));
 8001918:	79e0      	ldrb	r0, [r4, #7]
 800191a:	f00d fd01 	bl	800f320 <ascii>
                    lcd_out [8] = '.';
 800191e:	232e      	movs	r3, #46	; 0x2e
                    lcd_out [7] = ascii(read_eeprom(ppu3_level1));
 8001920:	f88a 0007 	strb.w	r0, [sl, #7]
                    lcd_out [9] = ascii(read_eeprom(ppu4_level1));
 8001924:	7a20      	ldrb	r0, [r4, #8]
                    lcd_out [8] = '.';
 8001926:	f88a 3008 	strb.w	r3, [sl, #8]
                    lcd_out [9] = ascii(read_eeprom(ppu4_level1));
 800192a:	f00d fcf9 	bl	800f320 <ascii>
 800192e:	f88a 0009 	strb.w	r0, [sl, #9]
 8001932:	f7ff b982 	b.w	8000c3a <Thread1.lto_priv.65+0x56a>
                else if (palReadPad(GPIOB,IN_5) == 1 && read_eeprom(consola) != cons_emr3)
 8001936:	4b5f      	ldr	r3, [pc, #380]	; (8001ab4 <Thread1.lto_priv.65+0x13e4>)
 8001938:	781a      	ldrb	r2, [r3, #0]
 800193a:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 800193e:	429a      	cmp	r2, r3
 8001940:	f000 8267 	beq.w	8001e12 <Thread1.lto_priv.65+0x1742>
                    LCDPrintRow2( 0,"  SAVE CONSOLE  ");
 8001944:	485c      	ldr	r0, [pc, #368]	; (8001ab8 <Thread1.lto_priv.65+0x13e8>)
 8001946:	f00d fe6b 	bl	800f620 <LCDPrintRow2.constprop.2>
	dato_emr3[num] = inf;
 800194a:	4b5a      	ldr	r3, [pc, #360]	; (8001ab4 <Thread1.lto_priv.65+0x13e4>)
                    Status_1(0x06);
 800194c:	2006      	movs	r0, #6
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8001954:	f00b ff54 	bl	800d800 <Status_1>
                    if(cons_emr3 == 3)
 8001958:	4b56      	ldr	r3, [pc, #344]	; (8001ab4 <Thread1.lto_priv.65+0x13e4>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b03      	cmp	r3, #3
 800195e:	f002 85b3 	beq.w	80044c8 <Thread1.lto_priv.65+0x3df8>
                    else if  (cons_emr3 == 1 || cons_emr3 == 2 || cons_emr3 == 4)
 8001962:	1e5a      	subs	r2, r3, #1
 8001964:	2a01      	cmp	r2, #1
 8001966:	f240 83bf 	bls.w	80020e8 <Thread1.lto_priv.65+0x1a18>
 800196a:	2b04      	cmp	r3, #4
 800196c:	f000 83bc 	beq.w	80020e8 <Thread1.lto_priv.65+0x1a18>
 8001970:	2301      	movs	r3, #1
 8001972:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 8001976:	f7fe bf11 	b.w	800079c <Thread1.lto_priv.65+0xcc>
                else if (palReadPad(GPIOB,IN_5) == 1 && read_eeprom(pos2) != POS2_A)
 800197a:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <Thread1.lto_priv.65+0x13d0>)
 800197c:	78e2      	ldrb	r2, [r4, #3]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	f000 81b5 	beq.w	8001cf0 <Thread1.lto_priv.65+0x1620>
                    Status_2(0x06);
 8001986:	2006      	movs	r0, #6
 8001988:	70e3      	strb	r3, [r4, #3]
 800198a:	f00b ff29 	bl	800d7e0 <Status_2>
                    LCDPrintRow2( 0,"  SAVE ADDRESS  ");
 800198e:	4848      	ldr	r0, [pc, #288]	; (8001ab0 <Thread1.lto_priv.65+0x13e0>)
 8001990:	f884 5082 	strb.w	r5, [r4, #130]	; 0x82
 8001994:	f00d fe44 	bl	800f620 <LCDPrintRow2.constprop.2>
 8001998:	e76a      	b.n	8001870 <Thread1.lto_priv.65+0x11a0>
                            ButtonEmr(ESTADO_DISPLAY,TURNO);
 800199a:	2003      	movs	r0, #3
 800199c:	f00b f8d0 	bl	800cb40 <ButtonEmr>
                            uartStartReceive(&UARTD1, 8, recibo);
 80019a0:	a908      	add	r1, sp, #32
 80019a2:	2008      	movs	r0, #8
 80019a4:	f00d fb0c 	bl	800efc0 <uartStartReceive.constprop.23>
                            chThdSleepMilliseconds(500);
 80019a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80019ac:	f00b f848 	bl	800ca40 <chThdSleep>
                            uartStopReceive(&UARTD1);
 80019b0:	f00d fb66 	bl	800f080 <uartStopReceive.constprop.21>
                            if(recibo[0X04] == 0X08)
 80019b4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	f47f aa3e 	bne.w	8000e3a <Thread1.lto_priv.65+0x76a>
                                if(recibo[0X05] != 0X02) 
 80019be:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	f43f aa39 	beq.w	8000e3a <Thread1.lto_priv.65+0x76a>
 80019c8:	210b      	movs	r1, #11
 80019ca:	2200      	movs	r2, #0
                                    if(recibo[0X05] == 0x04)
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	f884 1087 	strb.w	r1, [r4, #135]	; 0x87
 80019d2:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
 80019d6:	f47f aa30 	bne.w	8000e3a <Thread1.lto_priv.65+0x76a>
                                        ButtonEmr(TECLADO_FIN,TURNO);
 80019da:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <Thread1.lto_priv.65+0x13d8>)
 80019dc:	7819      	ldrb	r1, [r3, #0]
 80019de:	2002      	movs	r0, #2
 80019e0:	f00b f8ae 	bl	800cb40 <ButtonEmr>
                                        data_recibo(7);
 80019e4:	f00d fe3c 	bl	800f660 <data_recibo.constprop.1>
 80019e8:	f7ff ba27 	b.w	8000e3a <Thread1.lto_priv.65+0x76a>
                    lcd_out [6] = ascii(read_eeprom(ppu2_level1));
 80019ec:	79a0      	ldrb	r0, [r4, #6]
 80019ee:	f00d fc97 	bl	800f320 <ascii>
 80019f2:	f88a 0006 	strb.w	r0, [sl, #6]
                    lcd_out [7] = ascii(read_eeprom(ppu3_level1));
 80019f6:	79e0      	ldrb	r0, [r4, #7]
 80019f8:	f00d fc92 	bl	800f320 <ascii>
 80019fc:	f88a 0007 	strb.w	r0, [sl, #7]
                    lcd_out [8] = ascii(read_eeprom(ppu4_level1));
 8001a00:	7a20      	ldrb	r0, [r4, #8]
 8001a02:	f00d fc8d 	bl	800f320 <ascii>
                    lcd_out [9] = '.';
 8001a06:	232e      	movs	r3, #46	; 0x2e
                    lcd_out [8] = ascii(read_eeprom(ppu4_level1));
 8001a08:	f88a 0008 	strb.w	r0, [sl, #8]
                    lcd_out [9] = '.';
 8001a0c:	f88a 3009 	strb.w	r3, [sl, #9]
 8001a10:	f7ff b913 	b.w	8000c3a <Thread1.lto_priv.65+0x56a>
                                punto = mult(read_eeprom(pppu));
 8001a14:	7920      	ldrb	r0, [r4, #4]
 8001a16:	f00c fd63 	bl	800e4e0 <mult>
                                valor = ((read_eeprom(ppu1_level1)*1000) + (read_eeprom(ppu2_level1)*100) + (read_eeprom(ppu3_level1)*10) + (read_eeprom(ppu4_level1)*1));
 8001a1a:	79a3      	ldrb	r3, [r4, #6]
 8001a1c:	7962      	ldrb	r2, [r4, #5]
 8001a1e:	79e6      	ldrb	r6, [r4, #7]
 8001a20:	7a21      	ldrb	r1, [r4, #8]
 8001a22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8001a30:	fb07 3202 	mla	r2, r7, r2, r3
 8001a34:	230a      	movs	r3, #10
 8001a36:	fb13 2306 	smlabb	r3, r3, r6, r2
 8001a3a:	440b      	add	r3, r1
                                valor_float=valor%punto;
 8001a3c:	fbb3 f2f0 	udiv	r2, r3, r0
 8001a40:	fb00 3312 	mls	r3, r0, r2, r3
                                valor=valor/punto;
 8001a44:	9201      	str	r2, [sp, #4]
                                f_pf(valor,valor_float,1);
 8001a46:	4619      	mov	r1, r3
 8001a48:	4610      	mov	r0, r2
 8001a4a:	2201      	movs	r2, #1
                                valor_float=valor%punto;
 8001a4c:	9302      	str	r3, [sp, #8]
                                f_pf(valor,valor_float,1);
 8001a4e:	f00c fe3f 	bl	800e6d0 <f_pf>
                                ButtonEmr(ENVIAR_PPU,TURNO);
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <Thread1.lto_priv.65+0x13d8>)
 8001a54:	201c      	movs	r0, #28
 8001a56:	7819      	ldrb	r1, [r3, #0]
 8001a58:	f00b f872 	bl	800cb40 <ButtonEmr>
                                data_recibo(7); 
 8001a5c:	f00d fe00 	bl	800f660 <data_recibo.constprop.1>
 8001a60:	f7ff bb18 	b.w	8001094 <Thread1.lto_priv.65+0x9c4>
	return (dato_emr3[num]);
 8001a64:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
                                if(read_eeprom(preset_2) == 1)
 8001a68:	2d01      	cmp	r5, #1
 8001a6a:	f000 848c 	beq.w	8002386 <Thread1.lto_priv.65+0x1cb6>
                                else if(read_eeprom(preset_2) == 2)
 8001a6e:	2d02      	cmp	r5, #2
 8001a70:	f000 8411 	beq.w	8002296 <Thread1.lto_priv.65+0x1bc6>
                                else if(read_eeprom(preset_2) == 0) 
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	f000 83be 	beq.w	80021f6 <Thread1.lto_priv.65+0x1b26>
                                if(aux_pasos != 0x00)
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <Thread1.lto_priv.65+0x13dc>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 827f 	beq.w	8001f82 <Thread1.lto_priv.65+0x18b2>
	dato_emr3[num] = inf;
 8001a84:	2304      	movs	r3, #4
 8001a86:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 8001a8a:	f7ff b873 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	20000920 	.word	0x20000920
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	20000902 	.word	0x20000902
 8001aa4:	20000901 	.word	0x20000901
 8001aa8:	20000800 	.word	0x20000800
 8001aac:	20001c70 	.word	0x20001c70
 8001ab0:	0800f6f4 	.word	0x0800f6f4
 8001ab4:	20000903 	.word	0x20000903
 8001ab8:	0800f744 	.word	0x0800f744
                                punto = mult(read_eeprom(pppu));
 8001abc:	7920      	ldrb	r0, [r4, #4]
 8001abe:	f00c fd0f 	bl	800e4e0 <mult>
                                valor = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8001ac2:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8001ac6:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
 8001aca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ace:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                punto = mult(read_eeprom(pppu));
 8001ad2:	4601      	mov	r1, r0
                                valor = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	f894 008f 	ldrb.w	r0, [r4, #143]	; 0x8f
 8001ada:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001ade:	fb05 3202 	mla	r2, r5, r2, r3
 8001ae2:	f894 5090 	ldrb.w	r5, [r4, #144]	; 0x90
 8001ae6:	230a      	movs	r3, #10
 8001ae8:	fb13 2300 	smlabb	r3, r3, r0, r2
 8001aec:	442b      	add	r3, r5
                                f_pf(valor,valor_float,1);
 8001aee:	2201      	movs	r2, #1
                                valor_float = valor%punto;
 8001af0:	fbb3 f0f1 	udiv	r0, r3, r1
                                f_pf(valor,valor_float,1);
 8001af4:	fb01 3110 	mls	r1, r1, r0, r3
 8001af8:	f00c fdea 	bl	800e6d0 <f_pf>
                                ButtonEmr(ENVIAR_PPU,TURNO);
 8001afc:	4bad      	ldr	r3, [pc, #692]	; (8001db4 <Thread1.lto_priv.65+0x16e4>)
 8001afe:	201c      	movs	r0, #28
 8001b00:	7819      	ldrb	r1, [r3, #0]
 8001b02:	f00b f81d 	bl	800cb40 <ButtonEmr>
                                data_recibo(7);
 8001b06:	f00d fdab 	bl	800f660 <data_recibo.constprop.1>
                                if(aux_pasos != 0x00)
 8001b0a:	4bab      	ldr	r3, [pc, #684]	; (8001db8 <Thread1.lto_priv.65+0x16e8>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 811d 	beq.w	8001d4e <Thread1.lto_priv.65+0x167e>
                                    if(aux_pasos == 0x02)
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	f884 6087 	strb.w	r6, [r4, #135]	; 0x87
 8001b1a:	f47f a98e 	bne.w	8000e3a <Thread1.lto_priv.65+0x76a>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2206      	movs	r2, #6
 8001b22:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 8001b26:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 8001b2a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8001b2e:	7022      	strb	r2, [r4, #0]
 8001b30:	f7ff b983 	b.w	8000e3a <Thread1.lto_priv.65+0x76a>
                                punto = mult(read_eeprom(pppu));
 8001b34:	7920      	ldrb	r0, [r4, #4]
 8001b36:	f00c fcd3 	bl	800e4e0 <mult>
                                valor = ((read_eeprom(ppu1_level1)*1000) + (read_eeprom(ppu2_level1)*100) + (read_eeprom(ppu3_level1)*10) + (read_eeprom(ppu4_level1)*1));
 8001b3a:	79a3      	ldrb	r3, [r4, #6]
 8001b3c:	7962      	ldrb	r2, [r4, #5]
 8001b3e:	79e6      	ldrb	r6, [r4, #7]
 8001b40:	7a21      	ldrb	r1, [r4, #8]
 8001b42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8001b50:	fb07 3202 	mla	r2, r7, r2, r3
 8001b54:	230a      	movs	r3, #10
 8001b56:	fb13 2306 	smlabb	r3, r3, r6, r2
 8001b5a:	440b      	add	r3, r1
                                valor_float=valor%punto;
 8001b5c:	fbb3 f2f0 	udiv	r2, r3, r0
 8001b60:	fb00 3312 	mls	r3, r0, r2, r3
                                valor=valor/punto;
 8001b64:	9201      	str	r2, [sp, #4]
                                f_pf(valor,valor_float,1);
 8001b66:	4619      	mov	r1, r3
 8001b68:	4610      	mov	r0, r2
 8001b6a:	2201      	movs	r2, #1
                                valor_float=valor%punto;
 8001b6c:	9302      	str	r3, [sp, #8]
                                f_pf(valor,valor_float,1);
 8001b6e:	f00c fdaf 	bl	800e6d0 <f_pf>
                                ButtonEmr(ENVIAR_PPU,TURNO);
 8001b72:	4b90      	ldr	r3, [pc, #576]	; (8001db4 <Thread1.lto_priv.65+0x16e4>)
 8001b74:	201c      	movs	r0, #28
 8001b76:	7819      	ldrb	r1, [r3, #0]
 8001b78:	f00a ffe2 	bl	800cb40 <ButtonEmr>
                                data_recibo(7); 
 8001b7c:	f00d fd70 	bl	800f660 <data_recibo.constprop.1>
 8001b80:	f7ff bb37 	b.w	80011f2 <Thread1.lto_priv.65+0xb22>
	return (dato_emr3[num]);
 8001b84:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
                                if(read_eeprom(preset_1) == 1)
 8001b88:	2d01      	cmp	r5, #1
 8001b8a:	f000 84b3 	beq.w	80024f4 <Thread1.lto_priv.65+0x1e24>
                                else if(read_eeprom(preset_1) == 2)
 8001b8e:	2d02      	cmp	r5, #2
 8001b90:	f000 8438 	beq.w	8002404 <Thread1.lto_priv.65+0x1d34>
                                else if(read_eeprom(preset_1) == 0) 
 8001b94:	2d00      	cmp	r5, #0
 8001b96:	f002 836d 	beq.w	8004274 <Thread1.lto_priv.65+0x3ba4>
                                if(aux_pasos != 0x00)
 8001b9a:	4b87      	ldr	r3, [pc, #540]	; (8001db8 <Thread1.lto_priv.65+0x16e8>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 841e 	beq.w	80023e0 <Thread1.lto_priv.65+0x1d10>
	dato_emr3[num] = inf;
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 8001baa:	f7ff b946 	b.w	8000e3a <Thread1.lto_priv.65+0x76a>
                        else if ( (palReadPad(GPIOD,IN_8) == 0) && (palReadPad(GPIOC,IN_7) == 0) && (palReadPad(GPIOC,IN_6) == 1) ) 
 8001bae:	4a83      	ldr	r2, [pc, #524]	; (8001dbc <Thread1.lto_priv.65+0x16ec>)
 8001bb0:	6912      	ldr	r2, [r2, #16]
 8001bb2:	0450      	lsls	r0, r2, #17
 8001bb4:	d414      	bmi.n	8001be0 <Thread1.lto_priv.65+0x1510>
 8001bb6:	4a82      	ldr	r2, [pc, #520]	; (8001dc0 <Thread1.lto_priv.65+0x16f0>)
 8001bb8:	6911      	ldr	r1, [r2, #16]
 8001bba:	0649      	lsls	r1, r1, #25
 8001bbc:	d410      	bmi.n	8001be0 <Thread1.lto_priv.65+0x1510>
 8001bbe:	6912      	ldr	r2, [r2, #16]
 8001bc0:	05d2      	lsls	r2, r2, #23
 8001bc2:	d50d      	bpl.n	8001be0 <Thread1.lto_priv.65+0x1510>
                            POS1_A=0X02;
 8001bc4:	4a7f      	ldr	r2, [pc, #508]	; (8001dc4 <Thread1.lto_priv.65+0x16f4>)
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	7013      	strb	r3, [r2, #0]
 8001bca:	f7fe be7d 	b.w	80008c8 <Thread1.lto_priv.65+0x1f8>
                                if(read_eeprom(estado2) == 0x09)
 8001bce:	78a5      	ldrb	r5, [r4, #2]
 8001bd0:	2d09      	cmp	r5, #9
 8001bd2:	f000 822b 	beq.w	800202c <Thread1.lto_priv.65+0x195c>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 8001bdc:	f7fe bfca 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                        else if ( (!palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (!palReadPad(GPIOC,IN_6)) ) 
 8001be0:	4a76      	ldr	r2, [pc, #472]	; (8001dbc <Thread1.lto_priv.65+0x16ec>)
 8001be2:	6912      	ldr	r2, [r2, #16]
 8001be4:	0457      	lsls	r7, r2, #17
 8001be6:	f100 819b 	bmi.w	8001f20 <Thread1.lto_priv.65+0x1850>
 8001bea:	4a75      	ldr	r2, [pc, #468]	; (8001dc0 <Thread1.lto_priv.65+0x16f0>)
 8001bec:	6911      	ldr	r1, [r2, #16]
 8001bee:	064e      	lsls	r6, r1, #25
 8001bf0:	f140 8196 	bpl.w	8001f20 <Thread1.lto_priv.65+0x1850>
 8001bf4:	6912      	ldr	r2, [r2, #16]
 8001bf6:	05d5      	lsls	r5, r2, #23
 8001bf8:	f100 8192 	bmi.w	8001f20 <Thread1.lto_priv.65+0x1850>
                            POS1_A=0X03;
 8001bfc:	4a71      	ldr	r2, [pc, #452]	; (8001dc4 <Thread1.lto_priv.65+0x16f4>)
 8001bfe:	2303      	movs	r3, #3
 8001c00:	7013      	strb	r3, [r2, #0]
 8001c02:	f7fe be61 	b.w	80008c8 <Thread1.lto_priv.65+0x1f8>
                        else if ( (palReadPad(GPIOD,IN_8) == 0) && (palReadPad(GPIOC,IN_7) == 0) && (palReadPad(GPIOC,IN_6) == 1) ) 
 8001c06:	4a6d      	ldr	r2, [pc, #436]	; (8001dbc <Thread1.lto_priv.65+0x16ec>)
 8001c08:	6912      	ldr	r2, [r2, #16]
 8001c0a:	0457      	lsls	r7, r2, #17
 8001c0c:	d41f      	bmi.n	8001c4e <Thread1.lto_priv.65+0x157e>
 8001c0e:	4a6c      	ldr	r2, [pc, #432]	; (8001dc0 <Thread1.lto_priv.65+0x16f0>)
 8001c10:	6911      	ldr	r1, [r2, #16]
 8001c12:	064e      	lsls	r6, r1, #25
 8001c14:	d41b      	bmi.n	8001c4e <Thread1.lto_priv.65+0x157e>
 8001c16:	6912      	ldr	r2, [r2, #16]
 8001c18:	05d5      	lsls	r5, r2, #23
 8001c1a:	d518      	bpl.n	8001c4e <Thread1.lto_priv.65+0x157e>
                            POS2_A=0X02;
 8001c1c:	4a6a      	ldr	r2, [pc, #424]	; (8001dc8 <Thread1.lto_priv.65+0x16f8>)
 8001c1e:	2302      	movs	r3, #2
 8001c20:	7013      	strb	r3, [r2, #0]
 8001c22:	f7fe beba 	b.w	800099a <Thread1.lto_priv.65+0x2ca>
                                    sd_venta(TURNO);
 8001c26:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <Thread1.lto_priv.65+0x16e4>)
 8001c28:	7818      	ldrb	r0, [r3, #0]
 8001c2a:	f009 fbd9 	bl	800b3e0 <sd_venta>
                                    ButtonEmr(TECLADO_INICIO,TURNO);
 8001c2e:	4a61      	ldr	r2, [pc, #388]	; (8001db4 <Thread1.lto_priv.65+0x16e4>)
 8001c30:	2304      	movs	r3, #4
 8001c32:	7811      	ldrb	r1, [r2, #0]
 8001c34:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 8001c38:	2007      	movs	r0, #7
 8001c3a:	f00a ff81 	bl	800cb40 <ButtonEmr>
                                    data_recibo(7);
 8001c3e:	f00d fd0f 	bl	800f660 <data_recibo.constprop.1>
                                    chThdSleepMilliseconds(300);
 8001c42:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c46:	f00a fefb 	bl	800ca40 <chThdSleep>
 8001c4a:	f7fe bf93 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                        else if ( (!palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (!palReadPad(GPIOC,IN_6)) ) 
 8001c4e:	4a5b      	ldr	r2, [pc, #364]	; (8001dbc <Thread1.lto_priv.65+0x16ec>)
 8001c50:	6912      	ldr	r2, [r2, #16]
 8001c52:	0450      	lsls	r0, r2, #17
 8001c54:	d42c      	bmi.n	8001cb0 <Thread1.lto_priv.65+0x15e0>
 8001c56:	4a5a      	ldr	r2, [pc, #360]	; (8001dc0 <Thread1.lto_priv.65+0x16f0>)
 8001c58:	6911      	ldr	r1, [r2, #16]
 8001c5a:	0649      	lsls	r1, r1, #25
 8001c5c:	d528      	bpl.n	8001cb0 <Thread1.lto_priv.65+0x15e0>
 8001c5e:	6912      	ldr	r2, [r2, #16]
 8001c60:	05d2      	lsls	r2, r2, #23
 8001c62:	d425      	bmi.n	8001cb0 <Thread1.lto_priv.65+0x15e0>
                            POS2_A=0X03;
 8001c64:	4a58      	ldr	r2, [pc, #352]	; (8001dc8 <Thread1.lto_priv.65+0x16f8>)
 8001c66:	2303      	movs	r3, #3
 8001c68:	7013      	strb	r3, [r2, #0]
 8001c6a:	f7fe be96 	b.w	800099a <Thread1.lto_priv.65+0x2ca>
                                ButtonEmr(FECHAS,TURNO);
 8001c6e:	4a51      	ldr	r2, [pc, #324]	; (8001db4 <Thread1.lto_priv.65+0x16e4>)
 8001c70:	2308      	movs	r3, #8
 8001c72:	7811      	ldrb	r1, [r2, #0]
 8001c74:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 8001c78:	2021      	movs	r0, #33	; 0x21
 8001c7a:	f00a ff61 	bl	800cb40 <ButtonEmr>
                                uartStartReceive(&UARTD1, 11, recibo);
 8001c7e:	a908      	add	r1, sp, #32
 8001c80:	200b      	movs	r0, #11
 8001c82:	f00d f99d 	bl	800efc0 <uartStartReceive.constprop.23>
                                chThdSleepMilliseconds(500);
 8001c86:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c8a:	f00a fed9 	bl	800ca40 <chThdSleep>
                                uartStopReceive(&UARTD1);
 8001c8e:	f00d f9f7 	bl	800f080 <uartStopReceive.constprop.21>
                                if(read_eeprom(log) == 1) emr3_log(&recibo,11,2);
 8001c92:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	f002 834f 	beq.w	800433a <Thread1.lto_priv.65+0x3c6a>
                                if(recibo[4] == 0x64)
 8001c9c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8001ca0:	2b64      	cmp	r3, #100	; 0x64
 8001ca2:	f47e af67 	bne.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                                    sd_dia(&recibo);
 8001ca6:	a808      	add	r0, sp, #32
 8001ca8:	f00b fde2 	bl	800d870 <sd_dia>
 8001cac:	f7fe bf62 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                        else if ( (!palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (palReadPad(GPIOC,IN_6)) ) 
 8001cb0:	4a42      	ldr	r2, [pc, #264]	; (8001dbc <Thread1.lto_priv.65+0x16ec>)
 8001cb2:	6912      	ldr	r2, [r2, #16]
 8001cb4:	0457      	lsls	r7, r2, #17
 8001cb6:	d43a      	bmi.n	8001d2e <Thread1.lto_priv.65+0x165e>
 8001cb8:	4a41      	ldr	r2, [pc, #260]	; (8001dc0 <Thread1.lto_priv.65+0x16f0>)
 8001cba:	6911      	ldr	r1, [r2, #16]
 8001cbc:	064e      	lsls	r6, r1, #25
 8001cbe:	d536      	bpl.n	8001d2e <Thread1.lto_priv.65+0x165e>
 8001cc0:	6912      	ldr	r2, [r2, #16]
 8001cc2:	05d5      	lsls	r5, r2, #23
 8001cc4:	d533      	bpl.n	8001d2e <Thread1.lto_priv.65+0x165e>
                            POS2_A=0X04;
 8001cc6:	4a40      	ldr	r2, [pc, #256]	; (8001dc8 <Thread1.lto_priv.65+0x16f8>)
 8001cc8:	2304      	movs	r3, #4
 8001cca:	7013      	strb	r3, [r2, #0]
 8001ccc:	f7fe be65 	b.w	800099a <Thread1.lto_priv.65+0x2ca>
                        else if ( (palReadPad(GPIOD,IN_8) == 0) && (palReadPad(GPIOC,IN_7) == 0) && (palReadPad(GPIOC,IN_6) == 1) ) 
 8001cd0:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <Thread1.lto_priv.65+0x16ec>)
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	0459      	lsls	r1, r3, #17
 8001cd6:	d44a      	bmi.n	8001d6e <Thread1.lto_priv.65+0x169e>
 8001cd8:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <Thread1.lto_priv.65+0x16f0>)
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	0652      	lsls	r2, r2, #25
 8001cde:	d446      	bmi.n	8001d6e <Thread1.lto_priv.65+0x169e>
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	05df      	lsls	r7, r3, #23
 8001ce4:	d543      	bpl.n	8001d6e <Thread1.lto_priv.65+0x169e>
                            POS1_A=0X0A;
 8001ce6:	4a37      	ldr	r2, [pc, #220]	; (8001dc4 <Thread1.lto_priv.65+0x16f4>)
 8001ce8:	230a      	movs	r3, #10
 8001cea:	7013      	strb	r3, [r2, #0]
 8001cec:	f7fe bdec 	b.w	80008c8 <Thread1.lto_priv.65+0x1f8>
                else if (palReadPad(GPIOB,IN_5) == 1 && read_eeprom(pos2) ==  POS2_A)
 8001cf0:	f8db 3010 	ldr.w	r3, [fp, #16]
 8001cf4:	04da      	lsls	r2, r3, #19
 8001cf6:	f57e ad51 	bpl.w	800079c <Thread1.lto_priv.65+0xcc>
 8001cfa:	f7ff bb22 	b.w	8001342 <Thread1.lto_priv.65+0xc72>
                                if(recibo[0X04] == 0X08)
 8001cfe:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	f47f a899 	bne.w	8000e3a <Thread1.lto_priv.65+0x76a>
                                    if(recibo[0X05] != 0X02) 
 8001d08:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	f000 84dd 	beq.w	80026cc <Thread1.lto_priv.65+0x1ffc>
 8001d12:	220b      	movs	r2, #11
                                        if(recibo[0X05] == 0x04)
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
 8001d1a:	f47f acac 	bne.w	8001676 <Thread1.lto_priv.65+0xfa6>
                                            ButtonEmr(TECLADO_FIN,TURNO);
 8001d1e:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <Thread1.lto_priv.65+0x16e4>)
 8001d20:	2002      	movs	r0, #2
 8001d22:	7819      	ldrb	r1, [r3, #0]
 8001d24:	f00a ff0c 	bl	800cb40 <ButtonEmr>
                                            data_recibo(7);
 8001d28:	f00d fc9a 	bl	800f660 <data_recibo.constprop.1>
 8001d2c:	e48c      	b.n	8001648 <Thread1.lto_priv.65+0xf78>
                        else if ( (palReadPad(GPIOD,IN_8)) && (!palReadPad(GPIOC,IN_7)) && (!palReadPad(GPIOC,IN_6)) ) 
 8001d2e:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <Thread1.lto_priv.65+0x16ec>)
 8001d30:	6912      	ldr	r2, [r2, #16]
 8001d32:	0450      	lsls	r0, r2, #17
 8001d34:	d52b      	bpl.n	8001d8e <Thread1.lto_priv.65+0x16be>
 8001d36:	4a22      	ldr	r2, [pc, #136]	; (8001dc0 <Thread1.lto_priv.65+0x16f0>)
 8001d38:	6911      	ldr	r1, [r2, #16]
 8001d3a:	0649      	lsls	r1, r1, #25
 8001d3c:	d427      	bmi.n	8001d8e <Thread1.lto_priv.65+0x16be>
 8001d3e:	6912      	ldr	r2, [r2, #16]
 8001d40:	05d7      	lsls	r7, r2, #23
 8001d42:	d424      	bmi.n	8001d8e <Thread1.lto_priv.65+0x16be>
                            POS2_A=0X05;
 8001d44:	4a20      	ldr	r2, [pc, #128]	; (8001dc8 <Thread1.lto_priv.65+0x16f8>)
 8001d46:	2305      	movs	r3, #5
 8001d48:	7013      	strb	r3, [r2, #0]
 8001d4a:	f7fe be26 	b.w	800099a <Thread1.lto_priv.65+0x2ca>
                                    ButtonEmr(TECLADO_INICIO,TURNO);
 8001d4e:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <Thread1.lto_priv.65+0x16e4>)
 8001d50:	2304      	movs	r3, #4
 8001d52:	7811      	ldrb	r1, [r2, #0]
 8001d54:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 8001d58:	2007      	movs	r0, #7
 8001d5a:	f00a fef1 	bl	800cb40 <ButtonEmr>
                                    data_recibo(7);
 8001d5e:	f00d fc7f 	bl	800f660 <data_recibo.constprop.1>
                                    chThdSleepMilliseconds(300);
 8001d62:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001d66:	f00a fe6b 	bl	800ca40 <chThdSleep>
 8001d6a:	f7ff b866 	b.w	8000e3a <Thread1.lto_priv.65+0x76a>
                        else if ( (!palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (!palReadPad(GPIOC,IN_6)) ) 
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <Thread1.lto_priv.65+0x16ec>)
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	045e      	lsls	r6, r3, #17
 8001d74:	d42a      	bmi.n	8001dcc <Thread1.lto_priv.65+0x16fc>
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <Thread1.lto_priv.65+0x16f0>)
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	0655      	lsls	r5, r2, #25
 8001d7c:	d526      	bpl.n	8001dcc <Thread1.lto_priv.65+0x16fc>
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	05d8      	lsls	r0, r3, #23
 8001d82:	d423      	bmi.n	8001dcc <Thread1.lto_priv.65+0x16fc>
                            POS1_A=0X0B;
 8001d84:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <Thread1.lto_priv.65+0x16f4>)
 8001d86:	230b      	movs	r3, #11
 8001d88:	7013      	strb	r3, [r2, #0]
 8001d8a:	f7fe bd9d 	b.w	80008c8 <Thread1.lto_priv.65+0x1f8>
                        else if ( (palReadPad(GPIOD,IN_8)) && (!palReadPad(GPIOC,IN_7)) && (palReadPad(GPIOC,IN_6)) ) 
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <Thread1.lto_priv.65+0x16ec>)
 8001d90:	6912      	ldr	r2, [r2, #16]
 8001d92:	0456      	lsls	r6, r2, #17
 8001d94:	f140 8198 	bpl.w	80020c8 <Thread1.lto_priv.65+0x19f8>
 8001d98:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <Thread1.lto_priv.65+0x16f0>)
 8001d9a:	6911      	ldr	r1, [r2, #16]
 8001d9c:	064d      	lsls	r5, r1, #25
 8001d9e:	f100 8193 	bmi.w	80020c8 <Thread1.lto_priv.65+0x19f8>
 8001da2:	6912      	ldr	r2, [r2, #16]
 8001da4:	05d0      	lsls	r0, r2, #23
 8001da6:	f140 818f 	bpl.w	80020c8 <Thread1.lto_priv.65+0x19f8>
                            POS2_A=0X06;
 8001daa:	4907      	ldr	r1, [pc, #28]	; (8001dc8 <Thread1.lto_priv.65+0x16f8>)
 8001dac:	2206      	movs	r2, #6
 8001dae:	700a      	strb	r2, [r1, #0]
 8001db0:	f7fe bdf3 	b.w	800099a <Thread1.lto_priv.65+0x2ca>
 8001db4:	20000800 	.word	0x20000800
 8001db8:	20001c70 	.word	0x20001c70
 8001dbc:	40020c00 	.word	0x40020c00
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	20000901 	.word	0x20000901
 8001dc8:	20000902 	.word	0x20000902
                        else if ( (!palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (palReadPad(GPIOC,IN_6)) ) 
 8001dcc:	4bb6      	ldr	r3, [pc, #728]	; (80020a8 <Thread1.lto_priv.65+0x19d8>)
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	0459      	lsls	r1, r3, #17
 8001dd2:	f100 81da 	bmi.w	800218a <Thread1.lto_priv.65+0x1aba>
 8001dd6:	4bb5      	ldr	r3, [pc, #724]	; (80020ac <Thread1.lto_priv.65+0x19dc>)
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	0652      	lsls	r2, r2, #25
 8001ddc:	f140 81d5 	bpl.w	800218a <Thread1.lto_priv.65+0x1aba>
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	05db      	lsls	r3, r3, #23
 8001de4:	f140 81d1 	bpl.w	800218a <Thread1.lto_priv.65+0x1aba>
                            POS1_A=0X0C;
 8001de8:	4ab1      	ldr	r2, [pc, #708]	; (80020b0 <Thread1.lto_priv.65+0x19e0>)
 8001dea:	230c      	movs	r3, #12
 8001dec:	7013      	strb	r3, [r2, #0]
 8001dee:	f7fe bd6b 	b.w	80008c8 <Thread1.lto_priv.65+0x1f8>
                        else if ( (palReadPad(GPIOD,IN_8) == 0) && (palReadPad(GPIOC,IN_7) == 0) && (palReadPad(GPIOC,IN_6) == 1) ) 
 8001df2:	4bad      	ldr	r3, [pc, #692]	; (80020a8 <Thread1.lto_priv.65+0x19d8>)
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	045e      	lsls	r6, r3, #17
 8001df8:	d461      	bmi.n	8001ebe <Thread1.lto_priv.65+0x17ee>
 8001dfa:	4bac      	ldr	r3, [pc, #688]	; (80020ac <Thread1.lto_priv.65+0x19dc>)
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	0655      	lsls	r5, r2, #25
 8001e00:	d45d      	bmi.n	8001ebe <Thread1.lto_priv.65+0x17ee>
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	05d8      	lsls	r0, r3, #23
 8001e06:	d55a      	bpl.n	8001ebe <Thread1.lto_priv.65+0x17ee>
                            POS2_A=0X0A;
 8001e08:	4aaa      	ldr	r2, [pc, #680]	; (80020b4 <Thread1.lto_priv.65+0x19e4>)
 8001e0a:	230a      	movs	r3, #10
 8001e0c:	7013      	strb	r3, [r2, #0]
 8001e0e:	f7fe bdc4 	b.w	800099a <Thread1.lto_priv.65+0x2ca>
                else if (palReadPad(GPIOB,IN_5) == 1 && read_eeprom(consola) == cons_emr3)
 8001e12:	f8db 3010 	ldr.w	r3, [fp, #16]
 8001e16:	04db      	lsls	r3, r3, #19
 8001e18:	f57e acc0 	bpl.w	800079c <Thread1.lto_priv.65+0xcc>
                    LCDPrintRow2( 0,"   CONSOLE OK   ");
 8001e1c:	48a6      	ldr	r0, [pc, #664]	; (80020b8 <Thread1.lto_priv.65+0x19e8>)
 8001e1e:	f00d fbff 	bl	800f620 <LCDPrintRow2.constprop.2>
 8001e22:	f7fe bcbb 	b.w	800079c <Thread1.lto_priv.65+0xcc>
                                if(recibo[0X04] == 0X08)
 8001e26:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	f47e aea2 	bne.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                                    if(recibo[0X05] != 0X02) 
 8001e30:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	f43f aaff 	beq.w	8001438 <Thread1.lto_priv.65+0xd68>
 8001e3a:	220b      	movs	r2, #11
                                        if(recibo[0X05] == 0x04)
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
 8001e42:	f002 8338 	beq.w	80044b6 <Thread1.lto_priv.65+0x3de6>
                                ButtonEmr(HORAS,TURNO);
 8001e46:	4b9d      	ldr	r3, [pc, #628]	; (80020bc <Thread1.lto_priv.65+0x19ec>)
 8001e48:	2020      	movs	r0, #32
 8001e4a:	7819      	ldrb	r1, [r3, #0]
 8001e4c:	f00a fe78 	bl	800cb40 <ButtonEmr>
                                uartStartReceive(&UARTD1, 10, recibo);
 8001e50:	a908      	add	r1, sp, #32
 8001e52:	200a      	movs	r0, #10
 8001e54:	f00d f8b4 	bl	800efc0 <uartStartReceive.constprop.23>
                                chThdSleepMilliseconds(500);
 8001e58:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e5c:	f00a fdf0 	bl	800ca40 <chThdSleep>
                                uartStopReceive(&UARTD1);
 8001e60:	f00d f90e 	bl	800f080 <uartStopReceive.constprop.21>
                                if(read_eeprom(log) == 1) emr3_log(&recibo,10,2);
 8001e64:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	f002 831d 	beq.w	80044a8 <Thread1.lto_priv.65+0x3dd8>
                                if(recibo[4] ==  0X69)
 8001e6e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8001e72:	2b69      	cmp	r3, #105	; 0x69
 8001e74:	f002 8313 	beq.w	800449e <Thread1.lto_priv.65+0x3dce>
                                ButtonEmr(PEDIR_VENTA,TURNO);
 8001e78:	4b90      	ldr	r3, [pc, #576]	; (80020bc <Thread1.lto_priv.65+0x19ec>)
 8001e7a:	2024      	movs	r0, #36	; 0x24
 8001e7c:	7819      	ldrb	r1, [r3, #0]
 8001e7e:	f00a fe5f 	bl	800cb40 <ButtonEmr>
                                uartStartReceive(&UARTD1, 23, recibo_parcial);
 8001e82:	a90f      	add	r1, sp, #60	; 0x3c
 8001e84:	2017      	movs	r0, #23
 8001e86:	f00d f89b 	bl	800efc0 <uartStartReceive.constprop.23>
                                chThdSleepMilliseconds(500);
 8001e8a:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e8e:	f00a fdd7 	bl	800ca40 <chThdSleep>
                                uartStopReceive(&UARTD1);
 8001e92:	f00d f8f5 	bl	800f080 <uartStopReceive.constprop.21>
                                if(read_eeprom(log) == 1) emr3_log(&recibo_parcial,15,2);
 8001e96:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	f002 82f8 	beq.w	8004490 <Thread1.lto_priv.65+0x3dc0>
                                if(recibo_parcial[4] == 0x67 && recibo_parcial[14] == 0X7E)
 8001ea0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
                                float_data = 0x00;
 8001ea4:	4a86      	ldr	r2, [pc, #536]	; (80020c0 <Thread1.lto_priv.65+0x19f0>)
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	2100      	movs	r1, #0
                                if(recibo_parcial[4] == 0x67 && recibo_parcial[14] == 0X7E)
 8001eaa:	2b67      	cmp	r3, #103	; 0x67
                                float_data = 0x00;
 8001eac:	e9c2 0100 	strd	r0, r1, [r2]
                                if(recibo_parcial[4] == 0x67 && recibo_parcial[14] == 0X7E)
 8001eb0:	f002 8364 	beq.w	800457c <Thread1.lto_priv.65+0x3eac>
 8001eb4:	230b      	movs	r3, #11
 8001eb6:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 8001eba:	f7fe be5b 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                        else if ( (!palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (!palReadPad(GPIOC,IN_6)) ) 
 8001ebe:	4b7a      	ldr	r3, [pc, #488]	; (80020a8 <Thread1.lto_priv.65+0x19d8>)
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	0459      	lsls	r1, r3, #17
 8001ec4:	d419      	bmi.n	8001efa <Thread1.lto_priv.65+0x182a>
 8001ec6:	4b79      	ldr	r3, [pc, #484]	; (80020ac <Thread1.lto_priv.65+0x19dc>)
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	0652      	lsls	r2, r2, #25
 8001ecc:	d515      	bpl.n	8001efa <Thread1.lto_priv.65+0x182a>
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	05df      	lsls	r7, r3, #23
 8001ed2:	d412      	bmi.n	8001efa <Thread1.lto_priv.65+0x182a>
                            POS2_A=0X0B;
 8001ed4:	4a77      	ldr	r2, [pc, #476]	; (80020b4 <Thread1.lto_priv.65+0x19e4>)
 8001ed6:	230b      	movs	r3, #11
 8001ed8:	7013      	strb	r3, [r2, #0]
 8001eda:	f7fe bd5e 	b.w	800099a <Thread1.lto_priv.65+0x2ca>
                else if (palReadPad(GPIOB,IN_5) == 1 &&  read_eeprom(pos1) ==  POS1_A)
 8001ede:	f8db 3010 	ldr.w	r3, [fp, #16]
 8001ee2:	04d9      	lsls	r1, r3, #19
 8001ee4:	f57e ac5a 	bpl.w	800079c <Thread1.lto_priv.65+0xcc>
                    LCDPrintRow2( 0,"   ADDRESS OK   ");
 8001ee8:	4876      	ldr	r0, [pc, #472]	; (80020c4 <Thread1.lto_priv.65+0x19f4>)
 8001eea:	f00d fb99 	bl	800f620 <LCDPrintRow2.constprop.2>
                    chThdSleepMilliseconds(500);
 8001eee:	f241 3088 	movw	r0, #5000	; 0x1388
 8001ef2:	f00a fda5 	bl	800ca40 <chThdSleep>
 8001ef6:	f7fe bc51 	b.w	800079c <Thread1.lto_priv.65+0xcc>
                        else if ( (!palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (palReadPad(GPIOC,IN_6)) ) 
 8001efa:	4b6b      	ldr	r3, [pc, #428]	; (80020a8 <Thread1.lto_priv.65+0x19d8>)
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	045e      	lsls	r6, r3, #17
 8001f00:	f100 836e 	bmi.w	80025e0 <Thread1.lto_priv.65+0x1f10>
 8001f04:	4b69      	ldr	r3, [pc, #420]	; (80020ac <Thread1.lto_priv.65+0x19dc>)
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	0655      	lsls	r5, r2, #25
 8001f0a:	f140 8369 	bpl.w	80025e0 <Thread1.lto_priv.65+0x1f10>
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	05d8      	lsls	r0, r3, #23
 8001f12:	f140 8365 	bpl.w	80025e0 <Thread1.lto_priv.65+0x1f10>
                            POS2_A=0X0C;
 8001f16:	4a67      	ldr	r2, [pc, #412]	; (80020b4 <Thread1.lto_priv.65+0x19e4>)
 8001f18:	230c      	movs	r3, #12
 8001f1a:	7013      	strb	r3, [r2, #0]
 8001f1c:	f7fe bd3d 	b.w	800099a <Thread1.lto_priv.65+0x2ca>
                        else if ( (!palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (palReadPad(GPIOC,IN_6)) ) 
 8001f20:	4a61      	ldr	r2, [pc, #388]	; (80020a8 <Thread1.lto_priv.65+0x19d8>)
 8001f22:	6912      	ldr	r2, [r2, #16]
 8001f24:	0450      	lsls	r0, r2, #17
 8001f26:	d439      	bmi.n	8001f9c <Thread1.lto_priv.65+0x18cc>
 8001f28:	4a60      	ldr	r2, [pc, #384]	; (80020ac <Thread1.lto_priv.65+0x19dc>)
 8001f2a:	6911      	ldr	r1, [r2, #16]
 8001f2c:	0649      	lsls	r1, r1, #25
 8001f2e:	d535      	bpl.n	8001f9c <Thread1.lto_priv.65+0x18cc>
 8001f30:	6912      	ldr	r2, [r2, #16]
 8001f32:	05d2      	lsls	r2, r2, #23
 8001f34:	d532      	bpl.n	8001f9c <Thread1.lto_priv.65+0x18cc>
                            POS1_A=0X04;
 8001f36:	4a5e      	ldr	r2, [pc, #376]	; (80020b0 <Thread1.lto_priv.65+0x19e0>)
 8001f38:	2304      	movs	r3, #4
 8001f3a:	7013      	strb	r3, [r2, #0]
 8001f3c:	f7fe bcc4 	b.w	80008c8 <Thread1.lto_priv.65+0x1f8>
                                ButtonEmr(FECHAS,TURNO);
 8001f40:	4a5e      	ldr	r2, [pc, #376]	; (80020bc <Thread1.lto_priv.65+0x19ec>)
 8001f42:	2308      	movs	r3, #8
 8001f44:	7811      	ldrb	r1, [r2, #0]
 8001f46:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 8001f4a:	2021      	movs	r0, #33	; 0x21
 8001f4c:	f00a fdf8 	bl	800cb40 <ButtonEmr>
                                uartStartReceive(&UARTD1, 11, recibo);
 8001f50:	a908      	add	r1, sp, #32
 8001f52:	200b      	movs	r0, #11
 8001f54:	f00d f834 	bl	800efc0 <uartStartReceive.constprop.23>
                                chThdSleepMilliseconds(500);
 8001f58:	f241 3088 	movw	r0, #5000	; 0x1388
 8001f5c:	f00a fd70 	bl	800ca40 <chThdSleep>
                                uartStopReceive(&UARTD1);
 8001f60:	f00d f88e 	bl	800f080 <uartStopReceive.constprop.21>
                                if(read_eeprom(log) == 1) emr3_log(&recibo,11,2);
 8001f64:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	f002 81d1 	beq.w	8004310 <Thread1.lto_priv.65+0x3c40>
                                if(recibo[4] == 0x64)
 8001f6e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	f47e af61 	bne.w	8000e3a <Thread1.lto_priv.65+0x76a>
                                   	sd_dia(&recibo);
 8001f78:	a808      	add	r0, sp, #32
 8001f7a:	f00b fc79 	bl	800d870 <sd_dia>
 8001f7e:	f7fe bf5c 	b.w	8000e3a <Thread1.lto_priv.65+0x76a>
 8001f82:	2305      	movs	r3, #5
 8001f84:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 8001f88:	f7fe bdf4 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                                if(read_eeprom(estado1) == 0x09)
 8001f8c:	7825      	ldrb	r5, [r4, #0]
 8001f8e:	2d09      	cmp	r5, #9
 8001f90:	d024      	beq.n	8001fdc <Thread1.lto_priv.65+0x190c>
 8001f92:	2300      	movs	r3, #0
 8001f94:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 8001f98:	f7fe bf4f 	b.w	8000e3a <Thread1.lto_priv.65+0x76a>
                        else if ( (palReadPad(GPIOD,IN_8)) && (!palReadPad(GPIOC,IN_7)) && (!palReadPad(GPIOC,IN_6)) ) 
 8001f9c:	4a42      	ldr	r2, [pc, #264]	; (80020a8 <Thread1.lto_priv.65+0x19d8>)
 8001f9e:	6912      	ldr	r2, [r2, #16]
 8001fa0:	0457      	lsls	r7, r2, #17
 8001fa2:	d50b      	bpl.n	8001fbc <Thread1.lto_priv.65+0x18ec>
 8001fa4:	4a41      	ldr	r2, [pc, #260]	; (80020ac <Thread1.lto_priv.65+0x19dc>)
 8001fa6:	6911      	ldr	r1, [r2, #16]
 8001fa8:	064e      	lsls	r6, r1, #25
 8001faa:	d407      	bmi.n	8001fbc <Thread1.lto_priv.65+0x18ec>
 8001fac:	6912      	ldr	r2, [r2, #16]
 8001fae:	05d5      	lsls	r5, r2, #23
 8001fb0:	d404      	bmi.n	8001fbc <Thread1.lto_priv.65+0x18ec>
                            POS1_A=0X05;
 8001fb2:	4a3f      	ldr	r2, [pc, #252]	; (80020b0 <Thread1.lto_priv.65+0x19e0>)
 8001fb4:	2305      	movs	r3, #5
 8001fb6:	7013      	strb	r3, [r2, #0]
 8001fb8:	f7fe bc86 	b.w	80008c8 <Thread1.lto_priv.65+0x1f8>
                        else if ( (palReadPad(GPIOD,IN_8)) && (!palReadPad(GPIOC,IN_7)) && (palReadPad(GPIOC,IN_6)) ) 
 8001fbc:	4a3a      	ldr	r2, [pc, #232]	; (80020a8 <Thread1.lto_priv.65+0x19d8>)
 8001fbe:	6912      	ldr	r2, [r2, #16]
 8001fc0:	0450      	lsls	r0, r2, #17
 8001fc2:	d523      	bpl.n	800200c <Thread1.lto_priv.65+0x193c>
 8001fc4:	4a39      	ldr	r2, [pc, #228]	; (80020ac <Thread1.lto_priv.65+0x19dc>)
 8001fc6:	6911      	ldr	r1, [r2, #16]
 8001fc8:	0649      	lsls	r1, r1, #25
 8001fca:	d41f      	bmi.n	800200c <Thread1.lto_priv.65+0x193c>
 8001fcc:	6912      	ldr	r2, [r2, #16]
 8001fce:	05d7      	lsls	r7, r2, #23
 8001fd0:	d51c      	bpl.n	800200c <Thread1.lto_priv.65+0x193c>
                            POS1_A=0X06;
 8001fd2:	4937      	ldr	r1, [pc, #220]	; (80020b0 <Thread1.lto_priv.65+0x19e0>)
 8001fd4:	2206      	movs	r2, #6
 8001fd6:	700a      	strb	r2, [r1, #0]
 8001fd8:	f7fe bc76 	b.w	80008c8 <Thread1.lto_priv.65+0x1f8>
                                    ButtonEmr(AUTORIZAR,TURNO);
 8001fdc:	4b37      	ldr	r3, [pc, #220]	; (80020bc <Thread1.lto_priv.65+0x19ec>)
 8001fde:	4630      	mov	r0, r6
 8001fe0:	7819      	ldrb	r1, [r3, #0]
 8001fe2:	f00a fdad 	bl	800cb40 <ButtonEmr>
                                    data_recibo(7);
 8001fe6:	f00d fb3b 	bl	800f660 <data_recibo.constprop.1>
 8001fea:	2300      	movs	r3, #0
 8001fec:	2207      	movs	r2, #7
                                    Status_1(0X09);
 8001fee:	4628      	mov	r0, r5
 8001ff0:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 8001ff4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8001ff8:	7025      	strb	r5, [r4, #0]
 8001ffa:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
 8001ffe:	f00b fbff 	bl	800d800 <Status_1>
 8002002:	2301      	movs	r3, #1
 8002004:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 8002008:	f7fe bf17 	b.w	8000e3a <Thread1.lto_priv.65+0x76a>
                        else if ( (palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (!palReadPad(GPIOC,IN_6)) ) 
 800200c:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <Thread1.lto_priv.65+0x19d8>)
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	045e      	lsls	r6, r3, #17
 8002012:	d523      	bpl.n	800205c <Thread1.lto_priv.65+0x198c>
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <Thread1.lto_priv.65+0x19dc>)
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	0655      	lsls	r5, r2, #25
 800201a:	d51f      	bpl.n	800205c <Thread1.lto_priv.65+0x198c>
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	05d8      	lsls	r0, r3, #23
 8002020:	d41c      	bmi.n	800205c <Thread1.lto_priv.65+0x198c>
                            POS1_A=0X07;
 8002022:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <Thread1.lto_priv.65+0x19e0>)
 8002024:	2307      	movs	r3, #7
 8002026:	7013      	strb	r3, [r2, #0]
 8002028:	f7fe bc4e 	b.w	80008c8 <Thread1.lto_priv.65+0x1f8>
                                    ButtonEmr(AUTORIZAR,TURNO);
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <Thread1.lto_priv.65+0x19ec>)
 800202e:	4630      	mov	r0, r6
 8002030:	7819      	ldrb	r1, [r3, #0]
 8002032:	f00a fd85 	bl	800cb40 <ButtonEmr>
                                    data_recibo(7);
 8002036:	f00d fb13 	bl	800f660 <data_recibo.constprop.1>
 800203a:	2300      	movs	r3, #0
 800203c:	2207      	movs	r2, #7
                                    Status_2(0X09);
 800203e:	4628      	mov	r0, r5
 8002040:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 8002044:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8002048:	70a5      	strb	r5, [r4, #2]
 800204a:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
 800204e:	f00b fbc7 	bl	800d7e0 <Status_2>
 8002052:	2301      	movs	r3, #1
 8002054:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 8002058:	f7fe bd8c 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                        else if ( (palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (palReadPad(GPIOC,IN_6)) ) 
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <Thread1.lto_priv.65+0x19d8>)
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	0459      	lsls	r1, r3, #17
 8002062:	f57f abb0 	bpl.w	80017c6 <Thread1.lto_priv.65+0x10f6>
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <Thread1.lto_priv.65+0x19dc>)
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	0652      	lsls	r2, r2, #25
 800206c:	f57f abab 	bpl.w	80017c6 <Thread1.lto_priv.65+0x10f6>
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	05df      	lsls	r7, r3, #23
 8002074:	f57f aba7 	bpl.w	80017c6 <Thread1.lto_priv.65+0x10f6>
                            POS1_A=0X08;
 8002078:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <Thread1.lto_priv.65+0x19e0>)
 800207a:	2308      	movs	r3, #8
 800207c:	7013      	strb	r3, [r2, #0]
 800207e:	f7fe bc23 	b.w	80008c8 <Thread1.lto_priv.65+0x1f8>
	return (dato_emr3[num]);
 8002082:	7a23      	ldrb	r3, [r4, #8]
                        if (read_eeprom(ppu4_level1) > 0X00) 
 8002084:	2b00      	cmp	r3, #0
 8002086:	f43e adbb 	beq.w	8000c00 <Thread1.lto_priv.65+0x530>
                            write_eeprom(ppu4_level1,read_eeprom(ppu4_level1) - 1); 
 800208a:	3b01      	subs	r3, #1
	dato_emr3[num] = inf;
 800208c:	7223      	strb	r3, [r4, #8]
 800208e:	7960      	ldrb	r0, [r4, #5]
 8002090:	f7fe bdb7 	b.w	8000c02 <Thread1.lto_priv.65+0x532>
	return (dato_emr3[num]);
 8002094:	7a23      	ldrb	r3, [r4, #8]
                        if (read_eeprom(ppu4_level1) < 0X09)
 8002096:	2b08      	cmp	r3, #8
 8002098:	f63e adb2 	bhi.w	8000c00 <Thread1.lto_priv.65+0x530>
                            write_eeprom(ppu4_level1,read_eeprom(ppu4_level1) + 1);  
 800209c:	3301      	adds	r3, #1
	dato_emr3[num] = inf;
 800209e:	7223      	strb	r3, [r4, #8]
 80020a0:	7960      	ldrb	r0, [r4, #5]
 80020a2:	f7fe bdae 	b.w	8000c02 <Thread1.lto_priv.65+0x532>
 80020a6:	bf00      	nop
 80020a8:	40020c00 	.word	0x40020c00
 80020ac:	40020800 	.word	0x40020800
 80020b0:	20000901 	.word	0x20000901
 80020b4:	20000902 	.word	0x20000902
 80020b8:	0800f758 	.word	0x0800f758
 80020bc:	20000800 	.word	0x20000800
 80020c0:	20000908 	.word	0x20000908
 80020c4:	0800f708 	.word	0x0800f708
                        else if ( (palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (!palReadPad(GPIOC,IN_6)) ) 
 80020c8:	4bc8      	ldr	r3, [pc, #800]	; (80023ec <Thread1.lto_priv.65+0x1d1c>)
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	0459      	lsls	r1, r3, #17
 80020ce:	d56c      	bpl.n	80021aa <Thread1.lto_priv.65+0x1ada>
 80020d0:	4bc7      	ldr	r3, [pc, #796]	; (80023f0 <Thread1.lto_priv.65+0x1d20>)
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	0652      	lsls	r2, r2, #25
 80020d6:	d568      	bpl.n	80021aa <Thread1.lto_priv.65+0x1ada>
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	05df      	lsls	r7, r3, #23
 80020dc:	d465      	bmi.n	80021aa <Thread1.lto_priv.65+0x1ada>
                            POS2_A=0X07;
 80020de:	4ac5      	ldr	r2, [pc, #788]	; (80023f4 <Thread1.lto_priv.65+0x1d24>)
 80020e0:	2307      	movs	r3, #7
 80020e2:	7013      	strb	r3, [r2, #0]
 80020e4:	f7fe bc59 	b.w	800099a <Thread1.lto_priv.65+0x2ca>
                        envio[2]=0xFF;
 80020e8:	23ff      	movs	r3, #255	; 0xff
                        envio[6]=0x96;
 80020ea:	2296      	movs	r2, #150	; 0x96
                        uartStartSend(&UARTD1, 8, envio);
 80020ec:	a90f      	add	r1, sp, #60	; 0x3c
                        envio[0]=0x7E;
 80020ee:	257e      	movs	r5, #126	; 0x7e
                        envio[1]=0x01;
 80020f0:	2601      	movs	r6, #1
                        envio[3]=0x44;
 80020f2:	f04f 0844 	mov.w	r8, #68	; 0x44
                        envio[4]=0x25;
 80020f6:	2725      	movs	r7, #37	; 0x25
                        uartStartSend(&UARTD1, 8, envio);
 80020f8:	2008      	movs	r0, #8
                        envio[2]=0xFF;
 80020fa:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 80020fe:	9304      	str	r3, [sp, #16]
                        envio[6]=0x96;
 8002100:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
                        envio[0]=0x7E;
 8002104:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
                        envio[7]=0x7E;  
 8002108:	f88d 5043 	strb.w	r5, [sp, #67]	; 0x43
                        envio[1]=0x01;
 800210c:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
                        envio[5]=0x01;
 8002110:	f88d 6041 	strb.w	r6, [sp, #65]	; 0x41
                        envio[3]=0x44;
 8002114:	f88d 803f 	strb.w	r8, [sp, #63]	; 0x3f
                        envio[4]=0x25;
 8002118:	f88d 7040 	strb.w	r7, [sp, #64]	; 0x40
                        uartStartSend(&UARTD1, 8, envio);
 800211c:	f00c feb0 	bl	800ee80 <uartStartSend.constprop.27>
                        chThdSleepMilliseconds(20);
 8002120:	20c8      	movs	r0, #200	; 0xc8
 8002122:	f00a fc8d 	bl	800ca40 <chThdSleep>
                        uartStopSend(&UARTD1);
 8002126:	f00c ff03 	bl	800ef30 <uartStopSend.constprop.25>
                        chThdSleepMilliseconds(500);
 800212a:	f241 3088 	movw	r0, #5000	; 0x1388
 800212e:	f00a fc87 	bl	800ca40 <chThdSleep>
                        envio[1]=0x02;
 8002132:	f04f 0e02 	mov.w	lr, #2
                        envio[6]=0x95;
 8002136:	2295      	movs	r2, #149	; 0x95
                        envio[2]=0xFF;
 8002138:	9b04      	ldr	r3, [sp, #16]
 800213a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
                        uartStartSend(&UARTD1, 8, envio);
 800213e:	a90f      	add	r1, sp, #60	; 0x3c
 8002140:	2008      	movs	r0, #8
                        envio[1]=0x02;
 8002142:	f88d e03d 	strb.w	lr, [sp, #61]	; 0x3d
                        envio[6]=0x95;
 8002146:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
                        envio[5]=0x01;
 800214a:	f88d 6041 	strb.w	r6, [sp, #65]	; 0x41
                        envio[0]=0x7E;
 800214e:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
                        envio[3]=0x44;
 8002152:	f88d 803f 	strb.w	r8, [sp, #63]	; 0x3f
                        envio[4]=0x25;
 8002156:	f88d 7040 	strb.w	r7, [sp, #64]	; 0x40
                        envio[7]=0x7E;  
 800215a:	f88d 5043 	strb.w	r5, [sp, #67]	; 0x43
                        uartStartSend(&UARTD1, 8, envio);
 800215e:	f00c fe8f 	bl	800ee80 <uartStartSend.constprop.27>
                        chThdSleepMilliseconds(20);
 8002162:	20c8      	movs	r0, #200	; 0xc8
 8002164:	f00a fc6c 	bl	800ca40 <chThdSleep>
                        uartStopSend(&UARTD1);
 8002168:	f00c fee2 	bl	800ef30 <uartStopSend.constprop.25>
                        chThdSleepMilliseconds(500);
 800216c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002170:	f00a fc66 	bl	800ca40 <chThdSleep>
 8002174:	f7ff bbfc 	b.w	8001970 <Thread1.lto_priv.65+0x12a0>
	return (dato_emr3[num]);
 8002178:	79e3      	ldrb	r3, [r4, #7]
                        if (read_eeprom(ppu3_level1) < 0X09)
 800217a:	2b08      	cmp	r3, #8
 800217c:	f63e ad40 	bhi.w	8000c00 <Thread1.lto_priv.65+0x530>
                            write_eeprom(ppu3_level1,read_eeprom(ppu3_level1) + 1); 
 8002180:	3301      	adds	r3, #1
	dato_emr3[num] = inf;
 8002182:	71e3      	strb	r3, [r4, #7]
 8002184:	7960      	ldrb	r0, [r4, #5]
 8002186:	f7fe bd3c 	b.w	8000c02 <Thread1.lto_priv.65+0x532>
                        else if ( (palReadPad(GPIOD,IN_8)) && (!palReadPad(GPIOC,IN_7)) && (!palReadPad(GPIOC,IN_6)) ) 
 800218a:	4b98      	ldr	r3, [pc, #608]	; (80023ec <Thread1.lto_priv.65+0x1d1c>)
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	045f      	lsls	r7, r3, #17
 8002190:	d51e      	bpl.n	80021d0 <Thread1.lto_priv.65+0x1b00>
 8002192:	4b97      	ldr	r3, [pc, #604]	; (80023f0 <Thread1.lto_priv.65+0x1d20>)
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	0656      	lsls	r6, r2, #25
 8002198:	d41a      	bmi.n	80021d0 <Thread1.lto_priv.65+0x1b00>
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	05dd      	lsls	r5, r3, #23
 800219e:	d417      	bmi.n	80021d0 <Thread1.lto_priv.65+0x1b00>
                            POS1_A=0X0D;
 80021a0:	4a95      	ldr	r2, [pc, #596]	; (80023f8 <Thread1.lto_priv.65+0x1d28>)
 80021a2:	230d      	movs	r3, #13
 80021a4:	7013      	strb	r3, [r2, #0]
 80021a6:	f7fe bb8f 	b.w	80008c8 <Thread1.lto_priv.65+0x1f8>
                        else if ( (palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (palReadPad(GPIOC,IN_6)) ) 
 80021aa:	4b90      	ldr	r3, [pc, #576]	; (80023ec <Thread1.lto_priv.65+0x1d1c>)
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	045e      	lsls	r6, r3, #17
 80021b0:	f57f ab9a 	bpl.w	80018e8 <Thread1.lto_priv.65+0x1218>
 80021b4:	4b8e      	ldr	r3, [pc, #568]	; (80023f0 <Thread1.lto_priv.65+0x1d20>)
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	0655      	lsls	r5, r2, #25
 80021ba:	f57f ab95 	bpl.w	80018e8 <Thread1.lto_priv.65+0x1218>
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	05d8      	lsls	r0, r3, #23
 80021c2:	f57f ab91 	bpl.w	80018e8 <Thread1.lto_priv.65+0x1218>
                            POS2_A=0X08;
 80021c6:	4a8b      	ldr	r2, [pc, #556]	; (80023f4 <Thread1.lto_priv.65+0x1d24>)
 80021c8:	2308      	movs	r3, #8
 80021ca:	7013      	strb	r3, [r2, #0]
 80021cc:	f7fe bbe5 	b.w	800099a <Thread1.lto_priv.65+0x2ca>
                        else if ( (palReadPad(GPIOD,IN_8)) && (!palReadPad(GPIOC,IN_7)) && (palReadPad(GPIOC,IN_6)) ) 
 80021d0:	4b86      	ldr	r3, [pc, #536]	; (80023ec <Thread1.lto_priv.65+0x1d1c>)
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	0458      	lsls	r0, r3, #17
 80021d6:	f140 81c4 	bpl.w	8002562 <Thread1.lto_priv.65+0x1e92>
 80021da:	4b85      	ldr	r3, [pc, #532]	; (80023f0 <Thread1.lto_priv.65+0x1d20>)
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	0651      	lsls	r1, r2, #25
 80021e0:	f100 81bf 	bmi.w	8002562 <Thread1.lto_priv.65+0x1e92>
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	05da      	lsls	r2, r3, #23
 80021e8:	f140 81bb 	bpl.w	8002562 <Thread1.lto_priv.65+0x1e92>
                            POS1_A=0X0E;
 80021ec:	4a82      	ldr	r2, [pc, #520]	; (80023f8 <Thread1.lto_priv.65+0x1d28>)
 80021ee:	230e      	movs	r3, #14
 80021f0:	7013      	strb	r3, [r2, #0]
 80021f2:	f7fe bb69 	b.w	80008c8 <Thread1.lto_priv.65+0x1f8>
                                    ButtonEmr(ENVIAR_VOLUMEN,TURNO);
 80021f6:	4981      	ldr	r1, [pc, #516]	; (80023fc <Thread1.lto_priv.65+0x1d2c>)
 80021f8:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
 80021fc:	227a      	movs	r2, #122	; 0x7a
 80021fe:	2343      	movs	r3, #67	; 0x43
 8002200:	7809      	ldrb	r1, [r1, #0]
 8002202:	f884 507a 	strb.w	r5, [r4, #122]	; 0x7a
 8002206:	f884 207b 	strb.w	r2, [r4, #123]	; 0x7b
 800220a:	201d      	movs	r0, #29
 800220c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
 8002210:	f00a fc96 	bl	800cb40 <ButtonEmr>
                                    data_recibo(7);
 8002214:	f00d fa24 	bl	800f660 <data_recibo.constprop.1>
                                    sd_preset(0,TURNO);
 8002218:	4b78      	ldr	r3, [pc, #480]	; (80023fc <Thread1.lto_priv.65+0x1d2c>)
 800221a:	4628      	mov	r0, r5
 800221c:	7819      	ldrb	r1, [r3, #0]
 800221e:	f006 fa0f 	bl	8008640 <sd_preset>
 8002222:	e42a      	b.n	8001a7a <Thread1.lto_priv.65+0x13aa>
	return (dato_emr3[num]);
 8002224:	7960      	ldrb	r0, [r4, #5]
                        if (read_eeprom(ppu1_level1) < 0X09)
 8002226:	2808      	cmp	r0, #8
 8002228:	f63e aceb 	bhi.w	8000c02 <Thread1.lto_priv.65+0x532>
                            write_eeprom(ppu1_level1,read_eeprom(ppu1_level1) + 1);  
 800222c:	3001      	adds	r0, #1
 800222e:	b2c0      	uxtb	r0, r0
	dato_emr3[num] = inf;
 8002230:	7160      	strb	r0, [r4, #5]
 8002232:	f7fe bce6 	b.w	8000c02 <Thread1.lto_priv.65+0x532>
	return (dato_emr3[num]);
 8002236:	79a3      	ldrb	r3, [r4, #6]
                        if (read_eeprom(ppu2_level1) < 0X09)
 8002238:	2b08      	cmp	r3, #8
                            write_eeprom(ppu2_level1,read_eeprom(ppu2_level1) + 1);  
 800223a:	bf9c      	itt	ls
 800223c:	3301      	addls	r3, #1
	dato_emr3[num] = inf;
 800223e:	71a3      	strbls	r3, [r4, #6]
 8002240:	f7fe bcde 	b.w	8000c00 <Thread1.lto_priv.65+0x530>
	return (dato_emr3[num]);
 8002244:	7823      	ldrb	r3, [r4, #0]
                                    if(recibo[0X05] == 0X00 && (read_eeprom(estado1) == 0X06 || read_eeprom(estado1) == 0X07))
 8002246:	1f9a      	subs	r2, r3, #6
 8002248:	2a01      	cmp	r2, #1
 800224a:	f240 8332 	bls.w	80028b2 <Thread1.lto_priv.65+0x21e2>
                                    else if(recibo[0X05] == 0X00 && read_eeprom(estado1) == 0X08)
 800224e:	2b08      	cmp	r3, #8
 8002250:	f47e adf3 	bne.w	8000e3a <Thread1.lto_priv.65+0x76a>
                                        ButtonEmr(LEER_DISPLAY,1);                           
 8002254:	2101      	movs	r1, #1
 8002256:	2004      	movs	r0, #4
 8002258:	f00a fc72 	bl	800cb40 <ButtonEmr>
                                        uartStartReceive(&UARTD1, 16, recibo_parcial);
 800225c:	a90f      	add	r1, sp, #60	; 0x3c
 800225e:	2010      	movs	r0, #16
 8002260:	f00c feae 	bl	800efc0 <uartStartReceive.constprop.23>
                                        chThdSleepMilliseconds(500);
 8002264:	f241 3088 	movw	r0, #5000	; 0x1388
 8002268:	f00a fbea 	bl	800ca40 <chThdSleep>
                                        uartStopReceive(&UARTD1);
 800226c:	f00c ff08 	bl	800f080 <uartStopReceive.constprop.21>
                                        if(recibo_parcial[4] == 0x6B)
 8002270:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8002274:	2b6b      	cmp	r3, #107	; 0x6b
 8002276:	f47f a9e7 	bne.w	8001648 <Thread1.lto_priv.65+0xf78>
                                            if(recibo_parcial[5] != 0X01)
 800227a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 800227e:	2b01      	cmp	r3, #1
 8002280:	f43f a9e2 	beq.w	8001648 <Thread1.lto_priv.65+0xf78>
                                                ButtonEmr(TECLADO_MODO,TURNO);
 8002284:	4b5d      	ldr	r3, [pc, #372]	; (80023fc <Thread1.lto_priv.65+0x1d2c>)
 8002286:	2001      	movs	r0, #1
 8002288:	7819      	ldrb	r1, [r3, #0]
 800228a:	f00a fc59 	bl	800cb40 <ButtonEmr>
                                                data_recibo(7);
 800228e:	f00d f9e7 	bl	800f660 <data_recibo.constprop.1>
 8002292:	f7ff b9d9 	b.w	8001648 <Thread1.lto_priv.65+0xf78>
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8002296:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
                                    dinero = ((read_eeprom(preset2_1)*100000)+(read_eeprom(preset2_2)*10000)+(read_eeprom(preset2_3)*1000)+(read_eeprom(preset2_4)*100)+(read_eeprom(preset2_5)*10)+(read_eeprom(preset2_6)*1));
 800229a:	f894 7031 	ldrb.w	r7, [r4, #49]	; 0x31
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 800229e:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
                                    dinero = ((read_eeprom(preset2_1)*100000)+(read_eeprom(preset2_2)*10000)+(read_eeprom(preset2_3)*1000)+(read_eeprom(preset2_4)*100)+(read_eeprom(preset2_5)*10)+(read_eeprom(preset2_6)*1));
 80022a2:	4e57      	ldr	r6, [pc, #348]	; (8002400 <Thread1.lto_priv.65+0x1d30>)
 80022a4:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 80022a8:	f894 5032 	ldrb.w	r5, [r4, #50]	; 0x32
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 80022ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                    dinero = ((read_eeprom(preset2_1)*100000)+(read_eeprom(preset2_2)*10000)+(read_eeprom(preset2_3)*1000)+(read_eeprom(preset2_4)*100)+(read_eeprom(preset2_5)*10)+(read_eeprom(preset2_6)*1));
 80022b0:	f242 7110 	movw	r1, #10000	; 0x2710
 80022b4:	fb01 f107 	mul.w	r1, r1, r7
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 80022b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022bc:	ebc2 1742 	rsb	r7, r2, r2, lsl #5
                                    dinero = ((read_eeprom(preset2_1)*100000)+(read_eeprom(preset2_2)*10000)+(read_eeprom(preset2_3)*1000)+(read_eeprom(preset2_4)*100)+(read_eeprom(preset2_5)*10)+(read_eeprom(preset2_6)*1));
 80022c0:	fb06 1000 	mla	r0, r6, r0, r1
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 80022c4:	eb02 0287 	add.w	r2, r2, r7, lsl #2
                                    dinero = ((read_eeprom(preset2_1)*100000)+(read_eeprom(preset2_2)*10000)+(read_eeprom(preset2_3)*1000)+(read_eeprom(preset2_4)*100)+(read_eeprom(preset2_5)*10)+(read_eeprom(preset2_6)*1));
 80022c8:	f894 6033 	ldrb.w	r6, [r4, #51]	; 0x33
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 80022cc:	0099      	lsls	r1, r3, #2
                                    dinero = ((read_eeprom(preset2_1)*100000)+(read_eeprom(preset2_2)*10000)+(read_eeprom(preset2_3)*1000)+(read_eeprom(preset2_4)*100)+(read_eeprom(preset2_5)*10)+(read_eeprom(preset2_6)*1));
 80022ce:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80022d2:	fb08 0805 	mla	r8, r8, r5, r0
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 80022d6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
                                    dinero = ((read_eeprom(preset2_1)*100000)+(read_eeprom(preset2_2)*10000)+(read_eeprom(preset2_3)*1000)+(read_eeprom(preset2_4)*100)+(read_eeprom(preset2_5)*10)+(read_eeprom(preset2_6)*1));
 80022da:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 80022de:	f894 5094 	ldrb.w	r5, [r4, #148]	; 0x94
 80022e2:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
                                    dinero = ((read_eeprom(preset2_1)*100000)+(read_eeprom(preset2_2)*10000)+(read_eeprom(preset2_3)*1000)+(read_eeprom(preset2_4)*100)+(read_eeprom(preset2_5)*10)+(read_eeprom(preset2_6)*1));
 80022e6:	2264      	movs	r2, #100	; 0x64
 80022e8:	fb12 8206 	smlabb	r2, r2, r6, r8
 80022ec:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
 80022f0:	f04f 080a 	mov.w	r8, #10
 80022f4:	fb18 2800 	smlabb	r8, r8, r0, r2
 80022f8:	7ee2      	ldrb	r2, [r4, #27]
 80022fa:	7920      	ldrb	r0, [r4, #4]
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 80022fc:	440d      	add	r5, r1
 80022fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                    dinero = ((read_eeprom(preset2_1)*100000)+(read_eeprom(preset2_2)*10000)+(read_eeprom(preset2_3)*1000)+(read_eeprom(preset2_4)*100)+(read_eeprom(preset2_5)*10)+(read_eeprom(preset2_6)*1));
 8002302:	44b0      	add	r8, r6
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8002304:	eb05 0543 	add.w	r5, r5, r3, lsl #1
                                    dinero = ((read_eeprom(preset2_1)*100000)+(read_eeprom(preset2_2)*10000)+(read_eeprom(preset2_3)*1000)+(read_eeprom(preset2_4)*100)+(read_eeprom(preset2_5)*10)+(read_eeprom(preset2_6)*1));
 8002308:	4646      	mov	r6, r8
                                    if(read_eeprom(PD) == read_eeprom(pppu))
 800230a:	4290      	cmp	r0, r2
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 800230c:	b2ad      	uxth	r5, r5
                                    dinero = ((read_eeprom(preset2_1)*100000)+(read_eeprom(preset2_2)*10000)+(read_eeprom(preset2_3)*1000)+(read_eeprom(preset2_4)*100)+(read_eeprom(preset2_5)*10)+(read_eeprom(preset2_6)*1));
 800230e:	ea4f 77e6 	mov.w	r7, r6, asr #31
                                    if(read_eeprom(PD) == read_eeprom(pppu))
 8002312:	f001 8783 	beq.w	800421c <Thread1.lto_priv.65+0x3b4c>
                                    else if (read_eeprom(PD) < read_eeprom(pppu))
 8002316:	f241 8760 	bls.w	80041da <Thread1.lto_priv.65+0x3b0a>
                                        punto_aux=mult(read_eeprom(pppu) - read_eeprom(PD));
 800231a:	1a80      	subs	r0, r0, r2
 800231c:	b2c0      	uxtb	r0, r0
 800231e:	f00c f8df 	bl	800e4e0 <mult>
                                        valor = (dinero * punto_aux)/ppu;
 8002322:	b2aa      	uxth	r2, r5
 8002324:	2300      	movs	r3, #0
                                        punto_aux=mult(read_eeprom(pppu) - read_eeprom(PD));
 8002326:	4606      	mov	r6, r0
                                        valor = (dinero * punto_aux)/ppu;
 8002328:	fb80 0108 	smull	r0, r1, r0, r8
 800232c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002330:	f7fd ffce 	bl	80002d0 <__aeabi_uldivmod>
 8002334:	9001      	str	r0, [sp, #4]
                                        punto=mult(read_eeprom(PV));
 8002336:	7ba0      	ldrb	r0, [r4, #14]
 8002338:	f00c f8d2 	bl	800e4e0 <mult>
                                        valor_float = ((dinero*punto*punto_aux)/ppu)-(valor*punto);
 800233c:	fba6 2300 	umull	r2, r3, r6, r0
 8002340:	fb02 f107 	mul.w	r1, r2, r7
 8002344:	fb08 1303 	mla	r3, r8, r3, r1
                                        punto=mult(read_eeprom(PV));
 8002348:	4605      	mov	r5, r0
                                        valor_float = ((dinero*punto*punto_aux)/ppu)-(valor*punto);
 800234a:	fba2 0108 	umull	r0, r1, r2, r8
 800234e:	4419      	add	r1, r3
 8002350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002354:	f7fd ffbc 	bl	80002d0 <__aeabi_uldivmod>
 8002358:	9b01      	ldr	r3, [sp, #4]
 800235a:	fb03 0315 	mls	r3, r3, r5, r0
 800235e:	9302      	str	r3, [sp, #8]
                                    f_pf(valor,valor_float,2);
 8002360:	2202      	movs	r2, #2
 8002362:	9902      	ldr	r1, [sp, #8]
 8002364:	9801      	ldr	r0, [sp, #4]
 8002366:	f00c f9b3 	bl	800e6d0 <f_pf>
                                    ButtonEmr(ENVIAR_VOLUMEN,TURNO);
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <Thread1.lto_priv.65+0x1d2c>)
 800236c:	201d      	movs	r0, #29
 800236e:	7819      	ldrb	r1, [r3, #0]
 8002370:	f00a fbe6 	bl	800cb40 <ButtonEmr>
                                    data_recibo(7);
 8002374:	f00d f974 	bl	800f660 <data_recibo.constprop.1>
                                    sd_preset(2,TURNO);
 8002378:	4b20      	ldr	r3, [pc, #128]	; (80023fc <Thread1.lto_priv.65+0x1d2c>)
 800237a:	2002      	movs	r0, #2
 800237c:	7819      	ldrb	r1, [r3, #0]
 800237e:	f006 f95f 	bl	8008640 <sd_preset>
 8002382:	f7ff bb7a 	b.w	8001a7a <Thread1.lto_priv.65+0x13aa>
                                    punto=mult(read_eeprom(PV));
 8002386:	7ba0      	ldrb	r0, [r4, #14]
                                    valor=((read_eeprom(preset2_1)*100000)+(read_eeprom(preset2_2)*10000)+(read_eeprom(preset2_3)*1000)+(read_eeprom(preset2_4)*100)+(read_eeprom(preset2_5)*10)+(read_eeprom(preset2_6)*1));
 8002388:	4e1d      	ldr	r6, [pc, #116]	; (8002400 <Thread1.lto_priv.65+0x1d30>)
                                    punto=mult(read_eeprom(PV));
 800238a:	f00c f8a9 	bl	800e4e0 <mult>
                                    valor=((read_eeprom(preset2_1)*100000)+(read_eeprom(preset2_2)*10000)+(read_eeprom(preset2_3)*1000)+(read_eeprom(preset2_4)*100)+(read_eeprom(preset2_5)*10)+(read_eeprom(preset2_6)*1));
 800238e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8002392:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                                    punto=mult(read_eeprom(PV));
 8002396:	4601      	mov	r1, r0
                                    valor=((read_eeprom(preset2_1)*100000)+(read_eeprom(preset2_2)*10000)+(read_eeprom(preset2_3)*1000)+(read_eeprom(preset2_4)*100)+(read_eeprom(preset2_5)*10)+(read_eeprom(preset2_6)*1));
 8002398:	f242 7010 	movw	r0, #10000	; 0x2710
 800239c:	fb00 f002 	mul.w	r0, r0, r2
 80023a0:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 80023a4:	fb06 0303 	mla	r3, r6, r3, r0
 80023a8:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
 80023ac:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80023b0:	fb06 3202 	mla	r2, r6, r2, r3
 80023b4:	2364      	movs	r3, #100	; 0x64
 80023b6:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
 80023ba:	fb13 2200 	smlabb	r2, r3, r0, r2
 80023be:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80023c2:	230a      	movs	r3, #10
 80023c4:	fb13 2306 	smlabb	r3, r3, r6, r2
 80023c8:	4403      	add	r3, r0
                                    f_pf(valor,valor_float,2);
 80023ca:	2202      	movs	r2, #2
                                    valor_float=valor%punto;
 80023cc:	fbb3 f0f1 	udiv	r0, r3, r1
                                    f_pf(valor,valor_float,2);
 80023d0:	fb01 3110 	mls	r1, r1, r0, r3
 80023d4:	f00c f97c 	bl	800e6d0 <f_pf>
                                    ButtonEmr(ENVIAR_VOLUMEN,TURNO);
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <Thread1.lto_priv.65+0x1d2c>)
 80023da:	201d      	movs	r0, #29
 80023dc:	7819      	ldrb	r1, [r3, #0]
 80023de:	e717      	b.n	8002210 <Thread1.lto_priv.65+0x1b40>
	dato_emr3[num] = inf;
 80023e0:	2305      	movs	r3, #5
 80023e2:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 80023e6:	f7fe bd28 	b.w	8000e3a <Thread1.lto_priv.65+0x76a>
 80023ea:	bf00      	nop
 80023ec:	40020c00 	.word	0x40020c00
 80023f0:	40020800 	.word	0x40020800
 80023f4:	20000902 	.word	0x20000902
 80023f8:	20000901 	.word	0x20000901
 80023fc:	20000800 	.word	0x20000800
 8002400:	000186a0 	.word	0x000186a0
                                    dinero = ((read_eeprom(preset1_1)*100000)+(read_eeprom(preset1_2)*10000)+(read_eeprom(preset1_3)*1000)+(read_eeprom(preset1_4)*100)+(read_eeprom(preset1_5)*10)+(read_eeprom(preset1_6)*1));
 8002404:	f894 702b 	ldrb.w	r7, [r4, #43]	; 0x2b
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002408:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 800240c:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
                                    dinero = ((read_eeprom(preset1_1)*100000)+(read_eeprom(preset1_2)*10000)+(read_eeprom(preset1_3)*1000)+(read_eeprom(preset1_4)*100)+(read_eeprom(preset1_5)*10)+(read_eeprom(preset1_6)*1));
 8002410:	4ea8      	ldr	r6, [pc, #672]	; (80026b4 <Thread1.lto_priv.65+0x1fe4>)
 8002412:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
 8002416:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800241a:	f894 802d 	ldrb.w	r8, [r4, #45]	; 0x2d
 800241e:	f242 7010 	movw	r0, #10000	; 0x2710
 8002422:	fb00 f007 	mul.w	r0, r0, r7
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002426:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                    dinero = ((read_eeprom(preset1_1)*100000)+(read_eeprom(preset1_2)*10000)+(read_eeprom(preset1_3)*1000)+(read_eeprom(preset1_4)*100)+(read_eeprom(preset1_5)*10)+(read_eeprom(preset1_6)*1));
 800242a:	fb06 0505 	mla	r5, r6, r5, r0
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 800242e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002432:	ebc2 1742 	rsb	r7, r2, r2, lsl #5
                                    dinero = ((read_eeprom(preset1_1)*100000)+(read_eeprom(preset1_2)*10000)+(read_eeprom(preset1_3)*1000)+(read_eeprom(preset1_4)*100)+(read_eeprom(preset1_5)*10)+(read_eeprom(preset1_6)*1));
 8002436:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800243a:	fb06 5501 	mla	r5, r6, r1, r5
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 800243e:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8002442:	0098      	lsls	r0, r3, #2
                                    dinero = ((read_eeprom(preset1_1)*100000)+(read_eeprom(preset1_2)*10000)+(read_eeprom(preset1_3)*1000)+(read_eeprom(preset1_4)*100)+(read_eeprom(preset1_5)*10)+(read_eeprom(preset1_6)*1));
 8002444:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002448:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800244c:	f894 708f 	ldrb.w	r7, [r4, #143]	; 0x8f
                                    dinero = ((read_eeprom(preset1_1)*100000)+(read_eeprom(preset1_2)*10000)+(read_eeprom(preset1_3)*1000)+(read_eeprom(preset1_4)*100)+(read_eeprom(preset1_5)*10)+(read_eeprom(preset1_6)*1));
 8002450:	2164      	movs	r1, #100	; 0x64
 8002452:	fb11 5108 	smlabb	r1, r1, r8, r5
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002456:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
                                    dinero = ((read_eeprom(preset1_1)*100000)+(read_eeprom(preset1_2)*10000)+(read_eeprom(preset1_3)*1000)+(read_eeprom(preset1_4)*100)+(read_eeprom(preset1_5)*10)+(read_eeprom(preset1_6)*1));
 800245a:	f894 502f 	ldrb.w	r5, [r4, #47]	; 0x2f
 800245e:	f04f 080a 	mov.w	r8, #10
 8002462:	fb18 1806 	smlabb	r8, r8, r6, r1
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002466:	4403      	add	r3, r0
	return (dato_emr3[num]);
 8002468:	7ee1      	ldrb	r1, [r4, #27]
 800246a:	7920      	ldrb	r0, [r4, #4]
 800246c:	eb07 0287 	add.w	r2, r7, r7, lsl #2
                                    dinero = ((read_eeprom(preset1_1)*100000)+(read_eeprom(preset1_2)*10000)+(read_eeprom(preset1_3)*1000)+(read_eeprom(preset1_4)*100)+(read_eeprom(preset1_5)*10)+(read_eeprom(preset1_6)*1));
 8002470:	44a8      	add	r8, r5
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002472:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                                    dinero = ((read_eeprom(preset1_1)*100000)+(read_eeprom(preset1_2)*10000)+(read_eeprom(preset1_3)*1000)+(read_eeprom(preset1_4)*100)+(read_eeprom(preset1_5)*10)+(read_eeprom(preset1_6)*1));
 8002476:	4646      	mov	r6, r8
                                    if(read_eeprom(PD) == read_eeprom(pppu))
 8002478:	4288      	cmp	r0, r1
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 800247a:	b29d      	uxth	r5, r3
                                    dinero = ((read_eeprom(preset1_1)*100000)+(read_eeprom(preset1_2)*10000)+(read_eeprom(preset1_3)*1000)+(read_eeprom(preset1_4)*100)+(read_eeprom(preset1_5)*10)+(read_eeprom(preset1_6)*1));
 800247c:	ea4f 77e6 	mov.w	r7, r6, asr #31
                                    if(read_eeprom(PD) == read_eeprom(pppu))
 8002480:	f001 8690 	beq.w	80041a4 <Thread1.lto_priv.65+0x3ad4>
                                    else if (read_eeprom(PD) < read_eeprom(pppu))
 8002484:	f241 866d 	bls.w	8004162 <Thread1.lto_priv.65+0x3a92>
                                        punto_aux=mult(read_eeprom(pppu) - read_eeprom(PD));
 8002488:	1a40      	subs	r0, r0, r1
 800248a:	b2c0      	uxtb	r0, r0
 800248c:	f00c f828 	bl	800e4e0 <mult>
                                        valor = (dinero * punto_aux)/ppu;
 8002490:	b2aa      	uxth	r2, r5
 8002492:	2300      	movs	r3, #0
                                        punto_aux=mult(read_eeprom(pppu) - read_eeprom(PD));
 8002494:	4606      	mov	r6, r0
                                        valor = (dinero * punto_aux)/ppu;
 8002496:	fb80 0108 	smull	r0, r1, r0, r8
 800249a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800249e:	f7fd ff17 	bl	80002d0 <__aeabi_uldivmod>
 80024a2:	9001      	str	r0, [sp, #4]
                                        punto=mult(read_eeprom(PV));
 80024a4:	7ba0      	ldrb	r0, [r4, #14]
 80024a6:	f00c f81b 	bl	800e4e0 <mult>
                                        valor_float = ((dinero*punto*punto_aux)/ppu)-(valor*punto);
 80024aa:	fba6 2300 	umull	r2, r3, r6, r0
 80024ae:	fb02 f107 	mul.w	r1, r2, r7
 80024b2:	fb08 1303 	mla	r3, r8, r3, r1
                                        punto=mult(read_eeprom(PV));
 80024b6:	4605      	mov	r5, r0
                                        valor_float = ((dinero*punto*punto_aux)/ppu)-(valor*punto);
 80024b8:	fba2 0108 	umull	r0, r1, r2, r8
 80024bc:	4419      	add	r1, r3
 80024be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80024c2:	f7fd ff05 	bl	80002d0 <__aeabi_uldivmod>
 80024c6:	9b01      	ldr	r3, [sp, #4]
 80024c8:	fb03 0315 	mls	r3, r3, r5, r0
 80024cc:	9302      	str	r3, [sp, #8]
                                    f_pf(valor,valor_float,2);
 80024ce:	2202      	movs	r2, #2
 80024d0:	9902      	ldr	r1, [sp, #8]
 80024d2:	9801      	ldr	r0, [sp, #4]
 80024d4:	f00c f8fc 	bl	800e6d0 <f_pf>
                                    ButtonEmr(ENVIAR_VOLUMEN,TURNO);
 80024d8:	4b77      	ldr	r3, [pc, #476]	; (80026b8 <Thread1.lto_priv.65+0x1fe8>)
 80024da:	201d      	movs	r0, #29
 80024dc:	7819      	ldrb	r1, [r3, #0]
 80024de:	f00a fb2f 	bl	800cb40 <ButtonEmr>
                                    data_recibo(7);
 80024e2:	f00d f8bd 	bl	800f660 <data_recibo.constprop.1>
                                    sd_preset(2,TURNO);
 80024e6:	4b74      	ldr	r3, [pc, #464]	; (80026b8 <Thread1.lto_priv.65+0x1fe8>)
 80024e8:	2002      	movs	r0, #2
 80024ea:	7819      	ldrb	r1, [r3, #0]
 80024ec:	f006 f8a8 	bl	8008640 <sd_preset>
 80024f0:	f7ff bb53 	b.w	8001b9a <Thread1.lto_priv.65+0x14ca>
                                    punto=mult(read_eeprom(PV));
 80024f4:	7ba0      	ldrb	r0, [r4, #14]
                                    valor=((read_eeprom(preset1_1)*100000)+(read_eeprom(preset1_2)*10000)+(read_eeprom(preset1_3)*1000)+(read_eeprom(preset1_4)*100)+(read_eeprom(preset1_5)*10)+(read_eeprom(preset1_6)*1));
 80024f6:	4e6f      	ldr	r6, [pc, #444]	; (80026b4 <Thread1.lto_priv.65+0x1fe4>)
                                    punto=mult(read_eeprom(PV));
 80024f8:	f00b fff2 	bl	800e4e0 <mult>
                                    valor=((read_eeprom(preset1_1)*100000)+(read_eeprom(preset1_2)*10000)+(read_eeprom(preset1_3)*1000)+(read_eeprom(preset1_4)*100)+(read_eeprom(preset1_5)*10)+(read_eeprom(preset1_6)*1));
 80024fc:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8002500:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
                                    punto=mult(read_eeprom(PV));
 8002504:	4601      	mov	r1, r0
                                    valor=((read_eeprom(preset1_1)*100000)+(read_eeprom(preset1_2)*10000)+(read_eeprom(preset1_3)*1000)+(read_eeprom(preset1_4)*100)+(read_eeprom(preset1_5)*10)+(read_eeprom(preset1_6)*1));
 8002506:	f242 7010 	movw	r0, #10000	; 0x2710
 800250a:	fb00 f002 	mul.w	r0, r0, r2
 800250e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8002512:	fb06 0303 	mla	r3, r6, r3, r0
 8002516:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 800251a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800251e:	fb06 3202 	mla	r2, r6, r2, r3
 8002522:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
 8002526:	2364      	movs	r3, #100	; 0x64
 8002528:	fb13 2200 	smlabb	r2, r3, r0, r2
 800252c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8002530:	230a      	movs	r3, #10
 8002532:	fb13 2306 	smlabb	r3, r3, r6, r2
 8002536:	4403      	add	r3, r0
                                    f_pf(valor,valor_float,2);
 8002538:	2202      	movs	r2, #2
                                    valor_float=valor%punto;
 800253a:	fbb3 f0f1 	udiv	r0, r3, r1
                                    f_pf(valor,valor_float,2);
 800253e:	fb01 3110 	mls	r1, r1, r0, r3
 8002542:	f00c f8c5 	bl	800e6d0 <f_pf>
                                    ButtonEmr(ENVIAR_VOLUMEN,TURNO);
 8002546:	4b5c      	ldr	r3, [pc, #368]	; (80026b8 <Thread1.lto_priv.65+0x1fe8>)
 8002548:	201d      	movs	r0, #29
 800254a:	7819      	ldrb	r1, [r3, #0]
 800254c:	f00a faf8 	bl	800cb40 <ButtonEmr>
                                    data_recibo(7);
 8002550:	f00d f886 	bl	800f660 <data_recibo.constprop.1>
                                    sd_preset(1,TURNO);
 8002554:	4b58      	ldr	r3, [pc, #352]	; (80026b8 <Thread1.lto_priv.65+0x1fe8>)
 8002556:	4628      	mov	r0, r5
 8002558:	7819      	ldrb	r1, [r3, #0]
 800255a:	f006 f871 	bl	8008640 <sd_preset>
 800255e:	f7ff bb1c 	b.w	8001b9a <Thread1.lto_priv.65+0x14ca>
                        else if ( (palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (!palReadPad(GPIOC,IN_6)) ) 
 8002562:	4b56      	ldr	r3, [pc, #344]	; (80026bc <Thread1.lto_priv.65+0x1fec>)
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	045b      	lsls	r3, r3, #17
 8002568:	f140 81c3 	bpl.w	80028f2 <Thread1.lto_priv.65+0x2222>
 800256c:	4b54      	ldr	r3, [pc, #336]	; (80026c0 <Thread1.lto_priv.65+0x1ff0>)
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	0657      	lsls	r7, r2, #25
 8002572:	f140 81be 	bpl.w	80028f2 <Thread1.lto_priv.65+0x2222>
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	05de      	lsls	r6, r3, #23
 800257a:	f100 81ba 	bmi.w	80028f2 <Thread1.lto_priv.65+0x2222>
                    if(POS1_A == read_eeprom(pos2))  
 800257e:	78e3      	ldrb	r3, [r4, #3]
                            POS1_A=0X0F;
 8002580:	4a50      	ldr	r2, [pc, #320]	; (80026c4 <Thread1.lto_priv.65+0x1ff4>)
 8002582:	200f      	movs	r0, #15
                    if(POS1_A == read_eeprom(pos2))  
 8002584:	4283      	cmp	r3, r0
                            POS1_A=0X0F;
 8002586:	7010      	strb	r0, [r2, #0]
                    if(POS1_A == read_eeprom(pos2))  
 8002588:	f47e a9a3 	bne.w	80008d2 <Thread1.lto_priv.65+0x202>
                        if(POS1_A == 0X0F) POS1_A=0X00;
 800258c:	4b4d      	ldr	r3, [pc, #308]	; (80026c4 <Thread1.lto_priv.65+0x1ff4>)
 800258e:	2000      	movs	r0, #0
 8002590:	7018      	strb	r0, [r3, #0]
 8002592:	f7fe b99e 	b.w	80008d2 <Thread1.lto_priv.65+0x202>
	dato_emr3[num] = inf;
 8002596:	2300      	movs	r3, #0
 8002598:	2206      	movs	r2, #6
 800259a:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 800259e:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 80025a2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80025a6:	70a2      	strb	r2, [r4, #2]
 80025a8:	f7fe bae4 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                        else if ( (palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (!palReadPad(GPIOC,IN_6)) ) 
 80025ac:	4b43      	ldr	r3, [pc, #268]	; (80026bc <Thread1.lto_priv.65+0x1fec>)
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	0459      	lsls	r1, r3, #17
 80025b2:	f140 818b 	bpl.w	80028cc <Thread1.lto_priv.65+0x21fc>
 80025b6:	4b42      	ldr	r3, [pc, #264]	; (80026c0 <Thread1.lto_priv.65+0x1ff0>)
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	0652      	lsls	r2, r2, #25
 80025bc:	f140 8186 	bpl.w	80028cc <Thread1.lto_priv.65+0x21fc>
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	05df      	lsls	r7, r3, #23
 80025c4:	f100 8182 	bmi.w	80028cc <Thread1.lto_priv.65+0x21fc>
                    if(POS2_A == read_eeprom(pos1))  
 80025c8:	7863      	ldrb	r3, [r4, #1]
                            POS2_A=0X0F;
 80025ca:	4a3f      	ldr	r2, [pc, #252]	; (80026c8 <Thread1.lto_priv.65+0x1ff8>)
 80025cc:	200f      	movs	r0, #15
                    if(POS2_A == read_eeprom(pos1))  
 80025ce:	4283      	cmp	r3, r0
                            POS2_A=0X0F;
 80025d0:	7010      	strb	r0, [r2, #0]
                    if(POS2_A == read_eeprom(pos1))  
 80025d2:	f47e a97e 	bne.w	80008d2 <Thread1.lto_priv.65+0x202>
                        if(POS2_A == 0X0F) POS2_A=0X00;
 80025d6:	4b3c      	ldr	r3, [pc, #240]	; (80026c8 <Thread1.lto_priv.65+0x1ff8>)
 80025d8:	2000      	movs	r0, #0
 80025da:	7018      	strb	r0, [r3, #0]
 80025dc:	f7fe b979 	b.w	80008d2 <Thread1.lto_priv.65+0x202>
                        else if ( (palReadPad(GPIOD,IN_8)) && (!palReadPad(GPIOC,IN_7)) && (!palReadPad(GPIOC,IN_6)) ) 
 80025e0:	4b36      	ldr	r3, [pc, #216]	; (80026bc <Thread1.lto_priv.65+0x1fec>)
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	0459      	lsls	r1, r3, #17
 80025e6:	d547      	bpl.n	8002678 <Thread1.lto_priv.65+0x1fa8>
 80025e8:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <Thread1.lto_priv.65+0x1ff0>)
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	0652      	lsls	r2, r2, #25
 80025ee:	d443      	bmi.n	8002678 <Thread1.lto_priv.65+0x1fa8>
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	05df      	lsls	r7, r3, #23
 80025f4:	d440      	bmi.n	8002678 <Thread1.lto_priv.65+0x1fa8>
                            POS2_A=0X0D;
 80025f6:	4a34      	ldr	r2, [pc, #208]	; (80026c8 <Thread1.lto_priv.65+0x1ff8>)
 80025f8:	230d      	movs	r3, #13
 80025fa:	7013      	strb	r3, [r2, #0]
 80025fc:	f7fe b9cd 	b.w	800099a <Thread1.lto_priv.65+0x2ca>
                                        if(read_eeprom(consola) == 0x01 && read_eeprom(estado2) == 0X06)
 8002600:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8002604:	2a01      	cmp	r2, #1
	return (dato_emr3[num]);
 8002606:	78a2      	ldrb	r2, [r4, #2]
 8002608:	f001 8689 	beq.w	800431e <Thread1.lto_priv.65+0x3c4e>
                                        else if(read_eeprom(estado2) == 0X06)
 800260c:	2a06      	cmp	r2, #6
 800260e:	f001 866b 	beq.w	80042e8 <Thread1.lto_priv.65+0x3c18>
                                        else if (read_eeprom(estado2) == 0X08)
 8002612:	2a08      	cmp	r2, #8
 8002614:	f47e aaae 	bne.w	8000b74 <Thread1.lto_priv.65+0x4a4>
	dato_emr3[num] = inf;
 8002618:	2209      	movs	r2, #9
 800261a:	2302      	movs	r3, #2
 800261c:	70a2      	strb	r2, [r4, #2]
 800261e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 8002622:	f7fe bd85 	b.w	8001130 <Thread1.lto_priv.65+0xa60>
	return (dato_emr3[num]);
 8002626:	78a3      	ldrb	r3, [r4, #2]
                                    if(recibo[0X05] == 0X00 && (read_eeprom(estado2) == 0X06 || read_eeprom(estado2) == 0X07))
 8002628:	1f9a      	subs	r2, r3, #6
 800262a:	2a01      	cmp	r2, #1
 800262c:	d934      	bls.n	8002698 <Thread1.lto_priv.65+0x1fc8>
                                    else if(recibo[0X05] == 0X00 && read_eeprom(estado2) == 0X08)
 800262e:	2b08      	cmp	r3, #8
 8002630:	f47e aaa0 	bne.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                                        ButtonEmr(LEER_DISPLAY,TURNO);                           
 8002634:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <Thread1.lto_priv.65+0x1fe8>)
 8002636:	2004      	movs	r0, #4
 8002638:	7819      	ldrb	r1, [r3, #0]
 800263a:	f00a fa81 	bl	800cb40 <ButtonEmr>
                                        uartStartReceive(&UARTD1, 16, recibo_parcial);
 800263e:	a90f      	add	r1, sp, #60	; 0x3c
 8002640:	2010      	movs	r0, #16
 8002642:	f00c fcbd 	bl	800efc0 <uartStartReceive.constprop.23>
                                        chThdSleepMilliseconds(500);
 8002646:	f241 3088 	movw	r0, #5000	; 0x1388
 800264a:	f00a f9f9 	bl	800ca40 <chThdSleep>
                                        uartStopReceive(&UARTD1);
 800264e:	f00c fd17 	bl	800f080 <uartStopReceive.constprop.21>
                                        if(recibo_parcial[4] == 0x6B)
 8002652:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8002656:	2b6b      	cmp	r3, #107	; 0x6b
 8002658:	f47e aeda 	bne.w	8001410 <Thread1.lto_priv.65+0xd40>
                                            if(recibo_parcial[5] != 0X01)
 800265c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8002660:	2b01      	cmp	r3, #1
 8002662:	f43e aed5 	beq.w	8001410 <Thread1.lto_priv.65+0xd40>
                                                ButtonEmr(TECLADO_MODO,TURNO);
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <Thread1.lto_priv.65+0x1fe8>)
 8002668:	2001      	movs	r0, #1
 800266a:	7819      	ldrb	r1, [r3, #0]
 800266c:	f00a fa68 	bl	800cb40 <ButtonEmr>
                                                data_recibo(7);
 8002670:	f00c fff6 	bl	800f660 <data_recibo.constprop.1>
 8002674:	f7fe becc 	b.w	8001410 <Thread1.lto_priv.65+0xd40>
                        else if ( (palReadPad(GPIOD,IN_8)) && (!palReadPad(GPIOC,IN_7)) && (palReadPad(GPIOC,IN_6)) ) 
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <Thread1.lto_priv.65+0x1fec>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	045e      	lsls	r6, r3, #17
 800267e:	d595      	bpl.n	80025ac <Thread1.lto_priv.65+0x1edc>
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <Thread1.lto_priv.65+0x1ff0>)
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	0655      	lsls	r5, r2, #25
 8002686:	d491      	bmi.n	80025ac <Thread1.lto_priv.65+0x1edc>
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	05d8      	lsls	r0, r3, #23
 800268c:	d58e      	bpl.n	80025ac <Thread1.lto_priv.65+0x1edc>
                            POS2_A=0X0E;
 800268e:	4a0e      	ldr	r2, [pc, #56]	; (80026c8 <Thread1.lto_priv.65+0x1ff8>)
 8002690:	230e      	movs	r3, #14
 8002692:	7013      	strb	r3, [r2, #0]
 8002694:	f7fe b981 	b.w	800099a <Thread1.lto_priv.65+0x2ca>
                                        ButtonEmr(TECLADO_FIN,TURNO);
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <Thread1.lto_priv.65+0x1fe8>)
 800269a:	2002      	movs	r0, #2
 800269c:	7819      	ldrb	r1, [r3, #0]
 800269e:	f00a fa4f 	bl	800cb40 <ButtonEmr>
                                        data_recibo(7);
 80026a2:	f00c ffdd 	bl	800f660 <data_recibo.constprop.1>
	dato_emr3[num] = inf;
 80026a6:	2306      	movs	r3, #6
 80026a8:	f884 6088 	strb.w	r6, [r4, #136]	; 0x88
 80026ac:	70a3      	strb	r3, [r4, #2]
 80026ae:	f7fe ba61 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
 80026b2:	bf00      	nop
 80026b4:	000186a0 	.word	0x000186a0
 80026b8:	20000800 	.word	0x20000800
 80026bc:	40020c00 	.word	0x40020c00
 80026c0:	40020800 	.word	0x40020800
 80026c4:	20000901 	.word	0x20000901
 80026c8:	20000902 	.word	0x20000902
                                ButtonEmr(LEER_DISPLAY,TURNO);
 80026cc:	4ad5      	ldr	r2, [pc, #852]	; (8002a24 <Thread1.lto_priv.65+0x2354>)
 80026ce:	230a      	movs	r3, #10
 80026d0:	7811      	ldrb	r1, [r2, #0]
 80026d2:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 80026d6:	2004      	movs	r0, #4
 80026d8:	f00a fa32 	bl	800cb40 <ButtonEmr>
                                uartStartReceive(&UARTD1, 16, recibo_parcial);
 80026dc:	a90f      	add	r1, sp, #60	; 0x3c
 80026de:	2010      	movs	r0, #16
 80026e0:	f00c fc6e 	bl	800efc0 <uartStartReceive.constprop.23>
                                chThdSleepMilliseconds(500);
 80026e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80026e8:	f00a f9aa 	bl	800ca40 <chThdSleep>
                                uartStopReceive(&UARTD1); 
 80026ec:	f00c fcc8 	bl	800f080 <uartStopReceive.constprop.21>
                                if(read_eeprom(log) == 1) emr3_log(&recibo_parcial,16,2);  
 80026f0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	f000 8124 	beq.w	8002942 <Thread1.lto_priv.65+0x2272>
 80026fa:	f10d 031f 	add.w	r3, sp, #31
                                    recibo[i]=0x00;
 80026fe:	2200      	movs	r2, #0
 8002700:	f803 2f01 	strb.w	r2, [r3, #1]!
                                for(i=0;i<14;i++)
 8002704:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
 8002708:	4299      	cmp	r1, r3
 800270a:	d1f9      	bne.n	8002700 <Thread1.lto_priv.65+0x2030>
 800270c:	aa10      	add	r2, sp, #64	; 0x40
 800270e:	2305      	movs	r3, #5
                                    if(recibo_parcial[i] != 0X2E && recibo_parcial[i] != 0X2C)
 8002710:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8002714:	f001 00fd 	and.w	r0, r1, #253	; 0xfd
 8002718:	282c      	cmp	r0, #44	; 0x2c
 800271a:	d005      	beq.n	8002728 <Thread1.lto_priv.65+0x2058>
                                        recibo[j] = recibo_parcial[i];
 800271c:	a816      	add	r0, sp, #88	; 0x58
 800271e:	4418      	add	r0, r3
                                        j++;
 8002720:	3301      	adds	r3, #1
                                        recibo[j] = recibo_parcial[i];
 8002722:	f800 1c38 	strb.w	r1, [r0, #-56]
                                        j++;
 8002726:	b2db      	uxtb	r3, r3
                                for(i=5;i<14;i++)
 8002728:	f10d 0149 	add.w	r1, sp, #73	; 0x49
 800272c:	4291      	cmp	r1, r2
 800272e:	d1ef      	bne.n	8002710 <Thread1.lto_priv.65+0x2040>
                                B6=0X0F & recibo[11];
 8002730:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
                                B5=0X0F & recibo[10];
 8002734:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
                                if(recibo[0x05] == 0x01)
 8002738:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
                                B4=0X0F & recibo[9];
 800273c:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
                                B3=0X0F & recibo[8];
 8002740:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
                                B2=0X0F & recibo[7];
 8002744:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
                                B1=0X0F & recibo[6];
 8002748:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
                                B6=0X0F & recibo[11];
 800274c:	f000 000f 	and.w	r0, r0, #15
                                B5=0X0F & recibo[10];
 8002750:	f001 010f 	and.w	r1, r1, #15
                                if(recibo[0x05] == 0x01)
 8002754:	2e01      	cmp	r6, #1
                                B6=0X0F & recibo[11];
 8002756:	9004      	str	r0, [sp, #16]
                                B5=0X0F & recibo[10];
 8002758:	9105      	str	r1, [sp, #20]
                                B4=0X0F & recibo[9];
 800275a:	f007 070f 	and.w	r7, r7, #15
                                B3=0X0F & recibo[8];
 800275e:	f008 080f 	and.w	r8, r8, #15
                                B2=0X0F & recibo[7];
 8002762:	f002 020f 	and.w	r2, r2, #15
                                B1=0X0F & recibo[6];
 8002766:	f003 030f 	and.w	r3, r3, #15
                                if(recibo[0x05] == 0x01)
 800276a:	f000 8181 	beq.w	8002a70 <Thread1.lto_priv.65+0x23a0>
 800276e:	9307      	str	r3, [sp, #28]
                                    ButtonEmr(TECLADO_MODO,TURNO);
 8002770:	4bac      	ldr	r3, [pc, #688]	; (8002a24 <Thread1.lto_priv.65+0x2354>)
 8002772:	9206      	str	r2, [sp, #24]
 8002774:	7819      	ldrb	r1, [r3, #0]
 8002776:	2001      	movs	r0, #1
                                else if(recibo[0x05] == 0x00)
 8002778:	2e00      	cmp	r6, #0
 800277a:	f47f a931 	bne.w	80019e0 <Thread1.lto_priv.65+0x1310>
                                    ButtonEmr(TECLADO_MODO,TURNO);
 800277e:	f00a f9df 	bl	800cb40 <ButtonEmr>
                                    data_recibo(7);                                        
 8002782:	f00c ff6d 	bl	800f660 <data_recibo.constprop.1>
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002786:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
 800278a:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
                                    vol_real = ((B1*100000) + (B2*10000) + (B3*1000) + (B4*100) + (B5*10) + B6);
 800278e:	9a06      	ldr	r2, [sp, #24]
 8002790:	4da5      	ldr	r5, [pc, #660]	; (8002a28 <Thread1.lto_priv.65+0x2358>)
 8002792:	9b07      	ldr	r3, [sp, #28]
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002794:	ebc1 1e41 	rsb	lr, r1, r1, lsl #5
 8002798:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800279c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
                                    vol_real = ((B1*100000) + (B2*10000) + (B3*1000) + (B4*100) + (B5*10) + B6);
 80027a0:	f242 7e10 	movw	lr, #10000	; 0x2710
 80027a4:	fb0e f202 	mul.w	r2, lr, r2
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 80027a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
                                    vol_real = ((B1*100000) + (B2*10000) + (B3*1000) + (B4*100) + (B5*10) + B6);
 80027ac:	fb05 2303 	mla	r3, r5, r3, r2
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 80027b0:	0080      	lsls	r0, r0, #2
 80027b2:	f894 5090 	ldrb.w	r5, [r4, #144]	; 0x90
 80027b6:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
                                    vol_real = ((B1*100000) + (B2*10000) + (B3*1000) + (B4*100) + (B5*10) + B6);
 80027ba:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 80027be:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
                                    vol_real = ((B1*100000) + (B2*10000) + (B3*1000) + (B4*100) + (B5*10) + B6);
 80027c2:	fb0e 3808 	mla	r8, lr, r8, r3
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 80027c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80027ca:	186b      	adds	r3, r5, r1
 80027cc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                                    vol_real = ((B1*100000) + (B2*10000) + (B3*1000) + (B4*100) + (B5*10) + B6);
 80027d0:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80027d4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80027d8:	fb1e 8e07 	smlabb	lr, lr, r7, r8
 80027dc:	250a      	movs	r5, #10
 80027de:	fb15 e502 	smlabb	r5, r5, r2, lr
                                    if(vol_real == 0) din_real = 0;
 80027e2:	9a04      	ldr	r2, [sp, #16]
 80027e4:	18ad      	adds	r5, r5, r2
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 80027e6:	b29b      	uxth	r3, r3
                                    if(vol_real == 0) din_real = 0;
 80027e8:	f040 80b1 	bne.w	800294e <Thread1.lto_priv.65+0x227e>
 80027ec:	9506      	str	r5, [sp, #24]
 80027ee:	9504      	str	r5, [sp, #16]
 80027f0:	9505      	str	r5, [sp, #20]
 80027f2:	46ae      	mov	lr, r5
 80027f4:	46ac      	mov	ip, r5
                                    write_eeprom(real_vol16,(vol_real%10));                                    
 80027f6:	4b8d      	ldr	r3, [pc, #564]	; (8002a2c <Thread1.lto_priv.65+0x235c>)
                                    vol_real = vol_real/10;
 80027f8:	498d      	ldr	r1, [pc, #564]	; (8002a30 <Thread1.lto_priv.65+0x2360>)
 80027fa:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
 80027fe:	096f      	lsrs	r7, r5, #5
 8002800:	fba1 1707 	umull	r1, r7, r1, r7
                                    write_eeprom(real_vol16,(vol_real%10));                                    
 8002804:	fba3 0105 	umull	r0, r1, r3, r5
                                    vol_real = vol_real/10;
 8002808:	488a      	ldr	r0, [pc, #552]	; (8002a34 <Thread1.lto_priv.65+0x2364>)
 800280a:	f884 e062 	strb.w	lr, [r4, #98]	; 0x62
 800280e:	fba0 0805 	umull	r0, r8, r0, r5
                                    vol_real = vol_real/10;
 8002812:	4889      	ldr	r0, [pc, #548]	; (8002a38 <Thread1.lto_priv.65+0x2368>)
 8002814:	f884 c063 	strb.w	ip, [r4, #99]	; 0x63
 8002818:	fba0 0605 	umull	r0, r6, r0, r5
                                    vol_real = vol_real/10;
 800281c:	4887      	ldr	r0, [pc, #540]	; (8002a3c <Thread1.lto_priv.65+0x236c>)
                                    write_eeprom(real_vol16,(vol_real%10));                                    
 800281e:	08c9      	lsrs	r1, r1, #3
                                    vol_real = vol_real/10;
 8002820:	fba0 2005 	umull	r2, r0, r0, r5
 8002824:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002828:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
                                    write_eeprom(real_vol15,(vol_real%10));
 800282c:	fba3 e201 	umull	lr, r2, r3, r1
 8002830:	08d2      	lsrs	r2, r2, #3
 8002832:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                                    vol_real = vol_real/10;
 8002836:	09ff      	lsrs	r7, r7, #7
                                    write_eeprom(real_vol15,(vol_real%10));
 8002838:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
                                    write_eeprom(real_vol16,(vol_real%10));                                    
 800283c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002840:	eba5 0541 	sub.w	r5, r5, r1, lsl #1
                                    write_eeprom(real_vol11,(vol_real%10));                                   
 8002844:	fba3 e107 	umull	lr, r1, r3, r7
 8002848:	08c9      	lsrs	r1, r1, #3
                                    vol_real = vol_real/10;
 800284a:	ea4f 1858 	mov.w	r8, r8, lsr #5
                                    vol_real = vol_real/10;
 800284e:	09b6      	lsrs	r6, r6, #6
                                    vol_real = vol_real/10;
 8002850:	0b40      	lsrs	r0, r0, #13
                                    write_eeprom(real_vol11,(vol_real%10));                                   
 8002852:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002856:	eba7 0741 	sub.w	r7, r7, r1, lsl #1
                                    write_eeprom(real_vol14,(vol_real%10));
 800285a:	fba3 e108 	umull	lr, r1, r3, r8
                                    write_eeprom(real_vol13,(vol_real%10));
 800285e:	fba3 ce06 	umull	ip, lr, r3, r6
                                    write_eeprom(real_vol12,(vol_real%10));
 8002862:	fba3 c300 	umull	ip, r3, r3, r0
 8002866:	08db      	lsrs	r3, r3, #3
 8002868:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                    write_eeprom(real_vol14,(vol_real%10));
 800286c:	08c9      	lsrs	r1, r1, #3
                                    write_eeprom(real_vol13,(vol_real%10));
 800286e:	ea4f 0ede 	mov.w	lr, lr, lsr #3
                                    write_eeprom(real_vol12,(vol_real%10));
 8002872:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
                                    write_eeprom(real_vol14,(vol_real%10));
 8002876:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800287a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800287e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
                                    write_eeprom(real_vol13,(vol_real%10));
 8002882:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
                                    write_eeprom(real_vol14,(vol_real%10));
 8002886:	eba8 0141 	sub.w	r1, r8, r1, lsl #1
                                    write_eeprom(real_vol13,(vol_real%10));
 800288a:	eba6 0e4e 	sub.w	lr, r6, lr, lsl #1
 800288e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002892:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
                                    write_eeprom(real_vol15,(vol_real%10));
 8002896:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
                                    write_eeprom(real_vol16,(vol_real%10));                                    
 800289a:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
                                    write_eeprom(real_vol11,(vol_real%10));                                   
 800289e:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
                                    write_eeprom(real_vol14,(vol_real%10));
 80028a2:	f884 106f 	strb.w	r1, [r4, #111]	; 0x6f
                                    write_eeprom(real_vol13,(vol_real%10));
 80028a6:	f884 e06e 	strb.w	lr, [r4, #110]	; 0x6e
                                    write_eeprom(real_vol12,(vol_real%10));
 80028aa:	f884 006d 	strb.w	r0, [r4, #109]	; 0x6d
 80028ae:	f7fe bac4 	b.w	8000e3a <Thread1.lto_priv.65+0x76a>
                                        ButtonEmr(TECLADO_FIN,TURNO);
 80028b2:	4b5c      	ldr	r3, [pc, #368]	; (8002a24 <Thread1.lto_priv.65+0x2354>)
 80028b4:	2002      	movs	r0, #2
 80028b6:	7819      	ldrb	r1, [r3, #0]
 80028b8:	f00a f942 	bl	800cb40 <ButtonEmr>
                                        data_recibo(7);
 80028bc:	f00c fed0 	bl	800f660 <data_recibo.constprop.1>
 80028c0:	2306      	movs	r3, #6
 80028c2:	f884 6087 	strb.w	r6, [r4, #135]	; 0x87
 80028c6:	7023      	strb	r3, [r4, #0]
 80028c8:	f7fe bab7 	b.w	8000e3a <Thread1.lto_priv.65+0x76a>
                        else if ( (palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (palReadPad(GPIOC,IN_6)) ) 
 80028cc:	4b5c      	ldr	r3, [pc, #368]	; (8002a40 <Thread1.lto_priv.65+0x2370>)
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	045e      	lsls	r6, r3, #17
 80028d2:	f57f a809 	bpl.w	80018e8 <Thread1.lto_priv.65+0x1218>
 80028d6:	4b5b      	ldr	r3, [pc, #364]	; (8002a44 <Thread1.lto_priv.65+0x2374>)
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	0655      	lsls	r5, r2, #25
 80028dc:	f57f a804 	bpl.w	80018e8 <Thread1.lto_priv.65+0x1218>
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	05d8      	lsls	r0, r3, #23
 80028e4:	f57f a800 	bpl.w	80018e8 <Thread1.lto_priv.65+0x1218>
                            POS2_A=0X00;
 80028e8:	4a57      	ldr	r2, [pc, #348]	; (8002a48 <Thread1.lto_priv.65+0x2378>)
 80028ea:	2300      	movs	r3, #0
 80028ec:	7013      	strb	r3, [r2, #0]
 80028ee:	f7fe b854 	b.w	800099a <Thread1.lto_priv.65+0x2ca>
                        else if ( (palReadPad(GPIOD,IN_8)) && (palReadPad(GPIOC,IN_7)) && (palReadPad(GPIOC,IN_6)) ) 
 80028f2:	4b53      	ldr	r3, [pc, #332]	; (8002a40 <Thread1.lto_priv.65+0x2370>)
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	045d      	lsls	r5, r3, #17
 80028f8:	f57e af65 	bpl.w	80017c6 <Thread1.lto_priv.65+0x10f6>
 80028fc:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <Thread1.lto_priv.65+0x2374>)
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	0650      	lsls	r0, r2, #25
 8002902:	f57e af60 	bpl.w	80017c6 <Thread1.lto_priv.65+0x10f6>
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	05d9      	lsls	r1, r3, #23
 800290a:	f57e af5c 	bpl.w	80017c6 <Thread1.lto_priv.65+0x10f6>
                            POS1_A=0X00;
 800290e:	4a4f      	ldr	r2, [pc, #316]	; (8002a4c <Thread1.lto_priv.65+0x237c>)
 8002910:	2300      	movs	r3, #0
 8002912:	7013      	strb	r3, [r2, #0]
 8002914:	f7fd bfd8 	b.w	80008c8 <Thread1.lto_priv.65+0x1f8>
                            else if (read_eeprom(pasos1) == 0X0C)
 8002918:	2e0c      	cmp	r6, #12
 800291a:	f47e aa8e 	bne.w	8000e3a <Thread1.lto_priv.65+0x76a>
                                LeerTotales(TURNO);                                                                
 800291e:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <Thread1.lto_priv.65+0x2354>)
 8002920:	7818      	ldrb	r0, [r3, #0]
 8002922:	f00c f815 	bl	800e950 <LeerTotales>
                                if(read_eeprom(consola) == 0x01)
 8002926:	f894 5059 	ldrb.w	r5, [r4, #89]	; 0x59
 800292a:	2d01      	cmp	r5, #1
 800292c:	f000 8090 	beq.w	8002a50 <Thread1.lto_priv.65+0x2380>
 8002930:	2301      	movs	r3, #1
 8002932:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 8002936:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
 800293a:	230b      	movs	r3, #11
 800293c:	7023      	strb	r3, [r4, #0]
 800293e:	f7ff bb28 	b.w	8001f92 <Thread1.lto_priv.65+0x18c2>
                                if(read_eeprom(log) == 1) emr3_log(&recibo_parcial,16,2);  
 8002942:	2202      	movs	r2, #2
 8002944:	2110      	movs	r1, #16
 8002946:	a80f      	add	r0, sp, #60	; 0x3c
 8002948:	f00b fbea 	bl	800e120 <emr3_log>
 800294c:	e6d5      	b.n	80026fa <Thread1.lto_priv.65+0x202a>
                                        din_real = (vol_real * ppu ) / ((mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) / mult(read_eeprom(PD)));
 800294e:	7ba0      	ldrb	r0, [r4, #14]
 8002950:	fb05 f603 	mul.w	r6, r5, r3
 8002954:	f00b fdc4 	bl	800e4e0 <mult>
 8002958:	4607      	mov	r7, r0
 800295a:	7920      	ldrb	r0, [r4, #4]
 800295c:	f00b fdc0 	bl	800e4e0 <mult>
 8002960:	fb00 f707 	mul.w	r7, r0, r7
 8002964:	7ee0      	ldrb	r0, [r4, #27]
 8002966:	f00b fdbb 	bl	800e4e0 <mult>
 800296a:	4a30      	ldr	r2, [pc, #192]	; (8002a2c <Thread1.lto_priv.65+0x235c>)
 800296c:	4930      	ldr	r1, [pc, #192]	; (8002a30 <Thread1.lto_priv.65+0x2360>)
 800296e:	fb97 f3f0 	sdiv	r3, r7, r0
 8002972:	fbb6 f3f3 	udiv	r3, r6, r3
 8002976:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 800297a:	fba1 1e0e 	umull	r1, lr, r1, lr
 800297e:	fba2 1003 	umull	r1, r0, r2, r3
 8002982:	492c      	ldr	r1, [pc, #176]	; (8002a34 <Thread1.lto_priv.65+0x2364>)
 8002984:	fba1 1703 	umull	r1, r7, r1, r3
 8002988:	492b      	ldr	r1, [pc, #172]	; (8002a38 <Thread1.lto_priv.65+0x2368>)
 800298a:	fba1 1c03 	umull	r1, ip, r1, r3
 800298e:	492b      	ldr	r1, [pc, #172]	; (8002a3c <Thread1.lto_priv.65+0x236c>)
 8002990:	ea4f 1ede 	mov.w	lr, lr, lsr #7
 8002994:	fba1 6103 	umull	r6, r1, r1, r3
 8002998:	08c0      	lsrs	r0, r0, #3
 800299a:	fba2 860e 	umull	r8, r6, r2, lr
 800299e:	0b49      	lsrs	r1, r1, #13
 80029a0:	9104      	str	r1, [sp, #16]
 80029a2:	08f6      	lsrs	r6, r6, #3
 80029a4:	fba2 8100 	umull	r8, r1, r2, r0
 80029a8:	9605      	str	r6, [sp, #20]
 80029aa:	097f      	lsrs	r7, r7, #5
 80029ac:	08c9      	lsrs	r1, r1, #3
 80029ae:	fba2 6807 	umull	r6, r8, r2, r7
 80029b2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80029b6:	9e05      	ldr	r6, [sp, #20]
 80029b8:	9105      	str	r1, [sp, #20]
 80029ba:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 80029be:	9904      	ldr	r1, [sp, #16]
 80029c0:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 80029c4:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80029c8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80029cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80029d0:	ebae 0e46 	sub.w	lr, lr, r6, lsl #1
 80029d4:	fba2 860c 	umull	r8, r6, r2, ip
 80029d8:	fba2 2801 	umull	r2, r8, r2, r1
 80029dc:	9905      	ldr	r1, [sp, #20]
 80029de:	08f2      	lsrs	r2, r6, #3
 80029e0:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 80029e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029e8:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80029ec:	9e06      	ldr	r6, [sp, #24]
 80029ee:	9804      	ldr	r0, [sp, #16]
 80029f0:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 80029f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80029f8:	ebac 0242 	sub.w	r2, ip, r2, lsl #1
 80029fc:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8002a00:	eba7 0746 	sub.w	r7, r7, r6, lsl #1
 8002a04:	eba0 0848 	sub.w	r8, r0, r8, lsl #1
 8002a08:	b2de      	uxtb	r6, r3
 8002a0a:	b2d3      	uxtb	r3, r2
 8002a0c:	fa5f f08e 	uxtb.w	r0, lr
 8002a10:	9305      	str	r3, [sp, #20]
 8002a12:	fa5f f388 	uxtb.w	r3, r8
 8002a16:	9006      	str	r0, [sp, #24]
 8002a18:	fa5f fc81 	uxtb.w	ip, r1
 8002a1c:	fa5f fe87 	uxtb.w	lr, r7
 8002a20:	9304      	str	r3, [sp, #16]
 8002a22:	e6e8      	b.n	80027f6 <Thread1.lto_priv.65+0x2126>
 8002a24:	20000800 	.word	0x20000800
 8002a28:	000186a0 	.word	0x000186a0
 8002a2c:	cccccccd 	.word	0xcccccccd
 8002a30:	0a7c5ac5 	.word	0x0a7c5ac5
 8002a34:	51eb851f 	.word	0x51eb851f
 8002a38:	10624dd3 	.word	0x10624dd3
 8002a3c:	d1b71759 	.word	0xd1b71759
 8002a40:	40020c00 	.word	0x40020c00
 8002a44:	40020800 	.word	0x40020800
 8002a48:	20000902 	.word	0x20000902
 8002a4c:	20000901 	.word	0x20000901
                                    Status_1(0x06);
 8002a50:	2006      	movs	r0, #6
 8002a52:	f00a fed5 	bl	800d800 <Status_1>
 8002a56:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8002a5a:	f884 5082 	strb.w	r5, [r4, #130]	; 0x82
                                if(read_eeprom(consola) == 1)
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	f884 5083 	strb.w	r5, [r4, #131]	; 0x83
 8002a64:	f47f af69 	bne.w	800293a <Thread1.lto_priv.65+0x226a>
 8002a68:	2306      	movs	r3, #6
 8002a6a:	7023      	strb	r3, [r4, #0]
 8002a6c:	f7ff ba91 	b.w	8001f92 <Thread1.lto_priv.65+0x18c2>
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002a70:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
 8002a74:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
                                    din_real = ((B1 * 100000) + (B2 * 10000) + (B3 * 1000) + (B4 * 100) + (B5 * 10) + B6);
 8002a78:	4e74      	ldr	r6, [pc, #464]	; (8002c4c <Thread1.lto_priv.65+0x257c>)
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002a7a:	ebc1 1e41 	rsb	lr, r1, r1, lsl #5
 8002a7e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8002a82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
                                    din_real = ((B1 * 100000) + (B2 * 10000) + (B3 * 1000) + (B4 * 100) + (B5 * 10) + B6);
 8002a86:	f242 7e10 	movw	lr, #10000	; 0x2710
 8002a8a:	fb0e f202 	mul.w	r2, lr, r2
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002a8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
                                    din_real = ((B1 * 100000) + (B2 * 10000) + (B3 * 1000) + (B4 * 100) + (B5 * 10) + B6);
 8002a92:	fb06 2303 	mla	r3, r6, r3, r2
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002a96:	0080      	lsls	r0, r0, #2
 8002a98:	f894 6090 	ldrb.w	r6, [r4, #144]	; 0x90
 8002a9c:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
 8002aa0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002aa4:	1870      	adds	r0, r6, r1
                                    din_real = ((B1 * 100000) + (B2 * 10000) + (B3 * 1000) + (B4 * 100) + (B5 * 10) + B6);
 8002aa6:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002aaa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                                    din_real = ((B1 * 100000) + (B2 * 10000) + (B3 * 1000) + (B4 * 100) + (B5 * 10) + B6);
 8002aae:	fb0e 3308 	mla	r3, lr, r8, r3
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002ab2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
                                    din_real = ((B1 * 100000) + (B2 * 10000) + (B3 * 1000) + (B4 * 100) + (B5 * 10) + B6);
 8002ab6:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8002aba:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8002abe:	fb1e 3307 	smlabb	r3, lr, r7, r3
 8002ac2:	210a      	movs	r1, #10
 8002ac4:	fb11 3100 	smlabb	r1, r1, r0, r3
                                    if(din_real == 0) vol_real = 0;
 8002ac8:	9b04      	ldr	r3, [sp, #16]
 8002aca:	18c9      	adds	r1, r1, r3
                                    ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002acc:	b292      	uxth	r2, r2
                                    if(din_real == 0) vol_real = 0;
 8002ace:	f000 80b7 	beq.w	8002c40 <Thread1.lto_priv.65+0x2570>
                                        vol_real = ((din_real)/ppu);
 8002ad2:	fbb1 f2f2 	udiv	r2, r1, r2
 8002ad6:	485e      	ldr	r0, [pc, #376]	; (8002c50 <Thread1.lto_priv.65+0x2580>)
 8002ad8:	4b5e      	ldr	r3, [pc, #376]	; (8002c54 <Thread1.lto_priv.65+0x2584>)
 8002ada:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8002ade:	fba3 3e0e 	umull	r3, lr, r3, lr
 8002ae2:	fba0 5302 	umull	r5, r3, r0, r2
 8002ae6:	4d5c      	ldr	r5, [pc, #368]	; (8002c58 <Thread1.lto_priv.65+0x2588>)
 8002ae8:	fba5 5602 	umull	r5, r6, r5, r2
 8002aec:	4d5b      	ldr	r5, [pc, #364]	; (8002c5c <Thread1.lto_priv.65+0x258c>)
 8002aee:	fba5 5c02 	umull	r5, ip, r5, r2
 8002af2:	4d5b      	ldr	r5, [pc, #364]	; (8002c60 <Thread1.lto_priv.65+0x2590>)
 8002af4:	fba5 7502 	umull	r7, r5, r5, r2
 8002af8:	08db      	lsrs	r3, r3, #3
 8002afa:	0b6d      	lsrs	r5, r5, #13
 8002afc:	ea4f 1ede 	mov.w	lr, lr, lsr #7
 8002b00:	0976      	lsrs	r6, r6, #5
 8002b02:	9604      	str	r6, [sp, #16]
 8002b04:	462e      	mov	r6, r5
 8002b06:	fba0 570e 	umull	r5, r7, r0, lr
 8002b0a:	fba0 8503 	umull	r8, r5, r0, r3
 8002b0e:	08ed      	lsrs	r5, r5, #3
 8002b10:	9505      	str	r5, [sp, #20]
 8002b12:	9d04      	ldr	r5, [sp, #16]
 8002b14:	9606      	str	r6, [sp, #24]
 8002b16:	46a8      	mov	r8, r5
 8002b18:	fba0 5808 	umull	r5, r8, r0, r8
 8002b1c:	9d05      	ldr	r5, [sp, #20]
 8002b1e:	08ff      	lsrs	r7, r7, #3
 8002b20:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002b24:	9505      	str	r5, [sp, #20]
 8002b26:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 8002b2a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8002b2e:	ebae 0e47 	sub.w	lr, lr, r7, lsl #1
 8002b32:	fba0 570c 	umull	r5, r7, r0, ip
 8002b36:	fba0 5006 	umull	r5, r0, r0, r6
 8002b3a:	9e05      	ldr	r6, [sp, #20]
 8002b3c:	eba3 0546 	sub.w	r5, r3, r6, lsl #1
 8002b40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b44:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8002b48:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8002b4c:	9a04      	ldr	r2, [sp, #16]
 8002b4e:	08ff      	lsrs	r7, r7, #3
 8002b50:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8002b54:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8002b58:	eba2 0648 	sub.w	r6, r2, r8, lsl #1
 8002b5c:	08c0      	lsrs	r0, r0, #3
 8002b5e:	ebac 0247 	sub.w	r2, ip, r7, lsl #1
 8002b62:	9f06      	ldr	r7, [sp, #24]
 8002b64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b68:	eba7 0040 	sub.w	r0, r7, r0, lsl #1
 8002b6c:	fa5f fc85 	uxtb.w	ip, r5
 8002b70:	b2dd      	uxtb	r5, r3
 8002b72:	b2d3      	uxtb	r3, r2
 8002b74:	fa5f f78e 	uxtb.w	r7, lr
 8002b78:	9304      	str	r3, [sp, #16]
 8002b7a:	b2c3      	uxtb	r3, r0
 8002b7c:	9706      	str	r7, [sp, #24]
 8002b7e:	fa5f fe86 	uxtb.w	lr, r6
 8002b82:	9305      	str	r3, [sp, #20]
                                    write_eeprom(real_din16,(din_real%10));                                        
 8002b84:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <Thread1.lto_priv.65+0x2580>)
                                    din_real = din_real/10;
 8002b86:	4833      	ldr	r0, [pc, #204]	; (8002c54 <Thread1.lto_priv.65+0x2584>)
 8002b88:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
 8002b8c:	094f      	lsrs	r7, r1, #5
 8002b8e:	fba0 0707 	umull	r0, r7, r0, r7
                                    write_eeprom(real_din16,(din_real%10));                                        
 8002b92:	fba3 5001 	umull	r5, r0, r3, r1
                                    din_real = din_real/10;
 8002b96:	4d30      	ldr	r5, [pc, #192]	; (8002c58 <Thread1.lto_priv.65+0x2588>)
 8002b98:	f884 e06f 	strb.w	lr, [r4, #111]	; 0x6f
 8002b9c:	fba5 5801 	umull	r5, r8, r5, r1
                                    din_real = din_real/10;
 8002ba0:	4d2e      	ldr	r5, [pc, #184]	; (8002c5c <Thread1.lto_priv.65+0x258c>)
 8002ba2:	f884 c070 	strb.w	ip, [r4, #112]	; 0x70
 8002ba6:	fba5 5601 	umull	r5, r6, r5, r1
                                    din_real = din_real/10;
 8002baa:	4d2d      	ldr	r5, [pc, #180]	; (8002c60 <Thread1.lto_priv.65+0x2590>)
                                    write_eeprom(real_din16,(din_real%10));                                        
 8002bac:	08c0      	lsrs	r0, r0, #3
                                    din_real = din_real/10;
 8002bae:	fba5 2501 	umull	r2, r5, r5, r1
 8002bb2:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8002bb6:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
                                    write_eeprom(real_din15,(din_real%10));
 8002bba:	fba3 e200 	umull	lr, r2, r3, r0
 8002bbe:	08d2      	lsrs	r2, r2, #3
 8002bc0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                                    din_real = din_real/10;
 8002bc4:	09ff      	lsrs	r7, r7, #7
                                    write_eeprom(real_din15,(din_real%10));
 8002bc6:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
                                    write_eeprom(real_din16,(din_real%10));                                        
 8002bca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002bce:	eba1 0040 	sub.w	r0, r1, r0, lsl #1
                                    write_eeprom(real_din11,(din_real%10));
 8002bd2:	fba3 e107 	umull	lr, r1, r3, r7
 8002bd6:	08c9      	lsrs	r1, r1, #3
                                    din_real = din_real/10;
 8002bd8:	ea4f 1858 	mov.w	r8, r8, lsr #5
                                    din_real = din_real/10;
 8002bdc:	09b6      	lsrs	r6, r6, #6
                                    din_real = din_real/10;
 8002bde:	0b6d      	lsrs	r5, r5, #13
                                    write_eeprom(real_din11,(din_real%10));
 8002be0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002be4:	eba7 0741 	sub.w	r7, r7, r1, lsl #1
                                    write_eeprom(real_din14,(din_real%10));
 8002be8:	fba3 e108 	umull	lr, r1, r3, r8
                                    write_eeprom(real_din13,(din_real%10));
 8002bec:	fba3 ce06 	umull	ip, lr, r3, r6
                                    write_eeprom(real_din12,(din_real%10));
 8002bf0:	fba3 c305 	umull	ip, r3, r3, r5
 8002bf4:	08db      	lsrs	r3, r3, #3
 8002bf6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                    write_eeprom(real_din14,(din_real%10));
 8002bfa:	08c9      	lsrs	r1, r1, #3
                                    write_eeprom(real_din13,(din_real%10));
 8002bfc:	ea4f 0ede 	mov.w	lr, lr, lsr #3
                                    write_eeprom(real_din12,(din_real%10));
 8002c00:	eba5 0543 	sub.w	r5, r5, r3, lsl #1
                                    write_eeprom(real_din14,(din_real%10));
 8002c04:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002c08:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8002c0c:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
                                    write_eeprom(real_din13,(din_real%10));
 8002c10:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
                                    write_eeprom(real_din14,(din_real%10));
 8002c14:	eba8 0141 	sub.w	r1, r8, r1, lsl #1
                                    write_eeprom(real_din13,(din_real%10));
 8002c18:	eba6 0e4e 	sub.w	lr, r6, lr, lsl #1
 8002c1c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002c20:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
                                    write_eeprom(real_din15,(din_real%10));
 8002c24:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
                                    write_eeprom(real_din16,(din_real%10));                                        
 8002c28:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
                                    write_eeprom(real_din11,(din_real%10));
 8002c2c:	f884 705f 	strb.w	r7, [r4, #95]	; 0x5f
                                    write_eeprom(real_din14,(din_real%10));
 8002c30:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
                                    write_eeprom(real_din13,(din_real%10));
 8002c34:	f884 e061 	strb.w	lr, [r4, #97]	; 0x61
                                    write_eeprom(real_din12,(din_real%10));
 8002c38:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
 8002c3c:	f7fe b8fd 	b.w	8000e3a <Thread1.lto_priv.65+0x76a>
                                    if(din_real == 0) vol_real = 0;
 8002c40:	9106      	str	r1, [sp, #24]
 8002c42:	9105      	str	r1, [sp, #20]
 8002c44:	9104      	str	r1, [sp, #16]
 8002c46:	468e      	mov	lr, r1
 8002c48:	468c      	mov	ip, r1
 8002c4a:	e79b      	b.n	8002b84 <Thread1.lto_priv.65+0x24b4>
 8002c4c:	000186a0 	.word	0x000186a0
 8002c50:	cccccccd 	.word	0xcccccccd
 8002c54:	0a7c5ac5 	.word	0x0a7c5ac5
 8002c58:	51eb851f 	.word	0x51eb851f
 8002c5c:	10624dd3 	.word	0x10624dd3
 8002c60:	d1b71759 	.word	0xd1b71759
                                if(recibo_parcial[4] == 0x67 && recibo_parcial[14] == 0X7E)
 8002c64:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8002c68:	2b7e      	cmp	r3, #126	; 0x7e
 8002c6a:	f001 8088 	beq.w	8003d7e <Thread1.lto_priv.65+0x36ae>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[15] == 0X7E)
 8002c6e:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 8002c72:	2b7e      	cmp	r3, #126	; 0x7e
 8002c74:	f000 84ce 	beq.w	8003614 <Thread1.lto_priv.65+0x2f44>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[16] == 0X7E)
 8002c78:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8002c7c:	2b7e      	cmp	r3, #126	; 0x7e
 8002c7e:	f000 86a4 	beq.w	80039ca <Thread1.lto_priv.65+0x32fa>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[17] == 0X7E)
 8002c82:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
 8002c86:	2b7e      	cmp	r3, #126	; 0x7e
 8002c88:	f000 82ed 	beq.w	8003266 <Thread1.lto_priv.65+0x2b96>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[18] == 0X7E)
 8002c8c:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8002c90:	2b7e      	cmp	r3, #126	; 0x7e
 8002c92:	f000 878f 	beq.w	8003bb4 <Thread1.lto_priv.65+0x34e4>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[19] == 0X7E)
 8002c96:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8002c9a:	2b7e      	cmp	r3, #126	; 0x7e
 8002c9c:	f000 83d6 	beq.w	800344c <Thread1.lto_priv.65+0x2d7c>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[20] == 0X7E)
 8002ca0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8002ca4:	2b7e      	cmp	r3, #126	; 0x7e
 8002ca6:	f000 85ab 	beq.w	8003800 <Thread1.lto_priv.65+0x3130>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[21] == 0X7E)
 8002caa:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
 8002cae:	2b7e      	cmp	r3, #126	; 0x7e
 8002cb0:	f000 81f6 	beq.w	80030a0 <Thread1.lto_priv.65+0x29d0>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[22] == 0X7E)
 8002cb4:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8002cb8:	2b7e      	cmp	r3, #126	; 0x7e
 8002cba:	f47e ad13 	bne.w	80016e4 <Thread1.lto_priv.65+0x1014>
                                    emr3_sale1(&recibo_parcial,23,2);
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	2117      	movs	r1, #23
 8002cc2:	a80f      	add	r0, sp, #60	; 0x3c
 8002cc4:	f00b fb2c 	bl	800e320 <emr3_sale1>
 8002cc8:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0; i<22; i++)
 8002cd2:	f10d 0135 	add.w	r1, sp, #53	; 0x35
 8002cd6:	4299      	cmp	r1, r3
 8002cd8:	d1f9      	bne.n	8002cce <Thread1.lto_priv.65+0x25fe>
 8002cda:	2305      	movs	r3, #5
 8002cdc:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 8002cde:	aa16      	add	r2, sp, #88	; 0x58
 8002ce0:	1850      	adds	r0, r2, r1
 8002ce2:	441a      	add	r2, r3
                                        j++;                                                                               
 8002ce4:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 8002ce6:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8002cea:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 8002cee:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                               
 8002cf0:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 8002cf2:	d10b      	bne.n	8002d0c <Thread1.lto_priv.65+0x263c>
                                            i++;
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 8002cf8:	aa16      	add	r2, sp, #88	; 0x58
 8002cfa:	441a      	add	r2, r3
 8002cfc:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8002d00:	f002 020f 	and.w	r2, r2, #15
 8002d04:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8002d08:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5; i<22; i++)
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b15      	cmp	r3, #21
 8002d12:	d9e4      	bls.n	8002cde <Thread1.lto_priv.65+0x260e>
                                    Pf_p(recibo);
 8002d14:	a808      	add	r0, sp, #32
 8002d16:	f00b fbf3 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 8002d1a:	4bd6      	ldr	r3, [pc, #856]	; (8003074 <Thread1.lto_priv.65+0x29a4>)
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	ea52 0103 	orrs.w	r1, r2, r3
 8002d24:	f001 80fe 	beq.w	8003f24 <Thread1.lto_priv.65+0x3854>
                                        write_eeprom(v6_1,(cdin_real%10));
 8002d28:	4bd3      	ldr	r3, [pc, #844]	; (8003078 <Thread1.lto_priv.65+0x29a8>)
                                        sd_volumen(TURNO);
 8002d2a:	49d4      	ldr	r1, [pc, #848]	; (800307c <Thread1.lto_priv.65+0x29ac>)
                                        cdin_real = cdin_real/10;
 8002d2c:	4ed4      	ldr	r6, [pc, #848]	; (8003080 <Thread1.lto_priv.65+0x29b0>)
                                        sd_volumen(TURNO);
 8002d2e:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_1,(cdin_real%10));
 8002d30:	fba3 1802 	umull	r1, r8, r3, r2
 8002d34:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 8002d38:	0951      	lsrs	r1, r2, #5
 8002d3a:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_1,(cdin_real%10));
 8002d3e:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 8002d42:	4ed0      	ldr	r6, [pc, #832]	; (8003084 <Thread1.lto_priv.65+0x29b4>)
 8002d44:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 8002d48:	4ecf      	ldr	r6, [pc, #828]	; (8003088 <Thread1.lto_priv.65+0x29b8>)
                                        write_eeprom(v5_1,(cdin_real%10));
 8002d4a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8002d4e:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 8002d52:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 8002d54:	4ecd      	ldr	r6, [pc, #820]	; (800308c <Thread1.lto_priv.65+0x29bc>)
                                        cdin_real = cdin_real/10;
 8002d56:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 8002d58:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 8002d5c:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_1,(cdin_real%10));
 8002d60:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 8002d64:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 8002d66:	f884 c013 	strb.w	ip, [r4, #19]
                                        write_eeprom(v6_1,(cdin_real%10));
 8002d6a:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8002d6e:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 8002d72:	fba3 8c01 	umull	r8, ip, r3, r1
 8002d76:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8002d7a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_1,(cdin_real%10));
 8002d7e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002d82:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_1,(cdin_real%10));
 8002d86:	fba3 8c0e 	umull	r8, ip, r3, lr
 8002d8a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8002d8e:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 8002d90:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_1,(cdin_real%10));
 8002d92:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002d96:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 8002d9a:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_1,(cdin_real%10));
 8002d9e:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_1,(cdin_real%10));
 8002da2:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_1,(cdin_real%10));
 8002da6:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_1,(cdin_real%10));
 8002da8:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_1,(cdin_real%10));
 8002dac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002db0:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 8002db4:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_1,(cdin_real%10));
 8002db8:	7522      	strb	r2, [r4, #20]
 8002dba:	220c      	movs	r2, #12
                                        write_eeprom(v1_1,(cdin_real%10));
 8002dbc:	73e1      	strb	r1, [r4, #15]
                                        write_eeprom(v2_1,(cdin_real%10));
 8002dbe:	7423      	strb	r3, [r4, #16]
 8002dc0:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
                                        write_eeprom(v4_1,(cdin_real%10));
 8002dc4:	f884 e012 	strb.w	lr, [r4, #18]
                                        write_eeprom(v3_1,(cdin_real%10));
 8002dc8:	f884 c011 	strb.w	ip, [r4, #17]
                                        sd_volumen(TURNO);
 8002dcc:	f00c f9b8 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002dd0:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8002dd4:	f894 608d 	ldrb.w	r6, [r4, #141]	; 0x8d
 8002dd8:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
 8002ddc:	f894 108f 	ldrb.w	r1, [r4, #143]	; 0x8f
	return (dato_emr3[num]);
 8002de0:	7ba0      	ldrb	r0, [r4, #14]
 8002de2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002de6:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 8002dea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002dee:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002df8:	441a      	add	r2, r3
 8002dfa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8002dfe:	4b9d      	ldr	r3, [pc, #628]	; (8003074 <Thread1.lto_priv.65+0x29a4>)
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8002e00:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8002e04:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8002e06:	681e      	ldr	r6, [r3, #0]
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	b292      	uxth	r2, r2
 8002e0c:	fba6 6702 	umull	r6, r7, r6, r2
 8002e10:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 8002e14:	2800      	cmp	r0, #0
 8002e16:	f001 806f 	beq.w	8003ef8 <Thread1.lto_priv.65+0x3828>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8002e1a:	f00b fb61 	bl	800e4e0 <mult>
 8002e1e:	4680      	mov	r8, r0
 8002e20:	7920      	ldrb	r0, [r4, #4]
 8002e22:	f00b fb5d 	bl	800e4e0 <mult>
 8002e26:	4b9a      	ldr	r3, [pc, #616]	; (8003090 <Thread1.lto_priv.65+0x29c0>)
 8002e28:	fb00 f008 	mul.w	r0, r0, r8
 8002e2c:	fb83 2300 	smull	r2, r3, r3, r0
 8002e30:	17c2      	asrs	r2, r0, #31
 8002e32:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 8002e36:	4630      	mov	r0, r6
 8002e38:	4639      	mov	r1, r7
 8002e3a:	17d3      	asrs	r3, r2, #31
 8002e3c:	f7fd fa48 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8002e40:	7ee3      	ldrb	r3, [r4, #27]
 8002e42:	f1c3 0804 	rsb	r8, r3, #4
 8002e46:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8002e4a:	4606      	mov	r6, r0
 8002e4c:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8002e4e:	dd18      	ble.n	8002e82 <Thread1.lto_priv.65+0x27b2>
                                                cdin_real = dinero % 10;
 8002e50:	4630      	mov	r0, r6
 8002e52:	4639      	mov	r1, r7
 8002e54:	220a      	movs	r2, #10
 8002e56:	2300      	movs	r3, #0
 8002e58:	f7fd fa3a 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 8002e5c:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 8002e5e:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 8002e60:	4639      	mov	r1, r7
 8002e62:	2300      	movs	r3, #0
 8002e64:	220a      	movs	r2, #10
 8002e66:	f7fd fa33 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 8002e6a:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8002e6c:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 8002e6e:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 8002e70:	4606      	mov	r6, r0
 8002e72:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8002e74:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 8002e76:	d902      	bls.n	8002e7e <Thread1.lto_priv.65+0x27ae>
 8002e78:	1c46      	adds	r6, r0, #1
 8002e7a:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8002e7e:	4545      	cmp	r5, r8
 8002e80:	dbe6      	blt.n	8002e50 <Thread1.lto_priv.65+0x2780>
                                        write_eeprom(d6_1,(cdin_real%10));
 8002e82:	4b7d      	ldr	r3, [pc, #500]	; (8003078 <Thread1.lto_priv.65+0x29a8>)
                                        sd_dinero(TURNO);
 8002e84:	4a7d      	ldr	r2, [pc, #500]	; (800307c <Thread1.lto_priv.65+0x29ac>)
                                        write_eeprom(d6_1,(cdin_real%10));
 8002e86:	fba3 1c06 	umull	r1, ip, r3, r6
                                        cdin_real = cdin_real/10;
 8002e8a:	497d      	ldr	r1, [pc, #500]	; (8003080 <Thread1.lto_priv.65+0x29b0>)
                                        sd_dinero(TURNO);
 8002e8c:	7810      	ldrb	r0, [r2, #0]
                                        cdin_real = cdin_real/10;
 8002e8e:	0972      	lsrs	r2, r6, #5
 8002e90:	fba1 1202 	umull	r1, r2, r1, r2
                                        cdin_real = cdin_real/10;
 8002e94:	497b      	ldr	r1, [pc, #492]	; (8003084 <Thread1.lto_priv.65+0x29b4>)
                                        write_eeprom(d6_1,(cdin_real%10));
 8002e96:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8002e9a:	fba1 1e06 	umull	r1, lr, r1, r6
                                        write_eeprom(d5_1,(cdin_real%10));
 8002e9e:	fba3 180c 	umull	r1, r8, r3, ip
                                        cdin_real = cdin_real/10;
 8002ea2:	4979      	ldr	r1, [pc, #484]	; (8003088 <Thread1.lto_priv.65+0x29b8>)
                                        cdin_real = cdin_real/10;
 8002ea4:	09d2      	lsrs	r2, r2, #7
                                        cdin_real = cdin_real/10;
 8002ea6:	fba1 1506 	umull	r1, r5, r1, r6
                                        cdin_real = cdin_real/10;
 8002eaa:	4978      	ldr	r1, [pc, #480]	; (800308c <Thread1.lto_priv.65+0x29bc>)
                                        cdin_real = cdin_real/10;
 8002eac:	9204      	str	r2, [sp, #16]
                                        write_eeprom(d5_1,(cdin_real%10));
 8002eae:	ea4f 02d8 	mov.w	r2, r8, lsr #3
                                        cdin_real = cdin_real/10;
 8002eb2:	fba1 8106 	umull	r8, r1, r1, r6
                                        write_eeprom(d5_1,(cdin_real%10));
 8002eb6:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 8002eba:	ebac 0848 	sub.w	r8, ip, r8, lsl #1
                                        write_eeprom(d1_1,(cdin_real%10));
 8002ebe:	9a04      	ldr	r2, [sp, #16]
                                        write_eeprom(d5_1,(cdin_real%10));
 8002ec0:	f884 8020 	strb.w	r8, [r4, #32]
                                        write_eeprom(d6_1,(cdin_real%10));
 8002ec4:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002ec8:	eba6 0c4c 	sub.w	ip, r6, ip, lsl #1
 8002ecc:	f884 c021 	strb.w	ip, [r4, #33]	; 0x21
                                        write_eeprom(d1_1,(cdin_real%10));
 8002ed0:	fba3 8c02 	umull	r8, ip, r3, r2
 8002ed4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8002ed8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(d1_1,(cdin_real%10));
 8002edc:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002ee0:	eba2 024c 	sub.w	r2, r2, ip, lsl #1
                                        write_eeprom(d4_1,(cdin_real%10));
 8002ee4:	fba3 8c0e 	umull	r8, ip, r3, lr
 8002ee8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8002eec:	0b49      	lsrs	r1, r1, #13
                                        cdin_real = cdin_real/10;
 8002eee:	09ad      	lsrs	r5, r5, #6
                                        write_eeprom(d4_1,(cdin_real%10));
 8002ef0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002ef4:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(d3_1,(cdin_real%10));
 8002ef8:	fba3 8c05 	umull	r8, ip, r3, r5
                                        write_eeprom(d2_1,(cdin_real%10));
 8002efc:	fba3 8301 	umull	r8, r3, r3, r1
                                        write_eeprom(d3_1,(cdin_real%10));
 8002f00:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(d2_1,(cdin_real%10));
 8002f04:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(d3_1,(cdin_real%10));
 8002f06:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(d2_1,(cdin_real%10));
 8002f0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                        write_eeprom(d3_1,(cdin_real%10));
 8002f0e:	eba5 0c4c 	sub.w	ip, r5, ip, lsl #1
                                        write_eeprom(d2_1,(cdin_real%10));
 8002f12:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
                                        write_eeprom(d4_1,(cdin_real%10));
 8002f16:	f884 e01f 	strb.w	lr, [r4, #31]
                                        write_eeprom(d3_1,(cdin_real%10));
 8002f1a:	f884 c01e 	strb.w	ip, [r4, #30]
                                        write_eeprom(d1_1,(cdin_real%10));
 8002f1e:	7722      	strb	r2, [r4, #28]
                                        write_eeprom(d2_1,(cdin_real%10));
 8002f20:	7763      	strb	r3, [r4, #29]
                                        sd_dinero(TURNO);
 8002f22:	f009 f815 	bl	800bf50 <sd_dinero>
                                        total_dinero = (read_eeprom(td1_1) * 10000000) + (read_eeprom(td1_2) * 1000000) + (read_eeprom(td1_3) * 100000) + (read_eeprom(td1_4) * 10000) + (read_eeprom(td1_5) * 1000) + (read_eeprom(td1_6) * 100) + (read_eeprom(td1_7) * 10) + (read_eeprom(td1_8) * 1);
 8002f26:	f894 5047 	ldrb.w	r5, [r4, #71]	; 0x47
 8002f2a:	4a5a      	ldr	r2, [pc, #360]	; (8003094 <Thread1.lto_priv.65+0x29c4>)
 8002f2c:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 8002f30:	4b59      	ldr	r3, [pc, #356]	; (8003098 <Thread1.lto_priv.65+0x29c8>)
 8002f32:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8002f36:	fb02 f205 	mul.w	r2, r2, r5
 8002f3a:	4d58      	ldr	r5, [pc, #352]	; (800309c <Thread1.lto_priv.65+0x29cc>)
 8002f3c:	fb03 2101 	mla	r1, r3, r1, r2
 8002f40:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8002f44:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 8002f48:	fb05 1100 	mla	r1, r5, r0, r1
 8002f4c:	f242 7010 	movw	r0, #10000	; 0x2710
 8002f50:	fb00 1303 	mla	r3, r0, r3, r1
 8002f54:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002f58:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 8002f5c:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8002f60:	fb05 3202 	mla	r2, r5, r2, r3
 8002f64:	2364      	movs	r3, #100	; 0x64
 8002f66:	fb13 2201 	smlabb	r2, r3, r1, r2
 8002f6a:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
                                        float_data = 0;
 8002f6e:	4d41      	ldr	r5, [pc, #260]	; (8003074 <Thread1.lto_priv.65+0x29a4>)
                                        total_dinero = (read_eeprom(td1_1) * 10000000) + (read_eeprom(td1_2) * 1000000) + (read_eeprom(td1_3) * 100000) + (read_eeprom(td1_4) * 10000) + (read_eeprom(td1_5) * 1000) + (read_eeprom(td1_6) * 100) + (read_eeprom(td1_7) * 10) + (read_eeprom(td1_8) * 1);
 8002f70:	230a      	movs	r3, #10
 8002f72:	fb13 2300 	smlabb	r3, r3, r0, r2
 8002f76:	440b      	add	r3, r1
                                        total_dinero = total_dinero + dinero;
 8002f78:	18f6      	adds	r6, r6, r3
 8002f7a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
                                        float_data = 0;
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2300      	movs	r3, #0
 8002f82:	e9c5 2300 	strd	r2, r3, [r5]
                                        write_eeprom(td1_8,(total_dinero%10));
 8002f86:	4630      	mov	r0, r6
 8002f88:	4639      	mov	r1, r7
 8002f8a:	220a      	movs	r2, #10
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f7fd f99f 	bl	80002d0 <__aeabi_uldivmod>
                                        total_dinero = total_dinero/10;
 8002f92:	4630      	mov	r0, r6
                                        write_eeprom(td1_8,(total_dinero%10));
 8002f94:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
                                        total_dinero = total_dinero/10;
 8002f98:	4639      	mov	r1, r7
 8002f9a:	220a      	movs	r2, #10
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f7fd f997 	bl	80002d0 <__aeabi_uldivmod>
                                        write_eeprom(td1_7,(total_dinero%10));
 8002fa2:	220a      	movs	r2, #10
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f7fd f993 	bl	80002d0 <__aeabi_uldivmod>
                                        total_dinero = total_dinero/10;
 8002faa:	4630      	mov	r0, r6
                                        write_eeprom(td1_7,(total_dinero%10));
 8002fac:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
                                        total_dinero = total_dinero/10;
 8002fb0:	4639      	mov	r1, r7
 8002fb2:	2264      	movs	r2, #100	; 0x64
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f7fd f98b 	bl	80002d0 <__aeabi_uldivmod>
                                        write_eeprom(td1_6,(total_dinero%10));
 8002fba:	220a      	movs	r2, #10
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f7fd f987 	bl	80002d0 <__aeabi_uldivmod>
                                        total_dinero = total_dinero/10;
 8002fc2:	4630      	mov	r0, r6
                                        write_eeprom(td1_6,(total_dinero%10));
 8002fc4:	f884 204b 	strb.w	r2, [r4, #75]	; 0x4b
                                        total_dinero = total_dinero/10;
 8002fc8:	4639      	mov	r1, r7
 8002fca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f7fd f97e 	bl	80002d0 <__aeabi_uldivmod>
                                        write_eeprom(td1_5,(total_dinero%10));
 8002fd4:	220a      	movs	r2, #10
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f7fd f97a 	bl	80002d0 <__aeabi_uldivmod>
                                        total_dinero = total_dinero/10;
 8002fdc:	4630      	mov	r0, r6
                                        write_eeprom(td1_5,(total_dinero%10));
 8002fde:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
                                        total_dinero = total_dinero/10;
 8002fe2:	4639      	mov	r1, r7
 8002fe4:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f7fd f971 	bl	80002d0 <__aeabi_uldivmod>
                                        write_eeprom(td1_4,(total_dinero%10));
 8002fee:	220a      	movs	r2, #10
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f7fd f96d 	bl	80002d0 <__aeabi_uldivmod>
                                        total_dinero = total_dinero/10;
 8002ff6:	4630      	mov	r0, r6
                                        write_eeprom(td1_4,(total_dinero%10));
 8002ff8:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
                                        total_dinero = total_dinero/10;
 8002ffc:	4639      	mov	r1, r7
 8002ffe:	4a27      	ldr	r2, [pc, #156]	; (800309c <Thread1.lto_priv.65+0x29cc>)
 8003000:	2300      	movs	r3, #0
 8003002:	f7fd f965 	bl	80002d0 <__aeabi_uldivmod>
                                        write_eeprom(td1_3,(total_dinero%10));
 8003006:	220a      	movs	r2, #10
 8003008:	2300      	movs	r3, #0
 800300a:	f7fd f961 	bl	80002d0 <__aeabi_uldivmod>
                                        total_dinero = total_dinero/10;
 800300e:	4630      	mov	r0, r6
                                        write_eeprom(td1_3,(total_dinero%10));
 8003010:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
                                        total_dinero = total_dinero/10;
 8003014:	4639      	mov	r1, r7
 8003016:	4a1f      	ldr	r2, [pc, #124]	; (8003094 <Thread1.lto_priv.65+0x29c4>)
 8003018:	2300      	movs	r3, #0
 800301a:	f7fd f959 	bl	80002d0 <__aeabi_uldivmod>
                                        write_eeprom(td1_2,(total_dinero%10));
 800301e:	220a      	movs	r2, #10
 8003020:	2300      	movs	r3, #0
 8003022:	f7fd f955 	bl	80002d0 <__aeabi_uldivmod>
                                        total_dinero = total_dinero/10;
 8003026:	4630      	mov	r0, r6
                                        write_eeprom(td1_2,(total_dinero%10));
 8003028:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
                                        total_dinero = total_dinero/10;
 800302c:	4639      	mov	r1, r7
 800302e:	4a1a      	ldr	r2, [pc, #104]	; (8003098 <Thread1.lto_priv.65+0x29c8>)
 8003030:	2300      	movs	r3, #0
 8003032:	f7fd f94d 	bl	80002d0 <__aeabi_uldivmod>
                                        write_eeprom(td1_1,(total_dinero%10));
 8003036:	220a      	movs	r2, #10
 8003038:	2300      	movs	r3, #0
 800303a:	f7fd f949 	bl	80002d0 <__aeabi_uldivmod>
                                        sd_Tdinero(TURNO);
 800303e:	4b0f      	ldr	r3, [pc, #60]	; (800307c <Thread1.lto_priv.65+0x29ac>)
                                        write_eeprom(td1_1,(total_dinero%10));
 8003040:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
                                        sd_Tdinero(TURNO);
 8003044:	7818      	ldrb	r0, [r3, #0]
 8003046:	f008 feb3 	bl	800bdb0 <sd_Tdinero>
 800304a:	f7fd bef6 	b.w	8000e3a <Thread1.lto_priv.65+0x76a>
                                   sd_hora(&recibo);
 800304e:	a808      	add	r0, sp, #32
 8003050:	f00a fc4e 	bl	800d8f0 <sd_hora>
 8003054:	f7fe bb28 	b.w	80016a8 <Thread1.lto_priv.65+0xfd8>
                                if(read_eeprom(log) == 1) emr3_log(&recibo_parcial,15,2);
 8003058:	2202      	movs	r2, #2
 800305a:	210f      	movs	r1, #15
 800305c:	a80f      	add	r0, sp, #60	; 0x3c
 800305e:	f00b f85f 	bl	800e120 <emr3_log>
 8003062:	f7fe bb35 	b.w	80016d0 <Thread1.lto_priv.65+0x1000>
                                if(read_eeprom(log) == 1) emr3_log(&recibo,10,2);
 8003066:	2202      	movs	r2, #2
 8003068:	210a      	movs	r1, #10
 800306a:	a808      	add	r0, sp, #32
 800306c:	f00b f858 	bl	800e120 <emr3_log>
 8003070:	f7fe bb15 	b.w	800169e <Thread1.lto_priv.65+0xfce>
 8003074:	20000908 	.word	0x20000908
 8003078:	cccccccd 	.word	0xcccccccd
 800307c:	20000800 	.word	0x20000800
 8003080:	0a7c5ac5 	.word	0x0a7c5ac5
 8003084:	51eb851f 	.word	0x51eb851f
 8003088:	10624dd3 	.word	0x10624dd3
 800308c:	d1b71759 	.word	0xd1b71759
 8003090:	68db8bad 	.word	0x68db8bad
 8003094:	000f4240 	.word	0x000f4240
 8003098:	00989680 	.word	0x00989680
 800309c:	000186a0 	.word	0x000186a0
                                    emr3_sale1(&recibo_parcial,22,2);
 80030a0:	2202      	movs	r2, #2
 80030a2:	2116      	movs	r1, #22
 80030a4:	a80f      	add	r0, sp, #60	; 0x3c
 80030a6:	f00b f93b 	bl	800e320 <emr3_sale1>
 80030aa:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 80030ae:	2200      	movs	r2, #0
 80030b0:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0;i<21;i++)
 80030b4:	a90d      	add	r1, sp, #52	; 0x34
 80030b6:	4299      	cmp	r1, r3
 80030b8:	d1fa      	bne.n	80030b0 <Thread1.lto_priv.65+0x29e0>
 80030ba:	2305      	movs	r3, #5
 80030bc:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 80030be:	aa16      	add	r2, sp, #88	; 0x58
 80030c0:	1850      	adds	r0, r2, r1
 80030c2:	441a      	add	r2, r3
                                        j++;                                                                               
 80030c4:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 80030c6:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80030ca:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 80030ce:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                               
 80030d0:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 80030d2:	d10b      	bne.n	80030ec <Thread1.lto_priv.65+0x2a1c>
                                            i++;
 80030d4:	3301      	adds	r3, #1
 80030d6:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 80030d8:	aa16      	add	r2, sp, #88	; 0x58
 80030da:	441a      	add	r2, r3
 80030dc:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80030e0:	f002 020f 	and.w	r2, r2, #15
 80030e4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80030e8:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5;i<21;i++)
 80030ec:	3301      	adds	r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b14      	cmp	r3, #20
 80030f2:	d9e4      	bls.n	80030be <Thread1.lto_priv.65+0x29ee>
                                    Pf_p(recibo);
 80030f4:	a808      	add	r0, sp, #32
 80030f6:	f00b fa03 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 80030fa:	4bcc      	ldr	r3, [pc, #816]	; (800342c <Thread1.lto_priv.65+0x2d5c>)
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	ea52 0103 	orrs.w	r1, r2, r3
 8003104:	f000 870e 	beq.w	8003f24 <Thread1.lto_priv.65+0x3854>
                                        write_eeprom(v6_1,(cdin_real%10));
 8003108:	4bc9      	ldr	r3, [pc, #804]	; (8003430 <Thread1.lto_priv.65+0x2d60>)
                                        sd_volumen(TURNO);
 800310a:	49ca      	ldr	r1, [pc, #808]	; (8003434 <Thread1.lto_priv.65+0x2d64>)
                                        cdin_real = cdin_real/10;
 800310c:	4eca      	ldr	r6, [pc, #808]	; (8003438 <Thread1.lto_priv.65+0x2d68>)
                                        sd_volumen(TURNO);
 800310e:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_1,(cdin_real%10));
 8003110:	fba3 1802 	umull	r1, r8, r3, r2
 8003114:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 8003118:	0951      	lsrs	r1, r2, #5
 800311a:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_1,(cdin_real%10));
 800311e:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 8003122:	4ec6      	ldr	r6, [pc, #792]	; (800343c <Thread1.lto_priv.65+0x2d6c>)
 8003124:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 8003128:	4ec5      	ldr	r6, [pc, #788]	; (8003440 <Thread1.lto_priv.65+0x2d70>)
                                        write_eeprom(v5_1,(cdin_real%10));
 800312a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 800312e:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 8003132:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 8003134:	4ec3      	ldr	r6, [pc, #780]	; (8003444 <Thread1.lto_priv.65+0x2d74>)
                                        cdin_real = cdin_real/10;
 8003136:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 8003138:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 800313c:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_1,(cdin_real%10));
 8003140:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 8003144:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 8003146:	f884 c013 	strb.w	ip, [r4, #19]
                                        write_eeprom(v6_1,(cdin_real%10));
 800314a:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 800314e:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 8003152:	fba3 8c01 	umull	r8, ip, r3, r1
 8003156:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 800315a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_1,(cdin_real%10));
 800315e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003162:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_1,(cdin_real%10));
 8003166:	fba3 8c0e 	umull	r8, ip, r3, lr
 800316a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 800316e:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 8003170:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_1,(cdin_real%10));
 8003172:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003176:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 800317a:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_1,(cdin_real%10));
 800317e:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_1,(cdin_real%10));
 8003182:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_1,(cdin_real%10));
 8003186:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_1,(cdin_real%10));
 8003188:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_1,(cdin_real%10));
 800318c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003190:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 8003194:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_1,(cdin_real%10));
 8003198:	7522      	strb	r2, [r4, #20]
	dato_emr3[num] = inf;
 800319a:	220c      	movs	r2, #12
                                        write_eeprom(v1_1,(cdin_real%10));
 800319c:	73e1      	strb	r1, [r4, #15]
                                        write_eeprom(v2_1,(cdin_real%10));
 800319e:	7423      	strb	r3, [r4, #16]
 80031a0:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
                                        write_eeprom(v4_1,(cdin_real%10));
 80031a4:	f884 e012 	strb.w	lr, [r4, #18]
                                        write_eeprom(v3_1,(cdin_real%10));
 80031a8:	f884 c011 	strb.w	ip, [r4, #17]
                                        sd_volumen(TURNO);
 80031ac:	f00b ffc8 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 80031b0:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80031b4:	f894 608d 	ldrb.w	r6, [r4, #141]	; 0x8d
 80031b8:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
 80031bc:	f894 108f 	ldrb.w	r1, [r4, #143]	; 0x8f
	return (dato_emr3[num]);
 80031c0:	7ba0      	ldrb	r0, [r4, #14]
 80031c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80031c6:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 80031ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80031ce:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80031d8:	441a      	add	r2, r3
 80031da:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 80031de:	4b93      	ldr	r3, [pc, #588]	; (800342c <Thread1.lto_priv.65+0x2d5c>)
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 80031e0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80031e4:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 80031e6:	681e      	ldr	r6, [r3, #0]
 80031e8:	6859      	ldr	r1, [r3, #4]
 80031ea:	b292      	uxth	r2, r2
 80031ec:	fba6 6702 	umull	r6, r7, r6, r2
 80031f0:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 80031f4:	2800      	cmp	r0, #0
 80031f6:	f000 867f 	beq.w	8003ef8 <Thread1.lto_priv.65+0x3828>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 80031fa:	f00b f971 	bl	800e4e0 <mult>
 80031fe:	4680      	mov	r8, r0
 8003200:	7920      	ldrb	r0, [r4, #4]
 8003202:	f00b f96d 	bl	800e4e0 <mult>
 8003206:	4b90      	ldr	r3, [pc, #576]	; (8003448 <Thread1.lto_priv.65+0x2d78>)
 8003208:	fb00 f008 	mul.w	r0, r0, r8
 800320c:	fb83 2300 	smull	r2, r3, r3, r0
 8003210:	17c2      	asrs	r2, r0, #31
 8003212:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 8003216:	4630      	mov	r0, r6
 8003218:	4639      	mov	r1, r7
 800321a:	17d3      	asrs	r3, r2, #31
 800321c:	f7fd f858 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003220:	7ee3      	ldrb	r3, [r4, #27]
 8003222:	f1c3 0804 	rsb	r8, r3, #4
 8003226:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 800322a:	4606      	mov	r6, r0
 800322c:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 800322e:	f77f ae28 	ble.w	8002e82 <Thread1.lto_priv.65+0x27b2>
                                                cdin_real = dinero % 10;
 8003232:	4630      	mov	r0, r6
 8003234:	4639      	mov	r1, r7
 8003236:	220a      	movs	r2, #10
 8003238:	2300      	movs	r3, #0
 800323a:	f7fd f849 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 800323e:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 8003240:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 8003242:	4639      	mov	r1, r7
 8003244:	2300      	movs	r3, #0
 8003246:	220a      	movs	r2, #10
 8003248:	f7fd f842 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 800324c:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 800324e:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 8003250:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 8003252:	4606      	mov	r6, r0
 8003254:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003256:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 8003258:	d902      	bls.n	8003260 <Thread1.lto_priv.65+0x2b90>
 800325a:	1c46      	adds	r6, r0, #1
 800325c:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003260:	45a8      	cmp	r8, r5
 8003262:	dce6      	bgt.n	8003232 <Thread1.lto_priv.65+0x2b62>
 8003264:	e60d      	b.n	8002e82 <Thread1.lto_priv.65+0x27b2>
                                    emr3_sale1(&recibo_parcial,18,2);
 8003266:	2202      	movs	r2, #2
 8003268:	2112      	movs	r1, #18
 800326a:	a80f      	add	r0, sp, #60	; 0x3c
 800326c:	f00b f858 	bl	800e320 <emr3_sale1>
 8003270:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 8003274:	2200      	movs	r2, #0
 8003276:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0;i<17;i++)
 800327a:	a90c      	add	r1, sp, #48	; 0x30
 800327c:	4299      	cmp	r1, r3
 800327e:	d1fa      	bne.n	8003276 <Thread1.lto_priv.65+0x2ba6>
 8003280:	2305      	movs	r3, #5
 8003282:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 8003284:	aa16      	add	r2, sp, #88	; 0x58
 8003286:	1850      	adds	r0, r2, r1
 8003288:	441a      	add	r2, r3
                                        j++;                                                                               
 800328a:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 800328c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8003290:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 8003294:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                               
 8003296:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 8003298:	d10b      	bne.n	80032b2 <Thread1.lto_priv.65+0x2be2>
                                            i++;
 800329a:	3301      	adds	r3, #1
 800329c:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 800329e:	aa16      	add	r2, sp, #88	; 0x58
 80032a0:	441a      	add	r2, r3
 80032a2:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80032a6:	f002 020f 	and.w	r2, r2, #15
 80032aa:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80032ae:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5;i<17;i++)
 80032b2:	3301      	adds	r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d9e4      	bls.n	8003284 <Thread1.lto_priv.65+0x2bb4>
                                    Pf_p(recibo);
 80032ba:	a808      	add	r0, sp, #32
 80032bc:	f00b f920 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 80032c0:	4b5a      	ldr	r3, [pc, #360]	; (800342c <Thread1.lto_priv.65+0x2d5c>)
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	ea52 0103 	orrs.w	r1, r2, r3
 80032ca:	f000 862b 	beq.w	8003f24 <Thread1.lto_priv.65+0x3854>
                                        write_eeprom(v6_1,(cdin_real%10));
 80032ce:	4b58      	ldr	r3, [pc, #352]	; (8003430 <Thread1.lto_priv.65+0x2d60>)
                                        sd_volumen(TURNO);
 80032d0:	4958      	ldr	r1, [pc, #352]	; (8003434 <Thread1.lto_priv.65+0x2d64>)
                                        cdin_real = cdin_real/10;
 80032d2:	4e59      	ldr	r6, [pc, #356]	; (8003438 <Thread1.lto_priv.65+0x2d68>)
                                        sd_volumen(TURNO);
 80032d4:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_1,(cdin_real%10));
 80032d6:	fba3 1802 	umull	r1, r8, r3, r2
 80032da:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 80032de:	0951      	lsrs	r1, r2, #5
 80032e0:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_1,(cdin_real%10));
 80032e4:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 80032e8:	4e54      	ldr	r6, [pc, #336]	; (800343c <Thread1.lto_priv.65+0x2d6c>)
 80032ea:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 80032ee:	4e54      	ldr	r6, [pc, #336]	; (8003440 <Thread1.lto_priv.65+0x2d70>)
                                        write_eeprom(v5_1,(cdin_real%10));
 80032f0:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 80032f4:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 80032f8:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 80032fa:	4e52      	ldr	r6, [pc, #328]	; (8003444 <Thread1.lto_priv.65+0x2d74>)
                                        cdin_real = cdin_real/10;
 80032fc:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 80032fe:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 8003302:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_1,(cdin_real%10));
 8003306:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 800330a:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 800330c:	f884 c013 	strb.w	ip, [r4, #19]
                                        write_eeprom(v6_1,(cdin_real%10));
 8003310:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8003314:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 8003318:	fba3 8c01 	umull	r8, ip, r3, r1
 800331c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8003320:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_1,(cdin_real%10));
 8003324:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003328:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_1,(cdin_real%10));
 800332c:	fba3 8c0e 	umull	r8, ip, r3, lr
 8003330:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8003334:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 8003336:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_1,(cdin_real%10));
 8003338:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800333c:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 8003340:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_1,(cdin_real%10));
 8003344:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_1,(cdin_real%10));
 8003348:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_1,(cdin_real%10));
 800334c:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_1,(cdin_real%10));
 800334e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_1,(cdin_real%10));
 8003352:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003356:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 800335a:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_1,(cdin_real%10));
 800335e:	7522      	strb	r2, [r4, #20]
	dato_emr3[num] = inf;
 8003360:	220c      	movs	r2, #12
                                        write_eeprom(v1_1,(cdin_real%10));
 8003362:	73e1      	strb	r1, [r4, #15]
                                        write_eeprom(v2_1,(cdin_real%10));
 8003364:	7423      	strb	r3, [r4, #16]
 8003366:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
                                        write_eeprom(v4_1,(cdin_real%10));
 800336a:	f884 e012 	strb.w	lr, [r4, #18]
                                        write_eeprom(v3_1,(cdin_real%10));
 800336e:	f884 c011 	strb.w	ip, [r4, #17]
                                        sd_volumen(TURNO);
 8003372:	f00b fee5 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8003376:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 800337a:	f894 608d 	ldrb.w	r6, [r4, #141]	; 0x8d
 800337e:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
 8003382:	f894 108f 	ldrb.w	r1, [r4, #143]	; 0x8f
	return (dato_emr3[num]);
 8003386:	7ba0      	ldrb	r0, [r4, #14]
 8003388:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800338c:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 8003390:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003394:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800339e:	441a      	add	r2, r3
 80033a0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 80033a4:	4b21      	ldr	r3, [pc, #132]	; (800342c <Thread1.lto_priv.65+0x2d5c>)
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 80033a6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80033aa:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 80033ac:	681e      	ldr	r6, [r3, #0]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	b292      	uxth	r2, r2
 80033b2:	fba6 6702 	umull	r6, r7, r6, r2
 80033b6:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 80033ba:	2800      	cmp	r0, #0
 80033bc:	f000 859c 	beq.w	8003ef8 <Thread1.lto_priv.65+0x3828>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 80033c0:	f00b f88e 	bl	800e4e0 <mult>
 80033c4:	4680      	mov	r8, r0
 80033c6:	7920      	ldrb	r0, [r4, #4]
 80033c8:	f00b f88a 	bl	800e4e0 <mult>
 80033cc:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <Thread1.lto_priv.65+0x2d78>)
 80033ce:	fb00 f008 	mul.w	r0, r0, r8
 80033d2:	fb83 2300 	smull	r2, r3, r3, r0
 80033d6:	17c2      	asrs	r2, r0, #31
 80033d8:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 80033dc:	4630      	mov	r0, r6
 80033de:	4639      	mov	r1, r7
 80033e0:	17d3      	asrs	r3, r2, #31
 80033e2:	f7fc ff75 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80033e6:	7ee3      	ldrb	r3, [r4, #27]
 80033e8:	f1c3 0804 	rsb	r8, r3, #4
 80033ec:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 80033f0:	4606      	mov	r6, r0
 80033f2:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80033f4:	f77f ad45 	ble.w	8002e82 <Thread1.lto_priv.65+0x27b2>
                                                cdin_real = dinero % 10;
 80033f8:	4630      	mov	r0, r6
 80033fa:	4639      	mov	r1, r7
 80033fc:	220a      	movs	r2, #10
 80033fe:	2300      	movs	r3, #0
 8003400:	f7fc ff66 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 8003404:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 8003406:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 8003408:	4639      	mov	r1, r7
 800340a:	2300      	movs	r3, #0
 800340c:	220a      	movs	r2, #10
 800340e:	f7fc ff5f 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 8003412:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003414:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 8003416:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 8003418:	4606      	mov	r6, r0
 800341a:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 800341c:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 800341e:	d902      	bls.n	8003426 <Thread1.lto_priv.65+0x2d56>
 8003420:	1c46      	adds	r6, r0, #1
 8003422:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003426:	4545      	cmp	r5, r8
 8003428:	dbe6      	blt.n	80033f8 <Thread1.lto_priv.65+0x2d28>
 800342a:	e52a      	b.n	8002e82 <Thread1.lto_priv.65+0x27b2>
 800342c:	20000908 	.word	0x20000908
 8003430:	cccccccd 	.word	0xcccccccd
 8003434:	20000800 	.word	0x20000800
 8003438:	0a7c5ac5 	.word	0x0a7c5ac5
 800343c:	51eb851f 	.word	0x51eb851f
 8003440:	10624dd3 	.word	0x10624dd3
 8003444:	d1b71759 	.word	0xd1b71759
 8003448:	68db8bad 	.word	0x68db8bad
                                    emr3_sale1(&recibo_parcial,20,2);
 800344c:	2202      	movs	r2, #2
 800344e:	2114      	movs	r1, #20
 8003450:	a80f      	add	r0, sp, #60	; 0x3c
 8003452:	f00a ff65 	bl	800e320 <emr3_sale1>
 8003456:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 800345a:	2200      	movs	r2, #0
 800345c:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0;i<19;i++)
 8003460:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 8003464:	4299      	cmp	r1, r3
 8003466:	d1f9      	bne.n	800345c <Thread1.lto_priv.65+0x2d8c>
 8003468:	2305      	movs	r3, #5
 800346a:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 800346c:	aa16      	add	r2, sp, #88	; 0x58
 800346e:	1850      	adds	r0, r2, r1
 8003470:	441a      	add	r2, r3
                                        j++;                                                                               
 8003472:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 8003474:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8003478:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 800347c:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                               
 800347e:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 8003480:	d10b      	bne.n	800349a <Thread1.lto_priv.65+0x2dca>
                                            i++;
 8003482:	3301      	adds	r3, #1
 8003484:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 8003486:	aa16      	add	r2, sp, #88	; 0x58
 8003488:	441a      	add	r2, r3
 800348a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800348e:	f002 020f 	and.w	r2, r2, #15
 8003492:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8003496:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5;i<19;i++)
 800349a:	3301      	adds	r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b12      	cmp	r3, #18
 80034a0:	d9e4      	bls.n	800346c <Thread1.lto_priv.65+0x2d9c>
                                    Pf_p(recibo);
 80034a2:	a808      	add	r0, sp, #32
 80034a4:	f00b f82c 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 80034a8:	4bcd      	ldr	r3, [pc, #820]	; (80037e0 <Thread1.lto_priv.65+0x3110>)
 80034aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ae:	ea52 0103 	orrs.w	r1, r2, r3
 80034b2:	f000 8537 	beq.w	8003f24 <Thread1.lto_priv.65+0x3854>
                                        write_eeprom(v6_1,(cdin_real%10));
 80034b6:	4bcb      	ldr	r3, [pc, #812]	; (80037e4 <Thread1.lto_priv.65+0x3114>)
                                        sd_volumen(TURNO);
 80034b8:	49cb      	ldr	r1, [pc, #812]	; (80037e8 <Thread1.lto_priv.65+0x3118>)
                                        cdin_real = cdin_real/10;
 80034ba:	4ecc      	ldr	r6, [pc, #816]	; (80037ec <Thread1.lto_priv.65+0x311c>)
                                        sd_volumen(TURNO);
 80034bc:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_1,(cdin_real%10));
 80034be:	fba3 1802 	umull	r1, r8, r3, r2
 80034c2:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 80034c6:	0951      	lsrs	r1, r2, #5
 80034c8:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_1,(cdin_real%10));
 80034cc:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 80034d0:	4ec7      	ldr	r6, [pc, #796]	; (80037f0 <Thread1.lto_priv.65+0x3120>)
 80034d2:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 80034d6:	4ec7      	ldr	r6, [pc, #796]	; (80037f4 <Thread1.lto_priv.65+0x3124>)
                                        write_eeprom(v5_1,(cdin_real%10));
 80034d8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 80034dc:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 80034e0:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 80034e2:	4ec5      	ldr	r6, [pc, #788]	; (80037f8 <Thread1.lto_priv.65+0x3128>)
                                        cdin_real = cdin_real/10;
 80034e4:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 80034e6:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 80034ea:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_1,(cdin_real%10));
 80034ee:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 80034f2:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 80034f4:	f884 c013 	strb.w	ip, [r4, #19]
                                        write_eeprom(v6_1,(cdin_real%10));
 80034f8:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80034fc:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 8003500:	fba3 8c01 	umull	r8, ip, r3, r1
 8003504:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8003508:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_1,(cdin_real%10));
 800350c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003510:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_1,(cdin_real%10));
 8003514:	fba3 8c0e 	umull	r8, ip, r3, lr
 8003518:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 800351c:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 800351e:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_1,(cdin_real%10));
 8003520:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003524:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 8003528:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_1,(cdin_real%10));
 800352c:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_1,(cdin_real%10));
 8003530:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_1,(cdin_real%10));
 8003534:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_1,(cdin_real%10));
 8003536:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_1,(cdin_real%10));
 800353a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800353e:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 8003542:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_1,(cdin_real%10));
 8003546:	7522      	strb	r2, [r4, #20]
	dato_emr3[num] = inf;
 8003548:	220c      	movs	r2, #12
                                        write_eeprom(v1_1,(cdin_real%10));
 800354a:	73e1      	strb	r1, [r4, #15]
                                        write_eeprom(v2_1,(cdin_real%10));
 800354c:	7423      	strb	r3, [r4, #16]
 800354e:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
                                        write_eeprom(v4_1,(cdin_real%10));
 8003552:	f884 e012 	strb.w	lr, [r4, #18]
                                        write_eeprom(v3_1,(cdin_real%10));
 8003556:	f884 c011 	strb.w	ip, [r4, #17]
                                        sd_volumen(TURNO);
 800355a:	f00b fdf1 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 800355e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8003562:	f894 608d 	ldrb.w	r6, [r4, #141]	; 0x8d
 8003566:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
 800356a:	f894 108f 	ldrb.w	r1, [r4, #143]	; 0x8f
	return (dato_emr3[num]);
 800356e:	7ba0      	ldrb	r0, [r4, #14]
 8003570:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003574:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 8003578:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800357c:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003586:	441a      	add	r2, r3
 8003588:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 800358c:	4b94      	ldr	r3, [pc, #592]	; (80037e0 <Thread1.lto_priv.65+0x3110>)
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 800358e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8003592:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8003594:	681e      	ldr	r6, [r3, #0]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	b292      	uxth	r2, r2
 800359a:	fba6 6702 	umull	r6, r7, r6, r2
 800359e:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 80035a2:	2800      	cmp	r0, #0
 80035a4:	f000 84a8 	beq.w	8003ef8 <Thread1.lto_priv.65+0x3828>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 80035a8:	f00a ff9a 	bl	800e4e0 <mult>
 80035ac:	4680      	mov	r8, r0
 80035ae:	7920      	ldrb	r0, [r4, #4]
 80035b0:	f00a ff96 	bl	800e4e0 <mult>
 80035b4:	4b91      	ldr	r3, [pc, #580]	; (80037fc <Thread1.lto_priv.65+0x312c>)
 80035b6:	fb00 f008 	mul.w	r0, r0, r8
 80035ba:	fb83 2300 	smull	r2, r3, r3, r0
 80035be:	17c2      	asrs	r2, r0, #31
 80035c0:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 80035c4:	4630      	mov	r0, r6
 80035c6:	4639      	mov	r1, r7
 80035c8:	17d3      	asrs	r3, r2, #31
 80035ca:	f7fc fe81 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80035ce:	7ee3      	ldrb	r3, [r4, #27]
 80035d0:	f1c3 0804 	rsb	r8, r3, #4
 80035d4:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 80035d8:	4606      	mov	r6, r0
 80035da:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80035dc:	f77f ac51 	ble.w	8002e82 <Thread1.lto_priv.65+0x27b2>
                                                cdin_real = dinero % 10;
 80035e0:	4630      	mov	r0, r6
 80035e2:	4639      	mov	r1, r7
 80035e4:	220a      	movs	r2, #10
 80035e6:	2300      	movs	r3, #0
 80035e8:	f7fc fe72 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 80035ec:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 80035ee:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 80035f0:	4639      	mov	r1, r7
 80035f2:	2300      	movs	r3, #0
 80035f4:	220a      	movs	r2, #10
 80035f6:	f7fc fe6b 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 80035fa:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80035fc:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 80035fe:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 8003600:	4606      	mov	r6, r0
 8003602:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003604:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 8003606:	d902      	bls.n	800360e <Thread1.lto_priv.65+0x2f3e>
 8003608:	1c46      	adds	r6, r0, #1
 800360a:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 800360e:	45a8      	cmp	r8, r5
 8003610:	dce6      	bgt.n	80035e0 <Thread1.lto_priv.65+0x2f10>
 8003612:	e436      	b.n	8002e82 <Thread1.lto_priv.65+0x27b2>
                                    emr3_sale1(&recibo_parcial,16,2);
 8003614:	2202      	movs	r2, #2
 8003616:	2110      	movs	r1, #16
 8003618:	a80f      	add	r0, sp, #60	; 0x3c
 800361a:	f00a fe81 	bl	800e320 <emr3_sale1>
 800361e:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 8003622:	2200      	movs	r2, #0
 8003624:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0;i<15;i++)
 8003628:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800362c:	4299      	cmp	r1, r3
 800362e:	d1f9      	bne.n	8003624 <Thread1.lto_priv.65+0x2f54>
 8003630:	2305      	movs	r3, #5
 8003632:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 8003634:	aa16      	add	r2, sp, #88	; 0x58
 8003636:	1850      	adds	r0, r2, r1
 8003638:	441a      	add	r2, r3
                                        j++;                                                                              
 800363a:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 800363c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8003640:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 8003644:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                              
 8003646:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 8003648:	d10b      	bne.n	8003662 <Thread1.lto_priv.65+0x2f92>
                                            i++;
 800364a:	3301      	adds	r3, #1
 800364c:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 800364e:	aa16      	add	r2, sp, #88	; 0x58
 8003650:	441a      	add	r2, r3
 8003652:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8003656:	f002 020f 	and.w	r2, r2, #15
 800365a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800365e:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5;i<15;i++)
 8003662:	3301      	adds	r3, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b0e      	cmp	r3, #14
 8003668:	d9e4      	bls.n	8003634 <Thread1.lto_priv.65+0x2f64>
                                    Pf_p(recibo);
 800366a:	a808      	add	r0, sp, #32
 800366c:	f00a ff48 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 8003670:	4b5b      	ldr	r3, [pc, #364]	; (80037e0 <Thread1.lto_priv.65+0x3110>)
 8003672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003676:	ea52 0103 	orrs.w	r1, r2, r3
 800367a:	f000 8453 	beq.w	8003f24 <Thread1.lto_priv.65+0x3854>
                                        write_eeprom(v6_1,(cdin_real%10));
 800367e:	4b59      	ldr	r3, [pc, #356]	; (80037e4 <Thread1.lto_priv.65+0x3114>)
                                        sd_volumen(TURNO);
 8003680:	4959      	ldr	r1, [pc, #356]	; (80037e8 <Thread1.lto_priv.65+0x3118>)
                                        cdin_real = cdin_real/10;
 8003682:	4e5a      	ldr	r6, [pc, #360]	; (80037ec <Thread1.lto_priv.65+0x311c>)
                                        sd_volumen(TURNO);
 8003684:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_1,(cdin_real%10));
 8003686:	fba3 1802 	umull	r1, r8, r3, r2
 800368a:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 800368e:	0951      	lsrs	r1, r2, #5
 8003690:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_1,(cdin_real%10));
 8003694:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 8003698:	4e55      	ldr	r6, [pc, #340]	; (80037f0 <Thread1.lto_priv.65+0x3120>)
 800369a:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 800369e:	4e55      	ldr	r6, [pc, #340]	; (80037f4 <Thread1.lto_priv.65+0x3124>)
                                        write_eeprom(v5_1,(cdin_real%10));
 80036a0:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 80036a4:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 80036a8:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 80036aa:	4e53      	ldr	r6, [pc, #332]	; (80037f8 <Thread1.lto_priv.65+0x3128>)
                                        cdin_real = cdin_real/10;
 80036ac:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 80036ae:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 80036b2:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_1,(cdin_real%10));
 80036b6:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 80036ba:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 80036bc:	f884 c013 	strb.w	ip, [r4, #19]
                                        write_eeprom(v6_1,(cdin_real%10));
 80036c0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80036c4:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 80036c8:	fba3 8c01 	umull	r8, ip, r3, r1
 80036cc:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 80036d0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_1,(cdin_real%10));
 80036d4:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80036d8:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_1,(cdin_real%10));
 80036dc:	fba3 8c0e 	umull	r8, ip, r3, lr
 80036e0:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 80036e4:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 80036e6:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_1,(cdin_real%10));
 80036e8:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80036ec:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 80036f0:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_1,(cdin_real%10));
 80036f4:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_1,(cdin_real%10));
 80036f8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_1,(cdin_real%10));
 80036fc:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_1,(cdin_real%10));
 80036fe:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_1,(cdin_real%10));
 8003702:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003706:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 800370a:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_1,(cdin_real%10));
 800370e:	7522      	strb	r2, [r4, #20]
	dato_emr3[num] = inf;
 8003710:	220c      	movs	r2, #12
                                        write_eeprom(v1_1,(cdin_real%10));
 8003712:	73e1      	strb	r1, [r4, #15]
                                        write_eeprom(v2_1,(cdin_real%10));
 8003714:	7423      	strb	r3, [r4, #16]
 8003716:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
                                        write_eeprom(v4_1,(cdin_real%10));
 800371a:	f884 e012 	strb.w	lr, [r4, #18]
                                        write_eeprom(v3_1,(cdin_real%10));
 800371e:	f884 c011 	strb.w	ip, [r4, #17]
                                        sd_volumen(TURNO);
 8003722:	f00b fd0d 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8003726:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 800372a:	f894 608d 	ldrb.w	r6, [r4, #141]	; 0x8d
 800372e:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
 8003732:	f894 108f 	ldrb.w	r1, [r4, #143]	; 0x8f
	return (dato_emr3[num]);
 8003736:	7ba0      	ldrb	r0, [r4, #14]
 8003738:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800373c:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 8003740:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003744:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800374e:	441a      	add	r2, r3
 8003750:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8003754:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <Thread1.lto_priv.65+0x3110>)
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8003756:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800375a:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 800375c:	681e      	ldr	r6, [r3, #0]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	b292      	uxth	r2, r2
 8003762:	fba6 6702 	umull	r6, r7, r6, r2
 8003766:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 800376a:	2800      	cmp	r0, #0
 800376c:	f000 83c4 	beq.w	8003ef8 <Thread1.lto_priv.65+0x3828>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8003770:	f00a feb6 	bl	800e4e0 <mult>
 8003774:	4680      	mov	r8, r0
 8003776:	7920      	ldrb	r0, [r4, #4]
 8003778:	f00a feb2 	bl	800e4e0 <mult>
 800377c:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <Thread1.lto_priv.65+0x312c>)
 800377e:	fb00 f008 	mul.w	r0, r0, r8
 8003782:	fb83 2300 	smull	r2, r3, r3, r0
 8003786:	17c2      	asrs	r2, r0, #31
 8003788:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 800378c:	4630      	mov	r0, r6
 800378e:	4639      	mov	r1, r7
 8003790:	17d3      	asrs	r3, r2, #31
 8003792:	f7fc fd9d 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003796:	7ee3      	ldrb	r3, [r4, #27]
 8003798:	f1c3 0804 	rsb	r8, r3, #4
 800379c:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 80037a0:	4606      	mov	r6, r0
 80037a2:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80037a4:	f77f ab6d 	ble.w	8002e82 <Thread1.lto_priv.65+0x27b2>
                                                cdin_real = dinero % 10;
 80037a8:	4630      	mov	r0, r6
 80037aa:	4639      	mov	r1, r7
 80037ac:	220a      	movs	r2, #10
 80037ae:	2300      	movs	r3, #0
 80037b0:	f7fc fd8e 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 80037b4:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 80037b6:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 80037b8:	4639      	mov	r1, r7
 80037ba:	2300      	movs	r3, #0
 80037bc:	220a      	movs	r2, #10
 80037be:	f7fc fd87 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 80037c2:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80037c4:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 80037c6:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 80037c8:	4606      	mov	r6, r0
 80037ca:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80037cc:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 80037ce:	d902      	bls.n	80037d6 <Thread1.lto_priv.65+0x3106>
 80037d0:	1c46      	adds	r6, r0, #1
 80037d2:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80037d6:	4545      	cmp	r5, r8
 80037d8:	dbe6      	blt.n	80037a8 <Thread1.lto_priv.65+0x30d8>
 80037da:	f7ff bb52 	b.w	8002e82 <Thread1.lto_priv.65+0x27b2>
 80037de:	bf00      	nop
 80037e0:	20000908 	.word	0x20000908
 80037e4:	cccccccd 	.word	0xcccccccd
 80037e8:	20000800 	.word	0x20000800
 80037ec:	0a7c5ac5 	.word	0x0a7c5ac5
 80037f0:	51eb851f 	.word	0x51eb851f
 80037f4:	10624dd3 	.word	0x10624dd3
 80037f8:	d1b71759 	.word	0xd1b71759
 80037fc:	68db8bad 	.word	0x68db8bad
                                    emr3_sale1(&recibo_parcial,21,2);
 8003800:	2202      	movs	r2, #2
 8003802:	2115      	movs	r1, #21
 8003804:	a80f      	add	r0, sp, #60	; 0x3c
 8003806:	f00a fd8b 	bl	800e320 <emr3_sale1>
 800380a:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 800380e:	2200      	movs	r2, #0
 8003810:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0;i<20;i++)
 8003814:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003818:	4299      	cmp	r1, r3
 800381a:	d1f9      	bne.n	8003810 <Thread1.lto_priv.65+0x3140>
 800381c:	2305      	movs	r3, #5
 800381e:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 8003820:	aa16      	add	r2, sp, #88	; 0x58
 8003822:	1850      	adds	r0, r2, r1
 8003824:	441a      	add	r2, r3
                                        j++;                                                                               
 8003826:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 8003828:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800382c:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 8003830:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                               
 8003832:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 8003834:	d10b      	bne.n	800384e <Thread1.lto_priv.65+0x317e>
                                            i++;
 8003836:	3301      	adds	r3, #1
 8003838:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 800383a:	aa16      	add	r2, sp, #88	; 0x58
 800383c:	441a      	add	r2, r3
 800383e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8003842:	f002 020f 	and.w	r2, r2, #15
 8003846:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800384a:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5;i<20;i++)
 800384e:	3301      	adds	r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b13      	cmp	r3, #19
 8003854:	d9e4      	bls.n	8003820 <Thread1.lto_priv.65+0x3150>
                                    Pf_p(recibo);
 8003856:	a808      	add	r0, sp, #32
 8003858:	f00a fe52 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 800385c:	4bcd      	ldr	r3, [pc, #820]	; (8003b94 <Thread1.lto_priv.65+0x34c4>)
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	ea52 0103 	orrs.w	r1, r2, r3
 8003866:	f000 835d 	beq.w	8003f24 <Thread1.lto_priv.65+0x3854>
                                        write_eeprom(v6_1,(cdin_real%10));
 800386a:	4bcb      	ldr	r3, [pc, #812]	; (8003b98 <Thread1.lto_priv.65+0x34c8>)
                                        sd_volumen(TURNO);
 800386c:	49cb      	ldr	r1, [pc, #812]	; (8003b9c <Thread1.lto_priv.65+0x34cc>)
                                        cdin_real = cdin_real/10;
 800386e:	4ecc      	ldr	r6, [pc, #816]	; (8003ba0 <Thread1.lto_priv.65+0x34d0>)
                                        sd_volumen(TURNO);
 8003870:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_1,(cdin_real%10));
 8003872:	fba3 1802 	umull	r1, r8, r3, r2
 8003876:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 800387a:	0951      	lsrs	r1, r2, #5
 800387c:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_1,(cdin_real%10));
 8003880:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 8003884:	4ec7      	ldr	r6, [pc, #796]	; (8003ba4 <Thread1.lto_priv.65+0x34d4>)
 8003886:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 800388a:	4ec7      	ldr	r6, [pc, #796]	; (8003ba8 <Thread1.lto_priv.65+0x34d8>)
                                        write_eeprom(v5_1,(cdin_real%10));
 800388c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8003890:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 8003894:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 8003896:	4ec5      	ldr	r6, [pc, #788]	; (8003bac <Thread1.lto_priv.65+0x34dc>)
                                        cdin_real = cdin_real/10;
 8003898:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 800389a:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 800389e:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_1,(cdin_real%10));
 80038a2:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 80038a6:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 80038a8:	f884 c013 	strb.w	ip, [r4, #19]
                                        write_eeprom(v6_1,(cdin_real%10));
 80038ac:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80038b0:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 80038b4:	fba3 8c01 	umull	r8, ip, r3, r1
 80038b8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 80038bc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_1,(cdin_real%10));
 80038c0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80038c4:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_1,(cdin_real%10));
 80038c8:	fba3 8c0e 	umull	r8, ip, r3, lr
 80038cc:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 80038d0:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 80038d2:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_1,(cdin_real%10));
 80038d4:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80038d8:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 80038dc:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_1,(cdin_real%10));
 80038e0:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_1,(cdin_real%10));
 80038e4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_1,(cdin_real%10));
 80038e8:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_1,(cdin_real%10));
 80038ea:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_1,(cdin_real%10));
 80038ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038f2:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 80038f6:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_1,(cdin_real%10));
 80038fa:	7522      	strb	r2, [r4, #20]
	dato_emr3[num] = inf;
 80038fc:	220c      	movs	r2, #12
                                        write_eeprom(v1_1,(cdin_real%10));
 80038fe:	73e1      	strb	r1, [r4, #15]
                                        write_eeprom(v2_1,(cdin_real%10));
 8003900:	7423      	strb	r3, [r4, #16]
 8003902:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
                                        write_eeprom(v4_1,(cdin_real%10));
 8003906:	f884 e012 	strb.w	lr, [r4, #18]
                                        write_eeprom(v3_1,(cdin_real%10));
 800390a:	f884 c011 	strb.w	ip, [r4, #17]
                                        sd_volumen(TURNO);
 800390e:	f00b fc17 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8003912:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8003916:	f894 608d 	ldrb.w	r6, [r4, #141]	; 0x8d
 800391a:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
 800391e:	f894 108f 	ldrb.w	r1, [r4, #143]	; 0x8f
	return (dato_emr3[num]);
 8003922:	7ba0      	ldrb	r0, [r4, #14]
 8003924:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003928:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 800392c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003930:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800393a:	441a      	add	r2, r3
 800393c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8003940:	4b94      	ldr	r3, [pc, #592]	; (8003b94 <Thread1.lto_priv.65+0x34c4>)
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8003942:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8003946:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8003948:	681e      	ldr	r6, [r3, #0]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	b292      	uxth	r2, r2
 800394e:	fba6 6702 	umull	r6, r7, r6, r2
 8003952:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 8003956:	2800      	cmp	r0, #0
 8003958:	f000 82ce 	beq.w	8003ef8 <Thread1.lto_priv.65+0x3828>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 800395c:	f00a fdc0 	bl	800e4e0 <mult>
 8003960:	4680      	mov	r8, r0
 8003962:	7920      	ldrb	r0, [r4, #4]
 8003964:	f00a fdbc 	bl	800e4e0 <mult>
 8003968:	4b91      	ldr	r3, [pc, #580]	; (8003bb0 <Thread1.lto_priv.65+0x34e0>)
 800396a:	fb00 f008 	mul.w	r0, r0, r8
 800396e:	fb83 2300 	smull	r2, r3, r3, r0
 8003972:	17c2      	asrs	r2, r0, #31
 8003974:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 8003978:	4630      	mov	r0, r6
 800397a:	4639      	mov	r1, r7
 800397c:	17d3      	asrs	r3, r2, #31
 800397e:	f7fc fca7 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003982:	7ee3      	ldrb	r3, [r4, #27]
 8003984:	f1c3 0804 	rsb	r8, r3, #4
 8003988:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 800398c:	4606      	mov	r6, r0
 800398e:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003990:	f77f aa77 	ble.w	8002e82 <Thread1.lto_priv.65+0x27b2>
                                                cdin_real = dinero % 10;
 8003994:	4630      	mov	r0, r6
 8003996:	4639      	mov	r1, r7
 8003998:	220a      	movs	r2, #10
 800399a:	2300      	movs	r3, #0
 800399c:	f7fc fc98 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 80039a0:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 80039a2:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 80039a4:	4639      	mov	r1, r7
 80039a6:	2300      	movs	r3, #0
 80039a8:	220a      	movs	r2, #10
 80039aa:	f7fc fc91 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 80039ae:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80039b0:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 80039b2:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 80039b4:	4606      	mov	r6, r0
 80039b6:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80039b8:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 80039ba:	d902      	bls.n	80039c2 <Thread1.lto_priv.65+0x32f2>
 80039bc:	1c46      	adds	r6, r0, #1
 80039be:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80039c2:	45a8      	cmp	r8, r5
 80039c4:	dce6      	bgt.n	8003994 <Thread1.lto_priv.65+0x32c4>
 80039c6:	f7ff ba5c 	b.w	8002e82 <Thread1.lto_priv.65+0x27b2>
                                    emr3_sale1(&recibo_parcial,17,2);
 80039ca:	2202      	movs	r2, #2
 80039cc:	2111      	movs	r1, #17
 80039ce:	a80f      	add	r0, sp, #60	; 0x3c
 80039d0:	f00a fca6 	bl	800e320 <emr3_sale1>
 80039d4:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 80039d8:	2200      	movs	r2, #0
 80039da:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0;i<16;i++)
 80039de:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80039e2:	428b      	cmp	r3, r1
 80039e4:	d1f9      	bne.n	80039da <Thread1.lto_priv.65+0x330a>
 80039e6:	2305      	movs	r3, #5
 80039e8:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 80039ea:	aa16      	add	r2, sp, #88	; 0x58
 80039ec:	1850      	adds	r0, r2, r1
 80039ee:	441a      	add	r2, r3
                                        j++;                                                                              
 80039f0:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 80039f2:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80039f6:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 80039fa:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                              
 80039fc:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 80039fe:	d10b      	bne.n	8003a18 <Thread1.lto_priv.65+0x3348>
                                            i++;
 8003a00:	3301      	adds	r3, #1
 8003a02:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 8003a04:	aa16      	add	r2, sp, #88	; 0x58
 8003a06:	441a      	add	r2, r3
 8003a08:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8003a0c:	f002 020f 	and.w	r2, r2, #15
 8003a10:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8003a14:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5;i<16;i++)
 8003a18:	3301      	adds	r3, #1
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b0f      	cmp	r3, #15
 8003a1e:	d9e4      	bls.n	80039ea <Thread1.lto_priv.65+0x331a>
                                    Pf_p(recibo);
 8003a20:	a808      	add	r0, sp, #32
 8003a22:	f00a fd6d 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 8003a26:	4b5b      	ldr	r3, [pc, #364]	; (8003b94 <Thread1.lto_priv.65+0x34c4>)
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	ea52 0103 	orrs.w	r1, r2, r3
 8003a30:	f000 8278 	beq.w	8003f24 <Thread1.lto_priv.65+0x3854>
                                        write_eeprom(v6_1,(cdin_real%10));
 8003a34:	4b58      	ldr	r3, [pc, #352]	; (8003b98 <Thread1.lto_priv.65+0x34c8>)
                                        sd_volumen(TURNO);
 8003a36:	4959      	ldr	r1, [pc, #356]	; (8003b9c <Thread1.lto_priv.65+0x34cc>)
                                        cdin_real = cdin_real/10;
 8003a38:	4e59      	ldr	r6, [pc, #356]	; (8003ba0 <Thread1.lto_priv.65+0x34d0>)
                                        sd_volumen(TURNO);
 8003a3a:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_1,(cdin_real%10));
 8003a3c:	fba3 1802 	umull	r1, r8, r3, r2
 8003a40:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 8003a44:	0951      	lsrs	r1, r2, #5
 8003a46:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_1,(cdin_real%10));
 8003a4a:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 8003a4e:	4e55      	ldr	r6, [pc, #340]	; (8003ba4 <Thread1.lto_priv.65+0x34d4>)
 8003a50:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 8003a54:	4e54      	ldr	r6, [pc, #336]	; (8003ba8 <Thread1.lto_priv.65+0x34d8>)
                                        write_eeprom(v5_1,(cdin_real%10));
 8003a56:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8003a5a:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 8003a5e:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 8003a60:	4e52      	ldr	r6, [pc, #328]	; (8003bac <Thread1.lto_priv.65+0x34dc>)
                                        cdin_real = cdin_real/10;
 8003a62:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 8003a64:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 8003a68:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_1,(cdin_real%10));
 8003a6c:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 8003a70:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 8003a72:	f884 c013 	strb.w	ip, [r4, #19]
                                        write_eeprom(v6_1,(cdin_real%10));
 8003a76:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8003a7a:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 8003a7e:	fba3 8c01 	umull	r8, ip, r3, r1
 8003a82:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8003a86:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_1,(cdin_real%10));
 8003a8a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003a8e:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_1,(cdin_real%10));
 8003a92:	fba3 8c0e 	umull	r8, ip, r3, lr
 8003a96:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8003a9a:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 8003a9c:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_1,(cdin_real%10));
 8003a9e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003aa2:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 8003aa6:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_1,(cdin_real%10));
 8003aaa:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_1,(cdin_real%10));
 8003aae:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_1,(cdin_real%10));
 8003ab2:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_1,(cdin_real%10));
 8003ab4:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_1,(cdin_real%10));
 8003ab8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003abc:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 8003ac0:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_1,(cdin_real%10));
 8003ac4:	7522      	strb	r2, [r4, #20]
	dato_emr3[num] = inf;
 8003ac6:	220c      	movs	r2, #12
                                        write_eeprom(v1_1,(cdin_real%10));
 8003ac8:	73e1      	strb	r1, [r4, #15]
                                        write_eeprom(v2_1,(cdin_real%10));
 8003aca:	7423      	strb	r3, [r4, #16]
 8003acc:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
                                        write_eeprom(v4_1,(cdin_real%10));
 8003ad0:	f884 e012 	strb.w	lr, [r4, #18]
                                        write_eeprom(v3_1,(cdin_real%10));
 8003ad4:	f884 c011 	strb.w	ip, [r4, #17]
                                        sd_volumen(TURNO);
 8003ad8:	f00b fb32 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8003adc:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8003ae0:	f894 608d 	ldrb.w	r6, [r4, #141]	; 0x8d
 8003ae4:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
 8003ae8:	f894 108f 	ldrb.w	r1, [r4, #143]	; 0x8f
	return (dato_emr3[num]);
 8003aec:	7ba0      	ldrb	r0, [r4, #14]
 8003aee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003af2:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 8003af6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003afa:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003b04:	441a      	add	r2, r3
 8003b06:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8003b0a:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <Thread1.lto_priv.65+0x34c4>)
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8003b0c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8003b10:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8003b12:	681e      	ldr	r6, [r3, #0]
 8003b14:	6859      	ldr	r1, [r3, #4]
 8003b16:	b292      	uxth	r2, r2
 8003b18:	fba6 6702 	umull	r6, r7, r6, r2
 8003b1c:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 8003b20:	2800      	cmp	r0, #0
 8003b22:	f000 81e9 	beq.w	8003ef8 <Thread1.lto_priv.65+0x3828>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8003b26:	f00a fcdb 	bl	800e4e0 <mult>
 8003b2a:	4680      	mov	r8, r0
 8003b2c:	7920      	ldrb	r0, [r4, #4]
 8003b2e:	f00a fcd7 	bl	800e4e0 <mult>
 8003b32:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <Thread1.lto_priv.65+0x34e0>)
 8003b34:	fb00 f008 	mul.w	r0, r0, r8
 8003b38:	fb83 2300 	smull	r2, r3, r3, r0
 8003b3c:	17c2      	asrs	r2, r0, #31
 8003b3e:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 8003b42:	4630      	mov	r0, r6
 8003b44:	4639      	mov	r1, r7
 8003b46:	17d3      	asrs	r3, r2, #31
 8003b48:	f7fc fbc2 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003b4c:	7ee3      	ldrb	r3, [r4, #27]
 8003b4e:	f1c3 0804 	rsb	r8, r3, #4
 8003b52:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8003b56:	4606      	mov	r6, r0
 8003b58:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003b5a:	f77f a992 	ble.w	8002e82 <Thread1.lto_priv.65+0x27b2>
                                                cdin_real = dinero % 10;
 8003b5e:	4630      	mov	r0, r6
 8003b60:	4639      	mov	r1, r7
 8003b62:	220a      	movs	r2, #10
 8003b64:	2300      	movs	r3, #0
 8003b66:	f7fc fbb3 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 8003b6a:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 8003b6c:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 8003b6e:	4639      	mov	r1, r7
 8003b70:	2300      	movs	r3, #0
 8003b72:	220a      	movs	r2, #10
 8003b74:	f7fc fbac 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 8003b78:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003b7a:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 8003b7c:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 8003b7e:	4606      	mov	r6, r0
 8003b80:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003b82:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 8003b84:	d902      	bls.n	8003b8c <Thread1.lto_priv.65+0x34bc>
 8003b86:	1c46      	adds	r6, r0, #1
 8003b88:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003b8c:	4545      	cmp	r5, r8
 8003b8e:	dbe6      	blt.n	8003b5e <Thread1.lto_priv.65+0x348e>
 8003b90:	f7ff b977 	b.w	8002e82 <Thread1.lto_priv.65+0x27b2>
 8003b94:	20000908 	.word	0x20000908
 8003b98:	cccccccd 	.word	0xcccccccd
 8003b9c:	20000800 	.word	0x20000800
 8003ba0:	0a7c5ac5 	.word	0x0a7c5ac5
 8003ba4:	51eb851f 	.word	0x51eb851f
 8003ba8:	10624dd3 	.word	0x10624dd3
 8003bac:	d1b71759 	.word	0xd1b71759
 8003bb0:	68db8bad 	.word	0x68db8bad
                                    emr3_sale1(&recibo_parcial,19,2);
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	2113      	movs	r1, #19
 8003bb8:	a80f      	add	r0, sp, #60	; 0x3c
 8003bba:	f00a fbb1 	bl	800e320 <emr3_sale1>
 8003bbe:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0;i<18;i++)
 8003bc8:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 8003bcc:	428b      	cmp	r3, r1
 8003bce:	d1f9      	bne.n	8003bc4 <Thread1.lto_priv.65+0x34f4>
 8003bd0:	2305      	movs	r3, #5
 8003bd2:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 8003bd4:	aa16      	add	r2, sp, #88	; 0x58
 8003bd6:	1850      	adds	r0, r2, r1
 8003bd8:	441a      	add	r2, r3
                                        j++;                                                                               
 8003bda:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 8003bdc:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8003be0:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 8003be4:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                               
 8003be6:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 8003be8:	d10b      	bne.n	8003c02 <Thread1.lto_priv.65+0x3532>
                                            i++;
 8003bea:	3301      	adds	r3, #1
 8003bec:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 8003bee:	aa16      	add	r2, sp, #88	; 0x58
 8003bf0:	441a      	add	r2, r3
 8003bf2:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8003bf6:	f002 020f 	and.w	r2, r2, #15
 8003bfa:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8003bfe:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5;i<18;i++)
 8003c02:	3301      	adds	r3, #1
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b11      	cmp	r3, #17
 8003c08:	d9e4      	bls.n	8003bd4 <Thread1.lto_priv.65+0x3504>
                                    Pf_p(recibo);
 8003c0a:	a808      	add	r0, sp, #32
 8003c0c:	f00a fc78 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 8003c10:	4bd7      	ldr	r3, [pc, #860]	; (8003f70 <Thread1.lto_priv.65+0x38a0>)
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	ea52 0103 	orrs.w	r1, r2, r3
 8003c1a:	f000 8183 	beq.w	8003f24 <Thread1.lto_priv.65+0x3854>
                                        write_eeprom(v6_1,(cdin_real%10));
 8003c1e:	4bd5      	ldr	r3, [pc, #852]	; (8003f74 <Thread1.lto_priv.65+0x38a4>)
                                        sd_volumen(TURNO);
 8003c20:	49d5      	ldr	r1, [pc, #852]	; (8003f78 <Thread1.lto_priv.65+0x38a8>)
                                        cdin_real = cdin_real/10;
 8003c22:	4ed6      	ldr	r6, [pc, #856]	; (8003f7c <Thread1.lto_priv.65+0x38ac>)
                                        sd_volumen(TURNO);
 8003c24:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_1,(cdin_real%10));
 8003c26:	fba3 1802 	umull	r1, r8, r3, r2
 8003c2a:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 8003c2e:	0951      	lsrs	r1, r2, #5
 8003c30:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_1,(cdin_real%10));
 8003c34:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 8003c38:	4ed1      	ldr	r6, [pc, #836]	; (8003f80 <Thread1.lto_priv.65+0x38b0>)
 8003c3a:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 8003c3e:	4ed1      	ldr	r6, [pc, #836]	; (8003f84 <Thread1.lto_priv.65+0x38b4>)
                                        write_eeprom(v5_1,(cdin_real%10));
 8003c40:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8003c44:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 8003c48:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 8003c4a:	4ecf      	ldr	r6, [pc, #828]	; (8003f88 <Thread1.lto_priv.65+0x38b8>)
                                        cdin_real = cdin_real/10;
 8003c4c:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 8003c4e:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 8003c52:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_1,(cdin_real%10));
 8003c56:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 8003c5a:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 8003c5c:	f884 c013 	strb.w	ip, [r4, #19]
                                        write_eeprom(v6_1,(cdin_real%10));
 8003c60:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8003c64:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 8003c68:	fba3 8c01 	umull	r8, ip, r3, r1
 8003c6c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8003c70:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_1,(cdin_real%10));
 8003c74:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003c78:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_1,(cdin_real%10));
 8003c7c:	fba3 8c0e 	umull	r8, ip, r3, lr
 8003c80:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8003c84:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 8003c86:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_1,(cdin_real%10));
 8003c88:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003c8c:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 8003c90:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_1,(cdin_real%10));
 8003c94:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_1,(cdin_real%10));
 8003c98:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_1,(cdin_real%10));
 8003c9c:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_1,(cdin_real%10));
 8003c9e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_1,(cdin_real%10));
 8003ca2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ca6:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 8003caa:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_1,(cdin_real%10));
 8003cae:	7522      	strb	r2, [r4, #20]
	dato_emr3[num] = inf;
 8003cb0:	220c      	movs	r2, #12
                                        write_eeprom(v1_1,(cdin_real%10));
 8003cb2:	73e1      	strb	r1, [r4, #15]
                                        write_eeprom(v2_1,(cdin_real%10));
 8003cb4:	7423      	strb	r3, [r4, #16]
 8003cb6:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
                                        write_eeprom(v4_1,(cdin_real%10));
 8003cba:	f884 e012 	strb.w	lr, [r4, #18]
                                        write_eeprom(v3_1,(cdin_real%10));
 8003cbe:	f884 c011 	strb.w	ip, [r4, #17]
                                        sd_volumen(TURNO);
 8003cc2:	f00b fa3d 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8003cc6:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8003cca:	f894 608d 	ldrb.w	r6, [r4, #141]	; 0x8d
 8003cce:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
 8003cd2:	f894 108f 	ldrb.w	r1, [r4, #143]	; 0x8f
	return (dato_emr3[num]);
 8003cd6:	7ba0      	ldrb	r0, [r4, #14]
 8003cd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003cdc:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 8003ce0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ce4:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003cee:	441a      	add	r2, r3
 8003cf0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8003cf4:	4b9e      	ldr	r3, [pc, #632]	; (8003f70 <Thread1.lto_priv.65+0x38a0>)
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8003cf6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8003cfa:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8003cfc:	681e      	ldr	r6, [r3, #0]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	b292      	uxth	r2, r2
 8003d02:	fba6 6702 	umull	r6, r7, r6, r2
 8003d06:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	f000 80f4 	beq.w	8003ef8 <Thread1.lto_priv.65+0x3828>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8003d10:	f00a fbe6 	bl	800e4e0 <mult>
 8003d14:	4680      	mov	r8, r0
 8003d16:	7920      	ldrb	r0, [r4, #4]
 8003d18:	f00a fbe2 	bl	800e4e0 <mult>
 8003d1c:	4b9b      	ldr	r3, [pc, #620]	; (8003f8c <Thread1.lto_priv.65+0x38bc>)
 8003d1e:	fb00 f008 	mul.w	r0, r0, r8
 8003d22:	fb83 2300 	smull	r2, r3, r3, r0
 8003d26:	17c2      	asrs	r2, r0, #31
 8003d28:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	4639      	mov	r1, r7
 8003d30:	17d3      	asrs	r3, r2, #31
 8003d32:	f7fc facd 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003d36:	7ee3      	ldrb	r3, [r4, #27]
 8003d38:	f1c3 0804 	rsb	r8, r3, #4
 8003d3c:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8003d40:	4606      	mov	r6, r0
 8003d42:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003d44:	f77f a89d 	ble.w	8002e82 <Thread1.lto_priv.65+0x27b2>
                                                cdin_real = dinero % 10;
 8003d48:	4630      	mov	r0, r6
 8003d4a:	4639      	mov	r1, r7
 8003d4c:	220a      	movs	r2, #10
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f7fc fabe 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 8003d54:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 8003d56:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 8003d58:	4639      	mov	r1, r7
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	220a      	movs	r2, #10
 8003d5e:	f7fc fab7 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 8003d62:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003d64:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 8003d66:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 8003d68:	4606      	mov	r6, r0
 8003d6a:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003d6c:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 8003d6e:	d902      	bls.n	8003d76 <Thread1.lto_priv.65+0x36a6>
 8003d70:	1c46      	adds	r6, r0, #1
 8003d72:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003d76:	4545      	cmp	r5, r8
 8003d78:	dbe6      	blt.n	8003d48 <Thread1.lto_priv.65+0x3678>
 8003d7a:	f7ff b882 	b.w	8002e82 <Thread1.lto_priv.65+0x27b2>
                                    emr3_sale1(&recibo_parcial,15,2);
 8003d7e:	2202      	movs	r2, #2
 8003d80:	210f      	movs	r1, #15
 8003d82:	a80f      	add	r0, sp, #60	; 0x3c
 8003d84:	f00a facc 	bl	800e320 <emr3_sale1>
                                    Pf_p(recibo_parcial);
 8003d88:	a80f      	add	r0, sp, #60	; 0x3c
 8003d8a:	f00a fbb9 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 8003d8e:	4b78      	ldr	r3, [pc, #480]	; (8003f70 <Thread1.lto_priv.65+0x38a0>)
 8003d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d94:	ea52 0103 	orrs.w	r1, r2, r3
 8003d98:	f000 80c4 	beq.w	8003f24 <Thread1.lto_priv.65+0x3854>
                                        write_eeprom(v6_1,(cdin_real%10));
 8003d9c:	4b75      	ldr	r3, [pc, #468]	; (8003f74 <Thread1.lto_priv.65+0x38a4>)
                                        sd_volumen(TURNO);
 8003d9e:	4976      	ldr	r1, [pc, #472]	; (8003f78 <Thread1.lto_priv.65+0x38a8>)
                                        cdin_real = cdin_real/10;
 8003da0:	4e76      	ldr	r6, [pc, #472]	; (8003f7c <Thread1.lto_priv.65+0x38ac>)
                                        sd_volumen(TURNO);
 8003da2:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_1,(cdin_real%10));
 8003da4:	fba3 1802 	umull	r1, r8, r3, r2
 8003da8:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 8003dac:	0951      	lsrs	r1, r2, #5
 8003dae:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_1,(cdin_real%10));
 8003db2:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 8003db6:	4e72      	ldr	r6, [pc, #456]	; (8003f80 <Thread1.lto_priv.65+0x38b0>)
 8003db8:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 8003dbc:	4e71      	ldr	r6, [pc, #452]	; (8003f84 <Thread1.lto_priv.65+0x38b4>)
                                        write_eeprom(v5_1,(cdin_real%10));
 8003dbe:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8003dc2:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 8003dc6:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 8003dc8:	4e6f      	ldr	r6, [pc, #444]	; (8003f88 <Thread1.lto_priv.65+0x38b8>)
                                        cdin_real = cdin_real/10;
 8003dca:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 8003dcc:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 8003dd0:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_1,(cdin_real%10));
 8003dd4:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 8003dd8:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_1,(cdin_real%10));
 8003dda:	f884 c013 	strb.w	ip, [r4, #19]
                                        write_eeprom(v6_1,(cdin_real%10));
 8003dde:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8003de2:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_1,(cdin_real%10));
 8003de6:	fba3 8c01 	umull	r8, ip, r3, r1
 8003dea:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8003dee:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_1,(cdin_real%10));
 8003df2:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003df6:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_1,(cdin_real%10));
 8003dfa:	fba3 8c0e 	umull	r8, ip, r3, lr
 8003dfe:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8003e02:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 8003e04:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_1,(cdin_real%10));
 8003e06:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003e0a:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 8003e0e:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_1,(cdin_real%10));
 8003e12:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_1,(cdin_real%10));
 8003e16:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_1,(cdin_real%10));
 8003e1a:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_1,(cdin_real%10));
 8003e1c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_1,(cdin_real%10));
 8003e20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e24:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_1,(cdin_real%10));
 8003e28:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_1,(cdin_real%10));
 8003e2c:	7522      	strb	r2, [r4, #20]
	dato_emr3[num] = inf;
 8003e2e:	220c      	movs	r2, #12
                                        write_eeprom(v1_1,(cdin_real%10));
 8003e30:	73e1      	strb	r1, [r4, #15]
                                        write_eeprom(v2_1,(cdin_real%10));
 8003e32:	7423      	strb	r3, [r4, #16]
 8003e34:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
                                        write_eeprom(v4_1,(cdin_real%10));
 8003e38:	f884 e012 	strb.w	lr, [r4, #18]
                                        write_eeprom(v3_1,(cdin_real%10));
 8003e3c:	f884 c011 	strb.w	ip, [r4, #17]
                                        sd_volumen(TURNO);
 8003e40:	f00b f97e 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8003e44:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8003e48:	f894 608d 	ldrb.w	r6, [r4, #141]	; 0x8d
 8003e4c:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
 8003e50:	f894 108f 	ldrb.w	r1, [r4, #143]	; 0x8f
	return (dato_emr3[num]);
 8003e54:	7ba0      	ldrb	r0, [r4, #14]
 8003e56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e5a:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 8003e5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e62:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003e6c:	441a      	add	r2, r3
 8003e6e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8003e72:	4b3f      	ldr	r3, [pc, #252]	; (8003f70 <Thread1.lto_priv.65+0x38a0>)
                                        ppu = ((read_eeprom(ppu1_venta1)*1000) + (read_eeprom(ppu2_venta1)*100) + (read_eeprom(ppu3_venta1)*10) + (read_eeprom(ppu4_venta1)*1));
 8003e74:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8003e78:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8003e7a:	681e      	ldr	r6, [r3, #0]
 8003e7c:	6859      	ldr	r1, [r3, #4]
 8003e7e:	b292      	uxth	r2, r2
 8003e80:	fba6 6702 	umull	r6, r7, r6, r2
 8003e84:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 8003e88:	b3b0      	cbz	r0, 8003ef8 <Thread1.lto_priv.65+0x3828>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8003e8a:	f00a fb29 	bl	800e4e0 <mult>
 8003e8e:	4680      	mov	r8, r0
 8003e90:	7920      	ldrb	r0, [r4, #4]
 8003e92:	f00a fb25 	bl	800e4e0 <mult>
 8003e96:	4b3d      	ldr	r3, [pc, #244]	; (8003f8c <Thread1.lto_priv.65+0x38bc>)
 8003e98:	fb00 f008 	mul.w	r0, r0, r8
 8003e9c:	fb83 2300 	smull	r2, r3, r3, r0
 8003ea0:	17c2      	asrs	r2, r0, #31
 8003ea2:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	4639      	mov	r1, r7
 8003eaa:	17d3      	asrs	r3, r2, #31
 8003eac:	f7fc fa10 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003eb0:	7ee3      	ldrb	r3, [r4, #27]
 8003eb2:	f1c3 0804 	rsb	r8, r3, #4
 8003eb6:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8003eba:	4606      	mov	r6, r0
 8003ebc:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003ebe:	f77e afe0 	ble.w	8002e82 <Thread1.lto_priv.65+0x27b2>
                                                cdin_real = dinero % 10;
 8003ec2:	4630      	mov	r0, r6
 8003ec4:	4639      	mov	r1, r7
 8003ec6:	220a      	movs	r2, #10
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f7fc fa01 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 8003ece:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 8003ed0:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 8003ed2:	4639      	mov	r1, r7
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	220a      	movs	r2, #10
 8003ed8:	f7fc f9fa 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 8003edc:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003ede:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 8003ee0:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003ee6:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 8003ee8:	d902      	bls.n	8003ef0 <Thread1.lto_priv.65+0x3820>
 8003eea:	1c46      	adds	r6, r0, #1
 8003eec:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8003ef0:	4545      	cmp	r5, r8
 8003ef2:	dbe6      	blt.n	8003ec2 <Thread1.lto_priv.65+0x37f2>
 8003ef4:	f7fe bfc5 	b.w	8002e82 <Thread1.lto_priv.65+0x27b2>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8003ef8:	f00a faf2 	bl	800e4e0 <mult>
 8003efc:	4605      	mov	r5, r0
 8003efe:	7920      	ldrb	r0, [r4, #4]
 8003f00:	f00a faee 	bl	800e4e0 <mult>
 8003f04:	fb00 f505 	mul.w	r5, r0, r5
 8003f08:	7ee0      	ldrb	r0, [r4, #27]
 8003f0a:	f00a fae9 	bl	800e4e0 <mult>
 8003f0e:	4639      	mov	r1, r7
 8003f10:	fb95 f2f0 	sdiv	r2, r5, r0
 8003f14:	4630      	mov	r0, r6
 8003f16:	17d3      	asrs	r3, r2, #31
 8003f18:	f7fc f9da 	bl	80002d0 <__aeabi_uldivmod>
 8003f1c:	4606      	mov	r6, r0
 8003f1e:	460f      	mov	r7, r1
 8003f20:	f7fe bfaf 	b.w	8002e82 <Thread1.lto_priv.65+0x27b2>
                                        LeerTotales(TURNO);                                 
 8003f24:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <Thread1.lto_priv.65+0x38a8>)
 8003f26:	7818      	ldrb	r0, [r3, #0]
 8003f28:	f00a fd12 	bl	800e950 <LeerTotales>
	dato_emr3[num] = inf;
 8003f2c:	2306      	movs	r3, #6
 8003f2e:	2500      	movs	r5, #0
                                        Status_1(0X06);
 8003f30:	4618      	mov	r0, r3
 8003f32:	7023      	strb	r3, [r4, #0]
 8003f34:	7525      	strb	r5, [r4, #20]
 8003f36:	74e5      	strb	r5, [r4, #19]
 8003f38:	74a5      	strb	r5, [r4, #18]
 8003f3a:	7465      	strb	r5, [r4, #17]
 8003f3c:	7425      	strb	r5, [r4, #16]
 8003f3e:	73e5      	strb	r5, [r4, #15]
 8003f40:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 8003f44:	f884 5020 	strb.w	r5, [r4, #32]
 8003f48:	77e5      	strb	r5, [r4, #31]
 8003f4a:	77a5      	strb	r5, [r4, #30]
 8003f4c:	7765      	strb	r5, [r4, #29]
 8003f4e:	7725      	strb	r5, [r4, #28]
 8003f50:	f009 fc56 	bl	800d800 <Status_1>
                                        ButtonEmr(TECLADO_FIN,TURNO);
 8003f54:	4a08      	ldr	r2, [pc, #32]	; (8003f78 <Thread1.lto_priv.65+0x38a8>)
 8003f56:	f884 5087 	strb.w	r5, [r4, #135]	; 0x87
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	7811      	ldrb	r1, [r2, #0]
 8003f5e:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 8003f62:	2002      	movs	r0, #2
 8003f64:	f008 fdec 	bl	800cb40 <ButtonEmr>
                                        data_recibo(7);
 8003f68:	f00b fb7a 	bl	800f660 <data_recibo.constprop.1>
 8003f6c:	f7fc bf65 	b.w	8000e3a <Thread1.lto_priv.65+0x76a>
 8003f70:	20000908 	.word	0x20000908
 8003f74:	cccccccd 	.word	0xcccccccd
 8003f78:	20000800 	.word	0x20000800
 8003f7c:	0a7c5ac5 	.word	0x0a7c5ac5
 8003f80:	51eb851f 	.word	0x51eb851f
 8003f84:	10624dd3 	.word	0x10624dd3
 8003f88:	d1b71759 	.word	0xd1b71759
 8003f8c:	68db8bad 	.word	0x68db8bad
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8003f90:	f894 1091 	ldrb.w	r1, [r4, #145]	; 0x91
 8003f94:	f894 0092 	ldrb.w	r0, [r4, #146]	; 0x92
                                    din_real = ((B1 * 100000) + (B2 * 10000) + (B3 * 1000) + (B4 * 100) + (B5 * 10) + B6);
 8003f98:	4ed6      	ldr	r6, [pc, #856]	; (80042f4 <Thread1.lto_priv.65+0x3c24>)
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8003f9a:	ebc1 1e41 	rsb	lr, r1, r1, lsl #5
 8003f9e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8003fa2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
                                    din_real = ((B1 * 100000) + (B2 * 10000) + (B3 * 1000) + (B4 * 100) + (B5 * 10) + B6);
 8003fa6:	f242 7e10 	movw	lr, #10000	; 0x2710
 8003faa:	fb0e f202 	mul.w	r2, lr, r2
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8003fae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
                                    din_real = ((B1 * 100000) + (B2 * 10000) + (B3 * 1000) + (B4 * 100) + (B5 * 10) + B6);
 8003fb2:	fb06 2808 	mla	r8, r6, r8, r2
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8003fb6:	0080      	lsls	r0, r0, #2
 8003fb8:	f894 6094 	ldrb.w	r6, [r4, #148]	; 0x94
 8003fbc:	f894 2093 	ldrb.w	r2, [r4, #147]	; 0x93
                                    din_real = ((B1 * 100000) + (B2 * 10000) + (B3 * 1000) + (B4 * 100) + (B5 * 10) + B6);
 8003fc0:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8003fc4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003fc8:	4431      	add	r1, r6
                                    din_real = ((B1 * 100000) + (B2 * 10000) + (B3 * 1000) + (B4 * 100) + (B5 * 10) + B6);
 8003fca:	fb0e 8807 	mla	r8, lr, r7, r8
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8003fce:	eb02 0682 	add.w	r6, r2, r2, lsl #2
                                    din_real = ((B1 * 100000) + (B2 * 10000) + (B3 * 1000) + (B4 * 100) + (B5 * 10) + B6);
 8003fd2:	2764      	movs	r7, #100	; 0x64
 8003fd4:	fb17 8703 	smlabb	r7, r7, r3, r8
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8003fd8:	eb01 0346 	add.w	r3, r1, r6, lsl #1
                                    din_real = ((B1 * 100000) + (B2 * 10000) + (B3 * 1000) + (B4 * 100) + (B5 * 10) + B6);
 8003fdc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8003fe0:	220a      	movs	r2, #10
 8003fe2:	fb12 7201 	smlabb	r2, r2, r1, r7
                                    if(din_real == 0) vol_real = 0;
 8003fe6:	9904      	ldr	r1, [sp, #16]
 8003fe8:	1852      	adds	r2, r2, r1
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8003fea:	b29b      	uxth	r3, r3
                                    if(din_real == 0) vol_real = 0;
 8003fec:	f000 80b3 	beq.w	8004156 <Thread1.lto_priv.65+0x3a86>
                                        vol_real = ((din_real)/ppu);
 8003ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff4:	49c0      	ldr	r1, [pc, #768]	; (80042f8 <Thread1.lto_priv.65+0x3c28>)
 8003ff6:	48c1      	ldr	r0, [pc, #772]	; (80042fc <Thread1.lto_priv.65+0x3c2c>)
 8003ff8:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 8003ffc:	fba0 0e0e 	umull	r0, lr, r0, lr
 8004000:	fba1 0503 	umull	r0, r5, r1, r3
 8004004:	48be      	ldr	r0, [pc, #760]	; (8004300 <Thread1.lto_priv.65+0x3c30>)
 8004006:	fba0 0603 	umull	r0, r6, r0, r3
 800400a:	48be      	ldr	r0, [pc, #760]	; (8004304 <Thread1.lto_priv.65+0x3c34>)
 800400c:	fba0 0c03 	umull	r0, ip, r0, r3
 8004010:	48bd      	ldr	r0, [pc, #756]	; (8004308 <Thread1.lto_priv.65+0x3c38>)
 8004012:	ea4f 1ede 	mov.w	lr, lr, lsr #7
 8004016:	fba0 7003 	umull	r7, r0, r0, r3
 800401a:	fba1 870e 	umull	r8, r7, r1, lr
 800401e:	08ff      	lsrs	r7, r7, #3
 8004020:	08ed      	lsrs	r5, r5, #3
 8004022:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 8004026:	0b40      	lsrs	r0, r0, #13
 8004028:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800402c:	9504      	str	r5, [sp, #16]
 800402e:	9005      	str	r0, [sp, #20]
 8004030:	ebae 0e47 	sub.w	lr, lr, r7, lsl #1
 8004034:	fba1 8005 	umull	r8, r0, r1, r5
 8004038:	fba1 570c 	umull	r5, r7, r1, ip
 800403c:	9706      	str	r7, [sp, #24]
 800403e:	9f05      	ldr	r7, [sp, #20]
 8004040:	0976      	lsrs	r6, r6, #5
 8004042:	fba1 5806 	umull	r5, r8, r1, r6
 8004046:	fba1 5707 	umull	r5, r7, r1, r7
 800404a:	08c0      	lsrs	r0, r0, #3
 800404c:	9d04      	ldr	r5, [sp, #16]
 800404e:	9906      	ldr	r1, [sp, #24]
 8004050:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004054:	eba5 0040 	sub.w	r0, r5, r0, lsl #1
 8004058:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800405c:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
 8004060:	08c9      	lsrs	r1, r1, #3
 8004062:	9d05      	ldr	r5, [sp, #20]
 8004064:	08ff      	lsrs	r7, r7, #3
 8004066:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800406a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800406e:	ebac 0141 	sub.w	r1, ip, r1, lsl #1
 8004072:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8004076:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800407a:	fa5f f58e 	uxtb.w	r5, lr
 800407e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8004082:	9506      	str	r5, [sp, #24]
 8004084:	b2dd      	uxtb	r5, r3
 8004086:	b2cb      	uxtb	r3, r1
 8004088:	eba6 0648 	sub.w	r6, r6, r8, lsl #1
 800408c:	9305      	str	r3, [sp, #20]
 800408e:	b2fb      	uxtb	r3, r7
 8004090:	fa5f fc80 	uxtb.w	ip, r0
 8004094:	fa5f fe86 	uxtb.w	lr, r6
 8004098:	9304      	str	r3, [sp, #16]
                                    write_eeprom(real_din26,(din_real%10));                                        
 800409a:	4b97      	ldr	r3, [pc, #604]	; (80042f8 <Thread1.lto_priv.65+0x3c28>)
                                    din_real = din_real/10;
 800409c:	4897      	ldr	r0, [pc, #604]	; (80042fc <Thread1.lto_priv.65+0x3c2c>)
 800409e:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80040a2:	0957      	lsrs	r7, r2, #5
 80040a4:	fba0 0707 	umull	r0, r7, r0, r7
                                    write_eeprom(real_din26,(din_real%10));                                        
 80040a8:	fba3 5002 	umull	r5, r0, r3, r2
                                    din_real = din_real/10;
 80040ac:	4d94      	ldr	r5, [pc, #592]	; (8004300 <Thread1.lto_priv.65+0x3c30>)
 80040ae:	f884 e076 	strb.w	lr, [r4, #118]	; 0x76
 80040b2:	fba5 5802 	umull	r5, r8, r5, r2
                                    din_real = din_real/10;
 80040b6:	4d93      	ldr	r5, [pc, #588]	; (8004304 <Thread1.lto_priv.65+0x3c34>)
 80040b8:	f884 c077 	strb.w	ip, [r4, #119]	; 0x77
 80040bc:	fba5 5602 	umull	r5, r6, r5, r2
                                    din_real = din_real/10;
 80040c0:	4d91      	ldr	r5, [pc, #580]	; (8004308 <Thread1.lto_priv.65+0x3c38>)
                                    write_eeprom(real_din26,(din_real%10));                                        
 80040c2:	08c0      	lsrs	r0, r0, #3
                                    din_real = din_real/10;
 80040c4:	fba5 1502 	umull	r1, r5, r5, r2
 80040c8:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80040cc:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
                                    write_eeprom(real_din25,(din_real%10));
 80040d0:	fba3 e100 	umull	lr, r1, r3, r0
 80040d4:	08c9      	lsrs	r1, r1, #3
 80040d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                    din_real = din_real/10;
 80040da:	09ff      	lsrs	r7, r7, #7
                                    write_eeprom(real_din25,(din_real%10));
 80040dc:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
                                    write_eeprom(real_din26,(din_real%10));                                        
 80040e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040e4:	eba2 0040 	sub.w	r0, r2, r0, lsl #1
                                    write_eeprom(real_din21,(din_real%10));
 80040e8:	fba3 e207 	umull	lr, r2, r3, r7
 80040ec:	08d2      	lsrs	r2, r2, #3
                                    din_real = din_real/10;
 80040ee:	ea4f 1858 	mov.w	r8, r8, lsr #5
                                    din_real = din_real/10;
 80040f2:	09b6      	lsrs	r6, r6, #6
                                    din_real = din_real/10;
 80040f4:	0b6d      	lsrs	r5, r5, #13
                                    write_eeprom(real_din21,(din_real%10));
 80040f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80040fa:	eba7 0742 	sub.w	r7, r7, r2, lsl #1
                                    write_eeprom(real_din24,(din_real%10));
 80040fe:	fba3 e208 	umull	lr, r2, r3, r8
                                    write_eeprom(real_din23,(din_real%10));
 8004102:	fba3 ce06 	umull	ip, lr, r3, r6
                                    write_eeprom(real_din22,(din_real%10));
 8004106:	fba3 c305 	umull	ip, r3, r3, r5
 800410a:	08db      	lsrs	r3, r3, #3
 800410c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                    write_eeprom(real_din24,(din_real%10));
 8004110:	08d2      	lsrs	r2, r2, #3
                                    write_eeprom(real_din23,(din_real%10));
 8004112:	ea4f 0ede 	mov.w	lr, lr, lsr #3
                                    write_eeprom(real_din22,(din_real%10));
 8004116:	eba5 0543 	sub.w	r5, r5, r3, lsl #1
                                    write_eeprom(real_din24,(din_real%10));
 800411a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800411e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8004122:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
                                    write_eeprom(real_din23,(din_real%10));
 8004126:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
                                    write_eeprom(real_din24,(din_real%10));
 800412a:	eba8 0242 	sub.w	r2, r8, r2, lsl #1
                                    write_eeprom(real_din23,(din_real%10));
 800412e:	eba6 0e4e 	sub.w	lr, r6, lr, lsl #1
 8004132:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004136:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
                                    write_eeprom(real_din25,(din_real%10));
 800413a:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
                                    write_eeprom(real_din26,(din_real%10));                                        
 800413e:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
                                    write_eeprom(real_din21,(din_real%10));
 8004142:	f884 7065 	strb.w	r7, [r4, #101]	; 0x65
                                    write_eeprom(real_din24,(din_real%10));
 8004146:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
                                    write_eeprom(real_din23,(din_real%10));
 800414a:	f884 e067 	strb.w	lr, [r4, #103]	; 0x67
                                    write_eeprom(real_din22,(din_real%10));
 800414e:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
 8004152:	f7fc bd0f 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                                    if(din_real == 0) vol_real = 0;
 8004156:	9206      	str	r2, [sp, #24]
 8004158:	9204      	str	r2, [sp, #16]
 800415a:	9205      	str	r2, [sp, #20]
 800415c:	4696      	mov	lr, r2
 800415e:	4694      	mov	ip, r2
 8004160:	e79b      	b.n	800409a <Thread1.lto_priv.65+0x39ca>
                                    else if (read_eeprom(PD) > read_eeprom(pppu))
 8004162:	f4be a9b4 	bcs.w	80024ce <Thread1.lto_priv.65+0x1dfe>
                                        punto_aux = mult(read_eeprom(pppu) - read_eeprom(PD));
 8004166:	1a40      	subs	r0, r0, r1
 8004168:	b2c0      	uxtb	r0, r0
 800416a:	f00a f9b9 	bl	800e4e0 <mult>
                                        valor = dinero/(ppu*punto_aux);
 800416e:	fb00 f005 	mul.w	r0, r0, r5
 8004172:	4602      	mov	r2, r0
 8004174:	17c3      	asrs	r3, r0, #31
 8004176:	4639      	mov	r1, r7
 8004178:	4640      	mov	r0, r8
 800417a:	4616      	mov	r6, r2
 800417c:	461f      	mov	r7, r3
 800417e:	f7fc f8a7 	bl	80002d0 <__aeabi_uldivmod>
 8004182:	9001      	str	r0, [sp, #4]
                                        punto=mult(read_eeprom(PV));
 8004184:	7ba0      	ldrb	r0, [r4, #14]
 8004186:	f00a f9ab 	bl	800e4e0 <mult>
                                        valor_float = ((dinero*punto)/(ppu*punto_aux))-(valor*punto);                                      
 800418a:	463b      	mov	r3, r7
                                        punto=mult(read_eeprom(PV));
 800418c:	4605      	mov	r5, r0
                                        valor_float = ((dinero*punto)/(ppu*punto_aux))-(valor*punto);                                      
 800418e:	4632      	mov	r2, r6
 8004190:	fb80 0108 	smull	r0, r1, r0, r8
 8004194:	f7fc f89c 	bl	80002d0 <__aeabi_uldivmod>
 8004198:	9b01      	ldr	r3, [sp, #4]
 800419a:	fb03 0315 	mls	r3, r3, r5, r0
 800419e:	9302      	str	r3, [sp, #8]
 80041a0:	f7fe b995 	b.w	80024ce <Thread1.lto_priv.65+0x1dfe>
                                        valor = dinero/ppu;
 80041a4:	b2aa      	uxth	r2, r5
 80041a6:	2300      	movs	r3, #0
                                        punto=mult(read_eeprom(PV));
 80041a8:	7ba0      	ldrb	r0, [r4, #14]
                                        valor = dinero/ppu;
 80041aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
                                        punto=mult(read_eeprom(PV));
 80041ae:	f00a f997 	bl	800e4e0 <mult>
                                        valor = dinero/ppu;
 80041b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
                                        punto=mult(read_eeprom(PV));
 80041b6:	4605      	mov	r5, r0
                                        valor = dinero/ppu;
 80041b8:	4639      	mov	r1, r7
 80041ba:	4640      	mov	r0, r8
 80041bc:	f7fc f888 	bl	80002d0 <__aeabi_uldivmod>
                                        valor_float = ((dinero*punto)/ppu)-(valor*punto);
 80041c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
                                        valor = dinero/ppu;
 80041c4:	4606      	mov	r6, r0
 80041c6:	9001      	str	r0, [sp, #4]
                                        valor_float = ((dinero*punto)/ppu)-(valor*punto);
 80041c8:	fb85 0108 	smull	r0, r1, r5, r8
 80041cc:	f7fc f880 	bl	80002d0 <__aeabi_uldivmod>
 80041d0:	fb06 0315 	mls	r3, r6, r5, r0
 80041d4:	9302      	str	r3, [sp, #8]
 80041d6:	f7fe b97a 	b.w	80024ce <Thread1.lto_priv.65+0x1dfe>
                                    else if (read_eeprom(PD) > read_eeprom(pppu))
 80041da:	f4be a8c1 	bcs.w	8002360 <Thread1.lto_priv.65+0x1c90>
                                        punto_aux = mult(read_eeprom(pppu) - read_eeprom(PD));
 80041de:	1a80      	subs	r0, r0, r2
 80041e0:	b2c0      	uxtb	r0, r0
 80041e2:	f00a f97d 	bl	800e4e0 <mult>
                                        valor = dinero/(ppu*punto_aux);
 80041e6:	fb00 f005 	mul.w	r0, r0, r5
 80041ea:	4602      	mov	r2, r0
 80041ec:	17c3      	asrs	r3, r0, #31
 80041ee:	4639      	mov	r1, r7
 80041f0:	4640      	mov	r0, r8
 80041f2:	4616      	mov	r6, r2
 80041f4:	461f      	mov	r7, r3
 80041f6:	f7fc f86b 	bl	80002d0 <__aeabi_uldivmod>
 80041fa:	9001      	str	r0, [sp, #4]
                                        punto=mult(read_eeprom(PV));
 80041fc:	7ba0      	ldrb	r0, [r4, #14]
 80041fe:	f00a f96f 	bl	800e4e0 <mult>
                                        valor_float = ((dinero*punto)/(ppu*punto_aux))-(valor*punto);                                      
 8004202:	463b      	mov	r3, r7
                                        punto=mult(read_eeprom(PV));
 8004204:	4605      	mov	r5, r0
                                        valor_float = ((dinero*punto)/(ppu*punto_aux))-(valor*punto);                                      
 8004206:	4632      	mov	r2, r6
 8004208:	fb80 0108 	smull	r0, r1, r0, r8
 800420c:	f7fc f860 	bl	80002d0 <__aeabi_uldivmod>
 8004210:	9b01      	ldr	r3, [sp, #4]
 8004212:	fb03 0315 	mls	r3, r3, r5, r0
 8004216:	9302      	str	r3, [sp, #8]
 8004218:	f7fe b8a2 	b.w	8002360 <Thread1.lto_priv.65+0x1c90>
                                        valor = dinero/ppu;
 800421c:	b2aa      	uxth	r2, r5
 800421e:	2300      	movs	r3, #0
                                        punto=mult(read_eeprom(PV));
 8004220:	7ba0      	ldrb	r0, [r4, #14]
                                        valor = dinero/ppu;
 8004222:	e9cd 2302 	strd	r2, r3, [sp, #8]
                                        punto=mult(read_eeprom(PV));
 8004226:	f00a f95b 	bl	800e4e0 <mult>
                                        valor = dinero/ppu;
 800422a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
                                        punto=mult(read_eeprom(PV));
 800422e:	4605      	mov	r5, r0
                                        valor = dinero/ppu;
 8004230:	4639      	mov	r1, r7
 8004232:	4640      	mov	r0, r8
 8004234:	f7fc f84c 	bl	80002d0 <__aeabi_uldivmod>
                                        valor_float = ((dinero*punto)/ppu)-(valor*punto);
 8004238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
                                        valor = dinero/ppu;
 800423c:	4606      	mov	r6, r0
 800423e:	9001      	str	r0, [sp, #4]
                                        valor_float = ((dinero*punto)/ppu)-(valor*punto);
 8004240:	fb85 0108 	smull	r0, r1, r5, r8
 8004244:	f7fc f844 	bl	80002d0 <__aeabi_uldivmod>
 8004248:	fb06 0315 	mls	r3, r6, r5, r0
 800424c:	9302      	str	r3, [sp, #8]
 800424e:	f7fe b887 	b.w	8002360 <Thread1.lto_priv.65+0x1c90>
                                        if(read_eeprom(consola) == 0x01 && read_eeprom(estado1) == 0X06)
 8004252:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8004256:	2a01      	cmp	r2, #1
	return (dato_emr3[num]);
 8004258:	7822      	ldrb	r2, [r4, #0]
 800425a:	d038      	beq.n	80042ce <Thread1.lto_priv.65+0x3bfe>
                                        else if(read_eeprom(estado1) == 0X06)
 800425c:	2a06      	cmp	r2, #6
 800425e:	d030      	beq.n	80042c2 <Thread1.lto_priv.65+0x3bf2>
                                        else if (read_eeprom(estado1) == 0X08)
 8004260:	2a08      	cmp	r2, #8
 8004262:	f47c adea 	bne.w	8000e3a <Thread1.lto_priv.65+0x76a>
	dato_emr3[num] = inf;
 8004266:	2209      	movs	r2, #9
 8004268:	2302      	movs	r3, #2
 800426a:	7022      	strb	r2, [r4, #0]
 800426c:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 8004270:	f7fd b80d 	b.w	800128e <Thread1.lto_priv.65+0xbbe>
                                    if(read_eeprom(consola) == 0x04)
 8004274:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8004278:	2b04      	cmp	r3, #4
 800427a:	d017      	beq.n	80042ac <Thread1.lto_priv.65+0x3bdc>
 800427c:	227a      	movs	r2, #122	; 0x7a
 800427e:	2343      	movs	r3, #67	; 0x43
 8004280:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
 8004284:	f884 507a 	strb.w	r5, [r4, #122]	; 0x7a
 8004288:	f884 207b 	strb.w	r2, [r4, #123]	; 0x7b
 800428c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
                                    ButtonEmr(ENVIAR_VOLUMEN,TURNO);
 8004290:	4b1e      	ldr	r3, [pc, #120]	; (800430c <Thread1.lto_priv.65+0x3c3c>)
 8004292:	201d      	movs	r0, #29
 8004294:	7819      	ldrb	r1, [r3, #0]
 8004296:	f008 fc53 	bl	800cb40 <ButtonEmr>
                                    data_recibo(7);
 800429a:	f00b f9e1 	bl	800f660 <data_recibo.constprop.1>
                                    sd_preset(0,TURNO);
 800429e:	4b1b      	ldr	r3, [pc, #108]	; (800430c <Thread1.lto_priv.65+0x3c3c>)
 80042a0:	2000      	movs	r0, #0
 80042a2:	7819      	ldrb	r1, [r3, #0]
 80042a4:	f004 f9cc 	bl	8008640 <sd_preset>
 80042a8:	f7fd bc77 	b.w	8001b9a <Thread1.lto_priv.65+0x14ca>
 80042ac:	22c8      	movs	r2, #200	; 0xc8
 80042ae:	2342      	movs	r3, #66	; 0x42
 80042b0:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
 80042b4:	f884 507a 	strb.w	r5, [r4, #122]	; 0x7a
 80042b8:	f884 207b 	strb.w	r2, [r4, #123]	; 0x7b
 80042bc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
 80042c0:	e7e6      	b.n	8004290 <Thread1.lto_priv.65+0x3bc0>
 80042c2:	2207      	movs	r2, #7
 80042c4:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 80042c8:	7022      	strb	r2, [r4, #0]
 80042ca:	f7fc bdb6 	b.w	8000e3a <Thread1.lto_priv.65+0x76a>
                                        if(read_eeprom(consola) == 0x01 && read_eeprom(estado1) == 0X06)
 80042ce:	2a06      	cmp	r2, #6
 80042d0:	d1c6      	bne.n	8004260 <Thread1.lto_priv.65+0x3b90>
                                            venta_ppu(0xF4,TURNO);
 80042d2:	4b0e      	ldr	r3, [pc, #56]	; (800430c <Thread1.lto_priv.65+0x3c3c>)
 80042d4:	20f4      	movs	r0, #244	; 0xf4
 80042d6:	7819      	ldrb	r1, [r3, #0]
 80042d8:	f009 f872 	bl	800d3c0 <venta_ppu>
 80042dc:	2309      	movs	r3, #9
 80042de:	f884 6087 	strb.w	r6, [r4, #135]	; 0x87
 80042e2:	7023      	strb	r3, [r4, #0]
 80042e4:	f7fc bfd3 	b.w	800128e <Thread1.lto_priv.65+0xbbe>
 80042e8:	2207      	movs	r2, #7
 80042ea:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 80042ee:	70a2      	strb	r2, [r4, #2]
 80042f0:	f7fc bc40 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
 80042f4:	000186a0 	.word	0x000186a0
 80042f8:	cccccccd 	.word	0xcccccccd
 80042fc:	0a7c5ac5 	.word	0x0a7c5ac5
 8004300:	51eb851f 	.word	0x51eb851f
 8004304:	10624dd3 	.word	0x10624dd3
 8004308:	d1b71759 	.word	0xd1b71759
 800430c:	20000800 	.word	0x20000800
                                if(read_eeprom(log) == 1) emr3_log(&recibo,11,2);
 8004310:	2202      	movs	r2, #2
 8004312:	210b      	movs	r1, #11
 8004314:	a808      	add	r0, sp, #32
 8004316:	f009 ff03 	bl	800e120 <emr3_log>
 800431a:	f7fd be28 	b.w	8001f6e <Thread1.lto_priv.65+0x189e>
                                        if(read_eeprom(consola) == 0x01 && read_eeprom(estado2) == 0X06)
 800431e:	2a06      	cmp	r2, #6
 8004320:	f47e a977 	bne.w	8002612 <Thread1.lto_priv.65+0x1f42>
                                            venta_ppu(0xF4,TURNO);
 8004324:	4b8f      	ldr	r3, [pc, #572]	; (8004564 <Thread1.lto_priv.65+0x3e94>)
 8004326:	20f4      	movs	r0, #244	; 0xf4
 8004328:	7819      	ldrb	r1, [r3, #0]
 800432a:	f009 f849 	bl	800d3c0 <venta_ppu>
 800432e:	2309      	movs	r3, #9
 8004330:	f884 6088 	strb.w	r6, [r4, #136]	; 0x88
 8004334:	70a3      	strb	r3, [r4, #2]
 8004336:	f7fc befb 	b.w	8001130 <Thread1.lto_priv.65+0xa60>
                                if(read_eeprom(log) == 1) emr3_log(&recibo,11,2);
 800433a:	2202      	movs	r2, #2
 800433c:	210b      	movs	r1, #11
 800433e:	a808      	add	r0, sp, #32
 8004340:	f009 feee 	bl	800e120 <emr3_log>
 8004344:	f7fd bcaa 	b.w	8001c9c <Thread1.lto_priv.65+0x15cc>
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8004348:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 800434c:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 8004350:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
 8004354:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
                                        din_real = (vol_real * ppu ) / ((mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) / mult(read_eeprom(PD)));
 8004358:	7ba0      	ldrb	r0, [r4, #14]
                                    ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 800435a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800435e:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 8004362:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004366:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004370:	4413      	add	r3, r2
 8004372:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004376:	eb03 0341 	add.w	r3, r3, r1, lsl #1
                                        din_real = (vol_real * ppu ) / ((mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) / mult(read_eeprom(PD)));
 800437a:	b29b      	uxth	r3, r3
 800437c:	fb05 f603 	mul.w	r6, r5, r3
 8004380:	f00a f8ae 	bl	800e4e0 <mult>
 8004384:	4607      	mov	r7, r0
 8004386:	7920      	ldrb	r0, [r4, #4]
 8004388:	f00a f8aa 	bl	800e4e0 <mult>
 800438c:	fb00 f707 	mul.w	r7, r0, r7
 8004390:	7ee0      	ldrb	r0, [r4, #27]
 8004392:	f00a f8a5 	bl	800e4e0 <mult>
 8004396:	4a74      	ldr	r2, [pc, #464]	; (8004568 <Thread1.lto_priv.65+0x3e98>)
 8004398:	4974      	ldr	r1, [pc, #464]	; (800456c <Thread1.lto_priv.65+0x3e9c>)
 800439a:	fb97 f3f0 	sdiv	r3, r7, r0
 800439e:	fbb6 f3f3 	udiv	r3, r6, r3
 80043a2:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 80043a6:	fba1 1e0e 	umull	r1, lr, r1, lr
 80043aa:	fba2 1003 	umull	r1, r0, r2, r3
 80043ae:	4970      	ldr	r1, [pc, #448]	; (8004570 <Thread1.lto_priv.65+0x3ea0>)
 80043b0:	fba1 1703 	umull	r1, r7, r1, r3
 80043b4:	496f      	ldr	r1, [pc, #444]	; (8004574 <Thread1.lto_priv.65+0x3ea4>)
 80043b6:	fba1 1c03 	umull	r1, ip, r1, r3
 80043ba:	496f      	ldr	r1, [pc, #444]	; (8004578 <Thread1.lto_priv.65+0x3ea8>)
 80043bc:	ea4f 1ede 	mov.w	lr, lr, lsr #7
 80043c0:	fba1 6103 	umull	r6, r1, r1, r3
 80043c4:	08c0      	lsrs	r0, r0, #3
 80043c6:	fba2 860e 	umull	r8, r6, r2, lr
 80043ca:	0b49      	lsrs	r1, r1, #13
 80043cc:	9104      	str	r1, [sp, #16]
 80043ce:	08f6      	lsrs	r6, r6, #3
 80043d0:	fba2 8100 	umull	r8, r1, r2, r0
 80043d4:	9605      	str	r6, [sp, #20]
 80043d6:	097f      	lsrs	r7, r7, #5
 80043d8:	08c9      	lsrs	r1, r1, #3
 80043da:	fba2 6807 	umull	r6, r8, r2, r7
 80043de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80043e2:	9e05      	ldr	r6, [sp, #20]
 80043e4:	9105      	str	r1, [sp, #20]
 80043e6:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 80043ea:	9904      	ldr	r1, [sp, #16]
 80043ec:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 80043f0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80043f4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80043f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80043fc:	ebae 0e46 	sub.w	lr, lr, r6, lsl #1
 8004400:	fba2 860c 	umull	r8, r6, r2, ip
 8004404:	fba2 2801 	umull	r2, r8, r2, r1
 8004408:	9905      	ldr	r1, [sp, #20]
 800440a:	08f2      	lsrs	r2, r6, #3
 800440c:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 8004410:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004414:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8004418:	9e06      	ldr	r6, [sp, #24]
 800441a:	9804      	ldr	r0, [sp, #16]
 800441c:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8004420:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004424:	ebac 0242 	sub.w	r2, ip, r2, lsl #1
 8004428:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 800442c:	eba7 0746 	sub.w	r7, r7, r6, lsl #1
 8004430:	eba0 0848 	sub.w	r8, r0, r8, lsl #1
 8004434:	b2de      	uxtb	r6, r3
 8004436:	b2d3      	uxtb	r3, r2
 8004438:	fa5f f08e 	uxtb.w	r0, lr
 800443c:	9304      	str	r3, [sp, #16]
 800443e:	fa5f f388 	uxtb.w	r3, r8
 8004442:	9006      	str	r0, [sp, #24]
 8004444:	fa5f fc81 	uxtb.w	ip, r1
 8004448:	fa5f fe87 	uxtb.w	lr, r7
 800444c:	9305      	str	r3, [sp, #20]
 800444e:	f7fd b86e 	b.w	800152e <Thread1.lto_priv.65+0xe5e>
                                if(read_eeprom(log) == 1) emr3_log(&recibo_parcial,16,2);  
 8004452:	2202      	movs	r2, #2
 8004454:	2110      	movs	r1, #16
 8004456:	a80f      	add	r0, sp, #60	; 0x3c
 8004458:	f009 fe62 	bl	800e120 <emr3_log>
 800445c:	f7fd b803 	b.w	8001466 <Thread1.lto_priv.65+0xd96>
                            else if (read_eeprom(pasos2) == 0X0B)
 8004460:	2e0b      	cmp	r6, #11
 8004462:	f43d acf0 	beq.w	8001e46 <Thread1.lto_priv.65+0x1776>
                            else if (read_eeprom(pasos2) == 0X0C)
 8004466:	2e0c      	cmp	r6, #12
 8004468:	f47c ab84 	bne.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                                LeerTotales(TURNO);                                                                
 800446c:	4b3d      	ldr	r3, [pc, #244]	; (8004564 <Thread1.lto_priv.65+0x3e94>)
 800446e:	7818      	ldrb	r0, [r3, #0]
 8004470:	f00a fa6e 	bl	800e950 <LeerTotales>
                                if(read_eeprom(consola) == 0x01)
 8004474:	f894 5059 	ldrb.w	r5, [r4, #89]	; 0x59
 8004478:	2d01      	cmp	r5, #1
 800447a:	f000 8276 	beq.w	800496a <Thread1.lto_priv.65+0x429a>
 800447e:	2301      	movs	r3, #1
 8004480:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 8004484:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 8004488:	230b      	movs	r3, #11
 800448a:	70a3      	strb	r3, [r4, #2]
 800448c:	f7fd bba3 	b.w	8001bd6 <Thread1.lto_priv.65+0x1506>
                                if(read_eeprom(log) == 1) emr3_log(&recibo_parcial,15,2);
 8004490:	2202      	movs	r2, #2
 8004492:	210f      	movs	r1, #15
 8004494:	a80f      	add	r0, sp, #60	; 0x3c
 8004496:	f009 fe43 	bl	800e120 <emr3_log>
 800449a:	f7fd bd01 	b.w	8001ea0 <Thread1.lto_priv.65+0x17d0>
                                   sd_hora(&recibo);
 800449e:	a808      	add	r0, sp, #32
 80044a0:	f009 fa26 	bl	800d8f0 <sd_hora>
 80044a4:	f7fd bce8 	b.w	8001e78 <Thread1.lto_priv.65+0x17a8>
                                if(read_eeprom(log) == 1) emr3_log(&recibo,10,2);
 80044a8:	2202      	movs	r2, #2
 80044aa:	210a      	movs	r1, #10
 80044ac:	a808      	add	r0, sp, #32
 80044ae:	f009 fe37 	bl	800e120 <emr3_log>
 80044b2:	f7fd bcdc 	b.w	8001e6e <Thread1.lto_priv.65+0x179e>
                                            ButtonEmr(TECLADO_FIN,TURNO);
 80044b6:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <Thread1.lto_priv.65+0x3e94>)
 80044b8:	2002      	movs	r0, #2
 80044ba:	7819      	ldrb	r1, [r3, #0]
 80044bc:	f008 fb40 	bl	800cb40 <ButtonEmr>
                                            data_recibo(7);
 80044c0:	f00b f8ce 	bl	800f660 <data_recibo.constprop.1>
 80044c4:	f7fc bfa4 	b.w	8001410 <Thread1.lto_priv.65+0xd40>
                        envio[2]=0XFF;
 80044c8:	22ff      	movs	r2, #255	; 0xff
                        envio[3]=0X44;
 80044ca:	2344      	movs	r3, #68	; 0x44
                        envio[6]=0X97;
 80044cc:	f04f 0e97 	mov.w	lr, #151	; 0x97
                        uartStartSend(&UARTD1, 8, envio);
 80044d0:	a90f      	add	r1, sp, #60	; 0x3c
                        envio[0]=0X7E;
 80044d2:	267e      	movs	r6, #126	; 0x7e
                        envio[4]=0X25;
 80044d4:	f04f 0825 	mov.w	r8, #37	; 0x25
                        envio[5]=0X00;
 80044d8:	2700      	movs	r7, #0
                        uartStartSend(&UARTD1, 8, envio);
 80044da:	2008      	movs	r0, #8
                        envio[2]=0XFF;
 80044dc:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 80044e0:	9205      	str	r2, [sp, #20]
                        envio[3]=0X44;
 80044e2:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80044e6:	9304      	str	r3, [sp, #16]
                        envio[6]=0X97;
 80044e8:	f88d e042 	strb.w	lr, [sp, #66]	; 0x42
                        envio[1]=0X01;
 80044ec:	f88d 503d 	strb.w	r5, [sp, #61]	; 0x3d
                        envio[0]=0X7E;
 80044f0:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
                        envio[7]=0X7E;
 80044f4:	f88d 6043 	strb.w	r6, [sp, #67]	; 0x43
                        envio[4]=0X25;
 80044f8:	f88d 8040 	strb.w	r8, [sp, #64]	; 0x40
                        envio[5]=0X00;
 80044fc:	f88d 7041 	strb.w	r7, [sp, #65]	; 0x41
                        uartStartSend(&UARTD1, 8, envio);
 8004500:	f00a fcbe 	bl	800ee80 <uartStartSend.constprop.27>
                        chThdSleepMilliseconds(100);
 8004504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004508:	f008 fa9a 	bl	800ca40 <chThdSleep>
                        uartStopSend(&UARTD1);
 800450c:	f00a fd10 	bl	800ef30 <uartStopSend.constprop.25>
                        chThdSleepMilliseconds(500);
 8004510:	f241 3088 	movw	r0, #5000	; 0x1388
 8004514:	f008 fa94 	bl	800ca40 <chThdSleep>
                        envio[6]=0X96;
 8004518:	2596      	movs	r5, #150	; 0x96
                        envio[1]=0X02;
 800451a:	f04f 0e02 	mov.w	lr, #2
                        envio[2]=0XFF;
 800451e:	9a05      	ldr	r2, [sp, #20]
                        envio[3]=0X44;
 8004520:	9b04      	ldr	r3, [sp, #16]
                        envio[2]=0XFF;
 8004522:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
                        uartStartSend(&UARTD1, 8, envio);
 8004526:	a90f      	add	r1, sp, #60	; 0x3c
 8004528:	2008      	movs	r0, #8
                        envio[3]=0X44;
 800452a:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
                        envio[1]=0X02;
 800452e:	f88d e03d 	strb.w	lr, [sp, #61]	; 0x3d
                        envio[0]=0X7E;
 8004532:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
                        envio[4]=0X25;
 8004536:	f88d 8040 	strb.w	r8, [sp, #64]	; 0x40
                        envio[5]=0X00;
 800453a:	f88d 7041 	strb.w	r7, [sp, #65]	; 0x41
                        envio[7]=0X7E;
 800453e:	f88d 6043 	strb.w	r6, [sp, #67]	; 0x43
                        envio[6]=0X96;
 8004542:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
                        uartStartSend(&UARTD1, 8, envio);
 8004546:	f00a fc9b 	bl	800ee80 <uartStartSend.constprop.27>
                        chThdSleepMilliseconds(100);
 800454a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800454e:	f008 fa77 	bl	800ca40 <chThdSleep>
                        uartStopSend(&UARTD1);
 8004552:	f00a fced 	bl	800ef30 <uartStopSend.constprop.25>
                        chThdSleepMilliseconds(500);
 8004556:	f241 3088 	movw	r0, #5000	; 0x1388
 800455a:	f008 fa71 	bl	800ca40 <chThdSleep>
 800455e:	f7fd ba07 	b.w	8001970 <Thread1.lto_priv.65+0x12a0>
 8004562:	bf00      	nop
 8004564:	20000800 	.word	0x20000800
 8004568:	cccccccd 	.word	0xcccccccd
 800456c:	0a7c5ac5 	.word	0x0a7c5ac5
 8004570:	51eb851f 	.word	0x51eb851f
 8004574:	10624dd3 	.word	0x10624dd3
 8004578:	d1b71759 	.word	0xd1b71759
                                if(recibo_parcial[4] == 0x67 && recibo_parcial[14] == 0X7E)
 800457c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8004580:	2b7e      	cmp	r3, #126	; 0x7e
 8004582:	f001 8088 	beq.w	8005696 <Thread1.lto_priv.65+0x4fc6>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[15] == 0X7E)
 8004586:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 800458a:	2b7e      	cmp	r3, #126	; 0x7e
 800458c:	f000 84ce 	beq.w	8004f2c <Thread1.lto_priv.65+0x485c>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[16] == 0X7E)
 8004590:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8004594:	2b7e      	cmp	r3, #126	; 0x7e
 8004596:	f000 86a4 	beq.w	80052e2 <Thread1.lto_priv.65+0x4c12>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[17] == 0X7E)
 800459a:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
 800459e:	2b7e      	cmp	r3, #126	; 0x7e
 80045a0:	f000 82ed 	beq.w	8004b7e <Thread1.lto_priv.65+0x44ae>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[18] == 0X7E)
 80045a4:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 80045a8:	2b7e      	cmp	r3, #126	; 0x7e
 80045aa:	f000 878f 	beq.w	80054cc <Thread1.lto_priv.65+0x4dfc>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[19] == 0X7E)
 80045ae:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 80045b2:	2b7e      	cmp	r3, #126	; 0x7e
 80045b4:	f000 83d6 	beq.w	8004d64 <Thread1.lto_priv.65+0x4694>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[20] == 0X7E)
 80045b8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80045bc:	2b7e      	cmp	r3, #126	; 0x7e
 80045be:	f000 85ab 	beq.w	8005118 <Thread1.lto_priv.65+0x4a48>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[21] == 0X7E)
 80045c2:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
 80045c6:	2b7e      	cmp	r3, #126	; 0x7e
 80045c8:	f000 81f6 	beq.w	80049b8 <Thread1.lto_priv.65+0x42e8>
                                else if(recibo_parcial[4] == 0x67 && recibo_parcial[22] == 0X7E)
 80045cc:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 80045d0:	2b7e      	cmp	r3, #126	; 0x7e
 80045d2:	f47d ac6f 	bne.w	8001eb4 <Thread1.lto_priv.65+0x17e4>
                                    emr3_sale2(&recibo_parcial,23,2);
 80045d6:	2202      	movs	r2, #2
 80045d8:	2117      	movs	r1, #23
 80045da:	a80f      	add	r0, sp, #60	; 0x3c
 80045dc:	f009 fe20 	bl	800e220 <emr3_sale2>
 80045e0:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 80045e4:	2200      	movs	r2, #0
 80045e6:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0; i<22; i++)
 80045ea:	f10d 0135 	add.w	r1, sp, #53	; 0x35
 80045ee:	4299      	cmp	r1, r3
 80045f0:	d1f9      	bne.n	80045e6 <Thread1.lto_priv.65+0x3f16>
 80045f2:	2305      	movs	r3, #5
 80045f4:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 80045f6:	aa16      	add	r2, sp, #88	; 0x58
 80045f8:	1850      	adds	r0, r2, r1
 80045fa:	441a      	add	r2, r3
                                        j++;                                                                              
 80045fc:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 80045fe:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8004602:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 8004606:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                              
 8004608:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 800460a:	d10b      	bne.n	8004624 <Thread1.lto_priv.65+0x3f54>
                                            i++;
 800460c:	3301      	adds	r3, #1
 800460e:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 8004610:	aa16      	add	r2, sp, #88	; 0x58
 8004612:	441a      	add	r2, r3
 8004614:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8004618:	f002 020f 	and.w	r2, r2, #15
 800461c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8004620:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5;i<22;i++)
 8004624:	3301      	adds	r3, #1
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b15      	cmp	r3, #21
 800462a:	d9e4      	bls.n	80045f6 <Thread1.lto_priv.65+0x3f26>
                                    Pf_p(recibo);
 800462c:	a808      	add	r0, sp, #32
 800462e:	f009 ff67 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 8004632:	4bd6      	ldr	r3, [pc, #856]	; (800498c <Thread1.lto_priv.65+0x42bc>)
 8004634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004638:	ea52 0103 	orrs.w	r1, r2, r3
 800463c:	f001 80fe 	beq.w	800583c <Thread1.lto_priv.65+0x516c>
                                        write_eeprom(v6_2,(cdin_real%10));
 8004640:	4bd3      	ldr	r3, [pc, #844]	; (8004990 <Thread1.lto_priv.65+0x42c0>)
                                        sd_volumen(TURNO);
 8004642:	49d4      	ldr	r1, [pc, #848]	; (8004994 <Thread1.lto_priv.65+0x42c4>)
                                        cdin_real = cdin_real/10;
 8004644:	4ed4      	ldr	r6, [pc, #848]	; (8004998 <Thread1.lto_priv.65+0x42c8>)
                                        sd_volumen(TURNO);
 8004646:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_2,(cdin_real%10));
 8004648:	fba3 1802 	umull	r1, r8, r3, r2
 800464c:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 8004650:	0951      	lsrs	r1, r2, #5
 8004652:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_2,(cdin_real%10));
 8004656:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 800465a:	4ed0      	ldr	r6, [pc, #832]	; (800499c <Thread1.lto_priv.65+0x42cc>)
 800465c:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 8004660:	4ecf      	ldr	r6, [pc, #828]	; (80049a0 <Thread1.lto_priv.65+0x42d0>)
                                        write_eeprom(v5_2,(cdin_real%10));
 8004662:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8004666:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 800466a:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 800466c:	4ecd      	ldr	r6, [pc, #820]	; (80049a4 <Thread1.lto_priv.65+0x42d4>)
                                        cdin_real = cdin_real/10;
 800466e:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 8004670:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 8004674:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_2,(cdin_real%10));
 8004678:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 800467c:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 800467e:	f884 c019 	strb.w	ip, [r4, #25]
                                        write_eeprom(v6_2,(cdin_real%10));
 8004682:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8004686:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 800468a:	fba3 8c01 	umull	r8, ip, r3, r1
 800468e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8004692:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_2,(cdin_real%10));
 8004696:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800469a:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_2,(cdin_real%10));
 800469e:	fba3 8c0e 	umull	r8, ip, r3, lr
 80046a2:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 80046a6:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 80046a8:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_2,(cdin_real%10));
 80046aa:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80046ae:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 80046b2:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_2,(cdin_real%10));
 80046b6:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_2,(cdin_real%10));
 80046ba:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_2,(cdin_real%10));
 80046be:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_2,(cdin_real%10));
 80046c0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_2,(cdin_real%10));
 80046c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80046c8:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 80046cc:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_2,(cdin_real%10));
 80046d0:	76a2      	strb	r2, [r4, #26]
 80046d2:	220c      	movs	r2, #12
                                        write_eeprom(v1_2,(cdin_real%10));
 80046d4:	7561      	strb	r1, [r4, #21]
                                        write_eeprom(v2_2,(cdin_real%10));
 80046d6:	75a3      	strb	r3, [r4, #22]
 80046d8:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
                                        write_eeprom(v4_2,(cdin_real%10));
 80046dc:	f884 e018 	strb.w	lr, [r4, #24]
                                        write_eeprom(v3_2,(cdin_real%10));
 80046e0:	f884 c017 	strb.w	ip, [r4, #23]
                                        sd_volumen(TURNO);
 80046e4:	f00a fd2c 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 80046e8:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 80046ec:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 80046f0:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
 80046f4:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
	return (dato_emr3[num]);
 80046f8:	7ba0      	ldrb	r0, [r4, #14]
 80046fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80046fe:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 8004702:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004706:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004710:	441a      	add	r2, r3
 8004712:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8004716:	4b9d      	ldr	r3, [pc, #628]	; (800498c <Thread1.lto_priv.65+0x42bc>)
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8004718:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800471c:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 800471e:	681e      	ldr	r6, [r3, #0]
 8004720:	6859      	ldr	r1, [r3, #4]
 8004722:	b292      	uxth	r2, r2
 8004724:	fba6 6702 	umull	r6, r7, r6, r2
 8004728:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 800472c:	2800      	cmp	r0, #0
 800472e:	f001 806f 	beq.w	8005810 <Thread1.lto_priv.65+0x5140>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8004732:	f009 fed5 	bl	800e4e0 <mult>
 8004736:	4680      	mov	r8, r0
 8004738:	7920      	ldrb	r0, [r4, #4]
 800473a:	f009 fed1 	bl	800e4e0 <mult>
 800473e:	4b9a      	ldr	r3, [pc, #616]	; (80049a8 <Thread1.lto_priv.65+0x42d8>)
 8004740:	fb00 f008 	mul.w	r0, r0, r8
 8004744:	fb83 2300 	smull	r2, r3, r3, r0
 8004748:	17c2      	asrs	r2, r0, #31
 800474a:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 800474e:	4630      	mov	r0, r6
 8004750:	4639      	mov	r1, r7
 8004752:	17d3      	asrs	r3, r2, #31
 8004754:	f7fb fdbc 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004758:	7ee3      	ldrb	r3, [r4, #27]
 800475a:	f1c3 0804 	rsb	r8, r3, #4
 800475e:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8004762:	4606      	mov	r6, r0
 8004764:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004766:	dd18      	ble.n	800479a <Thread1.lto_priv.65+0x40ca>
                                                cdin_real = dinero % 10;
 8004768:	4630      	mov	r0, r6
 800476a:	4639      	mov	r1, r7
 800476c:	220a      	movs	r2, #10
 800476e:	2300      	movs	r3, #0
 8004770:	f7fb fdae 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 8004774:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 8004776:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 8004778:	4639      	mov	r1, r7
 800477a:	2300      	movs	r3, #0
 800477c:	220a      	movs	r2, #10
 800477e:	f7fb fda7 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 8004782:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004784:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 8004786:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 8004788:	4606      	mov	r6, r0
 800478a:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 800478c:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 800478e:	d902      	bls.n	8004796 <Thread1.lto_priv.65+0x40c6>
 8004790:	1c46      	adds	r6, r0, #1
 8004792:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004796:	4545      	cmp	r5, r8
 8004798:	dbe6      	blt.n	8004768 <Thread1.lto_priv.65+0x4098>
                                        write_eeprom(d6_2,(cdin_real%10));
 800479a:	4b7d      	ldr	r3, [pc, #500]	; (8004990 <Thread1.lto_priv.65+0x42c0>)
                                        sd_dinero(TURNO);
 800479c:	4a7d      	ldr	r2, [pc, #500]	; (8004994 <Thread1.lto_priv.65+0x42c4>)
                                        write_eeprom(d6_2,(cdin_real%10));
 800479e:	fba3 1c06 	umull	r1, ip, r3, r6
                                        cdin_real = cdin_real/10;
 80047a2:	497d      	ldr	r1, [pc, #500]	; (8004998 <Thread1.lto_priv.65+0x42c8>)
                                        sd_dinero(TURNO);
 80047a4:	7810      	ldrb	r0, [r2, #0]
                                        cdin_real = cdin_real/10;
 80047a6:	0972      	lsrs	r2, r6, #5
 80047a8:	fba1 1202 	umull	r1, r2, r1, r2
                                        cdin_real = cdin_real/10;
 80047ac:	497b      	ldr	r1, [pc, #492]	; (800499c <Thread1.lto_priv.65+0x42cc>)
                                        write_eeprom(d6_2,(cdin_real%10));
 80047ae:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 80047b2:	fba1 1e06 	umull	r1, lr, r1, r6
                                        write_eeprom(d5_2,(cdin_real%10));
 80047b6:	fba3 180c 	umull	r1, r8, r3, ip
                                        cdin_real = cdin_real/10;
 80047ba:	4979      	ldr	r1, [pc, #484]	; (80049a0 <Thread1.lto_priv.65+0x42d0>)
                                        cdin_real = cdin_real/10;
 80047bc:	09d2      	lsrs	r2, r2, #7
                                        cdin_real = cdin_real/10;
 80047be:	fba1 1506 	umull	r1, r5, r1, r6
                                        cdin_real = cdin_real/10;
 80047c2:	4978      	ldr	r1, [pc, #480]	; (80049a4 <Thread1.lto_priv.65+0x42d4>)
                                        cdin_real = cdin_real/10;
 80047c4:	9204      	str	r2, [sp, #16]
                                        write_eeprom(d5_2,(cdin_real%10));
 80047c6:	ea4f 02d8 	mov.w	r2, r8, lsr #3
                                        cdin_real = cdin_real/10;
 80047ca:	fba1 8106 	umull	r8, r1, r1, r6
                                        write_eeprom(d5_2,(cdin_real%10));
 80047ce:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 80047d2:	ebac 0848 	sub.w	r8, ip, r8, lsl #1
                                        write_eeprom(d1_2,(cdin_real%10));
 80047d6:	9a04      	ldr	r2, [sp, #16]
                                        write_eeprom(d5_2,(cdin_real%10));
 80047d8:	f884 8026 	strb.w	r8, [r4, #38]	; 0x26
                                        write_eeprom(d6_2,(cdin_real%10));
 80047dc:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80047e0:	eba6 0c4c 	sub.w	ip, r6, ip, lsl #1
 80047e4:	f884 c027 	strb.w	ip, [r4, #39]	; 0x27
                                        write_eeprom(d1_2,(cdin_real%10));
 80047e8:	fba3 8c02 	umull	r8, ip, r3, r2
 80047ec:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 80047f0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(d1_2,(cdin_real%10));
 80047f4:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80047f8:	eba2 024c 	sub.w	r2, r2, ip, lsl #1
                                        write_eeprom(d4_2,(cdin_real%10));
 80047fc:	fba3 8c0e 	umull	r8, ip, r3, lr
 8004800:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8004804:	0b49      	lsrs	r1, r1, #13
                                        cdin_real = cdin_real/10;
 8004806:	09ad      	lsrs	r5, r5, #6
                                        write_eeprom(d4_2,(cdin_real%10));
 8004808:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800480c:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(d3_2,(cdin_real%10));
 8004810:	fba3 8c05 	umull	r8, ip, r3, r5
                                        write_eeprom(d2_2,(cdin_real%10));
 8004814:	fba3 8301 	umull	r8, r3, r3, r1
                                        write_eeprom(d3_2,(cdin_real%10));
 8004818:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(d2_2,(cdin_real%10));
 800481c:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(d3_2,(cdin_real%10));
 800481e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(d2_2,(cdin_real%10));
 8004822:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                        write_eeprom(d3_2,(cdin_real%10));
 8004826:	eba5 0c4c 	sub.w	ip, r5, ip, lsl #1
                                        write_eeprom(d2_2,(cdin_real%10));
 800482a:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
                                        write_eeprom(d4_2,(cdin_real%10));
 800482e:	f884 e025 	strb.w	lr, [r4, #37]	; 0x25
                                        write_eeprom(d3_2,(cdin_real%10));
 8004832:	f884 c024 	strb.w	ip, [r4, #36]	; 0x24
                                        write_eeprom(d1_2,(cdin_real%10));
 8004836:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
                                        write_eeprom(d2_2,(cdin_real%10));
 800483a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
                                        sd_dinero(TURNO);
 800483e:	f007 fb87 	bl	800bf50 <sd_dinero>
                                        total_dinero = (read_eeprom(td2_1) * 10000000) + (read_eeprom(td2_2) * 1000000) + (read_eeprom(td2_3) * 100000) + (read_eeprom(td2_4) * 10000) + (read_eeprom(td2_5) * 1000) + (read_eeprom(td2_6) * 100) + (read_eeprom(td2_7) * 10) + (read_eeprom(td2_8) * 1);
 8004842:	f894 504f 	ldrb.w	r5, [r4, #79]	; 0x4f
 8004846:	4a59      	ldr	r2, [pc, #356]	; (80049ac <Thread1.lto_priv.65+0x42dc>)
 8004848:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 800484c:	4b58      	ldr	r3, [pc, #352]	; (80049b0 <Thread1.lto_priv.65+0x42e0>)
 800484e:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8004852:	fb02 f205 	mul.w	r2, r2, r5
 8004856:	4d57      	ldr	r5, [pc, #348]	; (80049b4 <Thread1.lto_priv.65+0x42e4>)
 8004858:	fb03 2101 	mla	r1, r3, r1, r2
 800485c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004860:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8004864:	fb05 1100 	mla	r1, r5, r0, r1
 8004868:	f242 7010 	movw	r0, #10000	; 0x2710
 800486c:	fb00 1303 	mla	r3, r0, r3, r1
 8004870:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004874:	f894 1053 	ldrb.w	r1, [r4, #83]	; 0x53
 8004878:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
 800487c:	fb05 3202 	mla	r2, r5, r2, r3
 8004880:	2364      	movs	r3, #100	; 0x64
 8004882:	fb13 2201 	smlabb	r2, r3, r1, r2
 8004886:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
                                        float_data = 0;
 800488a:	4d40      	ldr	r5, [pc, #256]	; (800498c <Thread1.lto_priv.65+0x42bc>)
                                        total_dinero = (read_eeprom(td2_1) * 10000000) + (read_eeprom(td2_2) * 1000000) + (read_eeprom(td2_3) * 100000) + (read_eeprom(td2_4) * 10000) + (read_eeprom(td2_5) * 1000) + (read_eeprom(td2_6) * 100) + (read_eeprom(td2_7) * 10) + (read_eeprom(td2_8) * 1);
 800488c:	230a      	movs	r3, #10
 800488e:	fb13 2300 	smlabb	r3, r3, r0, r2
 8004892:	440b      	add	r3, r1
                                        total_dinero = total_dinero + dinero;
 8004894:	18f6      	adds	r6, r6, r3
 8004896:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
                                        float_data = 0;
 800489a:	2200      	movs	r2, #0
 800489c:	2300      	movs	r3, #0
 800489e:	e9c5 2300 	strd	r2, r3, [r5]
                                        write_eeprom(td2_8,(total_dinero%10));
 80048a2:	4630      	mov	r0, r6
 80048a4:	4639      	mov	r1, r7
 80048a6:	220a      	movs	r2, #10
 80048a8:	2300      	movs	r3, #0
 80048aa:	f7fb fd11 	bl	80002d0 <__aeabi_uldivmod>
                                        total_dinero = total_dinero/10;
 80048ae:	4630      	mov	r0, r6
                                        write_eeprom(td2_8,(total_dinero%10));
 80048b0:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
                                        total_dinero = total_dinero/10;
 80048b4:	4639      	mov	r1, r7
 80048b6:	220a      	movs	r2, #10
 80048b8:	2300      	movs	r3, #0
 80048ba:	f7fb fd09 	bl	80002d0 <__aeabi_uldivmod>
                                        write_eeprom(td2_7,(total_dinero%10));
 80048be:	220a      	movs	r2, #10
 80048c0:	2300      	movs	r3, #0
 80048c2:	f7fb fd05 	bl	80002d0 <__aeabi_uldivmod>
                                        total_dinero = total_dinero/10;
 80048c6:	4630      	mov	r0, r6
                                        write_eeprom(td2_7,(total_dinero%10));
 80048c8:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                                        total_dinero = total_dinero/10;
 80048cc:	4639      	mov	r1, r7
 80048ce:	2264      	movs	r2, #100	; 0x64
 80048d0:	2300      	movs	r3, #0
 80048d2:	f7fb fcfd 	bl	80002d0 <__aeabi_uldivmod>
                                        write_eeprom(td2_6,(total_dinero%10));
 80048d6:	220a      	movs	r2, #10
 80048d8:	2300      	movs	r3, #0
 80048da:	f7fb fcf9 	bl	80002d0 <__aeabi_uldivmod>
                                        total_dinero = total_dinero/10;
 80048de:	4630      	mov	r0, r6
                                        write_eeprom(td2_6,(total_dinero%10));
 80048e0:	f884 2053 	strb.w	r2, [r4, #83]	; 0x53
                                        total_dinero = total_dinero/10;
 80048e4:	4639      	mov	r1, r7
 80048e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048ea:	2300      	movs	r3, #0
 80048ec:	f7fb fcf0 	bl	80002d0 <__aeabi_uldivmod>
                                        write_eeprom(td2_5,(total_dinero%10));
 80048f0:	220a      	movs	r2, #10
 80048f2:	2300      	movs	r3, #0
 80048f4:	f7fb fcec 	bl	80002d0 <__aeabi_uldivmod>
                                        total_dinero = total_dinero/10;
 80048f8:	4630      	mov	r0, r6
                                        write_eeprom(td2_5,(total_dinero%10));
 80048fa:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
                                        total_dinero = total_dinero/10;
 80048fe:	4639      	mov	r1, r7
 8004900:	f242 7210 	movw	r2, #10000	; 0x2710
 8004904:	2300      	movs	r3, #0
 8004906:	f7fb fce3 	bl	80002d0 <__aeabi_uldivmod>
                                        write_eeprom(td2_4,(total_dinero%10));
 800490a:	220a      	movs	r2, #10
 800490c:	2300      	movs	r3, #0
 800490e:	f7fb fcdf 	bl	80002d0 <__aeabi_uldivmod>
                                        total_dinero = total_dinero/10;
 8004912:	4630      	mov	r0, r6
                                        write_eeprom(td2_4,(total_dinero%10));
 8004914:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
                                        total_dinero = total_dinero/10;
 8004918:	4639      	mov	r1, r7
 800491a:	4a26      	ldr	r2, [pc, #152]	; (80049b4 <Thread1.lto_priv.65+0x42e4>)
 800491c:	2300      	movs	r3, #0
 800491e:	f7fb fcd7 	bl	80002d0 <__aeabi_uldivmod>
                                        write_eeprom(td2_3,(total_dinero%10));
 8004922:	220a      	movs	r2, #10
 8004924:	2300      	movs	r3, #0
 8004926:	f7fb fcd3 	bl	80002d0 <__aeabi_uldivmod>
                                        total_dinero = total_dinero/10;
 800492a:	4630      	mov	r0, r6
                                        write_eeprom(td2_3,(total_dinero%10));
 800492c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
                                        total_dinero = total_dinero/10;
 8004930:	4639      	mov	r1, r7
 8004932:	4a1e      	ldr	r2, [pc, #120]	; (80049ac <Thread1.lto_priv.65+0x42dc>)
 8004934:	2300      	movs	r3, #0
 8004936:	f7fb fccb 	bl	80002d0 <__aeabi_uldivmod>
                                        write_eeprom(td2_2,(total_dinero%10));
 800493a:	220a      	movs	r2, #10
 800493c:	2300      	movs	r3, #0
 800493e:	f7fb fcc7 	bl	80002d0 <__aeabi_uldivmod>
                                        total_dinero = total_dinero/10;
 8004942:	4630      	mov	r0, r6
                                        write_eeprom(td2_2,(total_dinero%10));
 8004944:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
                                        total_dinero = total_dinero/10;
 8004948:	4639      	mov	r1, r7
 800494a:	4a19      	ldr	r2, [pc, #100]	; (80049b0 <Thread1.lto_priv.65+0x42e0>)
 800494c:	2300      	movs	r3, #0
 800494e:	f7fb fcbf 	bl	80002d0 <__aeabi_uldivmod>
                                        write_eeprom(td2_1,(total_dinero%10));
 8004952:	220a      	movs	r2, #10
 8004954:	2300      	movs	r3, #0
 8004956:	f7fb fcbb 	bl	80002d0 <__aeabi_uldivmod>
                                        sd_Tdinero(TURNO);                                    
 800495a:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <Thread1.lto_priv.65+0x42c4>)
                                        write_eeprom(td2_1,(total_dinero%10));
 800495c:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
                                        sd_Tdinero(TURNO);                                    
 8004960:	7818      	ldrb	r0, [r3, #0]
 8004962:	f007 fa25 	bl	800bdb0 <sd_Tdinero>
 8004966:	f7fc b905 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
                                    Status_2(0x06);
 800496a:	2006      	movs	r0, #6
 800496c:	f008 ff38 	bl	800d7e0 <Status_2>
 8004970:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
	dato_emr3[num] = inf;
 8004974:	f884 5082 	strb.w	r5, [r4, #130]	; 0x82
                                if(read_eeprom(consola) == 1)
 8004978:	2b01      	cmp	r3, #1
 800497a:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
 800497e:	f47f ad83 	bne.w	8004488 <Thread1.lto_priv.65+0x3db8>
 8004982:	2306      	movs	r3, #6
 8004984:	70a3      	strb	r3, [r4, #2]
 8004986:	f7fd b926 	b.w	8001bd6 <Thread1.lto_priv.65+0x1506>
 800498a:	bf00      	nop
 800498c:	20000908 	.word	0x20000908
 8004990:	cccccccd 	.word	0xcccccccd
 8004994:	20000800 	.word	0x20000800
 8004998:	0a7c5ac5 	.word	0x0a7c5ac5
 800499c:	51eb851f 	.word	0x51eb851f
 80049a0:	10624dd3 	.word	0x10624dd3
 80049a4:	d1b71759 	.word	0xd1b71759
 80049a8:	68db8bad 	.word	0x68db8bad
 80049ac:	000f4240 	.word	0x000f4240
 80049b0:	00989680 	.word	0x00989680
 80049b4:	000186a0 	.word	0x000186a0
                                    emr3_sale2(&recibo_parcial,22,2);
 80049b8:	2202      	movs	r2, #2
 80049ba:	2116      	movs	r1, #22
 80049bc:	a80f      	add	r0, sp, #60	; 0x3c
 80049be:	f009 fc2f 	bl	800e220 <emr3_sale2>
 80049c2:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 80049c6:	2200      	movs	r2, #0
 80049c8:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0; i<21; i++)
 80049cc:	a90d      	add	r1, sp, #52	; 0x34
 80049ce:	4299      	cmp	r1, r3
 80049d0:	d1fa      	bne.n	80049c8 <Thread1.lto_priv.65+0x42f8>
 80049d2:	2305      	movs	r3, #5
 80049d4:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 80049d6:	aa16      	add	r2, sp, #88	; 0x58
 80049d8:	1850      	adds	r0, r2, r1
 80049da:	441a      	add	r2, r3
                                        j++;                                                                               
 80049dc:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 80049de:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80049e2:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 80049e6:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                               
 80049e8:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 80049ea:	d10b      	bne.n	8004a04 <Thread1.lto_priv.65+0x4334>
                                            i++;
 80049ec:	3301      	adds	r3, #1
 80049ee:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 80049f0:	aa16      	add	r2, sp, #88	; 0x58
 80049f2:	441a      	add	r2, r3
 80049f4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80049f8:	f002 020f 	and.w	r2, r2, #15
 80049fc:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8004a00:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5; i<21; i++)
 8004a04:	3301      	adds	r3, #1
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b14      	cmp	r3, #20
 8004a0a:	d9e4      	bls.n	80049d6 <Thread1.lto_priv.65+0x4306>
                                    Pf_p(recibo);
 8004a0c:	a808      	add	r0, sp, #32
 8004a0e:	f009 fd77 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 8004a12:	4bcc      	ldr	r3, [pc, #816]	; (8004d44 <Thread1.lto_priv.65+0x4674>)
 8004a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a18:	ea52 0103 	orrs.w	r1, r2, r3
 8004a1c:	f000 870e 	beq.w	800583c <Thread1.lto_priv.65+0x516c>
                                        write_eeprom(v6_2,(cdin_real%10));
 8004a20:	4bc9      	ldr	r3, [pc, #804]	; (8004d48 <Thread1.lto_priv.65+0x4678>)
                                        sd_volumen(TURNO);
 8004a22:	49ca      	ldr	r1, [pc, #808]	; (8004d4c <Thread1.lto_priv.65+0x467c>)
                                        cdin_real = cdin_real/10;
 8004a24:	4eca      	ldr	r6, [pc, #808]	; (8004d50 <Thread1.lto_priv.65+0x4680>)
                                        sd_volumen(TURNO);
 8004a26:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_2,(cdin_real%10));
 8004a28:	fba3 1802 	umull	r1, r8, r3, r2
 8004a2c:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 8004a30:	0951      	lsrs	r1, r2, #5
 8004a32:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_2,(cdin_real%10));
 8004a36:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 8004a3a:	4ec6      	ldr	r6, [pc, #792]	; (8004d54 <Thread1.lto_priv.65+0x4684>)
 8004a3c:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 8004a40:	4ec5      	ldr	r6, [pc, #788]	; (8004d58 <Thread1.lto_priv.65+0x4688>)
                                        write_eeprom(v5_2,(cdin_real%10));
 8004a42:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8004a46:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 8004a4a:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 8004a4c:	4ec3      	ldr	r6, [pc, #780]	; (8004d5c <Thread1.lto_priv.65+0x468c>)
                                        cdin_real = cdin_real/10;
 8004a4e:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 8004a50:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 8004a54:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_2,(cdin_real%10));
 8004a58:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 8004a5c:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 8004a5e:	f884 c019 	strb.w	ip, [r4, #25]
                                        write_eeprom(v6_2,(cdin_real%10));
 8004a62:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8004a66:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 8004a6a:	fba3 8c01 	umull	r8, ip, r3, r1
 8004a6e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8004a72:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_2,(cdin_real%10));
 8004a76:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8004a7a:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_2,(cdin_real%10));
 8004a7e:	fba3 8c0e 	umull	r8, ip, r3, lr
 8004a82:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8004a86:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 8004a88:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_2,(cdin_real%10));
 8004a8a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8004a8e:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 8004a92:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_2,(cdin_real%10));
 8004a96:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_2,(cdin_real%10));
 8004a9a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_2,(cdin_real%10));
 8004a9e:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_2,(cdin_real%10));
 8004aa0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_2,(cdin_real%10));
 8004aa4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004aa8:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 8004aac:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_2,(cdin_real%10));
 8004ab0:	76a2      	strb	r2, [r4, #26]
 8004ab2:	220c      	movs	r2, #12
                                        write_eeprom(v1_2,(cdin_real%10));
 8004ab4:	7561      	strb	r1, [r4, #21]
                                        write_eeprom(v2_2,(cdin_real%10));
 8004ab6:	75a3      	strb	r3, [r4, #22]
 8004ab8:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
                                        write_eeprom(v4_2,(cdin_real%10));
 8004abc:	f884 e018 	strb.w	lr, [r4, #24]
                                        write_eeprom(v3_2,(cdin_real%10));
 8004ac0:	f884 c017 	strb.w	ip, [r4, #23]
                                        sd_volumen(TURNO);
 8004ac4:	f00a fb3c 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8004ac8:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8004acc:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 8004ad0:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
 8004ad4:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
	return (dato_emr3[num]);
 8004ad8:	7ba0      	ldrb	r0, [r4, #14]
 8004ada:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ade:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 8004ae2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ae6:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004af0:	441a      	add	r2, r3
 8004af2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8004af6:	4b93      	ldr	r3, [pc, #588]	; (8004d44 <Thread1.lto_priv.65+0x4674>)
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8004af8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8004afc:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8004afe:	681e      	ldr	r6, [r3, #0]
 8004b00:	6859      	ldr	r1, [r3, #4]
 8004b02:	b292      	uxth	r2, r2
 8004b04:	fba6 6702 	umull	r6, r7, r6, r2
 8004b08:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	f000 867f 	beq.w	8005810 <Thread1.lto_priv.65+0x5140>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8004b12:	f009 fce5 	bl	800e4e0 <mult>
 8004b16:	4680      	mov	r8, r0
 8004b18:	7920      	ldrb	r0, [r4, #4]
 8004b1a:	f009 fce1 	bl	800e4e0 <mult>
 8004b1e:	4b90      	ldr	r3, [pc, #576]	; (8004d60 <Thread1.lto_priv.65+0x4690>)
 8004b20:	fb00 f008 	mul.w	r0, r0, r8
 8004b24:	fb83 2300 	smull	r2, r3, r3, r0
 8004b28:	17c2      	asrs	r2, r0, #31
 8004b2a:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 8004b2e:	4630      	mov	r0, r6
 8004b30:	4639      	mov	r1, r7
 8004b32:	17d3      	asrs	r3, r2, #31
 8004b34:	f7fb fbcc 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004b38:	7ee3      	ldrb	r3, [r4, #27]
 8004b3a:	f1c3 0804 	rsb	r8, r3, #4
 8004b3e:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8004b42:	4606      	mov	r6, r0
 8004b44:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004b46:	f77f ae28 	ble.w	800479a <Thread1.lto_priv.65+0x40ca>
                                                cdin_real = dinero % 10;
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	4639      	mov	r1, r7
 8004b4e:	220a      	movs	r2, #10
 8004b50:	2300      	movs	r3, #0
 8004b52:	f7fb fbbd 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 8004b56:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 8004b58:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 8004b5a:	4639      	mov	r1, r7
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	220a      	movs	r2, #10
 8004b60:	f7fb fbb6 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 8004b64:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004b66:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 8004b68:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004b6e:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 8004b70:	d902      	bls.n	8004b78 <Thread1.lto_priv.65+0x44a8>
 8004b72:	1c46      	adds	r6, r0, #1
 8004b74:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004b78:	4545      	cmp	r5, r8
 8004b7a:	dbe6      	blt.n	8004b4a <Thread1.lto_priv.65+0x447a>
 8004b7c:	e60d      	b.n	800479a <Thread1.lto_priv.65+0x40ca>
                                    emr3_sale2(&recibo_parcial,18,2);
 8004b7e:	2202      	movs	r2, #2
 8004b80:	2112      	movs	r1, #18
 8004b82:	a80f      	add	r0, sp, #60	; 0x3c
 8004b84:	f009 fb4c 	bl	800e220 <emr3_sale2>
 8004b88:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0;i<17;i++)
 8004b92:	a90c      	add	r1, sp, #48	; 0x30
 8004b94:	4299      	cmp	r1, r3
 8004b96:	d1fa      	bne.n	8004b8e <Thread1.lto_priv.65+0x44be>
 8004b98:	2305      	movs	r3, #5
 8004b9a:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 8004b9c:	aa16      	add	r2, sp, #88	; 0x58
 8004b9e:	1850      	adds	r0, r2, r1
 8004ba0:	441a      	add	r2, r3
                                        j++;                                                                              
 8004ba2:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 8004ba4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8004ba8:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 8004bac:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                              
 8004bae:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 8004bb0:	d10b      	bne.n	8004bca <Thread1.lto_priv.65+0x44fa>
                                            i++;
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 8004bb6:	aa16      	add	r2, sp, #88	; 0x58
 8004bb8:	441a      	add	r2, r3
 8004bba:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8004bbe:	f002 020f 	and.w	r2, r2, #15
 8004bc2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8004bc6:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5;i<17;i++)
 8004bca:	3301      	adds	r3, #1
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b10      	cmp	r3, #16
 8004bd0:	d9e4      	bls.n	8004b9c <Thread1.lto_priv.65+0x44cc>
                                    Pf_p(recibo);
 8004bd2:	a808      	add	r0, sp, #32
 8004bd4:	f009 fc94 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 8004bd8:	4b5a      	ldr	r3, [pc, #360]	; (8004d44 <Thread1.lto_priv.65+0x4674>)
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	ea52 0103 	orrs.w	r1, r2, r3
 8004be2:	f000 862b 	beq.w	800583c <Thread1.lto_priv.65+0x516c>
                                        write_eeprom(v6_2,(cdin_real%10));
 8004be6:	4b58      	ldr	r3, [pc, #352]	; (8004d48 <Thread1.lto_priv.65+0x4678>)
                                        sd_volumen(TURNO);
 8004be8:	4958      	ldr	r1, [pc, #352]	; (8004d4c <Thread1.lto_priv.65+0x467c>)
                                        cdin_real = cdin_real/10;
 8004bea:	4e59      	ldr	r6, [pc, #356]	; (8004d50 <Thread1.lto_priv.65+0x4680>)
                                        sd_volumen(TURNO);
 8004bec:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_2,(cdin_real%10));
 8004bee:	fba3 1802 	umull	r1, r8, r3, r2
 8004bf2:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 8004bf6:	0951      	lsrs	r1, r2, #5
 8004bf8:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_2,(cdin_real%10));
 8004bfc:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 8004c00:	4e54      	ldr	r6, [pc, #336]	; (8004d54 <Thread1.lto_priv.65+0x4684>)
 8004c02:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 8004c06:	4e54      	ldr	r6, [pc, #336]	; (8004d58 <Thread1.lto_priv.65+0x4688>)
                                        write_eeprom(v5_2,(cdin_real%10));
 8004c08:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8004c0c:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 8004c10:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 8004c12:	4e52      	ldr	r6, [pc, #328]	; (8004d5c <Thread1.lto_priv.65+0x468c>)
                                        cdin_real = cdin_real/10;
 8004c14:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 8004c16:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 8004c1a:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_2,(cdin_real%10));
 8004c1e:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 8004c22:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 8004c24:	f884 c019 	strb.w	ip, [r4, #25]
                                        write_eeprom(v6_2,(cdin_real%10));
 8004c28:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8004c2c:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 8004c30:	fba3 8c01 	umull	r8, ip, r3, r1
 8004c34:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8004c38:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_2,(cdin_real%10));
 8004c3c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8004c40:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_2,(cdin_real%10));
 8004c44:	fba3 8c0e 	umull	r8, ip, r3, lr
 8004c48:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8004c4c:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 8004c4e:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_2,(cdin_real%10));
 8004c50:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8004c54:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 8004c58:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_2,(cdin_real%10));
 8004c5c:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_2,(cdin_real%10));
 8004c60:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_2,(cdin_real%10));
 8004c64:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_2,(cdin_real%10));
 8004c66:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_2,(cdin_real%10));
 8004c6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004c6e:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 8004c72:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_2,(cdin_real%10));
 8004c76:	76a2      	strb	r2, [r4, #26]
	dato_emr3[num] = inf;
 8004c78:	220c      	movs	r2, #12
                                        write_eeprom(v1_2,(cdin_real%10));
 8004c7a:	7561      	strb	r1, [r4, #21]
                                        write_eeprom(v2_2,(cdin_real%10));
 8004c7c:	75a3      	strb	r3, [r4, #22]
 8004c7e:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
                                        write_eeprom(v4_2,(cdin_real%10));
 8004c82:	f884 e018 	strb.w	lr, [r4, #24]
                                        write_eeprom(v3_2,(cdin_real%10));
 8004c86:	f884 c017 	strb.w	ip, [r4, #23]
                                        sd_volumen(TURNO);
 8004c8a:	f00a fa59 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8004c8e:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8004c92:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 8004c96:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
 8004c9a:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
	return (dato_emr3[num]);
 8004c9e:	7ba0      	ldrb	r0, [r4, #14]
 8004ca0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ca4:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 8004ca8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004cac:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004cb6:	441a      	add	r2, r3
 8004cb8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8004cbc:	4b21      	ldr	r3, [pc, #132]	; (8004d44 <Thread1.lto_priv.65+0x4674>)
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8004cbe:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8004cc2:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8004cc4:	681e      	ldr	r6, [r3, #0]
 8004cc6:	6859      	ldr	r1, [r3, #4]
 8004cc8:	b292      	uxth	r2, r2
 8004cca:	fba6 6702 	umull	r6, r7, r6, r2
 8004cce:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	f000 859c 	beq.w	8005810 <Thread1.lto_priv.65+0x5140>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8004cd8:	f009 fc02 	bl	800e4e0 <mult>
 8004cdc:	4680      	mov	r8, r0
 8004cde:	7920      	ldrb	r0, [r4, #4]
 8004ce0:	f009 fbfe 	bl	800e4e0 <mult>
 8004ce4:	4b1e      	ldr	r3, [pc, #120]	; (8004d60 <Thread1.lto_priv.65+0x4690>)
 8004ce6:	fb00 f008 	mul.w	r0, r0, r8
 8004cea:	fb83 2300 	smull	r2, r3, r3, r0
 8004cee:	17c2      	asrs	r2, r0, #31
 8004cf0:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	4639      	mov	r1, r7
 8004cf8:	17d3      	asrs	r3, r2, #31
 8004cfa:	f7fb fae9 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004cfe:	7ee3      	ldrb	r3, [r4, #27]
 8004d00:	f1c3 0804 	rsb	r8, r3, #4
 8004d04:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8004d08:	4606      	mov	r6, r0
 8004d0a:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004d0c:	f77f ad45 	ble.w	800479a <Thread1.lto_priv.65+0x40ca>
                                                cdin_real = dinero % 10;
 8004d10:	4630      	mov	r0, r6
 8004d12:	4639      	mov	r1, r7
 8004d14:	220a      	movs	r2, #10
 8004d16:	2300      	movs	r3, #0
 8004d18:	f7fb fada 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 8004d1c:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 8004d1e:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 8004d20:	4639      	mov	r1, r7
 8004d22:	2300      	movs	r3, #0
 8004d24:	220a      	movs	r2, #10
 8004d26:	f7fb fad3 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 8004d2a:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004d2c:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 8004d2e:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 8004d30:	4606      	mov	r6, r0
 8004d32:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004d34:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 8004d36:	d902      	bls.n	8004d3e <Thread1.lto_priv.65+0x466e>
 8004d38:	1c46      	adds	r6, r0, #1
 8004d3a:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004d3e:	4545      	cmp	r5, r8
 8004d40:	dbe6      	blt.n	8004d10 <Thread1.lto_priv.65+0x4640>
 8004d42:	e52a      	b.n	800479a <Thread1.lto_priv.65+0x40ca>
 8004d44:	20000908 	.word	0x20000908
 8004d48:	cccccccd 	.word	0xcccccccd
 8004d4c:	20000800 	.word	0x20000800
 8004d50:	0a7c5ac5 	.word	0x0a7c5ac5
 8004d54:	51eb851f 	.word	0x51eb851f
 8004d58:	10624dd3 	.word	0x10624dd3
 8004d5c:	d1b71759 	.word	0xd1b71759
 8004d60:	68db8bad 	.word	0x68db8bad
                                    emr3_sale2(&recibo_parcial,20,2);
 8004d64:	2202      	movs	r2, #2
 8004d66:	2114      	movs	r1, #20
 8004d68:	a80f      	add	r0, sp, #60	; 0x3c
 8004d6a:	f009 fa59 	bl	800e220 <emr3_sale2>
 8004d6e:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 8004d72:	2200      	movs	r2, #0
 8004d74:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0;i<19;i++)
 8004d78:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 8004d7c:	428b      	cmp	r3, r1
 8004d7e:	d1f9      	bne.n	8004d74 <Thread1.lto_priv.65+0x46a4>
 8004d80:	2305      	movs	r3, #5
 8004d82:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 8004d84:	aa16      	add	r2, sp, #88	; 0x58
 8004d86:	1850      	adds	r0, r2, r1
 8004d88:	441a      	add	r2, r3
                                        j++;                                                                               
 8004d8a:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 8004d8c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8004d90:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 8004d94:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                               
 8004d96:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 8004d98:	d10b      	bne.n	8004db2 <Thread1.lto_priv.65+0x46e2>
                                            i++;
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 8004d9e:	aa16      	add	r2, sp, #88	; 0x58
 8004da0:	441a      	add	r2, r3
 8004da2:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8004da6:	f002 020f 	and.w	r2, r2, #15
 8004daa:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8004dae:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5;i<19;i++)
 8004db2:	3301      	adds	r3, #1
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b12      	cmp	r3, #18
 8004db8:	d9e4      	bls.n	8004d84 <Thread1.lto_priv.65+0x46b4>
                                    Pf_p(recibo);
 8004dba:	a808      	add	r0, sp, #32
 8004dbc:	f009 fba0 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 8004dc0:	4bcd      	ldr	r3, [pc, #820]	; (80050f8 <Thread1.lto_priv.65+0x4a28>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	ea52 0103 	orrs.w	r1, r2, r3
 8004dca:	f000 8537 	beq.w	800583c <Thread1.lto_priv.65+0x516c>
                                        write_eeprom(v6_2,(cdin_real%10));
 8004dce:	4bcb      	ldr	r3, [pc, #812]	; (80050fc <Thread1.lto_priv.65+0x4a2c>)
                                        sd_volumen(TURNO);
 8004dd0:	49cb      	ldr	r1, [pc, #812]	; (8005100 <Thread1.lto_priv.65+0x4a30>)
                                        cdin_real = cdin_real/10;
 8004dd2:	4ecc      	ldr	r6, [pc, #816]	; (8005104 <Thread1.lto_priv.65+0x4a34>)
                                        sd_volumen(TURNO);
 8004dd4:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_2,(cdin_real%10));
 8004dd6:	fba3 1802 	umull	r1, r8, r3, r2
 8004dda:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 8004dde:	0951      	lsrs	r1, r2, #5
 8004de0:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_2,(cdin_real%10));
 8004de4:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 8004de8:	4ec7      	ldr	r6, [pc, #796]	; (8005108 <Thread1.lto_priv.65+0x4a38>)
 8004dea:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 8004dee:	4ec7      	ldr	r6, [pc, #796]	; (800510c <Thread1.lto_priv.65+0x4a3c>)
                                        write_eeprom(v5_2,(cdin_real%10));
 8004df0:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8004df4:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 8004df8:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 8004dfa:	4ec5      	ldr	r6, [pc, #788]	; (8005110 <Thread1.lto_priv.65+0x4a40>)
                                        cdin_real = cdin_real/10;
 8004dfc:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 8004dfe:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 8004e02:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_2,(cdin_real%10));
 8004e06:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 8004e0a:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 8004e0c:	f884 c019 	strb.w	ip, [r4, #25]
                                        write_eeprom(v6_2,(cdin_real%10));
 8004e10:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8004e14:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 8004e18:	fba3 8c01 	umull	r8, ip, r3, r1
 8004e1c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8004e20:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_2,(cdin_real%10));
 8004e24:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8004e28:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_2,(cdin_real%10));
 8004e2c:	fba3 8c0e 	umull	r8, ip, r3, lr
 8004e30:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8004e34:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 8004e36:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_2,(cdin_real%10));
 8004e38:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8004e3c:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 8004e40:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_2,(cdin_real%10));
 8004e44:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_2,(cdin_real%10));
 8004e48:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_2,(cdin_real%10));
 8004e4c:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_2,(cdin_real%10));
 8004e4e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_2,(cdin_real%10));
 8004e52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e56:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 8004e5a:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_2,(cdin_real%10));
 8004e5e:	76a2      	strb	r2, [r4, #26]
	dato_emr3[num] = inf;
 8004e60:	220c      	movs	r2, #12
                                        write_eeprom(v1_2,(cdin_real%10));
 8004e62:	7561      	strb	r1, [r4, #21]
                                        write_eeprom(v2_2,(cdin_real%10));
 8004e64:	75a3      	strb	r3, [r4, #22]
 8004e66:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
                                        write_eeprom(v4_2,(cdin_real%10));
 8004e6a:	f884 e018 	strb.w	lr, [r4, #24]
                                        write_eeprom(v3_2,(cdin_real%10));
 8004e6e:	f884 c017 	strb.w	ip, [r4, #23]
                                        sd_volumen(TURNO);
 8004e72:	f00a f965 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8004e76:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8004e7a:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 8004e7e:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
 8004e82:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
	return (dato_emr3[num]);
 8004e86:	7ba0      	ldrb	r0, [r4, #14]
 8004e88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e8c:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 8004e90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e94:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004e9e:	441a      	add	r2, r3
 8004ea0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8004ea4:	4b94      	ldr	r3, [pc, #592]	; (80050f8 <Thread1.lto_priv.65+0x4a28>)
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8004ea6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8004eaa:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8004eac:	681e      	ldr	r6, [r3, #0]
 8004eae:	6859      	ldr	r1, [r3, #4]
 8004eb0:	b292      	uxth	r2, r2
 8004eb2:	fba6 6702 	umull	r6, r7, r6, r2
 8004eb6:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	f000 84a8 	beq.w	8005810 <Thread1.lto_priv.65+0x5140>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8004ec0:	f009 fb0e 	bl	800e4e0 <mult>
 8004ec4:	4680      	mov	r8, r0
 8004ec6:	7920      	ldrb	r0, [r4, #4]
 8004ec8:	f009 fb0a 	bl	800e4e0 <mult>
 8004ecc:	4b91      	ldr	r3, [pc, #580]	; (8005114 <Thread1.lto_priv.65+0x4a44>)
 8004ece:	fb00 f008 	mul.w	r0, r0, r8
 8004ed2:	fb83 2300 	smull	r2, r3, r3, r0
 8004ed6:	17c2      	asrs	r2, r0, #31
 8004ed8:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 8004edc:	4630      	mov	r0, r6
 8004ede:	4639      	mov	r1, r7
 8004ee0:	17d3      	asrs	r3, r2, #31
 8004ee2:	f7fb f9f5 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004ee6:	7ee3      	ldrb	r3, [r4, #27]
 8004ee8:	f1c3 0804 	rsb	r8, r3, #4
 8004eec:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8004ef0:	4606      	mov	r6, r0
 8004ef2:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004ef4:	f77f ac51 	ble.w	800479a <Thread1.lto_priv.65+0x40ca>
                                                cdin_real = dinero % 10;
 8004ef8:	4630      	mov	r0, r6
 8004efa:	4639      	mov	r1, r7
 8004efc:	220a      	movs	r2, #10
 8004efe:	2300      	movs	r3, #0
 8004f00:	f7fb f9e6 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 8004f04:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 8004f06:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 8004f08:	4639      	mov	r1, r7
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	220a      	movs	r2, #10
 8004f0e:	f7fb f9df 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 8004f12:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004f14:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 8004f16:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 8004f18:	4606      	mov	r6, r0
 8004f1a:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004f1c:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 8004f1e:	d902      	bls.n	8004f26 <Thread1.lto_priv.65+0x4856>
 8004f20:	1c46      	adds	r6, r0, #1
 8004f22:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8004f26:	4545      	cmp	r5, r8
 8004f28:	dbe6      	blt.n	8004ef8 <Thread1.lto_priv.65+0x4828>
 8004f2a:	e436      	b.n	800479a <Thread1.lto_priv.65+0x40ca>
                                    emr3_sale2(&recibo_parcial,16,2);
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	2110      	movs	r1, #16
 8004f30:	a80f      	add	r0, sp, #60	; 0x3c
 8004f32:	f009 f975 	bl	800e220 <emr3_sale2>
 8004f36:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0;i<15;i++)
 8004f40:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8004f44:	4299      	cmp	r1, r3
 8004f46:	d1f9      	bne.n	8004f3c <Thread1.lto_priv.65+0x486c>
 8004f48:	2305      	movs	r3, #5
 8004f4a:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 8004f4c:	aa16      	add	r2, sp, #88	; 0x58
 8004f4e:	1850      	adds	r0, r2, r1
 8004f50:	441a      	add	r2, r3
                                        j++;                                                                              
 8004f52:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 8004f54:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8004f58:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 8004f5c:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                              
 8004f5e:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 8004f60:	d10b      	bne.n	8004f7a <Thread1.lto_priv.65+0x48aa>
                                            i++;
 8004f62:	3301      	adds	r3, #1
 8004f64:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 8004f66:	aa16      	add	r2, sp, #88	; 0x58
 8004f68:	441a      	add	r2, r3
 8004f6a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8004f6e:	f002 020f 	and.w	r2, r2, #15
 8004f72:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8004f76:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5;i<15;i++)
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b0e      	cmp	r3, #14
 8004f80:	d9e4      	bls.n	8004f4c <Thread1.lto_priv.65+0x487c>
                                    Pf_p(recibo);
 8004f82:	a808      	add	r0, sp, #32
 8004f84:	f009 fabc 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 8004f88:	4b5b      	ldr	r3, [pc, #364]	; (80050f8 <Thread1.lto_priv.65+0x4a28>)
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	ea52 0103 	orrs.w	r1, r2, r3
 8004f92:	f000 8453 	beq.w	800583c <Thread1.lto_priv.65+0x516c>
                                        write_eeprom(v6_2,(cdin_real%10));
 8004f96:	4b59      	ldr	r3, [pc, #356]	; (80050fc <Thread1.lto_priv.65+0x4a2c>)
                                        sd_volumen(TURNO);
 8004f98:	4959      	ldr	r1, [pc, #356]	; (8005100 <Thread1.lto_priv.65+0x4a30>)
                                        cdin_real = cdin_real/10;
 8004f9a:	4e5a      	ldr	r6, [pc, #360]	; (8005104 <Thread1.lto_priv.65+0x4a34>)
                                        sd_volumen(TURNO);
 8004f9c:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_2,(cdin_real%10));
 8004f9e:	fba3 1802 	umull	r1, r8, r3, r2
 8004fa2:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 8004fa6:	0951      	lsrs	r1, r2, #5
 8004fa8:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_2,(cdin_real%10));
 8004fac:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 8004fb0:	4e55      	ldr	r6, [pc, #340]	; (8005108 <Thread1.lto_priv.65+0x4a38>)
 8004fb2:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 8004fb6:	4e55      	ldr	r6, [pc, #340]	; (800510c <Thread1.lto_priv.65+0x4a3c>)
                                        write_eeprom(v5_2,(cdin_real%10));
 8004fb8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8004fbc:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 8004fc0:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 8004fc2:	4e53      	ldr	r6, [pc, #332]	; (8005110 <Thread1.lto_priv.65+0x4a40>)
                                        cdin_real = cdin_real/10;
 8004fc4:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 8004fc6:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 8004fca:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_2,(cdin_real%10));
 8004fce:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 8004fd2:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 8004fd4:	f884 c019 	strb.w	ip, [r4, #25]
                                        write_eeprom(v6_2,(cdin_real%10));
 8004fd8:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8004fdc:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 8004fe0:	fba3 8c01 	umull	r8, ip, r3, r1
 8004fe4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8004fe8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_2,(cdin_real%10));
 8004fec:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8004ff0:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_2,(cdin_real%10));
 8004ff4:	fba3 8c0e 	umull	r8, ip, r3, lr
 8004ff8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8004ffc:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 8004ffe:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_2,(cdin_real%10));
 8005000:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8005004:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 8005008:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_2,(cdin_real%10));
 800500c:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_2,(cdin_real%10));
 8005010:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_2,(cdin_real%10));
 8005014:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_2,(cdin_real%10));
 8005016:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_2,(cdin_real%10));
 800501a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800501e:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 8005022:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_2,(cdin_real%10));
 8005026:	76a2      	strb	r2, [r4, #26]
	dato_emr3[num] = inf;
 8005028:	220c      	movs	r2, #12
                                        write_eeprom(v1_2,(cdin_real%10));
 800502a:	7561      	strb	r1, [r4, #21]
                                        write_eeprom(v2_2,(cdin_real%10));
 800502c:	75a3      	strb	r3, [r4, #22]
 800502e:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
                                        write_eeprom(v4_2,(cdin_real%10));
 8005032:	f884 e018 	strb.w	lr, [r4, #24]
                                        write_eeprom(v3_2,(cdin_real%10));
 8005036:	f884 c017 	strb.w	ip, [r4, #23]
                                        sd_volumen(TURNO);
 800503a:	f00a f881 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 800503e:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8005042:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 8005046:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
 800504a:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
	return (dato_emr3[num]);
 800504e:	7ba0      	ldrb	r0, [r4, #14]
 8005050:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005054:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 8005058:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800505c:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005066:	441a      	add	r2, r3
 8005068:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 800506c:	4b22      	ldr	r3, [pc, #136]	; (80050f8 <Thread1.lto_priv.65+0x4a28>)
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 800506e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8005072:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8005074:	681e      	ldr	r6, [r3, #0]
 8005076:	6859      	ldr	r1, [r3, #4]
 8005078:	b292      	uxth	r2, r2
 800507a:	fba6 6702 	umull	r6, r7, r6, r2
 800507e:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 8005082:	2800      	cmp	r0, #0
 8005084:	f000 83c4 	beq.w	8005810 <Thread1.lto_priv.65+0x5140>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8005088:	f009 fa2a 	bl	800e4e0 <mult>
 800508c:	4680      	mov	r8, r0
 800508e:	7920      	ldrb	r0, [r4, #4]
 8005090:	f009 fa26 	bl	800e4e0 <mult>
 8005094:	4b1f      	ldr	r3, [pc, #124]	; (8005114 <Thread1.lto_priv.65+0x4a44>)
 8005096:	fb00 f008 	mul.w	r0, r0, r8
 800509a:	fb83 2300 	smull	r2, r3, r3, r0
 800509e:	17c2      	asrs	r2, r0, #31
 80050a0:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 80050a4:	4630      	mov	r0, r6
 80050a6:	4639      	mov	r1, r7
 80050a8:	17d3      	asrs	r3, r2, #31
 80050aa:	f7fb f911 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80050ae:	7ee3      	ldrb	r3, [r4, #27]
 80050b0:	f1c3 0804 	rsb	r8, r3, #4
 80050b4:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 80050b8:	4606      	mov	r6, r0
 80050ba:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80050bc:	f77f ab6d 	ble.w	800479a <Thread1.lto_priv.65+0x40ca>
                                                cdin_real = dinero % 10;
 80050c0:	4630      	mov	r0, r6
 80050c2:	4639      	mov	r1, r7
 80050c4:	220a      	movs	r2, #10
 80050c6:	2300      	movs	r3, #0
 80050c8:	f7fb f902 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 80050cc:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 80050ce:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 80050d0:	4639      	mov	r1, r7
 80050d2:	2300      	movs	r3, #0
 80050d4:	220a      	movs	r2, #10
 80050d6:	f7fb f8fb 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 80050da:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80050dc:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 80050de:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 80050e0:	4606      	mov	r6, r0
 80050e2:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80050e4:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 80050e6:	d902      	bls.n	80050ee <Thread1.lto_priv.65+0x4a1e>
 80050e8:	1c46      	adds	r6, r0, #1
 80050ea:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80050ee:	45a8      	cmp	r8, r5
 80050f0:	dce6      	bgt.n	80050c0 <Thread1.lto_priv.65+0x49f0>
 80050f2:	f7ff bb52 	b.w	800479a <Thread1.lto_priv.65+0x40ca>
 80050f6:	bf00      	nop
 80050f8:	20000908 	.word	0x20000908
 80050fc:	cccccccd 	.word	0xcccccccd
 8005100:	20000800 	.word	0x20000800
 8005104:	0a7c5ac5 	.word	0x0a7c5ac5
 8005108:	51eb851f 	.word	0x51eb851f
 800510c:	10624dd3 	.word	0x10624dd3
 8005110:	d1b71759 	.word	0xd1b71759
 8005114:	68db8bad 	.word	0x68db8bad
                                    emr3_sale2(&recibo_parcial,21,2);
 8005118:	2202      	movs	r2, #2
 800511a:	2115      	movs	r1, #21
 800511c:	a80f      	add	r0, sp, #60	; 0x3c
 800511e:	f009 f87f 	bl	800e220 <emr3_sale2>
 8005122:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 8005126:	2200      	movs	r2, #0
 8005128:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0;i<20;i++)
 800512c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005130:	4299      	cmp	r1, r3
 8005132:	d1f9      	bne.n	8005128 <Thread1.lto_priv.65+0x4a58>
 8005134:	2305      	movs	r3, #5
 8005136:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 8005138:	aa16      	add	r2, sp, #88	; 0x58
 800513a:	1850      	adds	r0, r2, r1
 800513c:	441a      	add	r2, r3
                                        j++;                                                                              
 800513e:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 8005140:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8005144:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 8005148:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                              
 800514a:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 800514c:	d10b      	bne.n	8005166 <Thread1.lto_priv.65+0x4a96>
                                            i++;
 800514e:	3301      	adds	r3, #1
 8005150:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 8005152:	aa16      	add	r2, sp, #88	; 0x58
 8005154:	441a      	add	r2, r3
 8005156:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800515a:	f002 020f 	and.w	r2, r2, #15
 800515e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8005162:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5; i<20; i++)
 8005166:	3301      	adds	r3, #1
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b13      	cmp	r3, #19
 800516c:	d9e4      	bls.n	8005138 <Thread1.lto_priv.65+0x4a68>
                                    Pf_p(recibo);
 800516e:	a808      	add	r0, sp, #32
 8005170:	f009 f9c6 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 8005174:	4bcd      	ldr	r3, [pc, #820]	; (80054ac <Thread1.lto_priv.65+0x4ddc>)
 8005176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517a:	ea52 0103 	orrs.w	r1, r2, r3
 800517e:	f000 835d 	beq.w	800583c <Thread1.lto_priv.65+0x516c>
                                        write_eeprom(v6_2,(cdin_real%10));
 8005182:	4bcb      	ldr	r3, [pc, #812]	; (80054b0 <Thread1.lto_priv.65+0x4de0>)
                                        sd_volumen(TURNO);
 8005184:	49cb      	ldr	r1, [pc, #812]	; (80054b4 <Thread1.lto_priv.65+0x4de4>)
                                        cdin_real = cdin_real/10;
 8005186:	4ecc      	ldr	r6, [pc, #816]	; (80054b8 <Thread1.lto_priv.65+0x4de8>)
                                        sd_volumen(TURNO);
 8005188:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_2,(cdin_real%10));
 800518a:	fba3 1802 	umull	r1, r8, r3, r2
 800518e:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 8005192:	0951      	lsrs	r1, r2, #5
 8005194:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_2,(cdin_real%10));
 8005198:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 800519c:	4ec7      	ldr	r6, [pc, #796]	; (80054bc <Thread1.lto_priv.65+0x4dec>)
 800519e:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 80051a2:	4ec7      	ldr	r6, [pc, #796]	; (80054c0 <Thread1.lto_priv.65+0x4df0>)
                                        write_eeprom(v5_2,(cdin_real%10));
 80051a4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 80051a8:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 80051ac:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 80051ae:	4ec5      	ldr	r6, [pc, #788]	; (80054c4 <Thread1.lto_priv.65+0x4df4>)
                                        cdin_real = cdin_real/10;
 80051b0:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 80051b2:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 80051b6:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_2,(cdin_real%10));
 80051ba:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 80051be:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 80051c0:	f884 c019 	strb.w	ip, [r4, #25]
                                        write_eeprom(v6_2,(cdin_real%10));
 80051c4:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80051c8:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 80051cc:	fba3 8c01 	umull	r8, ip, r3, r1
 80051d0:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 80051d4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_2,(cdin_real%10));
 80051d8:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80051dc:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_2,(cdin_real%10));
 80051e0:	fba3 8c0e 	umull	r8, ip, r3, lr
 80051e4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 80051e8:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 80051ea:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_2,(cdin_real%10));
 80051ec:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80051f0:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 80051f4:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_2,(cdin_real%10));
 80051f8:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_2,(cdin_real%10));
 80051fc:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_2,(cdin_real%10));
 8005200:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_2,(cdin_real%10));
 8005202:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_2,(cdin_real%10));
 8005206:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800520a:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 800520e:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_2,(cdin_real%10));
 8005212:	76a2      	strb	r2, [r4, #26]
	dato_emr3[num] = inf;
 8005214:	220c      	movs	r2, #12
                                        write_eeprom(v1_2,(cdin_real%10));
 8005216:	7561      	strb	r1, [r4, #21]
                                        write_eeprom(v2_2,(cdin_real%10));
 8005218:	75a3      	strb	r3, [r4, #22]
 800521a:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
                                        write_eeprom(v4_2,(cdin_real%10));
 800521e:	f884 e018 	strb.w	lr, [r4, #24]
                                        write_eeprom(v3_2,(cdin_real%10));
 8005222:	f884 c017 	strb.w	ip, [r4, #23]
                                        sd_volumen(TURNO);
 8005226:	f009 ff8b 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 800522a:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 800522e:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 8005232:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
 8005236:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
	return (dato_emr3[num]);
 800523a:	7ba0      	ldrb	r0, [r4, #14]
 800523c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005240:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 8005244:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005248:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005252:	441a      	add	r2, r3
 8005254:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8005258:	4b94      	ldr	r3, [pc, #592]	; (80054ac <Thread1.lto_priv.65+0x4ddc>)
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 800525a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800525e:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8005260:	681e      	ldr	r6, [r3, #0]
 8005262:	6859      	ldr	r1, [r3, #4]
 8005264:	b292      	uxth	r2, r2
 8005266:	fba6 6702 	umull	r6, r7, r6, r2
 800526a:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 800526e:	2800      	cmp	r0, #0
 8005270:	f000 82ce 	beq.w	8005810 <Thread1.lto_priv.65+0x5140>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8005274:	f009 f934 	bl	800e4e0 <mult>
 8005278:	4680      	mov	r8, r0
 800527a:	7920      	ldrb	r0, [r4, #4]
 800527c:	f009 f930 	bl	800e4e0 <mult>
 8005280:	4b91      	ldr	r3, [pc, #580]	; (80054c8 <Thread1.lto_priv.65+0x4df8>)
 8005282:	fb00 f008 	mul.w	r0, r0, r8
 8005286:	fb83 2300 	smull	r2, r3, r3, r0
 800528a:	17c2      	asrs	r2, r0, #31
 800528c:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 8005290:	4630      	mov	r0, r6
 8005292:	4639      	mov	r1, r7
 8005294:	17d3      	asrs	r3, r2, #31
 8005296:	f7fb f81b 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 800529a:	7ee3      	ldrb	r3, [r4, #27]
 800529c:	f1c3 0804 	rsb	r8, r3, #4
 80052a0:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 80052a4:	4606      	mov	r6, r0
 80052a6:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80052a8:	f77f aa77 	ble.w	800479a <Thread1.lto_priv.65+0x40ca>
                                                cdin_real = dinero % 10;
 80052ac:	4630      	mov	r0, r6
 80052ae:	4639      	mov	r1, r7
 80052b0:	220a      	movs	r2, #10
 80052b2:	2300      	movs	r3, #0
 80052b4:	f7fb f80c 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 80052b8:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 80052ba:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 80052bc:	4639      	mov	r1, r7
 80052be:	2300      	movs	r3, #0
 80052c0:	220a      	movs	r2, #10
 80052c2:	f7fb f805 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 80052c6:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80052c8:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 80052ca:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 80052cc:	4606      	mov	r6, r0
 80052ce:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80052d0:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 80052d2:	d902      	bls.n	80052da <Thread1.lto_priv.65+0x4c0a>
 80052d4:	1c46      	adds	r6, r0, #1
 80052d6:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80052da:	4545      	cmp	r5, r8
 80052dc:	dbe6      	blt.n	80052ac <Thread1.lto_priv.65+0x4bdc>
 80052de:	f7ff ba5c 	b.w	800479a <Thread1.lto_priv.65+0x40ca>
                                    emr3_sale2(&recibo_parcial,17,2);
 80052e2:	2202      	movs	r2, #2
 80052e4:	2111      	movs	r1, #17
 80052e6:	a80f      	add	r0, sp, #60	; 0x3c
 80052e8:	f008 ff9a 	bl	800e220 <emr3_sale2>
 80052ec:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 80052f0:	2200      	movs	r2, #0
 80052f2:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0;i<16;i++)
 80052f6:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80052fa:	428b      	cmp	r3, r1
 80052fc:	d1f9      	bne.n	80052f2 <Thread1.lto_priv.65+0x4c22>
 80052fe:	2305      	movs	r3, #5
 8005300:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 8005302:	aa16      	add	r2, sp, #88	; 0x58
 8005304:	1850      	adds	r0, r2, r1
 8005306:	441a      	add	r2, r3
                                        j++;                                                                               
 8005308:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 800530a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800530e:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 8005312:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                               
 8005314:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 8005316:	d10b      	bne.n	8005330 <Thread1.lto_priv.65+0x4c60>
                                            i++;
 8005318:	3301      	adds	r3, #1
 800531a:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 800531c:	aa16      	add	r2, sp, #88	; 0x58
 800531e:	441a      	add	r2, r3
 8005320:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8005324:	f002 020f 	and.w	r2, r2, #15
 8005328:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800532c:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5;i<16;i++)
 8005330:	3301      	adds	r3, #1
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b0f      	cmp	r3, #15
 8005336:	d9e4      	bls.n	8005302 <Thread1.lto_priv.65+0x4c32>
                                    Pf_p(recibo);
 8005338:	a808      	add	r0, sp, #32
 800533a:	f009 f8e1 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 800533e:	4b5b      	ldr	r3, [pc, #364]	; (80054ac <Thread1.lto_priv.65+0x4ddc>)
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	ea52 0103 	orrs.w	r1, r2, r3
 8005348:	f000 8278 	beq.w	800583c <Thread1.lto_priv.65+0x516c>
                                        write_eeprom(v6_2,(cdin_real%10));
 800534c:	4b58      	ldr	r3, [pc, #352]	; (80054b0 <Thread1.lto_priv.65+0x4de0>)
                                        sd_volumen(TURNO);
 800534e:	4959      	ldr	r1, [pc, #356]	; (80054b4 <Thread1.lto_priv.65+0x4de4>)
                                        cdin_real = cdin_real/10;
 8005350:	4e59      	ldr	r6, [pc, #356]	; (80054b8 <Thread1.lto_priv.65+0x4de8>)
                                        sd_volumen(TURNO);
 8005352:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_2,(cdin_real%10));
 8005354:	fba3 1802 	umull	r1, r8, r3, r2
 8005358:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 800535c:	0951      	lsrs	r1, r2, #5
 800535e:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_2,(cdin_real%10));
 8005362:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 8005366:	4e55      	ldr	r6, [pc, #340]	; (80054bc <Thread1.lto_priv.65+0x4dec>)
 8005368:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 800536c:	4e54      	ldr	r6, [pc, #336]	; (80054c0 <Thread1.lto_priv.65+0x4df0>)
                                        write_eeprom(v5_2,(cdin_real%10));
 800536e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8005372:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 8005376:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 8005378:	4e52      	ldr	r6, [pc, #328]	; (80054c4 <Thread1.lto_priv.65+0x4df4>)
                                        cdin_real = cdin_real/10;
 800537a:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 800537c:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 8005380:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_2,(cdin_real%10));
 8005384:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 8005388:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 800538a:	f884 c019 	strb.w	ip, [r4, #25]
                                        write_eeprom(v6_2,(cdin_real%10));
 800538e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8005392:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 8005396:	fba3 8c01 	umull	r8, ip, r3, r1
 800539a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 800539e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_2,(cdin_real%10));
 80053a2:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80053a6:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_2,(cdin_real%10));
 80053aa:	fba3 8c0e 	umull	r8, ip, r3, lr
 80053ae:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 80053b2:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 80053b4:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_2,(cdin_real%10));
 80053b6:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80053ba:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 80053be:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_2,(cdin_real%10));
 80053c2:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_2,(cdin_real%10));
 80053c6:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_2,(cdin_real%10));
 80053ca:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_2,(cdin_real%10));
 80053cc:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_2,(cdin_real%10));
 80053d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80053d4:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 80053d8:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_2,(cdin_real%10));
 80053dc:	76a2      	strb	r2, [r4, #26]
	dato_emr3[num] = inf;
 80053de:	220c      	movs	r2, #12
                                        write_eeprom(v1_2,(cdin_real%10));
 80053e0:	7561      	strb	r1, [r4, #21]
                                        write_eeprom(v2_2,(cdin_real%10));
 80053e2:	75a3      	strb	r3, [r4, #22]
 80053e4:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
                                        write_eeprom(v4_2,(cdin_real%10));
 80053e8:	f884 e018 	strb.w	lr, [r4, #24]
                                        write_eeprom(v3_2,(cdin_real%10));
 80053ec:	f884 c017 	strb.w	ip, [r4, #23]
                                        sd_volumen(TURNO);
 80053f0:	f009 fea6 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 80053f4:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 80053f8:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 80053fc:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
 8005400:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
	return (dato_emr3[num]);
 8005404:	7ba0      	ldrb	r0, [r4, #14]
 8005406:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800540a:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 800540e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005412:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800541c:	441a      	add	r2, r3
 800541e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8005422:	4b22      	ldr	r3, [pc, #136]	; (80054ac <Thread1.lto_priv.65+0x4ddc>)
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 8005424:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8005428:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 800542a:	681e      	ldr	r6, [r3, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
 800542e:	b292      	uxth	r2, r2
 8005430:	fba6 6702 	umull	r6, r7, r6, r2
 8005434:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 8005438:	2800      	cmp	r0, #0
 800543a:	f000 81e9 	beq.w	8005810 <Thread1.lto_priv.65+0x5140>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 800543e:	f009 f84f 	bl	800e4e0 <mult>
 8005442:	4680      	mov	r8, r0
 8005444:	7920      	ldrb	r0, [r4, #4]
 8005446:	f009 f84b 	bl	800e4e0 <mult>
 800544a:	4b1f      	ldr	r3, [pc, #124]	; (80054c8 <Thread1.lto_priv.65+0x4df8>)
 800544c:	fb00 f008 	mul.w	r0, r0, r8
 8005450:	fb83 2300 	smull	r2, r3, r3, r0
 8005454:	17c2      	asrs	r2, r0, #31
 8005456:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 800545a:	4630      	mov	r0, r6
 800545c:	4639      	mov	r1, r7
 800545e:	17d3      	asrs	r3, r2, #31
 8005460:	f7fa ff36 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8005464:	7ee3      	ldrb	r3, [r4, #27]
 8005466:	f1c3 0804 	rsb	r8, r3, #4
 800546a:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 800546e:	4606      	mov	r6, r0
 8005470:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8005472:	f77f a992 	ble.w	800479a <Thread1.lto_priv.65+0x40ca>
                                                cdin_real = dinero % 10;
 8005476:	4630      	mov	r0, r6
 8005478:	4639      	mov	r1, r7
 800547a:	220a      	movs	r2, #10
 800547c:	2300      	movs	r3, #0
 800547e:	f7fa ff27 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 8005482:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 8005484:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 8005486:	4639      	mov	r1, r7
 8005488:	2300      	movs	r3, #0
 800548a:	220a      	movs	r2, #10
 800548c:	f7fa ff20 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 8005490:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8005492:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 8005494:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 8005496:	4606      	mov	r6, r0
 8005498:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 800549a:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 800549c:	d902      	bls.n	80054a4 <Thread1.lto_priv.65+0x4dd4>
 800549e:	1c46      	adds	r6, r0, #1
 80054a0:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80054a4:	45a8      	cmp	r8, r5
 80054a6:	dce6      	bgt.n	8005476 <Thread1.lto_priv.65+0x4da6>
 80054a8:	f7ff b977 	b.w	800479a <Thread1.lto_priv.65+0x40ca>
 80054ac:	20000908 	.word	0x20000908
 80054b0:	cccccccd 	.word	0xcccccccd
 80054b4:	20000800 	.word	0x20000800
 80054b8:	0a7c5ac5 	.word	0x0a7c5ac5
 80054bc:	51eb851f 	.word	0x51eb851f
 80054c0:	10624dd3 	.word	0x10624dd3
 80054c4:	d1b71759 	.word	0xd1b71759
 80054c8:	68db8bad 	.word	0x68db8bad
                                    emr3_sale2(&recibo_parcial,19,2);
 80054cc:	2202      	movs	r2, #2
 80054ce:	2113      	movs	r1, #19
 80054d0:	a80f      	add	r0, sp, #60	; 0x3c
 80054d2:	f008 fea5 	bl	800e220 <emr3_sale2>
 80054d6:	f10d 031f 	add.w	r3, sp, #31
                                        recibo[i]=0x00;
 80054da:	2200      	movs	r2, #0
 80054dc:	f803 2f01 	strb.w	r2, [r3, #1]!
                                    for(i=0;i<18;i++)
 80054e0:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 80054e4:	428b      	cmp	r3, r1
 80054e6:	d1f9      	bne.n	80054dc <Thread1.lto_priv.65+0x4e0c>
 80054e8:	2305      	movs	r3, #5
 80054ea:	4619      	mov	r1, r3
                                        recibo[j] = recibo_parcial[i];                                        
 80054ec:	aa16      	add	r2, sp, #88	; 0x58
 80054ee:	1850      	adds	r0, r2, r1
 80054f0:	441a      	add	r2, r3
                                        j++;                                                                               
 80054f2:	3101      	adds	r1, #1
                                        recibo[j] = recibo_parcial[i];                                        
 80054f4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80054f8:	f800 2c38 	strb.w	r2, [r0, #-56]
                                        if(recibo_parcial[i] == 0X7D)
 80054fc:	2a7d      	cmp	r2, #125	; 0x7d
                                        j++;                                                                               
 80054fe:	b2c9      	uxtb	r1, r1
                                        if(recibo_parcial[i] == 0X7D)
 8005500:	d10b      	bne.n	800551a <Thread1.lto_priv.65+0x4e4a>
                                            i++;
 8005502:	3301      	adds	r3, #1
 8005504:	b2db      	uxtb	r3, r3
                                            recibo[j] = 0X70 | (recibo_parcial[i] & 0X0F);
 8005506:	aa16      	add	r2, sp, #88	; 0x58
 8005508:	441a      	add	r2, r3
 800550a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800550e:	f002 020f 	and.w	r2, r2, #15
 8005512:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8005516:	f800 2c38 	strb.w	r2, [r0, #-56]
                                    for(i=5;i<18;i++)
 800551a:	3301      	adds	r3, #1
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b11      	cmp	r3, #17
 8005520:	d9e4      	bls.n	80054ec <Thread1.lto_priv.65+0x4e1c>
                                    Pf_p(recibo);
 8005522:	a808      	add	r0, sp, #32
 8005524:	f008 ffec 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 8005528:	4bd9      	ldr	r3, [pc, #868]	; (8005890 <Thread1.lto_priv.65+0x51c0>)
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	ea52 0103 	orrs.w	r1, r2, r3
 8005532:	f000 8183 	beq.w	800583c <Thread1.lto_priv.65+0x516c>
                                        write_eeprom(v6_2,(cdin_real%10));
 8005536:	4bd7      	ldr	r3, [pc, #860]	; (8005894 <Thread1.lto_priv.65+0x51c4>)
                                        sd_volumen(TURNO);
 8005538:	49d7      	ldr	r1, [pc, #860]	; (8005898 <Thread1.lto_priv.65+0x51c8>)
                                        cdin_real = cdin_real/10;
 800553a:	4ed8      	ldr	r6, [pc, #864]	; (800589c <Thread1.lto_priv.65+0x51cc>)
                                        sd_volumen(TURNO);
 800553c:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_2,(cdin_real%10));
 800553e:	fba3 1802 	umull	r1, r8, r3, r2
 8005542:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 8005546:	0951      	lsrs	r1, r2, #5
 8005548:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_2,(cdin_real%10));
 800554c:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 8005550:	4ed3      	ldr	r6, [pc, #844]	; (80058a0 <Thread1.lto_priv.65+0x51d0>)
 8005552:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 8005556:	4ed3      	ldr	r6, [pc, #844]	; (80058a4 <Thread1.lto_priv.65+0x51d4>)
                                        write_eeprom(v5_2,(cdin_real%10));
 8005558:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 800555c:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 8005560:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 8005562:	4ed1      	ldr	r6, [pc, #836]	; (80058a8 <Thread1.lto_priv.65+0x51d8>)
                                        cdin_real = cdin_real/10;
 8005564:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 8005566:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 800556a:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_2,(cdin_real%10));
 800556e:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 8005572:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 8005574:	f884 c019 	strb.w	ip, [r4, #25]
                                        write_eeprom(v6_2,(cdin_real%10));
 8005578:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 800557c:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 8005580:	fba3 8c01 	umull	r8, ip, r3, r1
 8005584:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8005588:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_2,(cdin_real%10));
 800558c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8005590:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_2,(cdin_real%10));
 8005594:	fba3 8c0e 	umull	r8, ip, r3, lr
 8005598:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 800559c:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 800559e:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_2,(cdin_real%10));
 80055a0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80055a4:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 80055a8:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_2,(cdin_real%10));
 80055ac:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_2,(cdin_real%10));
 80055b0:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_2,(cdin_real%10));
 80055b4:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_2,(cdin_real%10));
 80055b6:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_2,(cdin_real%10));
 80055ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80055be:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 80055c2:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_2,(cdin_real%10));
 80055c6:	76a2      	strb	r2, [r4, #26]
	dato_emr3[num] = inf;
 80055c8:	220c      	movs	r2, #12
                                        write_eeprom(v1_2,(cdin_real%10));
 80055ca:	7561      	strb	r1, [r4, #21]
                                        write_eeprom(v2_2,(cdin_real%10));
 80055cc:	75a3      	strb	r3, [r4, #22]
 80055ce:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
                                        write_eeprom(v4_2,(cdin_real%10));
 80055d2:	f884 e018 	strb.w	lr, [r4, #24]
                                        write_eeprom(v3_2,(cdin_real%10));
 80055d6:	f884 c017 	strb.w	ip, [r4, #23]
                                        sd_volumen(TURNO);
 80055da:	f009 fdb1 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 80055de:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 80055e2:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 80055e6:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
 80055ea:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
	return (dato_emr3[num]);
 80055ee:	7ba0      	ldrb	r0, [r4, #14]
 80055f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80055f4:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 80055f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80055fc:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005606:	441a      	add	r2, r3
 8005608:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 800560c:	4ba0      	ldr	r3, [pc, #640]	; (8005890 <Thread1.lto_priv.65+0x51c0>)
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 800560e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8005612:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8005614:	681e      	ldr	r6, [r3, #0]
 8005616:	6859      	ldr	r1, [r3, #4]
 8005618:	b292      	uxth	r2, r2
 800561a:	fba6 6702 	umull	r6, r7, r6, r2
 800561e:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 8005622:	2800      	cmp	r0, #0
 8005624:	f000 80f4 	beq.w	8005810 <Thread1.lto_priv.65+0x5140>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8005628:	f008 ff5a 	bl	800e4e0 <mult>
 800562c:	4680      	mov	r8, r0
 800562e:	7920      	ldrb	r0, [r4, #4]
 8005630:	f008 ff56 	bl	800e4e0 <mult>
 8005634:	4b9d      	ldr	r3, [pc, #628]	; (80058ac <Thread1.lto_priv.65+0x51dc>)
 8005636:	fb00 f008 	mul.w	r0, r0, r8
 800563a:	fb83 2300 	smull	r2, r3, r3, r0
 800563e:	17c2      	asrs	r2, r0, #31
 8005640:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 8005644:	4630      	mov	r0, r6
 8005646:	4639      	mov	r1, r7
 8005648:	17d3      	asrs	r3, r2, #31
 800564a:	f7fa fe41 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 800564e:	7ee3      	ldrb	r3, [r4, #27]
 8005650:	f1c3 0804 	rsb	r8, r3, #4
 8005654:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 8005658:	4606      	mov	r6, r0
 800565a:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 800565c:	f77f a89d 	ble.w	800479a <Thread1.lto_priv.65+0x40ca>
                                                cdin_real = dinero % 10;
 8005660:	4630      	mov	r0, r6
 8005662:	4639      	mov	r1, r7
 8005664:	220a      	movs	r2, #10
 8005666:	2300      	movs	r3, #0
 8005668:	f7fa fe32 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 800566c:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 800566e:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 8005670:	4639      	mov	r1, r7
 8005672:	2300      	movs	r3, #0
 8005674:	220a      	movs	r2, #10
 8005676:	f7fa fe2b 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 800567a:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 800567c:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 800567e:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 8005680:	4606      	mov	r6, r0
 8005682:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8005684:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 8005686:	d902      	bls.n	800568e <Thread1.lto_priv.65+0x4fbe>
 8005688:	1c46      	adds	r6, r0, #1
 800568a:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 800568e:	4545      	cmp	r5, r8
 8005690:	dbe6      	blt.n	8005660 <Thread1.lto_priv.65+0x4f90>
 8005692:	f7ff b882 	b.w	800479a <Thread1.lto_priv.65+0x40ca>
                                    emr3_sale2(&recibo_parcial,15,2);
 8005696:	2202      	movs	r2, #2
 8005698:	210f      	movs	r1, #15
 800569a:	a80f      	add	r0, sp, #60	; 0x3c
 800569c:	f008 fdc0 	bl	800e220 <emr3_sale2>
                                    Pf_p(recibo_parcial);
 80056a0:	a80f      	add	r0, sp, #60	; 0x3c
 80056a2:	f008 ff2d 	bl	800e500 <Pf_p>
                                    if(float_data == 0x00)
 80056a6:	4b7a      	ldr	r3, [pc, #488]	; (8005890 <Thread1.lto_priv.65+0x51c0>)
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	ea52 0103 	orrs.w	r1, r2, r3
 80056b0:	f000 80c4 	beq.w	800583c <Thread1.lto_priv.65+0x516c>
                                        write_eeprom(v6_2,(cdin_real%10));
 80056b4:	4b77      	ldr	r3, [pc, #476]	; (8005894 <Thread1.lto_priv.65+0x51c4>)
                                        sd_volumen(TURNO);
 80056b6:	4978      	ldr	r1, [pc, #480]	; (8005898 <Thread1.lto_priv.65+0x51c8>)
                                        cdin_real = cdin_real/10;
 80056b8:	4e78      	ldr	r6, [pc, #480]	; (800589c <Thread1.lto_priv.65+0x51cc>)
                                        sd_volumen(TURNO);
 80056ba:	7808      	ldrb	r0, [r1, #0]
                                        write_eeprom(v6_2,(cdin_real%10));
 80056bc:	fba3 1802 	umull	r1, r8, r3, r2
 80056c0:	ea4f 08d8 	mov.w	r8, r8, lsr #3
                                        cdin_real = cdin_real/10;
 80056c4:	0951      	lsrs	r1, r2, #5
 80056c6:	fba6 6101 	umull	r6, r1, r6, r1
                                        write_eeprom(v5_2,(cdin_real%10));
 80056ca:	fba3 6c08 	umull	r6, ip, r3, r8
                                        cdin_real = cdin_real/10;
 80056ce:	4e74      	ldr	r6, [pc, #464]	; (80058a0 <Thread1.lto_priv.65+0x51d0>)
 80056d0:	fba6 6e02 	umull	r6, lr, r6, r2
                                        cdin_real = cdin_real/10;
 80056d4:	4e73      	ldr	r6, [pc, #460]	; (80058a4 <Thread1.lto_priv.65+0x51d4>)
                                        write_eeprom(v5_2,(cdin_real%10));
 80056d6:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 80056da:	fba6 6702 	umull	r6, r7, r6, r2
                                        cdin_real = cdin_real/10;
 80056de:	09c9      	lsrs	r1, r1, #7
                                        cdin_real = cdin_real/10;
 80056e0:	4e71      	ldr	r6, [pc, #452]	; (80058a8 <Thread1.lto_priv.65+0x51d8>)
                                        cdin_real = cdin_real/10;
 80056e2:	9104      	str	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 80056e4:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
                                        cdin_real = cdin_real/10;
 80056e8:	fba6 c602 	umull	ip, r6, r6, r2
                                        write_eeprom(v5_2,(cdin_real%10));
 80056ec:	eba8 0c41 	sub.w	ip, r8, r1, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 80056f0:	9904      	ldr	r1, [sp, #16]
                                        write_eeprom(v5_2,(cdin_real%10));
 80056f2:	f884 c019 	strb.w	ip, [r4, #25]
                                        write_eeprom(v6_2,(cdin_real%10));
 80056f6:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80056fa:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
                                        write_eeprom(v1_2,(cdin_real%10));
 80056fe:	fba3 8c01 	umull	r8, ip, r3, r1
 8005702:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 8005706:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
                                        write_eeprom(v1_2,(cdin_real%10));
 800570a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800570e:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
                                        write_eeprom(v4_2,(cdin_real%10));
 8005712:	fba3 8c0e 	umull	r8, ip, r3, lr
 8005716:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        cdin_real = cdin_real/10;
 800571a:	09bf      	lsrs	r7, r7, #6
                                        cdin_real = cdin_real/10;
 800571c:	0b76      	lsrs	r6, r6, #13
                                        write_eeprom(v4_2,(cdin_real%10));
 800571e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8005722:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 8005726:	fba3 8c07 	umull	r8, ip, r3, r7
                                        write_eeprom(v2_2,(cdin_real%10));
 800572a:	fba3 8306 	umull	r8, r3, r3, r6
                                        write_eeprom(v3_2,(cdin_real%10));
 800572e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
                                        write_eeprom(v2_2,(cdin_real%10));
 8005732:	08db      	lsrs	r3, r3, #3
                                        write_eeprom(v3_2,(cdin_real%10));
 8005734:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
                                        write_eeprom(v2_2,(cdin_real%10));
 8005738:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800573c:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
                                        write_eeprom(v3_2,(cdin_real%10));
 8005740:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
                                        write_eeprom(v6_2,(cdin_real%10));
 8005744:	76a2      	strb	r2, [r4, #26]
	dato_emr3[num] = inf;
 8005746:	220c      	movs	r2, #12
                                        write_eeprom(v1_2,(cdin_real%10));
 8005748:	7561      	strb	r1, [r4, #21]
                                        write_eeprom(v2_2,(cdin_real%10));
 800574a:	75a3      	strb	r3, [r4, #22]
 800574c:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
                                        write_eeprom(v4_2,(cdin_real%10));
 8005750:	f884 e018 	strb.w	lr, [r4, #24]
                                        write_eeprom(v3_2,(cdin_real%10));
 8005754:	f884 c017 	strb.w	ip, [r4, #23]
                                        sd_volumen(TURNO);
 8005758:	f009 fcf2 	bl	800f140 <sd_volumen>
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 800575c:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8005760:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 8005764:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
 8005768:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
	return (dato_emr3[num]);
 800576c:	7ba0      	ldrb	r0, [r4, #14]
 800576e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005772:	ebc6 1746 	rsb	r7, r6, r6, lsl #5
 8005776:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800577a:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005784:	441a      	add	r2, r3
 8005786:	eb01 0181 	add.w	r1, r1, r1, lsl #2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 800578a:	4b41      	ldr	r3, [pc, #260]	; (8005890 <Thread1.lto_priv.65+0x51c0>)
                                        ppu = ((read_eeprom(ppu1_venta2)*1000) + (read_eeprom(ppu2_venta2)*100) + (read_eeprom(ppu3_venta2)*10) + (read_eeprom(ppu4_venta2)*1));
 800578c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8005790:	b292      	uxth	r2, r2
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8005792:	681e      	ldr	r6, [r3, #0]
 8005794:	6859      	ldr	r1, [r3, #4]
 8005796:	b292      	uxth	r2, r2
 8005798:	fba6 6702 	umull	r6, r7, r6, r2
 800579c:	fb01 7702 	mla	r7, r1, r2, r7
                                        if(read_eeprom(PV) == 0)
 80057a0:	b3b0      	cbz	r0, 8005810 <Thread1.lto_priv.65+0x5140>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 80057a2:	f008 fe9d 	bl	800e4e0 <mult>
 80057a6:	4680      	mov	r8, r0
 80057a8:	7920      	ldrb	r0, [r4, #4]
 80057aa:	f008 fe99 	bl	800e4e0 <mult>
 80057ae:	4b3f      	ldr	r3, [pc, #252]	; (80058ac <Thread1.lto_priv.65+0x51dc>)
 80057b0:	fb00 f008 	mul.w	r0, r0, r8
 80057b4:	fb83 2300 	smull	r2, r3, r3, r0
 80057b8:	17c2      	asrs	r2, r0, #31
 80057ba:	ebc2 3223 	rsb	r2, r2, r3, asr #12
 80057be:	4630      	mov	r0, r6
 80057c0:	4639      	mov	r1, r7
 80057c2:	17d3      	asrs	r3, r2, #31
 80057c4:	f7fa fd84 	bl	80002d0 <__aeabi_uldivmod>
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80057c8:	7ee3      	ldrb	r3, [r4, #27]
 80057ca:	f1c3 0804 	rsb	r8, r3, #4
 80057ce:	f1b8 0f00 	cmp.w	r8, #0
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (10000)));
 80057d2:	4606      	mov	r6, r0
 80057d4:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80057d6:	f77e afe0 	ble.w	800479a <Thread1.lto_priv.65+0x40ca>
                                                cdin_real = dinero % 10;
 80057da:	4630      	mov	r0, r6
 80057dc:	4639      	mov	r1, r7
 80057de:	220a      	movs	r2, #10
 80057e0:	2300      	movs	r3, #0
 80057e2:	f7fa fd75 	bl	80002d0 <__aeabi_uldivmod>
                                                dinero = dinero / 10; 
 80057e6:	4630      	mov	r0, r6
                                                cdin_real = dinero % 10;
 80057e8:	9204      	str	r2, [sp, #16]
                                                dinero = dinero / 10; 
 80057ea:	4639      	mov	r1, r7
 80057ec:	2300      	movs	r3, #0
 80057ee:	220a      	movs	r2, #10
 80057f0:	f7fa fd6e 	bl	80002d0 <__aeabi_uldivmod>
                                                if(cdin_real > 4) dinero++; 
 80057f4:	9b04      	ldr	r3, [sp, #16]
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80057f6:	3501      	adds	r5, #1
                                                if(cdin_real > 4) dinero++; 
 80057f8:	2b04      	cmp	r3, #4
                                                dinero = dinero / 10; 
 80057fa:	4606      	mov	r6, r0
 80057fc:	460f      	mov	r7, r1
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 80057fe:	b2ed      	uxtb	r5, r5
                                                if(cdin_real > 4) dinero++; 
 8005800:	d902      	bls.n	8005808 <Thread1.lto_priv.65+0x5138>
 8005802:	1c46      	adds	r6, r0, #1
 8005804:	f141 0700 	adc.w	r7, r1, #0
                                            for(i=0; i<(4-read_eeprom(PD)); i++)
 8005808:	45a8      	cmp	r8, r5
 800580a:	dce6      	bgt.n	80057da <Thread1.lto_priv.65+0x510a>
 800580c:	f7fe bfc5 	b.w	800479a <Thread1.lto_priv.65+0x40ca>
                                            dinero = ((float_data * ppu ) / ( (mult(read_eeprom(PV)) * mult(read_eeprom(pppu))) /  (mult(read_eeprom(PD)))));
 8005810:	f008 fe66 	bl	800e4e0 <mult>
 8005814:	4605      	mov	r5, r0
 8005816:	7920      	ldrb	r0, [r4, #4]
 8005818:	f008 fe62 	bl	800e4e0 <mult>
 800581c:	fb00 f505 	mul.w	r5, r0, r5
 8005820:	7ee0      	ldrb	r0, [r4, #27]
 8005822:	f008 fe5d 	bl	800e4e0 <mult>
 8005826:	4639      	mov	r1, r7
 8005828:	fb95 f2f0 	sdiv	r2, r5, r0
 800582c:	4630      	mov	r0, r6
 800582e:	17d3      	asrs	r3, r2, #31
 8005830:	f7fa fd4e 	bl	80002d0 <__aeabi_uldivmod>
 8005834:	4606      	mov	r6, r0
 8005836:	460f      	mov	r7, r1
 8005838:	f7fe bfaf 	b.w	800479a <Thread1.lto_priv.65+0x40ca>
                                        LeerTotales(TURNO);                                 
 800583c:	4b16      	ldr	r3, [pc, #88]	; (8005898 <Thread1.lto_priv.65+0x51c8>)
 800583e:	7818      	ldrb	r0, [r3, #0]
 8005840:	f009 f886 	bl	800e950 <LeerTotales>
	dato_emr3[num] = inf;
 8005844:	2306      	movs	r3, #6
 8005846:	2500      	movs	r5, #0
                                        Status_2(0X06);
 8005848:	4618      	mov	r0, r3
 800584a:	70a3      	strb	r3, [r4, #2]
 800584c:	76a5      	strb	r5, [r4, #26]
 800584e:	7665      	strb	r5, [r4, #25]
 8005850:	7625      	strb	r5, [r4, #24]
 8005852:	75e5      	strb	r5, [r4, #23]
 8005854:	75a5      	strb	r5, [r4, #22]
 8005856:	7565      	strb	r5, [r4, #21]
 8005858:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
 800585c:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
 8005860:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8005864:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8005868:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
 800586c:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8005870:	f007 ffb6 	bl	800d7e0 <Status_2>
                                        ButtonEmr(TECLADO_FIN,TURNO);
 8005874:	4a08      	ldr	r2, [pc, #32]	; (8005898 <Thread1.lto_priv.65+0x51c8>)
 8005876:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
 800587a:	2301      	movs	r3, #1
 800587c:	7811      	ldrb	r1, [r2, #0]
 800587e:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 8005882:	2002      	movs	r0, #2
 8005884:	f007 f95c 	bl	800cb40 <ButtonEmr>
                                        data_recibo(7);
 8005888:	f009 feea 	bl	800f660 <data_recibo.constprop.1>
 800588c:	f7fb b972 	b.w	8000b74 <Thread1.lto_priv.65+0x4a4>
 8005890:	20000908 	.word	0x20000908
 8005894:	cccccccd 	.word	0xcccccccd
 8005898:	20000800 	.word	0x20000800
 800589c:	0a7c5ac5 	.word	0x0a7c5ac5
 80058a0:	51eb851f 	.word	0x51eb851f
 80058a4:	10624dd3 	.word	0x10624dd3
 80058a8:	d1b71759 	.word	0xd1b71759
 80058ac:	68db8bad 	.word	0x68db8bad

080058b0 <SD_thread_2.lto_priv.66>:
}

//TAREA ENCARGADA DE LAZO DE CORRIENTE O PROTOCOLO GILBARCO
static THD_WORKING_AREA(SD, 256);
static THD_FUNCTION(SD_thread_2, p) 
{
 80058b0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80058b4:	4bd5      	ldr	r3, [pc, #852]	; (8005c0c <SD_thread_2.lto_priv.66+0x35c>)
 80058b6:	4ad6      	ldr	r2, [pc, #856]	; (8005c10 <SD_thread_2.lto_priv.66+0x360>)
 80058b8:	49d6      	ldr	r1, [pc, #856]	; (8005c14 <SD_thread_2.lto_priv.66+0x364>)
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	4cd6      	ldr	r4, [pc, #856]	; (8005c18 <SD_thread_2.lto_priv.66+0x368>)
 80058be:	4dd7      	ldr	r5, [pc, #860]	; (8005c1c <SD_thread_2.lto_priv.66+0x36c>)
    uint8_t envio_wire[100];
    uint8_t val_che;
    recibo_wire[0] = 0x00;

    //recibo_wire[0]=sdGet(&SD2);
    recibo_wire[0] = sdGetTimeout(&SD2,500);
 80058c0:	4ed7      	ldr	r6, [pc, #860]	; (8005c20 <SD_thread_2.lto_priv.66+0x370>)
 80058c2:	b0a3      	sub	sp, #140	; 0x8c
 80058c4:	f10d 0742 	add.w	r7, sp, #66	; 0x42
 80058c8:	9204      	str	r2, [sp, #16]
 80058ca:	4ad6      	ldr	r2, [pc, #856]	; (8005c24 <SD_thread_2.lto_priv.66+0x374>)
 80058cc:	9205      	str	r2, [sp, #20]
 80058ce:	9102      	str	r1, [sp, #8]
 80058d0:	4ad5      	ldr	r2, [pc, #852]	; (8005c28 <SD_thread_2.lto_priv.66+0x378>)
 80058d2:	49d6      	ldr	r1, [pc, #856]	; (8005c2c <SD_thread_2.lto_priv.66+0x37c>)
 80058d4:	9103      	str	r1, [sp, #12]
 80058d6:	619a      	str	r2, [r3, #24]
 80058d8:	e005      	b.n	80058e6 <SD_thread_2.lto_priv.66+0x36>
         	dato_wire = RxWire();
		}
 
        else 
        {
            chThdSleepMilliseconds(10);
 80058da:	2064      	movs	r0, #100	; 0x64
 80058dc:	f007 f8b0 	bl	800ca40 <chThdSleep>
        }
        
        chThdSleepMilliseconds(10);
 80058e0:	2064      	movs	r0, #100	; 0x64
 80058e2:	f007 f8ad 	bl	800ca40 <chThdSleep>
	return (dato_emr3[num]);
 80058e6:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
      	if(read_eeprom(consola) == 0x02 || read_eeprom(consola) == 0x04)
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d001      	beq.n	80058f2 <SD_thread_2.lto_priv.66+0x42>
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d1f3      	bne.n	80058da <SD_thread_2.lto_priv.66+0x2a>
 80058f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    recibo_wire[0] = 0x00;
 80058f6:	f04f 0800 	mov.w	r8, #0
    recibo_wire[0] = sdGetTimeout(&SD2,500);
 80058fa:	4630      	mov	r0, r6
    recibo_wire[0] = 0x00;
 80058fc:	f885 8000 	strb.w	r8, [r5]
    recibo_wire[0] = sdGetTimeout(&SD2,500);
 8005900:	f007 f816 	bl	800c930 <chIQGetTimeout>
 8005904:	7028      	strb	r0, [r5, #0]

        
    chThdSleepMilliseconds(2);
 8005906:	2014      	movs	r0, #20
 8005908:	f007 f89a 	bl	800ca40 <chThdSleep>
    

    if(read_eeprom(lado1) == 0X01)
 800590c:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8005910:	2b01      	cmp	r3, #1
 8005912:	d03e      	beq.n	8005992 <SD_thread_2.lto_priv.66+0xe2>
            return;
        }

    } 

    if(read_eeprom(lado2) == 0X01)
 8005914:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 8005918:	2b01      	cmp	r3, #1
 800591a:	d1e1      	bne.n	80058e0 <SD_thread_2.lto_priv.66+0x30>
    {

        //ESTADO
        if (recibo_wire[0] == read_eeprom(pos2)) 
 800591c:	782a      	ldrb	r2, [r5, #0]
 800591e:	78e0      	ldrb	r0, [r4, #3]
 8005920:	4282      	cmp	r2, r0
 8005922:	f000 81b0 	beq.w	8005c86 <SD_thread_2.lto_priv.66+0x3d6>
                 
            return;
        }

        //AUTORIZACION
        else if (recibo_wire[0] == (0X10 | read_eeprom(pos2))) 
 8005926:	f040 0110 	orr.w	r1, r0, #16
 800592a:	428a      	cmp	r2, r1
 800592c:	f000 8184 	beq.w	8005c38 <SD_thread_2.lto_priv.66+0x388>

            return;
        }

        //DATA
        else if (recibo_wire[0]  == (0x20 | read_eeprom(pos2)))
 8005930:	f040 0320 	orr.w	r3, r0, #32
 8005934:	429a      	cmp	r2, r3
 8005936:	f000 81a8 	beq.w	8005c8a <SD_thread_2.lto_priv.66+0x3da>
           
            return;
        }

        //STOP
        else if ((recibo_wire[0] == (0X30 |  read_eeprom(pos2))  || recibo_wire[0] == 0XFC ))
 800593a:	f040 0330 	orr.w	r3, r0, #48	; 0x30
 800593e:	429a      	cmp	r2, r3
 8005940:	f000 8262 	beq.w	8005e08 <SD_thread_2.lto_priv.66+0x558>
 8005944:	2afc      	cmp	r2, #252	; 0xfc
 8005946:	f040 823a 	bne.w	8005dbe <SD_thread_2.lto_priv.66+0x50e>
 800594a:	7823      	ldrb	r3, [r4, #0]
        {
            if(recibo_wire[0] == 0XFC )
            {

                if(read_eeprom(estado1) == 0x09 && read_eeprom(stop1) == 0X00)
 800594c:	2b09      	cmp	r3, #9
 800594e:	f000 8776 	beq.w	800683e <SD_thread_2.lto_priv.66+0xf8e>
                    write_eeprom(stop1,0X01);
                    write_eeprom(estado1,0X0C);
                    write_eeprom(pausa1,0x01);                
                }

                else if(read_eeprom(estado1) == 0x06 || read_eeprom(estado1) == 0x07 || read_eeprom(estado1) == 0x08)
 8005952:	3b06      	subs	r3, #6
 8005954:	2b02      	cmp	r3, #2
 8005956:	d80c      	bhi.n	8005972 <SD_thread_2.lto_priv.66+0xc2>
	dato_emr3[num] = inf;
 8005958:	2300      	movs	r3, #0
 800595a:	2206      	movs	r2, #6
 800595c:	7022      	strb	r2, [r4, #0]
 800595e:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 8005962:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
 8005966:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800596a:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 800596e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
                    write_eeprom(pasos1,0X00);   
                    write_eeprom(pausa1,0x00);             
                }
            }

            if(read_eeprom(estado2) == 0x09 && read_eeprom(stop2) == 0X00)
 8005972:	78a3      	ldrb	r3, [r4, #2]
 8005974:	2b09      	cmp	r3, #9
 8005976:	f000 824e 	beq.w	8005e16 <SD_thread_2.lto_priv.66+0x566>
 800597a:	2300      	movs	r3, #0
 800597c:	2206      	movs	r2, #6
 800597e:	70a2      	strb	r2, [r4, #2]
 8005980:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 8005984:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
 8005988:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800598c:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 8005990:	e7a6      	b.n	80058e0 <SD_thread_2.lto_priv.66+0x30>
        if (recibo_wire[0] == read_eeprom(pos1)) 
 8005992:	782a      	ldrb	r2, [r5, #0]
	return (dato_emr3[num]);
 8005994:	7860      	ldrb	r0, [r4, #1]
 8005996:	4282      	cmp	r2, r0
 8005998:	d048      	beq.n	8005a2c <SD_thread_2.lto_priv.66+0x17c>
        else if (recibo_wire[0] == (0X10 | read_eeprom(pos1))) 
 800599a:	f040 0110 	orr.w	r1, r0, #16
 800599e:	428a      	cmp	r2, r1
 80059a0:	d030      	beq.n	8005a04 <SD_thread_2.lto_priv.66+0x154>
        else if (recibo_wire[0]  == (0x20 | read_eeprom(pos1)))
 80059a2:	f040 0320 	orr.w	r3, r0, #32
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d052      	beq.n	8005a50 <SD_thread_2.lto_priv.66+0x1a0>
        else if ((recibo_wire[0] == (0X30 |  read_eeprom(pos1))  || recibo_wire[0] == 0XFC))
 80059aa:	f040 0330 	orr.w	r3, r0, #48	; 0x30
 80059ae:	429a      	cmp	r2, r3
 80059b0:	f000 8155 	beq.w	8005c5e <SD_thread_2.lto_priv.66+0x3ae>
 80059b4:	2afc      	cmp	r2, #252	; 0xfc
 80059b6:	f040 80e4 	bne.w	8005b82 <SD_thread_2.lto_priv.66+0x2d2>
                if(read_eeprom(estado2) == 0x09 && read_eeprom(stop2) == 0X00)
 80059ba:	78a3      	ldrb	r3, [r4, #2]
 80059bc:	2b09      	cmp	r3, #9
 80059be:	f000 86d4 	beq.w	800676a <SD_thread_2.lto_priv.66+0xeba>
	dato_emr3[num] = inf;
 80059c2:	2300      	movs	r3, #0
 80059c4:	2206      	movs	r2, #6
 80059c6:	70a2      	strb	r2, [r4, #2]
 80059c8:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 80059cc:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
 80059d0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80059d4:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
	return (dato_emr3[num]);
 80059d8:	7823      	ldrb	r3, [r4, #0]
            if(read_eeprom(estado1) == 0x09 && read_eeprom(stop1) == 0X00)
 80059da:	2b09      	cmp	r3, #9
 80059dc:	f000 8146 	beq.w	8005c6c <SD_thread_2.lto_priv.66+0x3bc>
            else if(read_eeprom(estado1) == 0x06 || read_eeprom(estado1) == 0x07 || read_eeprom(estado1) == 0x08)
 80059e0:	3b06      	subs	r3, #6
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	f63f af7c 	bhi.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
	dato_emr3[num] = inf;
 80059e8:	2300      	movs	r3, #0
 80059ea:	2206      	movs	r2, #6
 80059ec:	7022      	strb	r2, [r4, #0]
 80059ee:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 80059f2:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
 80059f6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80059fa:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 80059fe:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8005a02:	e76d      	b.n	80058e0 <SD_thread_2.lto_priv.66+0x30>
	return (dato_emr3[num]);
 8005a04:	7822      	ldrb	r2, [r4, #0]
            if(read_eeprom(estado1) == 0X0C)
 8005a06:	2a0c      	cmp	r2, #12
 8005a08:	f000 8219 	beq.w	8005e3e <SD_thread_2.lto_priv.66+0x58e>
                if(read_eeprom(estado1) == 0X07)
 8005a0c:	2a07      	cmp	r2, #7
 8005a0e:	f000 820f 	beq.w	8005e30 <SD_thread_2.lto_priv.66+0x580>
                else if(read_eeprom(estado1) == 0X06)
 8005a12:	2a06      	cmp	r2, #6
 8005a14:	f000 851c 	beq.w	8006450 <SD_thread_2.lto_priv.66+0xba0>
                if(((read_eeprom(level)) & 0xF0) == 0x00)
 8005a18:	7b63      	ldrb	r3, [r4, #13]
 8005a1a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8005a1e:	f47f af5f 	bne.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                    venta_ppu(0XF4,0x01);
 8005a22:	2101      	movs	r1, #1
 8005a24:	20f4      	movs	r0, #244	; 0xf4
 8005a26:	f007 fccb 	bl	800d3c0 <venta_ppu>
 8005a2a:	e759      	b.n	80058e0 <SD_thread_2.lto_priv.66+0x30>
            DATO = (read_eeprom(estado1) << 4);
 8005a2c:	7821      	ldrb	r1, [r4, #0]
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8005a2e:	4880      	ldr	r0, [pc, #512]	; (8005c30 <SD_thread_2.lto_priv.66+0x380>)
            DATO = (read_eeprom(estado2) << 4);
 8005a30:	0109      	lsls	r1, r1, #4
 8005a32:	b2c9      	uxtb	r1, r1
 8005a34:	4311      	orrs	r1, r2
 8005a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a3a:	f006 fea1 	bl	800c780 <chOQPutTimeout>
            chThdSleepMilliseconds(5);
 8005a3e:	2032      	movs	r0, #50	; 0x32
 8005a40:	f006 fffe 	bl	800ca40 <chThdSleep>
            recibo_wire[1] = sdGetTimeout(&SD2,5);                    
 8005a44:	2105      	movs	r1, #5
 8005a46:	4630      	mov	r0, r6
 8005a48:	f006 ff72 	bl	800c930 <chIQGetTimeout>
 8005a4c:	7068      	strb	r0, [r5, #1]
 8005a4e:	e747      	b.n	80058e0 <SD_thread_2.lto_priv.66+0x30>
 8005a50:	f040 01d0 	orr.w	r1, r0, #208	; 0xd0
 8005a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a58:	4875      	ldr	r0, [pc, #468]	; (8005c30 <SD_thread_2.lto_priv.66+0x380>)
 8005a5a:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8005c34 <SD_thread_2.lto_priv.66+0x384>
 8005a5e:	f006 fe8f 	bl	800c780 <chOQPutTimeout>
                DATO = sdGetTimeout(&SD2,500);
 8005a62:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005a66:	4630      	mov	r0, r6
 8005a68:	f006 ff62 	bl	800c930 <chIQGetTimeout>
 8005a6c:	b2c0      	uxtb	r0, r0
                i++;
 8005a6e:	f108 0801 	add.w	r8, r8, #1
                if (DATO == 0XF0 || DATO == read_eeprom(pos1) || DATO == read_eeprom(pos2) || DATO == (0x20 | read_eeprom(pos1)) || i == 20) break;
 8005a72:	28f0      	cmp	r0, #240	; 0xf0
                recibo_wire[i] = DATO;
 8005a74:	f80a 0f01 	strb.w	r0, [sl, #1]!
                i++;
 8005a78:	fa5f f888 	uxtb.w	r8, r8
 8005a7c:	7863      	ldrb	r3, [r4, #1]
                if (DATO == 0XF0 || DATO == read_eeprom(pos1) || DATO == read_eeprom(pos2) || DATO == (0x20 | read_eeprom(pos1)) || i == 20) break;
 8005a7e:	f000 82c0 	beq.w	8006002 <SD_thread_2.lto_priv.66+0x752>
 8005a82:	4298      	cmp	r0, r3
 8005a84:	f043 0220 	orr.w	r2, r3, #32
 8005a88:	f43f af2a 	beq.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
 8005a8c:	78e1      	ldrb	r1, [r4, #3]
 8005a8e:	4281      	cmp	r1, r0
 8005a90:	f43f af26 	beq.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
 8005a94:	4290      	cmp	r0, r2
 8005a96:	f000 82b7 	beq.w	8006008 <SD_thread_2.lto_priv.66+0x758>
 8005a9a:	f1b8 0f14 	cmp.w	r8, #20
 8005a9e:	d1e0      	bne.n	8005a62 <SD_thread_2.lto_priv.66+0x1b2>
            if(DATO == read_eeprom(pos1) || DATO == read_eeprom(pos2) ||  DATO == (0x20 | read_eeprom(pos1))) return; 
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	4282      	cmp	r2, r0
 8005aa4:	f43f af1c 	beq.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
            if(recibo_wire[3] == 0XFE) 
 8005aa8:	78e8      	ldrb	r0, [r5, #3]
 8005aaa:	28fe      	cmp	r0, #254	; 0xfe
 8005aac:	f000 8738 	beq.w	8006920 <SD_thread_2.lto_priv.66+0x1070>
            else if(recibo_wire[3] == 0XF4 || recibo_wire[3] == 0XF5) 
 8005ab0:	f100 030c 	add.w	r3, r0, #12
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	f240 850a 	bls.w	80064d0 <SD_thread_2.lto_priv.66+0xc20>
            else if(recibo_wire[3] == 0XF1)
 8005abc:	28f1      	cmp	r0, #241	; 0xf1
 8005abe:	f000 86d2 	beq.w	8006866 <SD_thread_2.lto_priv.66+0xfb6>
            else if(recibo_wire[3] == 0XF2) 
 8005ac2:	28f2      	cmp	r0, #242	; 0xf2
 8005ac4:	f47f af0c 	bne.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                if(read_eeprom(estado1) != 0x09)
 8005ac8:	7823      	ldrb	r3, [r4, #0]
 8005aca:	2b09      	cmp	r3, #9
 8005acc:	f43f af08 	beq.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
    for(i=0; i<(tamano-2); i++)
 8005ad0:	f1a8 0102 	sub.w	r1, r8, #2
                    recibo_wire[0] = 0x30;
 8005ad4:	2330      	movs	r3, #48	; 0x30
    for(i=0; i<(tamano-2); i++)
 8005ad6:	2900      	cmp	r1, #0
                    recibo_wire[0] = 0x30;
 8005ad8:	702b      	strb	r3, [r5, #0]
    for(i=0; i<(tamano-2); i++)
 8005ada:	f340 87b2 	ble.w	8006a42 <SD_thread_2.lto_priv.66+0x1192>
 8005ade:	2000      	movs	r0, #0
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	e000      	b.n	8005ae6 <SD_thread_2.lto_priv.66+0x236>
 8005ae4:	5cab      	ldrb	r3, [r5, r2]
 8005ae6:	3201      	adds	r2, #1
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 8005ae8:	f003 030f 	and.w	r3, r3, #15
    for(i=0; i<(tamano-2); i++)
 8005aec:	b2d2      	uxtb	r2, r2
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 8005aee:	4418      	add	r0, r3
    for(i=0; i<(tamano-2); i++)
 8005af0:	428a      	cmp	r2, r1
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 8005af2:	b280      	uxth	r0, r0
    for(i=0; i<(tamano-2); i++)
 8005af4:	dbf6      	blt.n	8005ae4 <SD_thread_2.lto_priv.66+0x234>
 8005af6:	4243      	negs	r3, r0
 8005af8:	f003 030f 	and.w	r3, r3, #15
        comp = vec[tamano-2] & 0X0F;
 8005afc:	eb05 0208 	add.w	r2, r5, r8
 8005b00:	f812 2c02 	ldrb.w	r2, [r2, #-2]
        if(valor_sum == comp) return 1;
 8005b04:	f002 020f 	and.w	r2, r2, #15
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	f47f aee9 	bne.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                        write_eeprom(level,(DATO | 0x10));
 8005b0e:	7b63      	ldrb	r3, [r4, #13]
	dato_emr3[num] = inf;
 8005b10:	2202      	movs	r2, #2
 8005b12:	f043 0310 	orr.w	r3, r3, #16
                        if (i == 17)
 8005b16:	f1b8 0f11 	cmp.w	r8, #17
 8005b1a:	7363      	strb	r3, [r4, #13]
 8005b1c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 8005b20:	f001 8005 	beq.w	8006b2e <SD_thread_2.lto_priv.66+0x127e>
                        else if (i == 15)
 8005b24:	f1b8 0f0f 	cmp.w	r8, #15
 8005b28:	f000 87d6 	beq.w	8006ad8 <SD_thread_2.lto_priv.66+0x1228>
                            if(read_eeprom(PD) == 0X03)
 8005b2c:	7ee3      	ldrb	r3, [r4, #27]
                                A3 = recibo_wire[7] & 0X0F;
 8005b2e:	79ea      	ldrb	r2, [r5, #7]
                                A4 = recibo_wire[8] & 0X0F;
 8005b30:	f895 8008 	ldrb.w	r8, [r5, #8]
                                A5 = recibo_wire[9] & 0X0F;
 8005b34:	f895 a009 	ldrb.w	sl, [r5, #9]
                                A6 = recibo_wire[10] & 0X0F;
 8005b38:	f895 b00a 	ldrb.w	fp, [r5, #10]
                                venta_ppu(recibo_wire[4],0x01);
 8005b3c:	7928      	ldrb	r0, [r5, #4]
                            if(read_eeprom(PD) == 0X03)
 8005b3e:	2b03      	cmp	r3, #3
                                A2 = recibo_wire[6] & 0X0F;
 8005b40:	79ab      	ldrb	r3, [r5, #6]
 8005b42:	f003 030f 	and.w	r3, r3, #15
                                venta_ppu(recibo_wire[4],0x01);
 8005b46:	f04f 0101 	mov.w	r1, #1
                                A2 = recibo_wire[6] & 0X0F;
 8005b4a:	9306      	str	r3, [sp, #24]
                                A3 = recibo_wire[7] & 0X0F;
 8005b4c:	f002 090f 	and.w	r9, r2, #15
                                A4 = recibo_wire[8] & 0X0F;
 8005b50:	f008 080f 	and.w	r8, r8, #15
                                A5 = recibo_wire[9] & 0X0F;
 8005b54:	f00a 0a0f 	and.w	sl, sl, #15
                                A6 = recibo_wire[10] & 0X0F;
 8005b58:	f00b 0b0f 	and.w	fp, fp, #15
                            if(read_eeprom(PD) == 0X03)
 8005b5c:	f001 8009 	beq.w	8006b72 <SD_thread_2.lto_priv.66+0x12c2>
                                venta_ppu(recibo_wire[4],0x01);
 8005b60:	f007 fc2e 	bl	800d3c0 <venta_ppu>
 8005b64:	2100      	movs	r1, #0
 8005b66:	9b06      	ldr	r3, [sp, #24]
 8005b68:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8005b6c:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
 8005b70:	f884 a02c 	strb.w	sl, [r4, #44]	; 0x2c
 8005b74:	f884 802d 	strb.w	r8, [r4, #45]	; 0x2d
 8005b78:	f884 902e 	strb.w	r9, [r4, #46]	; 0x2e
 8005b7c:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
 8005b80:	e6ae      	b.n	80058e0 <SD_thread_2.lto_priv.66+0x30>
        else if (recibo_wire[0] == (0X40 | read_eeprom(pos1)))
 8005b82:	f040 0340 	orr.w	r3, r0, #64	; 0x40
 8005b86:	429a      	cmp	r2, r3
 8005b88:	f000 8161 	beq.w	8005e4e <SD_thread_2.lto_priv.66+0x59e>
        else if (recibo_wire[0] == (0X50 | read_eeprom(pos1)))
 8005b8c:	f040 0350 	orr.w	r3, r0, #80	; 0x50
 8005b90:	429a      	cmp	r2, r3
 8005b92:	f000 8368 	beq.w	8006266 <SD_thread_2.lto_priv.66+0x9b6>
        else if ((recibo_wire[0] == (0X60 | read_eeprom(pos1)) && read_eeprom(estado1) == 0x09))
 8005b96:	f040 0360 	orr.w	r3, r0, #96	; 0x60
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	f000 824a 	beq.w	8006034 <SD_thread_2.lto_priv.66+0x784>
        else if (recibo_wire[0] == (0X70 | read_eeprom(pos1)) && read_eeprom(estado1) == 0x09) 
 8005ba0:	f040 0070 	orr.w	r0, r0, #112	; 0x70
 8005ba4:	4282      	cmp	r2, r0
 8005ba6:	f47f aeb5 	bne.w	8005914 <SD_thread_2.lto_priv.66+0x64>
 8005baa:	7823      	ldrb	r3, [r4, #0]
 8005bac:	2b09      	cmp	r3, #9
 8005bae:	f47f aeb1 	bne.w	8005914 <SD_thread_2.lto_priv.66+0x64>
            envio_wire[1] = 0xE0 | read_eeprom(real_vol16);
 8005bb2:	f894 c071 	ldrb.w	ip, [r4, #113]	; 0x71
            envio_wire[2] = 0xE0 | read_eeprom(real_vol15);
 8005bb6:	f894 e070 	ldrb.w	lr, [r4, #112]	; 0x70
            envio_wire[3] = 0xE0 | read_eeprom(real_vol14);
 8005bba:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
            envio_wire[4] = 0xE0 | read_eeprom(real_vol13);
 8005bbe:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
            envio_wire[5] = 0xE0 | read_eeprom(real_vol12);
 8005bc2:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
            envio_wire[6] = 0xE0 | read_eeprom(real_vol11);
 8005bc6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
        else if (recibo_wire[0] == (0X70 | read_eeprom(pos2)) && read_eeprom(estado2) == 0x09) 
        {
         
            envio_wire[0] = 0xE1;
            envio_wire[1] = 0xE0 | read_eeprom(real_vol26);
            envio_wire[2] = 0xE0 | read_eeprom(real_vol25);
 8005bca:	f06e 0e1f 	orn	lr, lr, #31
            envio_wire[3] = 0xE0 | read_eeprom(real_vol24);
 8005bce:	f060 001f 	orn	r0, r0, #31
            envio_wire[4] = 0xE0 | read_eeprom(real_vol23);
 8005bd2:	f061 011f 	orn	r1, r1, #31
            envio_wire[1] = 0xE0 | read_eeprom(real_vol26);
 8005bd6:	f06c 0c1f 	orn	ip, ip, #31
            envio_wire[5] = 0xE0 | read_eeprom(real_vol22);
 8005bda:	f062 021f 	orn	r2, r2, #31
            envio_wire[6] = 0xE0 | read_eeprom(real_vol21);
 8005bde:	f063 031f 	orn	r3, r3, #31
            envio_wire[2] = 0xE0 | read_eeprom(real_vol25);
 8005be2:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
            envio_wire[3] = 0xE0 | read_eeprom(real_vol24);
 8005be6:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
            envio_wire[4] = 0xE0 | read_eeprom(real_vol23);
 8005bea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
            envio_wire[0] = 0xE1;
 8005bee:	f04f 0ee1 	mov.w	lr, #225	; 0xe1

            Imprimir(&envio_wire,7);
 8005bf2:	2107      	movs	r1, #7
 8005bf4:	a809      	add	r0, sp, #36	; 0x24
            envio_wire[1] = 0xE0 | read_eeprom(real_vol26);
 8005bf6:	f88d c025 	strb.w	ip, [sp, #37]	; 0x25
            envio_wire[5] = 0xE0 | read_eeprom(real_vol22);
 8005bfa:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
            envio_wire[6] = 0xE0 | read_eeprom(real_vol21);
 8005bfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
            envio_wire[0] = 0xE1;
 8005c02:	f88d e024 	strb.w	lr, [sp, #36]	; 0x24
            Imprimir(&envio_wire,7);
 8005c06:	f007 fc63 	bl	800d4d0 <Imprimir>
 8005c0a:	e669      	b.n	80058e0 <SD_thread_2.lto_priv.66+0x30>
 8005c0c:	20001698 	.word	0x20001698
 8005c10:	200009b0 	.word	0x200009b0
 8005c14:	20000b58 	.word	0x20000b58
 8005c18:	20001c74 	.word	0x20001c74
 8005c1c:	20000924 	.word	0x20000924
 8005c20:	20001608 	.word	0x20001608
 8005c24:	20000a48 	.word	0x20000a48
 8005c28:	0800f7d0 	.word	0x0800f7d0
 8005c2c:	20000bf0 	.word	0x20000bf0
 8005c30:	2000162c 	.word	0x2000162c
 8005c34:	20000923 	.word	0x20000923
	return (dato_emr3[num]);
 8005c38:	78a2      	ldrb	r2, [r4, #2]
            if(read_eeprom(estado2) == 0X0C)
 8005c3a:	2a0c      	cmp	r2, #12
 8005c3c:	f000 822c 	beq.w	8006098 <SD_thread_2.lto_priv.66+0x7e8>
                if(read_eeprom(estado2) == 0X07)
 8005c40:	2a07      	cmp	r2, #7
 8005c42:	f000 81ef 	beq.w	8006024 <SD_thread_2.lto_priv.66+0x774>
                else if(read_eeprom(estado2) == 0X06)
 8005c46:	2a06      	cmp	r2, #6
 8005c48:	f000 859d 	beq.w	8006786 <SD_thread_2.lto_priv.66+0xed6>
                if(((read_eeprom(level)) & 0x0F) == 0x00)
 8005c4c:	7b63      	ldrb	r3, [r4, #13]
 8005c4e:	071b      	lsls	r3, r3, #28
 8005c50:	f47f ae46 	bne.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                    venta_ppu(0XF4,0x02);
 8005c54:	2102      	movs	r1, #2
 8005c56:	20f4      	movs	r0, #244	; 0xf4
 8005c58:	f007 fbb2 	bl	800d3c0 <venta_ppu>
 8005c5c:	e640      	b.n	80058e0 <SD_thread_2.lto_priv.66+0x30>
            if(recibo_wire[0] == 0XFC)
 8005c5e:	2afc      	cmp	r2, #252	; 0xfc
 8005c60:	f43f aeab 	beq.w	80059ba <SD_thread_2.lto_priv.66+0x10a>
 8005c64:	7823      	ldrb	r3, [r4, #0]
            if(read_eeprom(estado1) == 0x09 && read_eeprom(stop1) == 0X00)
 8005c66:	2b09      	cmp	r3, #9
 8005c68:	f47f aeba 	bne.w	80059e0 <SD_thread_2.lto_priv.66+0x130>
 8005c6c:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f47f ae35 	bne.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
	dato_emr3[num] = inf;
 8005c76:	2301      	movs	r3, #1
 8005c78:	220c      	movs	r2, #12
 8005c7a:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
 8005c7e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8005c82:	7022      	strb	r2, [r4, #0]
 8005c84:	e62c      	b.n	80058e0 <SD_thread_2.lto_priv.66+0x30>
            DATO = (read_eeprom(estado2) << 4);
 8005c86:	78a1      	ldrb	r1, [r4, #2]
 8005c88:	e6d1      	b.n	8005a2e <SD_thread_2.lto_priv.66+0x17e>
 8005c8a:	f040 01d0 	orr.w	r1, r0, #208	; 0xd0
 8005c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c92:	48e1      	ldr	r0, [pc, #900]	; (8006018 <SD_thread_2.lto_priv.66+0x768>)
 8005c94:	f8df 8388 	ldr.w	r8, [pc, #904]	; 8006020 <SD_thread_2.lto_priv.66+0x770>
 8005c98:	f006 fd72 	bl	800c780 <chOQPutTimeout>
            i=0;
 8005c9c:	f04f 0a00 	mov.w	sl, #0
                DATO = sdGetTimeout(&SD2,500);
 8005ca0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f006 fe43 	bl	800c930 <chIQGetTimeout>
 8005caa:	b2c0      	uxtb	r0, r0
                i++;
 8005cac:	f10a 0a01 	add.w	sl, sl, #1
                if (DATO == 0XF0 || DATO == read_eeprom(pos1) || DATO == read_eeprom(pos2) || DATO == (0x20 | read_eeprom(pos2)) || i == 20) break;
 8005cb0:	28f0      	cmp	r0, #240	; 0xf0
                recibo_wire[i] = DATO;
 8005cb2:	f808 0f01 	strb.w	r0, [r8, #1]!
                i++;
 8005cb6:	fa5f fa8a 	uxtb.w	sl, sl
            if(DATO == read_eeprom(pos1) || DATO == read_eeprom(pos2) ||  DATO == (0x20 | read_eeprom(pos2))) return; 
 8005cba:	7863      	ldrb	r3, [r4, #1]
                if (DATO == 0XF0 || DATO == read_eeprom(pos1) || DATO == read_eeprom(pos2) || DATO == (0x20 | read_eeprom(pos2)) || i == 20) break;
 8005cbc:	f000 83d0 	beq.w	8006460 <SD_thread_2.lto_priv.66+0xbb0>
 8005cc0:	4283      	cmp	r3, r0
 8005cc2:	f43f ae0d 	beq.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
	return (dato_emr3[num]);
 8005cc6:	78e3      	ldrb	r3, [r4, #3]
 8005cc8:	4298      	cmp	r0, r3
 8005cca:	f043 0220 	orr.w	r2, r3, #32
 8005cce:	f43f ae07 	beq.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
 8005cd2:	4290      	cmp	r0, r2
 8005cd4:	f000 83c7 	beq.w	8006466 <SD_thread_2.lto_priv.66+0xbb6>
 8005cd8:	f1ba 0f14 	cmp.w	sl, #20
 8005cdc:	d1e0      	bne.n	8005ca0 <SD_thread_2.lto_priv.66+0x3f0>
            if(DATO == read_eeprom(pos1) || DATO == read_eeprom(pos2) ||  DATO == (0x20 | read_eeprom(pos2))) return; 
 8005cde:	4282      	cmp	r2, r0
 8005ce0:	f43f adfe 	beq.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
            if(recibo_wire[3] == 0XFE) 
 8005ce4:	78e8      	ldrb	r0, [r5, #3]
 8005ce6:	28fe      	cmp	r0, #254	; 0xfe
 8005ce8:	f000 867e 	beq.w	80069e8 <SD_thread_2.lto_priv.66+0x1138>
            else if(recibo_wire[3] == 0XF4 || recibo_wire[3] == 0XF5) 
 8005cec:	f100 030c 	add.w	r3, r0, #12
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	f240 857d 	bls.w	80067f2 <SD_thread_2.lto_priv.66+0xf42>
            else if(recibo_wire[3] == 0XF1)
 8005cf8:	28f1      	cmp	r0, #241	; 0xf1
 8005cfa:	f000 8619 	beq.w	8006930 <SD_thread_2.lto_priv.66+0x1080>
            else if(recibo_wire[3] == 0XF2) 
 8005cfe:	28f2      	cmp	r0, #242	; 0xf2
 8005d00:	f47f adee 	bne.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                if(read_eeprom(estado2) != 0x09)
 8005d04:	78a3      	ldrb	r3, [r4, #2]
 8005d06:	2b09      	cmp	r3, #9
 8005d08:	f43f adea 	beq.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
    for(i=0; i<(tamano-2); i++)
 8005d0c:	f1aa 0102 	sub.w	r1, sl, #2
                    recibo_wire[0] = 0x30;
 8005d10:	2330      	movs	r3, #48	; 0x30
    for(i=0; i<(tamano-2); i++)
 8005d12:	2900      	cmp	r1, #0
                    recibo_wire[0] = 0x30;
 8005d14:	702b      	strb	r3, [r5, #0]
    for(i=0; i<(tamano-2); i++)
 8005d16:	f340 8716 	ble.w	8006b46 <SD_thread_2.lto_priv.66+0x1296>
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	e000      	b.n	8005d22 <SD_thread_2.lto_priv.66+0x472>
 8005d20:	5cab      	ldrb	r3, [r5, r2]
 8005d22:	3201      	adds	r2, #1
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 8005d24:	f003 030f 	and.w	r3, r3, #15
    for(i=0; i<(tamano-2); i++)
 8005d28:	b2d2      	uxtb	r2, r2
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 8005d2a:	4418      	add	r0, r3
    for(i=0; i<(tamano-2); i++)
 8005d2c:	428a      	cmp	r2, r1
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 8005d2e:	b280      	uxth	r0, r0
    for(i=0; i<(tamano-2); i++)
 8005d30:	dbf6      	blt.n	8005d20 <SD_thread_2.lto_priv.66+0x470>
 8005d32:	4243      	negs	r3, r0
 8005d34:	f003 030f 	and.w	r3, r3, #15
        comp = vec[tamano-2] & 0X0F;
 8005d38:	eb05 020a 	add.w	r2, r5, sl
 8005d3c:	f812 2c02 	ldrb.w	r2, [r2, #-2]
        if(valor_sum == comp) return 1;
 8005d40:	f002 020f 	and.w	r2, r2, #15
 8005d44:	429a      	cmp	r2, r3
 8005d46:	f47f adcb 	bne.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                        write_eeprom(level,(DATO | 0x01));
 8005d4a:	7b63      	ldrb	r3, [r4, #13]
	dato_emr3[num] = inf;
 8005d4c:	2102      	movs	r1, #2
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
                        if (i == 17)
 8005d52:	f1ba 0f11 	cmp.w	sl, #17
 8005d56:	7363      	strb	r3, [r4, #13]
 8005d58:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
 8005d5c:	f000 86b1 	beq.w	8006ac2 <SD_thread_2.lto_priv.66+0x1212>
                        else if (i == 15)
 8005d60:	f1ba 0f0f 	cmp.w	sl, #15
 8005d64:	f000 8682 	beq.w	8006a6c <SD_thread_2.lto_priv.66+0x11bc>
                            if(read_eeprom(PD) == 0X03)
 8005d68:	7ee3      	ldrb	r3, [r4, #27]
                                A2 = recibo_wire[6] & 0X0F;
 8005d6a:	79aa      	ldrb	r2, [r5, #6]
                                A3 = recibo_wire[7] & 0X0F;
 8005d6c:	f895 8007 	ldrb.w	r8, [r5, #7]
                                A4 = recibo_wire[8] & 0X0F;
 8005d70:	f895 a008 	ldrb.w	sl, [r5, #8]
                                A5 = recibo_wire[9] & 0X0F;
 8005d74:	f895 b009 	ldrb.w	fp, [r5, #9]
                                venta_ppu(recibo_wire[4],0x02);
 8005d78:	7928      	ldrb	r0, [r5, #4]
                            if(read_eeprom(PD) == 0X03)
 8005d7a:	2b03      	cmp	r3, #3
                                A6 = recibo_wire[10] & 0X0F;
 8005d7c:	7aab      	ldrb	r3, [r5, #10]
                                A2 = recibo_wire[6] & 0X0F;
 8005d7e:	f002 020f 	and.w	r2, r2, #15
                                A6 = recibo_wire[10] & 0X0F;
 8005d82:	f003 030f 	and.w	r3, r3, #15
                                A2 = recibo_wire[6] & 0X0F;
 8005d86:	9207      	str	r2, [sp, #28]
                                A3 = recibo_wire[7] & 0X0F;
 8005d88:	f008 080f 	and.w	r8, r8, #15
                                A4 = recibo_wire[8] & 0X0F;
 8005d8c:	f00a 0a0f 	and.w	sl, sl, #15
                                A5 = recibo_wire[9] & 0X0F;
 8005d90:	f00b 0b0f 	and.w	fp, fp, #15
                                A6 = recibo_wire[10] & 0X0F;
 8005d94:	9306      	str	r3, [sp, #24]
                            if(read_eeprom(PD) == 0X03)
 8005d96:	f000 86d9 	beq.w	8006b4c <SD_thread_2.lto_priv.66+0x129c>
                                venta_ppu(recibo_wire[4],0x02);
 8005d9a:	f007 fb11 	bl	800d3c0 <venta_ppu>
 8005d9e:	2100      	movs	r1, #0
 8005da0:	9b06      	ldr	r3, [sp, #24]
 8005da2:	9a07      	ldr	r2, [sp, #28]
 8005da4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 8005da8:	f884 b032 	strb.w	fp, [r4, #50]	; 0x32
 8005dac:	f884 a033 	strb.w	sl, [r4, #51]	; 0x33
 8005db0:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
 8005db4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
 8005db8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8005dbc:	e590      	b.n	80058e0 <SD_thread_2.lto_priv.66+0x30>
        else if (recibo_wire[0] == (0X40 | read_eeprom(pos2)))
 8005dbe:	f040 0340 	orr.w	r3, r0, #64	; 0x40
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	f000 8170 	beq.w	80060a8 <SD_thread_2.lto_priv.66+0x7f8>
        else if (recibo_wire[0] == (0X50 | read_eeprom(pos2)))
 8005dc8:	f040 0350 	orr.w	r3, r0, #80	; 0x50
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	f000 83d7 	beq.w	8006580 <SD_thread_2.lto_priv.66+0xcd0>
        else if ((recibo_wire[0] == (0X60 | read_eeprom(pos2)) && read_eeprom(estado2) == 0x09))
 8005dd2:	f040 0360 	orr.w	r3, r0, #96	; 0x60
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	f000 834c 	beq.w	8006474 <SD_thread_2.lto_priv.66+0xbc4>
        else if (recibo_wire[0] == (0X70 | read_eeprom(pos2)) && read_eeprom(estado2) == 0x09) 
 8005ddc:	f040 0070 	orr.w	r0, r0, #112	; 0x70
 8005de0:	4282      	cmp	r2, r0
 8005de2:	f47f ad7d 	bne.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
 8005de6:	78a3      	ldrb	r3, [r4, #2]
 8005de8:	2b09      	cmp	r3, #9
 8005dea:	f47f ad79 	bne.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
            envio_wire[1] = 0xE0 | read_eeprom(real_vol26);
 8005dee:	f894 c078 	ldrb.w	ip, [r4, #120]	; 0x78
            envio_wire[2] = 0xE0 | read_eeprom(real_vol25);
 8005df2:	f894 e077 	ldrb.w	lr, [r4, #119]	; 0x77
            envio_wire[3] = 0xE0 | read_eeprom(real_vol24);
 8005df6:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
            envio_wire[4] = 0xE0 | read_eeprom(real_vol23);
 8005dfa:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
            envio_wire[5] = 0xE0 | read_eeprom(real_vol22);
 8005dfe:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
            envio_wire[6] = 0xE0 | read_eeprom(real_vol21);
 8005e02:	f894 3073 	ldrb.w	r3, [r4, #115]	; 0x73
 8005e06:	e6e0      	b.n	8005bca <SD_thread_2.lto_priv.66+0x31a>
            if(recibo_wire[0] == 0XFC )
 8005e08:	2afc      	cmp	r2, #252	; 0xfc
 8005e0a:	f43f ad9e 	beq.w	800594a <SD_thread_2.lto_priv.66+0x9a>
            if(read_eeprom(estado2) == 0x09 && read_eeprom(stop2) == 0X00)
 8005e0e:	78a3      	ldrb	r3, [r4, #2]
 8005e10:	2b09      	cmp	r3, #9
 8005e12:	f47f adb2 	bne.w	800597a <SD_thread_2.lto_priv.66+0xca>
 8005e16:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f47f adad 	bne.w	800597a <SD_thread_2.lto_priv.66+0xca>
 8005e20:	2301      	movs	r3, #1
 8005e22:	220c      	movs	r2, #12
 8005e24:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
 8005e28:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 8005e2c:	70a2      	strb	r2, [r4, #2]
 8005e2e:	e557      	b.n	80058e0 <SD_thread_2.lto_priv.66+0x30>
 8005e30:	2209      	movs	r2, #9
 8005e32:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 8005e36:	f884 8087 	strb.w	r8, [r4, #135]	; 0x87
 8005e3a:	7022      	strb	r2, [r4, #0]
 8005e3c:	e5ec      	b.n	8005a18 <SD_thread_2.lto_priv.66+0x168>
 8005e3e:	2209      	movs	r2, #9
 8005e40:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8005e44:	230a      	movs	r3, #10
 8005e46:	7022      	strb	r2, [r4, #0]
 8005e48:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 8005e4c:	e548      	b.n	80058e0 <SD_thread_2.lto_priv.66+0x30>
            if(read_eeprom(estado1) == 0X0B) 
 8005e4e:	7823      	ldrb	r3, [r4, #0]
 8005e50:	2b0b      	cmp	r3, #11
 8005e52:	f000 84a1 	beq.w	8006798 <SD_thread_2.lto_priv.66+0xee8>
            envio_wire[1]=0XF3;
 8005e56:	23f3      	movs	r3, #243	; 0xf3
            envio_wire[2]=0XF8;
 8005e58:	22f8      	movs	r2, #248	; 0xf8
            envio_wire[0]=0XFF;
 8005e5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            envio_wire[1]=0XF3;
 8005e5e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            envio_wire[3]=0XEB;
 8005e62:	23eb      	movs	r3, #235	; 0xeb
            envio_wire[0]=0XFF;
 8005e64:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
            envio_wire[2]=0XF8;
 8005e68:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
            envio_wire[3]=0XEB;
 8005e6c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            if(read_eeprom(pos1) == 0) 
 8005e70:	2800      	cmp	r0, #0
 8005e72:	f040 835f 	bne.w	8006534 <SD_thread_2.lto_priv.66+0xc84>
                envio_wire[4]=0XEF; 
 8005e76:	23ef      	movs	r3, #239	; 0xef
 8005e78:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            envio_wire[18]=0XE0 | read_eeprom(v5_1);
 8005e7c:	7ce2      	ldrb	r2, [r4, #19]
            envio_wire[17]=0XE0 | read_eeprom(v6_1);
 8005e7e:	7d23      	ldrb	r3, [r4, #20]
            envio_wire[13]=0XE0 | read_eeprom(ppu3_venta1);
 8005e80:	f894 e08f 	ldrb.w	lr, [r4, #143]	; 0x8f
            envio_wire[14]=0XE0 | read_eeprom(ppu2_venta1);
 8005e84:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
            envio_wire[15]=0XE0 | read_eeprom(ppu1_venta1);
 8005e88:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
            envio_wire[12]=0XE0 | read_eeprom(ppu4_venta1);
 8005e8c:	f894 c090 	ldrb.w	ip, [r4, #144]	; 0x90
            envio_wire[18]=0XE0 | read_eeprom(v5_1);
 8005e90:	f062 021f 	orn	r2, r2, #31
 8005e94:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
            envio_wire[22]=0XE0 | read_eeprom(v1_1);
 8005e98:	7be2      	ldrb	r2, [r4, #15]
 8005e9a:	f062 021f 	orn	r2, r2, #31
            envio_wire[17]=0XE0 | read_eeprom(v6_1);
 8005e9e:	f063 031f 	orn	r3, r3, #31
            envio_wire[22]=0XE0 | read_eeprom(v1_1);
 8005ea2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
            envio_wire[8]=0XF6;
 8005ea6:	22f6      	movs	r2, #246	; 0xf6
            envio_wire[13]=0XE0 | read_eeprom(ppu3_venta1);
 8005ea8:	f06e 0e1f 	orn	lr, lr, #31
            envio_wire[14]=0XE0 | read_eeprom(ppu2_venta1);
 8005eac:	f060 001f 	orn	r0, r0, #31
            envio_wire[15]=0XE0 | read_eeprom(ppu1_venta1);
 8005eb0:	f061 011f 	orn	r1, r1, #31
            envio_wire[17]=0XE0 | read_eeprom(v6_1);
 8005eb4:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            envio_wire[8]=0XF6;
 8005eb8:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
            envio_wire[21]=0XE0 | read_eeprom(v2_1);
 8005ebc:	7c23      	ldrb	r3, [r4, #16]
            envio_wire[10] = read_eeprom(level_1);
 8005ebe:	f894 2096 	ldrb.w	r2, [r4, #150]	; 0x96
            envio_wire[13]=0XE0 | read_eeprom(ppu3_venta1);
 8005ec2:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
            envio_wire[14]=0XE0 | read_eeprom(ppu2_venta1);
 8005ec6:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
            envio_wire[19]=0XE0 | read_eeprom(v4_1);
 8005eca:	f894 e012 	ldrb.w	lr, [r4, #18]
            envio_wire[15]=0XE0 | read_eeprom(ppu1_venta1);
 8005ece:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
            if(read_eeprom(consola) == 0x04)
 8005ed2:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
            envio_wire[20]=0XE0 | read_eeprom(v3_1);
 8005ed6:	7c61      	ldrb	r1, [r4, #17]
            envio_wire[10] = read_eeprom(level_1);
 8005ed8:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            envio_wire[11] = 0XF7;
 8005edc:	22f7      	movs	r2, #247	; 0xf7
            envio_wire[21]=0XE0 | read_eeprom(v2_1);
 8005ede:	f063 031f 	orn	r3, r3, #31
            envio_wire[11] = 0XF7;
 8005ee2:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
            envio_wire[16]=0XF9;
 8005ee6:	22f9      	movs	r2, #249	; 0xf9
            envio_wire[19]=0XE0 | read_eeprom(v4_1);
 8005ee8:	f06e 0e1f 	orn	lr, lr, #31
            envio_wire[21]=0XE0 | read_eeprom(v2_1);
 8005eec:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
            envio_wire[16]=0XF9;
 8005ef0:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
            envio_wire[5]=0XE0;
 8005ef4:	23e0      	movs	r3, #224	; 0xe0
            envio_wire[12]=0XE0 | read_eeprom(ppu4_venta1);
 8005ef6:	f06c 0c1f 	orn	ip, ip, #31
            envio_wire[20]=0XE0 | read_eeprom(v3_1);
 8005efa:	f061 011f 	orn	r1, r1, #31
            envio_wire[23]=0XFA;
 8005efe:	22fa      	movs	r2, #250	; 0xfa
            if(read_eeprom(consola) == 0x04)
 8005f00:	2804      	cmp	r0, #4
            envio_wire[19]=0XE0 | read_eeprom(v4_1);
 8005f02:	f88d e037 	strb.w	lr, [sp, #55]	; 0x37
            envio_wire[12]=0XE0 | read_eeprom(ppu4_venta1);
 8005f06:	f88d c030 	strb.w	ip, [sp, #48]	; 0x30
            envio_wire[20]=0XE0 | read_eeprom(v3_1);
 8005f0a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
            envio_wire[5]=0XE0;
 8005f0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
            envio_wire[6]=0XE0;
 8005f12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
            envio_wire[7]=0XE0;
 8005f16:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
            envio_wire[9]=0XE0;
 8005f1a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
            envio_wire[23]=0XFA;
 8005f1e:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
                envio_wire[25]=0XE0 | read_eeprom(d6_1);
 8005f22:	f894 e021 	ldrb.w	lr, [r4, #33]	; 0x21
                envio_wire[26]=0XE0 | read_eeprom(d5_1);
 8005f26:	f894 0020 	ldrb.w	r0, [r4, #32]
            if(read_eeprom(consola) == 0x04)
 8005f2a:	f000 8309 	beq.w	8006540 <SD_thread_2.lto_priv.66+0xc90>
                envio_wire[26]=0XE0 | read_eeprom(d4_1);
 8005f2e:	7fe3      	ldrb	r3, [r4, #31]
                envio_wire[27]=0XE0 | read_eeprom(d3_1);
 8005f30:	7fa1      	ldrb	r1, [r4, #30]
                envio_wire[28]=0XE0 | read_eeprom(d2_1);
 8005f32:	7f62      	ldrb	r2, [r4, #29]
                envio_wire[26]=0XE0 | read_eeprom(d4_1);
 8005f34:	f063 031f 	orn	r3, r3, #31
 8005f38:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
                envio_wire[29]=0XE0 | read_eeprom(d1_1);
 8005f3c:	7f23      	ldrb	r3, [r4, #28]
                envio_wire[24]=0XE0 | read_eeprom(d6_1);
 8005f3e:	f06e 0e1f 	orn	lr, lr, #31
                envio_wire[25]=0XE0 | read_eeprom(d5_1);
 8005f42:	f060 001f 	orn	r0, r0, #31
                envio_wire[27]=0XE0 | read_eeprom(d3_1);
 8005f46:	f061 011f 	orn	r1, r1, #31
                envio_wire[28]=0XE0 | read_eeprom(d2_1);
 8005f4a:	f062 021f 	orn	r2, r2, #31
                envio_wire[29]=0XE0 | read_eeprom(d1_1);
 8005f4e:	f063 031f 	orn	r3, r3, #31
                envio_wire[24]=0XE0 | read_eeprom(d6_1);
 8005f52:	f88d e03c 	strb.w	lr, [sp, #60]	; 0x3c
                envio_wire[25]=0XE0 | read_eeprom(d5_1);
 8005f56:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
                envio_wire[27]=0XE0 | read_eeprom(d3_1);
 8005f5a:	f88d 103f 	strb.w	r1, [sp, #63]	; 0x3f
                envio_wire[28]=0XE0 | read_eeprom(d2_1);
 8005f5e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
                envio_wire[29]=0XE0 | read_eeprom(d1_1);
 8005f62:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
            envio_wire[30] = 0XFB;
 8005f66:	23fb      	movs	r3, #251	; 0xfb
 8005f68:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 8005f6c:	a909      	add	r1, sp, #36	; 0x24
 8005f6e:	22ff      	movs	r2, #255	; 0xff
 8005f70:	2300      	movs	r3, #0
 8005f72:	e001      	b.n	8005f78 <SD_thread_2.lto_priv.66+0x6c8>
 8005f74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 8005f78:	f002 020f 	and.w	r2, r2, #15
 8005f7c:	4413      	add	r3, r2
    for(i=0; i<(tamano-2); i++)
 8005f7e:	42b9      	cmp	r1, r7
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 8005f80:	b29b      	uxth	r3, r3
    for(i=0; i<(tamano-2); i++)
 8005f82:	d1f7      	bne.n	8005f74 <SD_thread_2.lto_priv.66+0x6c4>
    valor_sum = (0xFF + 0x01) - valor_sum;
 8005f84:	425b      	negs	r3, r3
    valor_sum = valor_sum & 0X0F;
 8005f86:	f003 030f 	and.w	r3, r3, #15
            envio_wire[31] = (0XE0 | verif_wire(envio_wire,0X21,0x00));
 8005f8a:	f063 031f 	orn	r3, r3, #31
            envio_wire[32] = 0XF0;
 8005f8e:	22f0      	movs	r2, #240	; 0xf0
            Imprimir(&envio_wire,P);
 8005f90:	2121      	movs	r1, #33	; 0x21
 8005f92:	a809      	add	r0, sp, #36	; 0x24
            envio_wire[31] = (0XE0 | verif_wire(envio_wire,0X21,0x00));
 8005f94:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
            envio_wire[32] = 0XF0;
 8005f98:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
            Imprimir(&envio_wire,P);
 8005f9c:	f007 fa98 	bl	800d4d0 <Imprimir>
    uint8_t k=3;

    if(dta_emr3 == 1)
    {
        
        Data_Tx3[0]='4';
 8005fa0:	9a02      	ldr	r2, [sp, #8]
        Data_Tx3[1]=ascii(read_eeprom(pos1));
 8005fa2:	7860      	ldrb	r0, [r4, #1]
        Data_Tx3[0]='4';
 8005fa4:	2334      	movs	r3, #52	; 0x34
 8005fa6:	7013      	strb	r3, [r2, #0]
        Data_Tx3[1]=ascii(read_eeprom(pos1));
 8005fa8:	f009 f9ba 	bl	800f320 <ascii>
 8005fac:	9a02      	ldr	r2, [sp, #8]
        Data_Tx3[2]=':';
 8005fae:	233a      	movs	r3, #58	; 0x3a
 8005fb0:	7093      	strb	r3, [r2, #2]
 8005fb2:	4b1a      	ldr	r3, [pc, #104]	; (800601c <SD_thread_2.lto_priv.66+0x76c>)
        Data_Tx3[1]=ascii(read_eeprom(pos1));
 8005fb4:	7050      	strb	r0, [r2, #1]
 8005fb6:	9302      	str	r3, [sp, #8]
 8005fb8:	f10d 0b23 	add.w	fp, sp, #35	; 0x23
 8005fbc:	469a      	mov	sl, r3
        {
            Data_Tx3[j] = ascii(((DataTx[i] >> 4) & 0X0F));
            j++;
            Data_Tx3[j] = ascii((DataTx[i] & 0X0F));
            j++;
            Data_Tx3[j] = ',';
 8005fbe:	f04f 082c 	mov.w	r8, #44	; 0x2c
            Data_Tx3[j] = ascii(((DataTx[i] >> 4) & 0X0F));
 8005fc2:	f81b 9f01 	ldrb.w	r9, [fp, #1]!
 8005fc6:	ea4f 1019 	mov.w	r0, r9, lsr #4
 8005fca:	f009 f9a9 	bl	800f320 <ascii>
 8005fce:	f88a 0003 	strb.w	r0, [sl, #3]
            Data_Tx3[j] = ascii((DataTx[i] & 0X0F));
 8005fd2:	f009 000f 	and.w	r0, r9, #15
 8005fd6:	f009 f9a3 	bl	800f320 <ascii>
        for(i=0;i<Tx;i++)
 8005fda:	ab11      	add	r3, sp, #68	; 0x44
 8005fdc:	455b      	cmp	r3, fp
            Data_Tx3[j] = ',';
 8005fde:	f88a 8005 	strb.w	r8, [sl, #5]
            Data_Tx3[j] = ascii((DataTx[i] & 0X0F));
 8005fe2:	f88a 0004 	strb.w	r0, [sl, #4]
 8005fe6:	f10a 0a03 	add.w	sl, sl, #3
        for(i=0;i<Tx;i++)
 8005fea:	d1ea      	bne.n	8005fc2 <SD_thread_2.lto_priv.66+0x712>
            j++;
        }
        Data_Tx3[j]=0x00; 
 8005fec:	9a02      	ldr	r2, [sp, #8]
 8005fee:	2300      	movs	r3, #0
            Status_1(0x06);
 8005ff0:	2006      	movs	r0, #6
 8005ff2:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
 8005ff6:	f007 fc03 	bl	800d800 <Status_1>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 8006000:	e46e      	b.n	80058e0 <SD_thread_2.lto_priv.66+0x30>
            if(DATO == read_eeprom(pos1) || DATO == read_eeprom(pos2) ||  DATO == (0x20 | read_eeprom(pos1))) return; 
 8006002:	2bf0      	cmp	r3, #240	; 0xf0
 8006004:	f43f ac6c 	beq.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
 8006008:	78e2      	ldrb	r2, [r4, #3]
 800600a:	4282      	cmp	r2, r0
 800600c:	f43f ac68 	beq.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
 8006010:	f043 0220 	orr.w	r2, r3, #32
 8006014:	e544      	b.n	8005aa0 <SD_thread_2.lto_priv.66+0x1f0>
 8006016:	bf00      	nop
 8006018:	2000162c 	.word	0x2000162c
 800601c:	20000b58 	.word	0x20000b58
 8006020:	20000923 	.word	0x20000923
 8006024:	2209      	movs	r2, #9
 8006026:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 800602a:	2300      	movs	r3, #0
 800602c:	70a2      	strb	r2, [r4, #2]
 800602e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 8006032:	e60b      	b.n	8005c4c <SD_thread_2.lto_priv.66+0x39c>
        else if ((recibo_wire[0] == (0X60 | read_eeprom(pos1)) && read_eeprom(estado1) == 0x09))
 8006034:	7823      	ldrb	r3, [r4, #0]
 8006036:	2b09      	cmp	r3, #9
 8006038:	f47f ac6c 	bne.w	8005914 <SD_thread_2.lto_priv.66+0x64>
            if(read_eeprom(consola) == 0x04)
 800603c:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
                envio_wire[1] = (0xE0 | read_eeprom(real_din16));
 8006040:	f894 e064 	ldrb.w	lr, [r4, #100]	; 0x64
                envio_wire[2] = (0xE0 | read_eeprom(real_din15));
 8006044:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
            if(read_eeprom(consola) == 0x04)
 8006048:	2b04      	cmp	r3, #4
 800604a:	f000 84d5 	beq.w	80069f8 <SD_thread_2.lto_priv.66+0x1148>
                envio_wire[2] = (0xE0 | read_eeprom(real_din14));
 800604e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
                envio_wire[3] = (0xE0 | read_eeprom(real_din13));
 8006052:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
                envio_wire[4] = (0xE0 | read_eeprom(real_din12));
 8006056:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
                envio_wire[2] = (0xE0 | read_eeprom(real_din14));
 800605a:	f063 031f 	orn	r3, r3, #31
 800605e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                envio_wire[5] = (0xE0 | read_eeprom(real_din11));
 8006062:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
                envio_wire[0] = (0xE0 | read_eeprom(real_din16));
 8006066:	f06e 0e1f 	orn	lr, lr, #31
                envio_wire[1] = (0xE0 | read_eeprom(real_din15));
 800606a:	f060 001f 	orn	r0, r0, #31
                envio_wire[3] = (0xE0 | read_eeprom(real_din13));
 800606e:	f061 011f 	orn	r1, r1, #31
                envio_wire[4] = (0xE0 | read_eeprom(real_din12));
 8006072:	f062 021f 	orn	r2, r2, #31
                envio_wire[5] = (0xE0 | read_eeprom(real_din11));
 8006076:	f063 031f 	orn	r3, r3, #31
                envio_wire[0] = (0xE0 | read_eeprom(real_din16));
 800607a:	f88d e024 	strb.w	lr, [sp, #36]	; 0x24
                envio_wire[1] = (0xE0 | read_eeprom(real_din15));
 800607e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
                envio_wire[3] = (0xE0 | read_eeprom(real_din13));
 8006082:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                envio_wire[4] = (0xE0 | read_eeprom(real_din12));
 8006086:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                envio_wire[5] = (0xE0 | read_eeprom(real_din11));
 800608a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
            Imprimir(&envio_wire,6); 
 800608e:	2106      	movs	r1, #6
 8006090:	a809      	add	r0, sp, #36	; 0x24
 8006092:	f007 fa1d 	bl	800d4d0 <Imprimir>
 8006096:	e423      	b.n	80058e0 <SD_thread_2.lto_priv.66+0x30>
 8006098:	2209      	movs	r2, #9
 800609a:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 800609e:	230a      	movs	r3, #10
 80060a0:	70a2      	strb	r2, [r4, #2]
 80060a2:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 80060a6:	e41b      	b.n	80058e0 <SD_thread_2.lto_priv.66+0x30>
            if(read_eeprom(estado2) == 0X0B) 
 80060a8:	78a3      	ldrb	r3, [r4, #2]
 80060aa:	2b0b      	cmp	r3, #11
 80060ac:	f000 83d5 	beq.w	800685a <SD_thread_2.lto_priv.66+0xfaa>
            envio_wire[1]=0XF3;
 80060b0:	23f3      	movs	r3, #243	; 0xf3
            envio_wire[2]=0XF8;
 80060b2:	22f8      	movs	r2, #248	; 0xf8
            envio_wire[0]=0XFF;
 80060b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            envio_wire[1]=0XF3;
 80060b8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            envio_wire[3]=0XEB;
 80060bc:	23eb      	movs	r3, #235	; 0xeb
            envio_wire[0]=0XFF;
 80060be:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
            envio_wire[2]=0XF8;
 80060c2:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
            envio_wire[3]=0XEB;
 80060c6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            if(read_eeprom(pos2) == 0) 
 80060ca:	2800      	cmp	r0, #0
 80060cc:	f040 836a 	bne.w	80067a4 <SD_thread_2.lto_priv.66+0xef4>
                envio_wire[4]=0XEF; 
 80060d0:	23ef      	movs	r3, #239	; 0xef
 80060d2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            envio_wire[18]=0XE0 | read_eeprom(v5_2);
 80060d6:	7e63      	ldrb	r3, [r4, #25]
            envio_wire[17]=0XE0 | read_eeprom(v6_2);
 80060d8:	7ea2      	ldrb	r2, [r4, #26]
            envio_wire[13]=0XE0 | read_eeprom(ppu3_venta2);
 80060da:	f894 c093 	ldrb.w	ip, [r4, #147]	; 0x93
            envio_wire[14]=0XE0 | read_eeprom(ppu2_venta2);
 80060de:	f894 e092 	ldrb.w	lr, [r4, #146]	; 0x92
            envio_wire[15]=0XE0 | read_eeprom(ppu1_venta2);
 80060e2:	f894 1091 	ldrb.w	r1, [r4, #145]	; 0x91
            envio_wire[12]=0XE0 | read_eeprom(ppu4_venta2);
 80060e6:	f894 8094 	ldrb.w	r8, [r4, #148]	; 0x94
            envio_wire[18]=0XE0 | read_eeprom(v5_2);
 80060ea:	f063 031f 	orn	r3, r3, #31
 80060ee:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            envio_wire[22]=0XE0 | read_eeprom(v1_2);
 80060f2:	7d63      	ldrb	r3, [r4, #21]
 80060f4:	f063 031f 	orn	r3, r3, #31
            envio_wire[17]=0XE0 | read_eeprom(v6_2);
 80060f8:	f062 021f 	orn	r2, r2, #31
            envio_wire[22]=0XE0 | read_eeprom(v1_2);
 80060fc:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
            envio_wire[8]=0XF6;
 8006100:	23f6      	movs	r3, #246	; 0xf6
            envio_wire[13]=0XE0 | read_eeprom(ppu3_venta2);
 8006102:	f06c 0c1f 	orn	ip, ip, #31
            envio_wire[14]=0XE0 | read_eeprom(ppu2_venta2);
 8006106:	f06e 0e1f 	orn	lr, lr, #31
            envio_wire[15]=0XE0 | read_eeprom(ppu1_venta2);
 800610a:	f061 011f 	orn	r1, r1, #31
            envio_wire[17]=0XE0 | read_eeprom(v6_2);
 800610e:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
            envio_wire[8]=0XF6;
 8006112:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
            envio_wire[21]=0XE0 | read_eeprom(v2_2);
 8006116:	7da2      	ldrb	r2, [r4, #22]
            envio_wire[10]=read_eeprom(level_2);
 8006118:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
            envio_wire[13]=0XE0 | read_eeprom(ppu3_venta2);
 800611c:	f88d c031 	strb.w	ip, [sp, #49]	; 0x31
            envio_wire[14]=0XE0 | read_eeprom(ppu2_venta2);
 8006120:	f88d e032 	strb.w	lr, [sp, #50]	; 0x32
            envio_wire[15]=0XE0 | read_eeprom(ppu1_venta2);
 8006124:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
            envio_wire[19]=0XE0 | read_eeprom(v4_2);
 8006128:	f894 e018 	ldrb.w	lr, [r4, #24]
            envio_wire[20]=0XE0 | read_eeprom(v3_2);
 800612c:	7de1      	ldrb	r1, [r4, #23]
            if(read_eeprom(consola) == 0x04)
 800612e:	f894 c059 	ldrb.w	ip, [r4, #89]	; 0x59
            envio_wire[10]=read_eeprom(level_2);
 8006132:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
            envio_wire[11]=0XF7;
 8006136:	23f7      	movs	r3, #247	; 0xf7
            envio_wire[21]=0XE0 | read_eeprom(v2_2);
 8006138:	f062 021f 	orn	r2, r2, #31
            envio_wire[11]=0XF7;
 800613c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
            envio_wire[16]=0XF9;
 8006140:	23f9      	movs	r3, #249	; 0xf9
            envio_wire[12]=0XE0 | read_eeprom(ppu4_venta2);
 8006142:	f068 081f 	orn	r8, r8, #31
            envio_wire[19]=0XE0 | read_eeprom(v4_2);
 8006146:	f06e 0e1f 	orn	lr, lr, #31
            envio_wire[20]=0XE0 | read_eeprom(v3_2);
 800614a:	f061 011f 	orn	r1, r1, #31
            envio_wire[21]=0XE0 | read_eeprom(v2_2);
 800614e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
            envio_wire[16]=0XF9;
 8006152:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            envio_wire[5]=0XE0;
 8006156:	22e0      	movs	r2, #224	; 0xe0
            envio_wire[23]=0XFA;
 8006158:	23fa      	movs	r3, #250	; 0xfa
            if(read_eeprom(consola) == 0x04)
 800615a:	f1bc 0f04 	cmp.w	ip, #4
            envio_wire[12]=0XE0 | read_eeprom(ppu4_venta2);
 800615e:	f88d 8030 	strb.w	r8, [sp, #48]	; 0x30
            envio_wire[19]=0XE0 | read_eeprom(v4_2);
 8006162:	f88d e037 	strb.w	lr, [sp, #55]	; 0x37
            envio_wire[20]=0XE0 | read_eeprom(v3_2);
 8006166:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
            envio_wire[5]=0XE0;
 800616a:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
            envio_wire[6]=0XE0;
 800616e:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
            envio_wire[7]=0XE0;
 8006172:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
            envio_wire[9]=0XE0;
 8006176:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
            envio_wire[23]=0XFA;
 800617a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
            if(read_eeprom(consola) == 0x04)
 800617e:	f000 8317 	beq.w	80067b0 <SD_thread_2.lto_priv.66+0xf00>
                envio_wire[26]=0XE0 | read_eeprom(d4_2);
 8006182:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
                envio_wire[24]=0XE0 | read_eeprom(d6_2);
 8006186:	f894 c027 	ldrb.w	ip, [r4, #39]	; 0x27
                envio_wire[25]=0XE0 | read_eeprom(d5_2);
 800618a:	f894 e026 	ldrb.w	lr, [r4, #38]	; 0x26
                envio_wire[27]=0XE0 | read_eeprom(d3_2);
 800618e:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                envio_wire[28]=0XE0 | read_eeprom(d2_2);
 8006192:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
                envio_wire[26]=0XE0 | read_eeprom(d4_2);
 8006196:	f063 031f 	orn	r3, r3, #31
 800619a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
                envio_wire[29]=0XE0 | read_eeprom(d1_2);
 800619e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
                envio_wire[24]=0XE0 | read_eeprom(d6_2);
 80061a2:	f06c 0c1f 	orn	ip, ip, #31
                envio_wire[25]=0XE0 | read_eeprom(d5_2);
 80061a6:	f06e 0e1f 	orn	lr, lr, #31
                envio_wire[27]=0XE0 | read_eeprom(d3_2);
 80061aa:	f061 011f 	orn	r1, r1, #31
                envio_wire[28]=0XE0 | read_eeprom(d2_2);
 80061ae:	f062 021f 	orn	r2, r2, #31
                envio_wire[29]=0XE0 | read_eeprom(d1_2);
 80061b2:	f063 031f 	orn	r3, r3, #31
                envio_wire[24]=0XE0 | read_eeprom(d6_2);
 80061b6:	f88d c03c 	strb.w	ip, [sp, #60]	; 0x3c
                envio_wire[25]=0XE0 | read_eeprom(d5_2);
 80061ba:	f88d e03d 	strb.w	lr, [sp, #61]	; 0x3d
                envio_wire[27]=0XE0 | read_eeprom(d3_2);
 80061be:	f88d 103f 	strb.w	r1, [sp, #63]	; 0x3f
                envio_wire[28]=0XE0 | read_eeprom(d2_2);
 80061c2:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
                envio_wire[29]=0XE0 | read_eeprom(d1_2);
 80061c6:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
            envio_wire[30] = 0XFB;
 80061ca:	23fb      	movs	r3, #251	; 0xfb
 80061cc:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 80061d0:	a909      	add	r1, sp, #36	; 0x24
 80061d2:	22ff      	movs	r2, #255	; 0xff
 80061d4:	2300      	movs	r3, #0
 80061d6:	e001      	b.n	80061dc <SD_thread_2.lto_priv.66+0x92c>
 80061d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 80061dc:	f002 020f 	and.w	r2, r2, #15
 80061e0:	4413      	add	r3, r2
    for(i=0; i<(tamano-2); i++)
 80061e2:	428f      	cmp	r7, r1
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 80061e4:	b29b      	uxth	r3, r3
    for(i=0; i<(tamano-2); i++)
 80061e6:	d1f7      	bne.n	80061d8 <SD_thread_2.lto_priv.66+0x928>
    valor_sum = (0xFF + 0x01) - valor_sum;
 80061e8:	425b      	negs	r3, r3
    valor_sum = valor_sum & 0X0F;
 80061ea:	f003 030f 	and.w	r3, r3, #15
            envio_wire[31] = (0XE0 | verif_wire(envio_wire,0X21,0x00));
 80061ee:	f063 031f 	orn	r3, r3, #31
 80061f2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    uint8_t k=3;

    if(dta_emr3 == 1)
    {
        
        Data_Tx4[0]='4';
 80061f6:	9b03      	ldr	r3, [sp, #12]
            envio_wire[32] = 0XF0;
 80061f8:	21f0      	movs	r1, #240	; 0xf0
 80061fa:	2234      	movs	r2, #52	; 0x34
 80061fc:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
 8006200:	701a      	strb	r2, [r3, #0]
        Data_Tx4[1]=ascii(read_eeprom(pos2));
 8006202:	f009 f88d 	bl	800f320 <ascii>
 8006206:	9903      	ldr	r1, [sp, #12]
        Data_Tx4[2]=':';
 8006208:	233a      	movs	r3, #58	; 0x3a
 800620a:	708b      	strb	r3, [r1, #2]
 800620c:	4bd9      	ldr	r3, [pc, #868]	; (8006574 <SD_thread_2.lto_priv.66+0xcc4>)
        Data_Tx4[1]=ascii(read_eeprom(pos2));
 800620e:	7048      	strb	r0, [r1, #1]
 8006210:	9303      	str	r3, [sp, #12]
 8006212:	f10d 0b23 	add.w	fp, sp, #35	; 0x23
 8006216:	469a      	mov	sl, r3
        {
            Data_Tx4[j] = ascii(((DataTx[i] >> 4) & 0X0F));
            j++;
            Data_Tx4[j] = ascii((DataTx[i] & 0X0F));
            j++;
            Data_Tx4[j] = ',';
 8006218:	f04f 082c 	mov.w	r8, #44	; 0x2c
            Data_Tx4[j] = ascii(((DataTx[i] >> 4) & 0X0F));
 800621c:	f81b 9f01 	ldrb.w	r9, [fp, #1]!
 8006220:	ea4f 1019 	mov.w	r0, r9, lsr #4
 8006224:	f009 f87c 	bl	800f320 <ascii>
 8006228:	f88a 0003 	strb.w	r0, [sl, #3]
            Data_Tx4[j] = ascii((DataTx[i] & 0X0F));
 800622c:	f009 000f 	and.w	r0, r9, #15
 8006230:	f009 f876 	bl	800f320 <ascii>
        for(i=0;i<Tx;i++)
 8006234:	ab11      	add	r3, sp, #68	; 0x44
 8006236:	455b      	cmp	r3, fp
            Data_Tx4[j] = ',';
 8006238:	f88a 8005 	strb.w	r8, [sl, #5]
            Data_Tx4[j] = ascii((DataTx[i] & 0X0F));
 800623c:	f88a 0004 	strb.w	r0, [sl, #4]
 8006240:	f10a 0a03 	add.w	sl, sl, #3
        for(i=0;i<Tx;i++)
 8006244:	d1ea      	bne.n	800621c <SD_thread_2.lto_priv.66+0x96c>
            j++;
        }
        Data_Tx4[j]=0x00;       
 8006246:	9a03      	ldr	r2, [sp, #12]
 8006248:	2300      	movs	r3, #0
            Imprimir(&envio_wire,P);
 800624a:	2121      	movs	r1, #33	; 0x21
 800624c:	a809      	add	r0, sp, #36	; 0x24
 800624e:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
 8006252:	f007 f93d 	bl	800d4d0 <Imprimir>
            Status_2(0x06);
 8006256:	2006      	movs	r0, #6
 8006258:	f007 fac2 	bl	800d7e0 <Status_2>
 800625c:	2301      	movs	r3, #1
 800625e:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 8006262:	f7ff bb3d 	b.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
            envio_wire[5]=0XE0 | read_eeprom(tv1_7);
 8006266:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
            envio_wire[6]=0XE0 | read_eeprom(tv1_6);
 800626a:	f894 e03b 	ldrb.w	lr, [r4, #59]	; 0x3b
            envio_wire[7]=0XE0 | read_eeprom(tv1_5);
 800626e:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
            envio_wire[8]=0XE0 | read_eeprom(tv1_4);
 8006272:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
            envio_wire[9]=0XE0 | read_eeprom(tv1_3);
 8006276:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
            envio_wire[4]=0XE0 | read_eeprom(tv1_8);
 800627a:	f894 a03d 	ldrb.w	sl, [r4, #61]	; 0x3d
            envio_wire[10]=0XE0 | read_eeprom(tv1_2);
 800627e:	f894 b037 	ldrb.w	fp, [r4, #55]	; 0x37
            envio_wire[5]=0XE0 | read_eeprom(tv1_7);
 8006282:	f06c 0c1f 	orn	ip, ip, #31
 8006286:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
            envio_wire[13]=0XE0 | read_eeprom(td1_8);
 800628a:	f894 c04d 	ldrb.w	ip, [r4, #77]	; 0x4d
            envio_wire[6]=0XE0 | read_eeprom(tv1_6);
 800628e:	f06e 0e1f 	orn	lr, lr, #31
            envio_wire[7]=0XE0 | read_eeprom(tv1_5);
 8006292:	f061 011f 	orn	r1, r1, #31
            envio_wire[8]=0XE0 | read_eeprom(tv1_4);
 8006296:	f062 021f 	orn	r2, r2, #31
            envio_wire[9]=0XE0 | read_eeprom(tv1_3);
 800629a:	f063 031f 	orn	r3, r3, #31
            envio_wire[4]=0XE0 | read_eeprom(tv1_8);
 800629e:	f06a 0a1f 	orn	sl, sl, #31
            envio_wire[6]=0XE0 | read_eeprom(tv1_6);
 80062a2:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
            envio_wire[7]=0XE0 | read_eeprom(tv1_5);
 80062a6:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
            envio_wire[8]=0XE0 | read_eeprom(tv1_4);
 80062aa:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
            envio_wire[14]=0XE0 | read_eeprom(td1_7);
 80062ae:	f894 e04c 	ldrb.w	lr, [r4, #76]	; 0x4c
            envio_wire[9]=0XE0 | read_eeprom(tv1_3);
 80062b2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
            envio_wire[15]=0XE0 | read_eeprom(td1_6);
 80062b6:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
            envio_wire[16]=0XE0 | read_eeprom(td1_5);
 80062ba:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
            envio_wire[17]=0XE0 | read_eeprom(td1_4);
 80062be:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
            envio_wire[4]=0XE0 | read_eeprom(tv1_8);
 80062c2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
            envio_wire[13]=0XE0 | read_eeprom(td1_8);
 80062c6:	f06c 0c1f 	orn	ip, ip, #31
            envio_wire[11]=0XE0 | read_eeprom(tv1_1);
 80062ca:	f894 a036 	ldrb.w	sl, [r4, #54]	; 0x36
            envio_wire[13]=0XE0 | read_eeprom(td1_8);
 80062ce:	f88d c031 	strb.w	ip, [sp, #49]	; 0x31
            envio_wire[18]=0XE0 | read_eeprom(td1_3);
 80062d2:	f894 c048 	ldrb.w	ip, [r4, #72]	; 0x48
            envio_wire[14]=0XE0 | read_eeprom(td1_7);
 80062d6:	f06e 0e1f 	orn	lr, lr, #31
            envio_wire[15]=0XE0 | read_eeprom(td1_6);
 80062da:	f061 011f 	orn	r1, r1, #31
            envio_wire[16]=0XE0 | read_eeprom(td1_5);
 80062de:	f062 021f 	orn	r2, r2, #31
            envio_wire[17]=0XE0 | read_eeprom(td1_4);
 80062e2:	f063 031f 	orn	r3, r3, #31
            envio_wire[10]=0XE0 | read_eeprom(tv1_2);
 80062e6:	f06b 0b1f 	orn	fp, fp, #31
            envio_wire[11]=0XE0 | read_eeprom(tv1_1);
 80062ea:	f06a 0a1f 	orn	sl, sl, #31
            envio_wire[14]=0XE0 | read_eeprom(td1_7);
 80062ee:	f88d e032 	strb.w	lr, [sp, #50]	; 0x32
            envio_wire[15]=0XE0 | read_eeprom(td1_6);
 80062f2:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
            envio_wire[18]=0XE0 | read_eeprom(td1_3);
 80062f6:	f06c 0e1f 	orn	lr, ip, #31
            envio_wire[1]=0XF6;
 80062fa:	21f6      	movs	r1, #246	; 0xf6
            envio_wire[16]=0XE0 | read_eeprom(td1_5);
 80062fc:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
            envio_wire[17]=0XE0 | read_eeprom(td1_4);
 8006300:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            envio_wire[2]=0XE0;
 8006304:	22e0      	movs	r2, #224	; 0xe0
            envio_wire[3]=0XF9;
 8006306:	f04f 0cf9 	mov.w	ip, #249	; 0xf9
            envio_wire[12]=0XFA;
 800630a:	23fa      	movs	r3, #250	; 0xfa
            envio_wire[0]=0XFF;
 800630c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
            envio_wire[10]=0XE0 | read_eeprom(tv1_2);
 8006310:	f88d b02e 	strb.w	fp, [sp, #46]	; 0x2e
            envio_wire[11]=0XE0 | read_eeprom(tv1_1);
 8006314:	f88d a02f 	strb.w	sl, [sp, #47]	; 0x2f
            envio_wire[1]=0XF6;
 8006318:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
            envio_wire[2]=0XE0;
 800631c:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
            envio_wire[3]=0XF9;
 8006320:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
            envio_wire[12]=0XFA;
 8006324:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            envio_wire[0]=0XFF;
 8006328:	f88d 9024 	strb.w	r9, [sp, #36]	; 0x24
            envio_wire[18]=0XE0 | read_eeprom(td1_3);
 800632c:	f88d e036 	strb.w	lr, [sp, #54]	; 0x36
            envio_wire[23]=0XE0 | read_eeprom(ppu3_level1);
 8006330:	f894 e007 	ldrb.w	lr, [r4, #7]
            envio_wire[22]=0XE0 | read_eeprom(ppu4_level1);
 8006334:	f894 c008 	ldrb.w	ip, [r4, #8]
            envio_wire[24]=0XE0 | read_eeprom(ppu2_level1);
 8006338:	79a1      	ldrb	r1, [r4, #6]
            envio_wire[20]=0XE0 | read_eeprom(td1_1);
 800633a:	f894 a046 	ldrb.w	sl, [r4, #70]	; 0x46
            envio_wire[25]=0XE0 | read_eeprom(ppu1_level1);
 800633e:	7962      	ldrb	r2, [r4, #5]
            envio_wire[27]=0XE0 | read_eeprom(ppu4_level2);
 8006340:	7b23      	ldrb	r3, [r4, #12]
            envio_wire[19]=0XE0 | read_eeprom(td1_2);
 8006342:	f894 b047 	ldrb.w	fp, [r4, #71]	; 0x47
            envio_wire[23]=0XE0 | read_eeprom(ppu3_level1);
 8006346:	f06e 0e1f 	orn	lr, lr, #31
            envio_wire[22]=0XE0 | read_eeprom(ppu4_level1);
 800634a:	f06c 0c1f 	orn	ip, ip, #31
            envio_wire[24]=0XE0 | read_eeprom(ppu2_level1);
 800634e:	f061 011f 	orn	r1, r1, #31
            envio_wire[23]=0XE0 | read_eeprom(ppu3_level1);
 8006352:	f88d e03b 	strb.w	lr, [sp, #59]	; 0x3b
            envio_wire[29]=0XE0 | read_eeprom(ppu2_level2);
 8006356:	f894 e00a 	ldrb.w	lr, [r4, #10]
            envio_wire[22]=0XE0 | read_eeprom(ppu4_level1);
 800635a:	f88d c03a 	strb.w	ip, [sp, #58]	; 0x3a
            envio_wire[24]=0XE0 | read_eeprom(ppu2_level1);
 800635e:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
            envio_wire[28]=0XE0 | read_eeprom(ppu3_level2);
 8006362:	f894 c00b 	ldrb.w	ip, [r4, #11]
            envio_wire[30]=0XE0 | read_eeprom(ppu1_level2);
 8006366:	7a61      	ldrb	r1, [r4, #9]
            envio_wire[20]=0XE0 | read_eeprom(td1_1);
 8006368:	f06a 0a1f 	orn	sl, sl, #31
            envio_wire[25]=0XE0 | read_eeprom(ppu1_level1);
 800636c:	f062 021f 	orn	r2, r2, #31
            envio_wire[27]=0XE0 | read_eeprom(ppu4_level2);
 8006370:	f063 031f 	orn	r3, r3, #31
            envio_wire[29]=0XE0 | read_eeprom(ppu2_level2);
 8006374:	f06e 0e1f 	orn	lr, lr, #31
            envio_wire[19]=0XE0 | read_eeprom(td1_2);
 8006378:	f06b 0b1f 	orn	fp, fp, #31
            envio_wire[20]=0XE0 | read_eeprom(td1_1);
 800637c:	f88d a038 	strb.w	sl, [sp, #56]	; 0x38
            envio_wire[25]=0XE0 | read_eeprom(ppu1_level1);
 8006380:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
            envio_wire[28]=0XE0 | read_eeprom(ppu3_level2);
 8006384:	f06c 0c1f 	orn	ip, ip, #31
            envio_wire[26]=0XF5;
 8006388:	22f5      	movs	r2, #245	; 0xf5
            envio_wire[30]=0XE0 | read_eeprom(ppu1_level2);
 800638a:	f061 011f 	orn	r1, r1, #31
            envio_wire[27]=0XE0 | read_eeprom(ppu4_level2);
 800638e:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
            envio_wire[29]=0XE0 | read_eeprom(ppu2_level2);
 8006392:	f88d e041 	strb.w	lr, [sp, #65]	; 0x41
            envio_wire[21]=0XF4;
 8006396:	23f4      	movs	r3, #244	; 0xf4
            envio_wire[31] = 0XFB;
 8006398:	f04f 0efb 	mov.w	lr, #251	; 0xfb
 800639c:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
            envio_wire[21]=0XF4;
 80063a0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
            envio_wire[26]=0XF5;
 80063a4:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
            envio_wire[19]=0XE0 | read_eeprom(td1_2);
 80063a8:	f88d b037 	strb.w	fp, [sp, #55]	; 0x37
            envio_wire[28]=0XE0 | read_eeprom(ppu3_level2);
 80063ac:	f88d c040 	strb.w	ip, [sp, #64]	; 0x40
            envio_wire[30]=0XE0 | read_eeprom(ppu1_level2);
 80063b0:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
            envio_wire[31] = 0XFB;
 80063b4:	f88d e043 	strb.w	lr, [sp, #67]	; 0x43
 80063b8:	4652      	mov	r2, sl
 80063ba:	23ff      	movs	r3, #255	; 0xff
 80063bc:	e001      	b.n	80063c2 <SD_thread_2.lto_priv.66+0xb12>
 80063be:	f812 3f01 	ldrb.w	r3, [r2, #1]!
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	4498      	add	r8, r3
    for(i=0; i<(tamano-2); i++)
 80063c8:	f10d 0343 	add.w	r3, sp, #67	; 0x43
 80063cc:	4293      	cmp	r3, r2
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 80063ce:	fa1f f888 	uxth.w	r8, r8
    for(i=0; i<(tamano-2); i++)
 80063d2:	d1f4      	bne.n	80063be <SD_thread_2.lto_priv.66+0xb0e>
    valor_sum = (0xFF + 0x01) - valor_sum;
 80063d4:	f1c8 0300 	rsb	r3, r8, #0
    valor_sum = valor_sum & 0X0F;
 80063d8:	f003 030f 	and.w	r3, r3, #15
            envio_wire[32] = (0XE0 | verif_wire(envio_wire,0X22,0x00));
 80063dc:	f063 031f 	orn	r3, r3, #31
 80063e0:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        Data_Rx3[0]='5';
 80063e4:	9b04      	ldr	r3, [sp, #16]
            envio_wire[33] = 0XF0;
 80063e6:	21f0      	movs	r1, #240	; 0xf0
 80063e8:	2235      	movs	r2, #53	; 0x35
 80063ea:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 80063ee:	701a      	strb	r2, [r3, #0]
        Data_Rx3[1]=ascii(read_eeprom(pos1));
 80063f0:	f008 ff96 	bl	800f320 <ascii>
 80063f4:	9904      	ldr	r1, [sp, #16]
        Data_Rx3[2]=':';
 80063f6:	233a      	movs	r3, #58	; 0x3a
 80063f8:	708b      	strb	r3, [r1, #2]
 80063fa:	4b5f      	ldr	r3, [pc, #380]	; (8006578 <SD_thread_2.lto_priv.66+0xcc8>)
        Data_Rx3[1]=ascii(read_eeprom(pos1));
 80063fc:	7048      	strb	r0, [r1, #1]
 80063fe:	9304      	str	r3, [sp, #16]
        Data_Rx3[2]=':';
 8006400:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8006404:	469b      	mov	fp, r3
            Data_Rx3[k] = ',';
 8006406:	f04f 082c 	mov.w	r8, #44	; 0x2c
 800640a:	e001      	b.n	8006410 <SD_thread_2.lto_priv.66+0xb60>
 800640c:	f81a 9f01 	ldrb.w	r9, [sl, #1]!
            Data_Rx3[k] = ascii(((DataTx[i] >> 4) & 0X0F));
 8006410:	ea4f 1019 	mov.w	r0, r9, lsr #4
 8006414:	f008 ff84 	bl	800f320 <ascii>
 8006418:	f88b 0003 	strb.w	r0, [fp, #3]
            Data_Rx3[k] = ascii((DataTx[i] & 0X0F));
 800641c:	f009 000f 	and.w	r0, r9, #15
 8006420:	f008 ff7e 	bl	800f320 <ascii>
        for(i=0;i<Tx;i++)
 8006424:	4b55      	ldr	r3, [pc, #340]	; (800657c <SD_thread_2.lto_priv.66+0xccc>)
            Data_Rx3[k] = ',';
 8006426:	f88b 8005 	strb.w	r8, [fp, #5]
            Data_Rx3[k] = ascii((DataTx[i] & 0X0F));
 800642a:	f88b 0004 	strb.w	r0, [fp, #4]
 800642e:	f10b 0b03 	add.w	fp, fp, #3
        for(i=0;i<Tx;i++)
 8006432:	455b      	cmp	r3, fp
 8006434:	d1ea      	bne.n	800640c <SD_thread_2.lto_priv.66+0xb5c>
        Data_Rx3[k]=0x00;        
 8006436:	9804      	ldr	r0, [sp, #16]
 8006438:	2200      	movs	r2, #0
 800643a:	2301      	movs	r3, #1
 800643c:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
            Imprimir(&envio_wire,P);
 8006440:	2122      	movs	r1, #34	; 0x22
 8006442:	a809      	add	r0, sp, #36	; 0x24
 8006444:	f884 308b 	strb.w	r3, [r4, #139]	; 0x8b
 8006448:	f007 f842 	bl	800d4d0 <Imprimir>
 800644c:	f7ff ba48 	b.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
 8006450:	2208      	movs	r2, #8
 8006452:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 8006456:	f884 8087 	strb.w	r8, [r4, #135]	; 0x87
 800645a:	7022      	strb	r2, [r4, #0]
 800645c:	f7ff badc 	b.w	8005a18 <SD_thread_2.lto_priv.66+0x168>
            if(DATO == read_eeprom(pos1) || DATO == read_eeprom(pos2) ||  DATO == (0x20 | read_eeprom(pos2))) return; 
 8006460:	2bf0      	cmp	r3, #240	; 0xf0
 8006462:	f43f aa3d 	beq.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
 8006466:	78e2      	ldrb	r2, [r4, #3]
 8006468:	4282      	cmp	r2, r0
 800646a:	f43f aa39 	beq.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
 800646e:	f042 0220 	orr.w	r2, r2, #32
 8006472:	e434      	b.n	8005cde <SD_thread_2.lto_priv.66+0x42e>
        else if ((recibo_wire[0] == (0X60 | read_eeprom(pos2)) && read_eeprom(estado2) == 0x09))
 8006474:	78a3      	ldrb	r3, [r4, #2]
 8006476:	2b09      	cmp	r3, #9
 8006478:	f47f aa32 	bne.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
            if(read_eeprom(consola) == 0x04)
 800647c:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
                envio_wire[1] = (0xE0 | read_eeprom(real_din26));
 8006480:	f894 e06a 	ldrb.w	lr, [r4, #106]	; 0x6a
                envio_wire[2] = (0xE0 | read_eeprom(real_din25));
 8006484:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
            if(read_eeprom(consola) == 0x04)
 8006488:	2b04      	cmp	r3, #4
 800648a:	f000 82dd 	beq.w	8006a48 <SD_thread_2.lto_priv.66+0x1198>
                envio_wire[2] = (0xE0 | read_eeprom(real_din24));
 800648e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
                envio_wire[3] = (0xE0 | read_eeprom(real_din23));
 8006492:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
                envio_wire[4] = (0xE0 | read_eeprom(real_din22));
 8006496:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
                envio_wire[2] = (0xE0 | read_eeprom(real_din24));
 800649a:	f063 031f 	orn	r3, r3, #31
 800649e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                envio_wire[5] = (0xE0 | read_eeprom(real_din21));
 80064a2:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
                envio_wire[0] = (0xE0 | read_eeprom(real_din26));
 80064a6:	f06e 0e1f 	orn	lr, lr, #31
                envio_wire[1] = (0xE0 | read_eeprom(real_din25));
 80064aa:	f060 001f 	orn	r0, r0, #31
                envio_wire[3] = (0xE0 | read_eeprom(real_din23));
 80064ae:	f061 011f 	orn	r1, r1, #31
                envio_wire[4] = (0xE0 | read_eeprom(real_din22));
 80064b2:	f062 021f 	orn	r2, r2, #31
                envio_wire[5] = (0xE0 | read_eeprom(real_din21));
 80064b6:	f063 031f 	orn	r3, r3, #31
                envio_wire[0] = (0xE0 | read_eeprom(real_din26));
 80064ba:	f88d e024 	strb.w	lr, [sp, #36]	; 0x24
                envio_wire[1] = (0xE0 | read_eeprom(real_din25));
 80064be:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
                envio_wire[3] = (0xE0 | read_eeprom(real_din23));
 80064c2:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                envio_wire[4] = (0xE0 | read_eeprom(real_din22));
 80064c6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                envio_wire[5] = (0xE0 | read_eeprom(real_din21));
 80064ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064ce:	e5de      	b.n	800608e <SD_thread_2.lto_priv.66+0x7de>
    for(i=0; i<(tamano-2); i++)
 80064d0:	f1a8 0e02 	sub.w	lr, r8, #2
                recibo_wire[0] = 0X30;
 80064d4:	2330      	movs	r3, #48	; 0x30
    for(i=0; i<(tamano-2); i++)
 80064d6:	f1be 0f00 	cmp.w	lr, #0
                recibo_wire[0] = 0X30;
 80064da:	702b      	strb	r3, [r5, #0]
    for(i=0; i<(tamano-2); i++)
 80064dc:	f340 82ab 	ble.w	8006a36 <SD_thread_2.lto_priv.66+0x1186>
 80064e0:	2100      	movs	r1, #0
 80064e2:	460a      	mov	r2, r1
 80064e4:	e000      	b.n	80064e8 <SD_thread_2.lto_priv.66+0xc38>
 80064e6:	5cab      	ldrb	r3, [r5, r2]
 80064e8:	3201      	adds	r2, #1
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 80064ea:	f003 030f 	and.w	r3, r3, #15
    for(i=0; i<(tamano-2); i++)
 80064ee:	b2d2      	uxtb	r2, r2
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 80064f0:	4419      	add	r1, r3
    for(i=0; i<(tamano-2); i++)
 80064f2:	4572      	cmp	r2, lr
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 80064f4:	b289      	uxth	r1, r1
    for(i=0; i<(tamano-2); i++)
 80064f6:	dbf6      	blt.n	80064e6 <SD_thread_2.lto_priv.66+0xc36>
 80064f8:	424b      	negs	r3, r1
 80064fa:	f003 030f 	and.w	r3, r3, #15
        comp = vec[tamano-2] & 0X0F;
 80064fe:	eb05 0208 	add.w	r2, r5, r8
 8006502:	f812 2c02 	ldrb.w	r2, [r2, #-2]
        if(valor_sum == comp) return 1;
 8006506:	f002 020f 	and.w	r2, r2, #15
 800650a:	429a      	cmp	r2, r3
 800650c:	f47f a9e8 	bne.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                    if(i == 7) return;
 8006510:	f1b8 0f07 	cmp.w	r8, #7
 8006514:	f43f a9e4 	beq.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                        rx_ppu(recibo_wire[3], recibo_wire[10], recibo_wire[9], recibo_wire[8], recibo_wire[7]);
 8006518:	f895 e007 	ldrb.w	lr, [r5, #7]
 800651c:	7a2b      	ldrb	r3, [r5, #8]
 800651e:	7a6a      	ldrb	r2, [r5, #9]
 8006520:	7aa9      	ldrb	r1, [r5, #10]
 8006522:	f8cd e000 	str.w	lr, [sp]
 8006526:	f006 ffa3 	bl	800d470 <rx_ppu>
 800652a:	2301      	movs	r3, #1
 800652c:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 8006530:	f7ff b9d6 	b.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                envio_wire[4]=0XE0 | (read_eeprom(pos1)-1);
 8006534:	1e43      	subs	r3, r0, #1
 8006536:	f063 031f 	orn	r3, r3, #31
 800653a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800653e:	e49d      	b.n	8005e7c <SD_thread_2.lto_priv.66+0x5cc>
                envio_wire[24]=0XE0;
 8006540:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
                envio_wire[27]=0XE0 | read_eeprom(d4_1);
 8006544:	7fe1      	ldrb	r1, [r4, #31]
                envio_wire[28]=0XE0 | read_eeprom(d3_1);
 8006546:	7fa2      	ldrb	r2, [r4, #30]
                envio_wire[29]=0XE0 | read_eeprom(d2_1);
 8006548:	7f63      	ldrb	r3, [r4, #29]
                envio_wire[25]=0XE0 | read_eeprom(d6_1);
 800654a:	f06e 0e1f 	orn	lr, lr, #31
                envio_wire[26]=0XE0 | read_eeprom(d5_1);
 800654e:	f060 001f 	orn	r0, r0, #31
                envio_wire[27]=0XE0 | read_eeprom(d4_1);
 8006552:	f061 011f 	orn	r1, r1, #31
                envio_wire[28]=0XE0 | read_eeprom(d3_1);
 8006556:	f062 021f 	orn	r2, r2, #31
                envio_wire[29]=0XE0 | read_eeprom(d2_1);
 800655a:	f063 031f 	orn	r3, r3, #31
                envio_wire[25]=0XE0 | read_eeprom(d6_1);
 800655e:	f88d e03d 	strb.w	lr, [sp, #61]	; 0x3d
                envio_wire[26]=0XE0 | read_eeprom(d5_1);
 8006562:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
                envio_wire[27]=0XE0 | read_eeprom(d4_1);
 8006566:	f88d 103f 	strb.w	r1, [sp, #63]	; 0x3f
                envio_wire[28]=0XE0 | read_eeprom(d3_1);
 800656a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
                envio_wire[29]=0XE0 | read_eeprom(d2_1);
 800656e:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 8006572:	e4f8      	b.n	8005f66 <SD_thread_2.lto_priv.66+0x6b6>
 8006574:	20000bf0 	.word	0x20000bf0
 8006578:	200009b0 	.word	0x200009b0
 800657c:	20000a16 	.word	0x20000a16
            envio_wire[6]=0XE0 | read_eeprom(tv2_6);
 8006580:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
            envio_wire[7]=0XE0 | read_eeprom(tv2_5);
 8006584:	f894 e042 	ldrb.w	lr, [r4, #66]	; 0x42
            envio_wire[8]=0XE0 | read_eeprom(tv2_4);
 8006588:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
            envio_wire[9]=0XE0 | read_eeprom(tv2_3);
 800658c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
            envio_wire[4]=0XE0 | read_eeprom(tv2_8);
 8006590:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
            envio_wire[5]=0XE0 | read_eeprom(tv2_7);
 8006594:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
            envio_wire[10]=0XE0 | read_eeprom(tv2_2);
 8006598:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
            envio_wire[6]=0XE0 | read_eeprom(tv2_6);
 800659c:	f06c 0c1f 	orn	ip, ip, #31
            envio_wire[7]=0XE0 | read_eeprom(tv2_5);
 80065a0:	f06e 0e1f 	orn	lr, lr, #31
            envio_wire[8]=0XE0 | read_eeprom(tv2_4);
 80065a4:	f061 011f 	orn	r1, r1, #31
            envio_wire[9]=0XE0 | read_eeprom(tv2_3);
 80065a8:	f062 021f 	orn	r2, r2, #31
            envio_wire[4]=0XE0 | read_eeprom(tv2_8);
 80065ac:	f06a 0a1f 	orn	sl, sl, #31
            envio_wire[5]=0XE0 | read_eeprom(tv2_7);
 80065b0:	f068 081f 	orn	r8, r8, #31
            envio_wire[10]=0XE0 | read_eeprom(tv2_2);
 80065b4:	f063 031f 	orn	r3, r3, #31
            envio_wire[6]=0XE0 | read_eeprom(tv2_6);
 80065b8:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
            envio_wire[7]=0XE0 | read_eeprom(tv2_5);
 80065bc:	f88d e02b 	strb.w	lr, [sp, #43]	; 0x2b
            envio_wire[14]=0XE0 | read_eeprom(td2_7);
 80065c0:	f894 c054 	ldrb.w	ip, [r4, #84]	; 0x54
            envio_wire[8]=0XE0 | read_eeprom(tv2_4);
 80065c4:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
            envio_wire[15]=0XE0 | read_eeprom(td2_6);
 80065c8:	f894 e053 	ldrb.w	lr, [r4, #83]	; 0x53
            envio_wire[9]=0XE0 | read_eeprom(tv2_3);
 80065cc:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
            envio_wire[16]=0XE0 | read_eeprom(td2_5);
 80065d0:	f894 1052 	ldrb.w	r1, [r4, #82]	; 0x52
            envio_wire[17]=0XE0 | read_eeprom(td2_4);
 80065d4:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
            envio_wire[4]=0XE0 | read_eeprom(tv2_8);
 80065d8:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
            envio_wire[5]=0XE0 | read_eeprom(tv2_7);
 80065dc:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
            envio_wire[11]=0XE0 | read_eeprom(tv2_1);
 80065e0:	f894 a03e 	ldrb.w	sl, [r4, #62]	; 0x3e
            envio_wire[13]=0XE0 | read_eeprom(td2_8);
 80065e4:	f894 8055 	ldrb.w	r8, [r4, #85]	; 0x55
            envio_wire[10]=0XE0 | read_eeprom(tv2_2);
 80065e8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
            envio_wire[18]=0XE0 | read_eeprom(td2_3);
 80065ec:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
            envio_wire[14]=0XE0 | read_eeprom(td2_7);
 80065f0:	f06c 0c1f 	orn	ip, ip, #31
            envio_wire[15]=0XE0 | read_eeprom(td2_6);
 80065f4:	f06e 0e1f 	orn	lr, lr, #31
            envio_wire[16]=0XE0 | read_eeprom(td2_5);
 80065f8:	f061 011f 	orn	r1, r1, #31
            envio_wire[17]=0XE0 | read_eeprom(td2_4);
 80065fc:	f062 021f 	orn	r2, r2, #31
            envio_wire[11]=0XE0 | read_eeprom(tv2_1);
 8006600:	f06a 0a1f 	orn	sl, sl, #31
            envio_wire[13]=0XE0 | read_eeprom(td2_8);
 8006604:	f068 081f 	orn	r8, r8, #31
            envio_wire[18]=0XE0 | read_eeprom(td2_3);
 8006608:	f063 031f 	orn	r3, r3, #31
            envio_wire[14]=0XE0 | read_eeprom(td2_7);
 800660c:	f88d c032 	strb.w	ip, [sp, #50]	; 0x32
            envio_wire[15]=0XE0 | read_eeprom(td2_6);
 8006610:	f88d e033 	strb.w	lr, [sp, #51]	; 0x33
            envio_wire[1]=0XF6;
 8006614:	f04f 0cf6 	mov.w	ip, #246	; 0xf6
            envio_wire[2]=0XE0;
 8006618:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
            envio_wire[16]=0XE0 | read_eeprom(td2_5);
 800661c:	f88d 1034 	strb.w	r1, [sp, #52]	; 0x34
            envio_wire[17]=0XE0 | read_eeprom(td2_4);
 8006620:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
            envio_wire[3]=0XF9;
 8006624:	21f9      	movs	r1, #249	; 0xf9
            envio_wire[12]=0XFA;
 8006626:	22fa      	movs	r2, #250	; 0xfa
            envio_wire[0]=0XFF;
 8006628:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
            envio_wire[11]=0XE0 | read_eeprom(tv2_1);
 800662c:	f88d a02f 	strb.w	sl, [sp, #47]	; 0x2f
            envio_wire[13]=0XE0 | read_eeprom(td2_8);
 8006630:	f88d 8031 	strb.w	r8, [sp, #49]	; 0x31
            envio_wire[1]=0XF6;
 8006634:	f88d c025 	strb.w	ip, [sp, #37]	; 0x25
            envio_wire[2]=0XE0;
 8006638:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
            envio_wire[3]=0XF9;
 800663c:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
            envio_wire[12]=0XFA;
 8006640:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
            envio_wire[0]=0XFF;
 8006644:	f88d 9024 	strb.w	r9, [sp, #36]	; 0x24
            envio_wire[18]=0XE0 | read_eeprom(td2_3);
 8006648:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            envio_wire[22]=0XE0 | read_eeprom(ppu4_level1);
 800664c:	f894 8008 	ldrb.w	r8, [r4, #8]
            envio_wire[23]=0XE0 | read_eeprom(ppu3_level1);
 8006650:	f894 c007 	ldrb.w	ip, [r4, #7]
            envio_wire[25]=0XE0 | read_eeprom(ppu1_level1);
 8006654:	7961      	ldrb	r1, [r4, #5]
            envio_wire[27]=0XE0 | read_eeprom(ppu4_level2);
 8006656:	7b22      	ldrb	r2, [r4, #12]
            envio_wire[28]=0XE0 | read_eeprom(ppu3_level2);
 8006658:	7ae3      	ldrb	r3, [r4, #11]
            envio_wire[19]=0XE0 | read_eeprom(td2_2);
 800665a:	f894 b04f 	ldrb.w	fp, [r4, #79]	; 0x4f
            envio_wire[20]=0XE0 | read_eeprom(td2_1);
 800665e:	f894 a04e 	ldrb.w	sl, [r4, #78]	; 0x4e
            envio_wire[24]=0XE0 | read_eeprom(ppu2_level1);
 8006662:	f894 e006 	ldrb.w	lr, [r4, #6]
            envio_wire[22]=0XE0 | read_eeprom(ppu4_level1);
 8006666:	f068 081f 	orn	r8, r8, #31
            envio_wire[23]=0XE0 | read_eeprom(ppu3_level1);
 800666a:	f06c 0c1f 	orn	ip, ip, #31
            envio_wire[22]=0XE0 | read_eeprom(ppu4_level1);
 800666e:	f88d 803a 	strb.w	r8, [sp, #58]	; 0x3a
            envio_wire[29]=0XE0 | read_eeprom(ppu2_level2);
 8006672:	f894 800a 	ldrb.w	r8, [r4, #10]
            envio_wire[23]=0XE0 | read_eeprom(ppu3_level1);
 8006676:	f88d c03b 	strb.w	ip, [sp, #59]	; 0x3b
            envio_wire[30]=0XE0 | read_eeprom(ppu1_level2);
 800667a:	f894 c009 	ldrb.w	ip, [r4, #9]
            envio_wire[25]=0XE0 | read_eeprom(ppu1_level1);
 800667e:	f061 011f 	orn	r1, r1, #31
            envio_wire[27]=0XE0 | read_eeprom(ppu4_level2);
 8006682:	f062 021f 	orn	r2, r2, #31
            envio_wire[28]=0XE0 | read_eeprom(ppu3_level2);
 8006686:	f063 031f 	orn	r3, r3, #31
            envio_wire[29]=0XE0 | read_eeprom(ppu2_level2);
 800668a:	f068 081f 	orn	r8, r8, #31
            envio_wire[19]=0XE0 | read_eeprom(td2_2);
 800668e:	f06b 0b1f 	orn	fp, fp, #31
            envio_wire[20]=0XE0 | read_eeprom(td2_1);
 8006692:	f06a 0a1f 	orn	sl, sl, #31
            envio_wire[24]=0XE0 | read_eeprom(ppu2_level1);
 8006696:	f06e 0e1f 	orn	lr, lr, #31
            envio_wire[30]=0XE0 | read_eeprom(ppu1_level2);
 800669a:	f06c 0c1f 	orn	ip, ip, #31
            envio_wire[25]=0XE0 | read_eeprom(ppu1_level1);
 800669e:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
            envio_wire[27]=0XE0 | read_eeprom(ppu4_level2);
 80066a2:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
            envio_wire[21]=0XF4;
 80066a6:	21f4      	movs	r1, #244	; 0xf4
            envio_wire[26]=0XF5;
 80066a8:	22f5      	movs	r2, #245	; 0xf5
            envio_wire[28]=0XE0 | read_eeprom(ppu3_level2);
 80066aa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
            envio_wire[29]=0XE0 | read_eeprom(ppu2_level2);
 80066ae:	f88d 8041 	strb.w	r8, [sp, #65]	; 0x41
            envio_wire[31] = 0XFB;
 80066b2:	23fb      	movs	r3, #251	; 0xfb
 80066b4:	f10d 0824 	add.w	r8, sp, #36	; 0x24
            envio_wire[21]=0XF4;
 80066b8:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
            envio_wire[26]=0XF5;
 80066bc:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
            envio_wire[31] = 0XFB;
 80066c0:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
            envio_wire[19]=0XE0 | read_eeprom(td2_2);
 80066c4:	f88d b037 	strb.w	fp, [sp, #55]	; 0x37
            envio_wire[20]=0XE0 | read_eeprom(td2_1);
 80066c8:	f88d a038 	strb.w	sl, [sp, #56]	; 0x38
            envio_wire[24]=0XE0 | read_eeprom(ppu2_level1);
 80066cc:	f88d e03c 	strb.w	lr, [sp, #60]	; 0x3c
            envio_wire[30]=0XE0 | read_eeprom(ppu1_level2);
 80066d0:	f88d c042 	strb.w	ip, [sp, #66]	; 0x42
            envio_wire[31] = 0XFB;
 80066d4:	4641      	mov	r1, r8
 80066d6:	22ff      	movs	r2, #255	; 0xff
 80066d8:	2300      	movs	r3, #0
 80066da:	e001      	b.n	80066e0 <SD_thread_2.lto_priv.66+0xe30>
 80066dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 80066e0:	f002 020f 	and.w	r2, r2, #15
 80066e4:	4413      	add	r3, r2
    for(i=0; i<(tamano-2); i++)
 80066e6:	f10d 0243 	add.w	r2, sp, #67	; 0x43
 80066ea:	428a      	cmp	r2, r1
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 80066ec:	b29b      	uxth	r3, r3
    for(i=0; i<(tamano-2); i++)
 80066ee:	d1f5      	bne.n	80066dc <SD_thread_2.lto_priv.66+0xe2c>
    valor_sum = (0xFF + 0x01) - valor_sum;
 80066f0:	425b      	negs	r3, r3
    valor_sum = valor_sum & 0X0F;
 80066f2:	f003 030f 	and.w	r3, r3, #15
            envio_wire[32] = (0XE0 | verif_wire(envio_wire,34,0x00));
 80066f6:	f063 031f 	orn	r3, r3, #31
 80066fa:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    }

    else if(dta_emr3 == 2)
    {
     
        Data_Rx4[0]='5';
 80066fe:	9b05      	ldr	r3, [sp, #20]
            envio_wire[33] = 0XF0;
 8006700:	21f0      	movs	r1, #240	; 0xf0
 8006702:	2235      	movs	r2, #53	; 0x35
 8006704:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 8006708:	701a      	strb	r2, [r3, #0]
        Data_Rx4[1]=ascii(read_eeprom(pos2));
 800670a:	f008 fe09 	bl	800f320 <ascii>
 800670e:	9905      	ldr	r1, [sp, #20]
        Data_Rx4[2]=':';
 8006710:	233a      	movs	r3, #58	; 0x3a
 8006712:	708b      	strb	r3, [r1, #2]
 8006714:	4bd3      	ldr	r3, [pc, #844]	; (8006a64 <SD_thread_2.lto_priv.66+0x11b4>)
        Data_Rx4[1]=ascii(read_eeprom(pos2));
 8006716:	7048      	strb	r0, [r1, #1]
 8006718:	9305      	str	r3, [sp, #20]
        Data_Rx4[2]=':';
 800671a:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800671e:	469b      	mov	fp, r3
        {
            Data_Rx4[k] = ascii(((DataTx[i] >> 4) & 0X0F));
            k++;
            Data_Rx4[k] = ascii((DataTx[i] & 0X0F));
            k++;
            Data_Rx4[k] = ',';
 8006720:	f04f 092c 	mov.w	r9, #44	; 0x2c
 8006724:	e001      	b.n	800672a <SD_thread_2.lto_priv.66+0xe7a>
 8006726:	f818 af01 	ldrb.w	sl, [r8, #1]!
            Data_Rx4[k] = ascii(((DataTx[i] >> 4) & 0X0F));
 800672a:	ea4f 101a 	mov.w	r0, sl, lsr #4
 800672e:	f008 fdf7 	bl	800f320 <ascii>
 8006732:	f88b 0003 	strb.w	r0, [fp, #3]
            Data_Rx4[k] = ascii((DataTx[i] & 0X0F));
 8006736:	f00a 000f 	and.w	r0, sl, #15
 800673a:	f008 fdf1 	bl	800f320 <ascii>
        for(i=0;i<Tx;i++)
 800673e:	4bca      	ldr	r3, [pc, #808]	; (8006a68 <SD_thread_2.lto_priv.66+0x11b8>)
            Data_Rx4[k] = ',';
 8006740:	f88b 9005 	strb.w	r9, [fp, #5]
            Data_Rx4[k] = ascii((DataTx[i] & 0X0F));
 8006744:	f88b 0004 	strb.w	r0, [fp, #4]
 8006748:	f10b 0b03 	add.w	fp, fp, #3
        for(i=0;i<Tx;i++)
 800674c:	455b      	cmp	r3, fp
 800674e:	d1ea      	bne.n	8006726 <SD_thread_2.lto_priv.66+0xe76>
            k++;
        }
        Data_Rx4[k]=0x00;
 8006750:	9805      	ldr	r0, [sp, #20]
 8006752:	2200      	movs	r2, #0
 8006754:	2301      	movs	r3, #1
 8006756:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
            Imprimir(&envio_wire,P);
 800675a:	2122      	movs	r1, #34	; 0x22
 800675c:	a809      	add	r0, sp, #36	; 0x24
 800675e:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
 8006762:	f006 feb5 	bl	800d4d0 <Imprimir>
 8006766:	f7ff b8bb 	b.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                if(read_eeprom(estado2) == 0x09 && read_eeprom(stop2) == 0X00)
 800676a:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
 800676e:	2b00      	cmp	r3, #0
 8006770:	f47f a927 	bne.w	80059c2 <SD_thread_2.lto_priv.66+0x112>
 8006774:	2301      	movs	r3, #1
 8006776:	220c      	movs	r2, #12
 8006778:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
 800677c:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
 8006780:	70a2      	strb	r2, [r4, #2]
 8006782:	f7ff b929 	b.w	80059d8 <SD_thread_2.lto_priv.66+0x128>
 8006786:	2208      	movs	r2, #8
 8006788:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 800678c:	2300      	movs	r3, #0
 800678e:	70a2      	strb	r2, [r4, #2]
 8006790:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 8006794:	f7ff ba5a 	b.w	8005c4c <SD_thread_2.lto_priv.66+0x39c>
 8006798:	2306      	movs	r3, #6
 800679a:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
 800679e:	7023      	strb	r3, [r4, #0]
 80067a0:	f7ff bb59 	b.w	8005e56 <SD_thread_2.lto_priv.66+0x5a6>
                envio_wire[4]=0XE0 | (read_eeprom(pos2) - 1);
 80067a4:	1e43      	subs	r3, r0, #1
 80067a6:	f063 031f 	orn	r3, r3, #31
 80067aa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80067ae:	e492      	b.n	80060d6 <SD_thread_2.lto_priv.66+0x826>
                envio_wire[25]=0XE0 | read_eeprom(d6_2);
 80067b0:	f894 e027 	ldrb.w	lr, [r4, #39]	; 0x27
                envio_wire[26]=0XE0 | read_eeprom(d5_2);
 80067b4:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
                envio_wire[24]=0XE0;
 80067b8:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
                envio_wire[27]=0XE0 | read_eeprom(d4_2);
 80067bc:	f894 c025 	ldrb.w	ip, [r4, #37]	; 0x25
                envio_wire[28]=0XE0 | read_eeprom(d3_2);
 80067c0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                envio_wire[29]=0XE0 | read_eeprom(d2_2);
 80067c4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
                envio_wire[25]=0XE0 | read_eeprom(d6_2);
 80067c8:	f06e 0e1f 	orn	lr, lr, #31
                envio_wire[26]=0XE0 | read_eeprom(d5_2);
 80067cc:	f061 011f 	orn	r1, r1, #31
                envio_wire[27]=0XE0 | read_eeprom(d4_2);
 80067d0:	f06c 0c1f 	orn	ip, ip, #31
                envio_wire[28]=0XE0 | read_eeprom(d3_2);
 80067d4:	f062 021f 	orn	r2, r2, #31
                envio_wire[29]=0XE0 | read_eeprom(d2_2);
 80067d8:	f063 031f 	orn	r3, r3, #31
                envio_wire[25]=0XE0 | read_eeprom(d6_2);
 80067dc:	f88d e03d 	strb.w	lr, [sp, #61]	; 0x3d
                envio_wire[26]=0XE0 | read_eeprom(d5_2);
 80067e0:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
                envio_wire[27]=0XE0 | read_eeprom(d4_2);
 80067e4:	f88d c03f 	strb.w	ip, [sp, #63]	; 0x3f
                envio_wire[28]=0XE0 | read_eeprom(d3_2);
 80067e8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
                envio_wire[29]=0XE0 | read_eeprom(d2_2);
 80067ec:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 80067f0:	e4eb      	b.n	80061ca <SD_thread_2.lto_priv.66+0x91a>
    for(i=0; i<(tamano-2); i++)
 80067f2:	f1aa 0e02 	sub.w	lr, sl, #2
                recibo_wire[0] = 0X30;
 80067f6:	2330      	movs	r3, #48	; 0x30
    for(i=0; i<(tamano-2); i++)
 80067f8:	f1be 0f00 	cmp.w	lr, #0
                recibo_wire[0] = 0X30;
 80067fc:	702b      	strb	r3, [r5, #0]
    for(i=0; i<(tamano-2); i++)
 80067fe:	f340 811c 	ble.w	8006a3a <SD_thread_2.lto_priv.66+0x118a>
 8006802:	2100      	movs	r1, #0
 8006804:	460a      	mov	r2, r1
 8006806:	e000      	b.n	800680a <SD_thread_2.lto_priv.66+0xf5a>
 8006808:	5cab      	ldrb	r3, [r5, r2]
 800680a:	3201      	adds	r2, #1
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 800680c:	f003 030f 	and.w	r3, r3, #15
    for(i=0; i<(tamano-2); i++)
 8006810:	b2d2      	uxtb	r2, r2
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 8006812:	4419      	add	r1, r3
    for(i=0; i<(tamano-2); i++)
 8006814:	4596      	cmp	lr, r2
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 8006816:	b289      	uxth	r1, r1
    for(i=0; i<(tamano-2); i++)
 8006818:	dcf6      	bgt.n	8006808 <SD_thread_2.lto_priv.66+0xf58>
 800681a:	424b      	negs	r3, r1
 800681c:	f003 030f 	and.w	r3, r3, #15
        comp = vec[tamano-2] & 0X0F;
 8006820:	eb05 020a 	add.w	r2, r5, sl
 8006824:	f812 2c02 	ldrb.w	r2, [r2, #-2]
        if(valor_sum == comp) return 1;
 8006828:	f002 020f 	and.w	r2, r2, #15
 800682c:	429a      	cmp	r2, r3
 800682e:	f47f a857 	bne.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                    if(i == 7) return;
 8006832:	f1ba 0f07 	cmp.w	sl, #7
 8006836:	f47f ae6f 	bne.w	8006518 <SD_thread_2.lto_priv.66+0xc68>
 800683a:	f7ff b851 	b.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                if(read_eeprom(estado1) == 0x09 && read_eeprom(stop1) == 0X00)
 800683e:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8006842:	2b00      	cmp	r3, #0
 8006844:	f47f a895 	bne.w	8005972 <SD_thread_2.lto_priv.66+0xc2>
 8006848:	2301      	movs	r3, #1
 800684a:	220c      	movs	r2, #12
 800684c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
 8006850:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8006854:	7022      	strb	r2, [r4, #0]
 8006856:	f7ff b88c 	b.w	8005972 <SD_thread_2.lto_priv.66+0xc2>
 800685a:	2206      	movs	r2, #6
 800685c:	2300      	movs	r3, #0
 800685e:	70a2      	strb	r2, [r4, #2]
 8006860:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8006864:	e424      	b.n	80060b0 <SD_thread_2.lto_priv.66+0x800>
                if(read_eeprom(estado1) != 0x09)
 8006866:	7823      	ldrb	r3, [r4, #0]
 8006868:	2b09      	cmp	r3, #9
 800686a:	f43f a839 	beq.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
    for(i=0; i<(tamano-2); i++)
 800686e:	f1a8 0102 	sub.w	r1, r8, #2
                    recibo_wire[0] = 0x30;
 8006872:	2330      	movs	r3, #48	; 0x30
    for(i=0; i<(tamano-2); i++)
 8006874:	2900      	cmp	r1, #0
                    recibo_wire[0] = 0x30;
 8006876:	702b      	strb	r3, [r5, #0]
    for(i=0; i<(tamano-2); i++)
 8006878:	f340 80e1 	ble.w	8006a3e <SD_thread_2.lto_priv.66+0x118e>
 800687c:	2000      	movs	r0, #0
 800687e:	4602      	mov	r2, r0
 8006880:	e000      	b.n	8006884 <SD_thread_2.lto_priv.66+0xfd4>
 8006882:	5cab      	ldrb	r3, [r5, r2]
 8006884:	3201      	adds	r2, #1
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 8006886:	f003 030f 	and.w	r3, r3, #15
    for(i=0; i<(tamano-2); i++)
 800688a:	b2d2      	uxtb	r2, r2
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 800688c:	4418      	add	r0, r3
    for(i=0; i<(tamano-2); i++)
 800688e:	428a      	cmp	r2, r1
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 8006890:	b280      	uxth	r0, r0
    for(i=0; i<(tamano-2); i++)
 8006892:	dbf6      	blt.n	8006882 <SD_thread_2.lto_priv.66+0xfd2>
 8006894:	4243      	negs	r3, r0
 8006896:	f003 030f 	and.w	r3, r3, #15
        comp = vec[tamano-2] & 0X0F;
 800689a:	44a8      	add	r8, r5
 800689c:	f818 2c02 	ldrb.w	r2, [r8, #-2]
        if(valor_sum == comp) return 1;
 80068a0:	f002 020f 	and.w	r2, r2, #15
 80068a4:	429a      	cmp	r2, r3
 80068a6:	f47f a81b 	bne.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                        write_eeprom(level,(DATO | 0x10));
 80068aa:	7b61      	ldrb	r1, [r4, #13]
                        if(read_eeprom(PV) == 0X03)
 80068ac:	7ba0      	ldrb	r0, [r4, #14]
                        A1 = recibo_wire[8] & 0X0F;
 80068ae:	7a2b      	ldrb	r3, [r5, #8]
                        A2 = recibo_wire[9] & 0X0F;
 80068b0:	7a6a      	ldrb	r2, [r5, #9]
                        A3 = recibo_wire[10] & 0X0F;
 80068b2:	f895 b00a 	ldrb.w	fp, [r5, #10]
                        A4 = recibo_wire[11] & 0X0F;
 80068b6:	f895 a00b 	ldrb.w	sl, [r5, #11]
                        A5 = recibo_wire[12] & 0X0F;
 80068ba:	f895 800c 	ldrb.w	r8, [r5, #12]
                        write_eeprom(level,(DATO | 0x10));
 80068be:	f041 0110 	orr.w	r1, r1, #16
 80068c2:	7361      	strb	r1, [r4, #13]
                        if(read_eeprom(PV) == 0X03)
 80068c4:	2803      	cmp	r0, #3
 80068c6:	f04f 0101 	mov.w	r1, #1
                        A1 = recibo_wire[8] & 0X0F;
 80068ca:	f003 030f 	and.w	r3, r3, #15
                        A2 = recibo_wire[9] & 0X0F;
 80068ce:	f002 020f 	and.w	r2, r2, #15
                        A3 = recibo_wire[10] & 0X0F;
 80068d2:	f00b 0b0f 	and.w	fp, fp, #15
                        A4 = recibo_wire[11] & 0X0F;
 80068d6:	f00a 0a0f 	and.w	sl, sl, #15
                        A5 = recibo_wire[12] & 0X0F;
 80068da:	f008 080f 	and.w	r8, r8, #15
 80068de:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
                        if(read_eeprom(PV) == 0X03)
 80068e2:	f000 80b8 	beq.w	8006a56 <SD_thread_2.lto_priv.66+0x11a6>
                        A1 = recibo_wire[8] & 0X0F;
 80068e6:	4699      	mov	r9, r3
                        A2 = recibo_wire[9] & 0X0F;
 80068e8:	4613      	mov	r3, r2
                        A3 = recibo_wire[10] & 0X0F;
 80068ea:	465a      	mov	r2, fp
                        A4 = recibo_wire[11] & 0X0F;
 80068ec:	46d3      	mov	fp, sl
                        A5 = recibo_wire[12] & 0X0F;
 80068ee:	46c2      	mov	sl, r8
                        A6 = 0X00;
 80068f0:	f04f 0800 	mov.w	r8, #0
                        venta_ppu(recibo_wire[4],0x01);
 80068f4:	2101      	movs	r1, #1
 80068f6:	7928      	ldrb	r0, [r5, #4]
 80068f8:	9207      	str	r2, [sp, #28]
 80068fa:	9306      	str	r3, [sp, #24]
 80068fc:	f006 fd60 	bl	800d3c0 <venta_ppu>
 8006900:	9a07      	ldr	r2, [sp, #28]
 8006902:	9b06      	ldr	r3, [sp, #24]
 8006904:	f884 802a 	strb.w	r8, [r4, #42]	; 0x2a
 8006908:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
 800690c:	f884 b02c 	strb.w	fp, [r4, #44]	; 0x2c
 8006910:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8006914:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8006918:	f884 902f 	strb.w	r9, [r4, #47]	; 0x2f
 800691c:	f7fe bfe0 	b.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                rx_especial(recibo_wire[4], recibo_wire[5], recibo_wire[6], 0x01);
 8006920:	2301      	movs	r3, #1
 8006922:	79aa      	ldrb	r2, [r5, #6]
 8006924:	7969      	ldrb	r1, [r5, #5]
 8006926:	7928      	ldrb	r0, [r5, #4]
 8006928:	f006 fdea 	bl	800d500 <rx_especial>
 800692c:	f7fe bfd8 	b.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                if(read_eeprom(estado2) != 0x09)
 8006930:	78a3      	ldrb	r3, [r4, #2]
 8006932:	2b09      	cmp	r3, #9
 8006934:	f43e afd4 	beq.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
    for(i=0; i<(tamano-2); i++)
 8006938:	f1aa 0102 	sub.w	r1, sl, #2
                    recibo_wire[0] = 0x30;
 800693c:	2330      	movs	r3, #48	; 0x30
    for(i=0; i<(tamano-2); i++)
 800693e:	2900      	cmp	r1, #0
                    recibo_wire[0] = 0x30;
 8006940:	702b      	strb	r3, [r5, #0]
    for(i=0; i<(tamano-2); i++)
 8006942:	f340 80fe 	ble.w	8006b42 <SD_thread_2.lto_priv.66+0x1292>
 8006946:	2000      	movs	r0, #0
 8006948:	4602      	mov	r2, r0
 800694a:	e000      	b.n	800694e <SD_thread_2.lto_priv.66+0x109e>
 800694c:	5cab      	ldrb	r3, [r5, r2]
 800694e:	3201      	adds	r2, #1
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 8006950:	f003 030f 	and.w	r3, r3, #15
    for(i=0; i<(tamano-2); i++)
 8006954:	b2d2      	uxtb	r2, r2
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 8006956:	4418      	add	r0, r3
    for(i=0; i<(tamano-2); i++)
 8006958:	428a      	cmp	r2, r1
        valor_sum = valor_sum + (vec[i] & 0X0F); 
 800695a:	b280      	uxth	r0, r0
    for(i=0; i<(tamano-2); i++)
 800695c:	dbf6      	blt.n	800694c <SD_thread_2.lto_priv.66+0x109c>
 800695e:	4243      	negs	r3, r0
 8006960:	f003 030f 	and.w	r3, r3, #15
        comp = vec[tamano-2] & 0X0F;
 8006964:	44aa      	add	sl, r5
 8006966:	f81a 2c02 	ldrb.w	r2, [sl, #-2]
        if(valor_sum == comp) return 1;
 800696a:	f002 020f 	and.w	r2, r2, #15
 800696e:	429a      	cmp	r2, r3
 8006970:	f47e afb6 	bne.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                        write_eeprom(level,(DATO | 0x01));
 8006974:	7b61      	ldrb	r1, [r4, #13]
                        if(read_eeprom(PV) == 0X03)
 8006976:	7ba0      	ldrb	r0, [r4, #14]
                        A1 = recibo_wire[8] & 0X0F;
 8006978:	7a2b      	ldrb	r3, [r5, #8]
                        A2 = recibo_wire[9] & 0X0F;
 800697a:	7a6a      	ldrb	r2, [r5, #9]
                        A3 = recibo_wire[10] & 0X0F;
 800697c:	f895 b00a 	ldrb.w	fp, [r5, #10]
                        A4 = recibo_wire[11] & 0X0F;
 8006980:	f895 a00b 	ldrb.w	sl, [r5, #11]
                        A5 = recibo_wire[12] & 0X0F;
 8006984:	f895 800c 	ldrb.w	r8, [r5, #12]
                        write_eeprom(level,(DATO | 0x01));
 8006988:	f041 0101 	orr.w	r1, r1, #1
 800698c:	7361      	strb	r1, [r4, #13]
                        if(read_eeprom(PV) == 0X03)
 800698e:	2803      	cmp	r0, #3
 8006990:	f04f 0101 	mov.w	r1, #1
                        A1 = recibo_wire[8] & 0X0F;
 8006994:	f003 030f 	and.w	r3, r3, #15
                        A2 = recibo_wire[9] & 0X0F;
 8006998:	f002 020f 	and.w	r2, r2, #15
                        A3 = recibo_wire[10] & 0X0F;
 800699c:	f00b 0b0f 	and.w	fp, fp, #15
                        A4 = recibo_wire[11] & 0X0F;
 80069a0:	f00a 0a0f 	and.w	sl, sl, #15
                        A5 = recibo_wire[12] & 0X0F;
 80069a4:	f008 080f 	and.w	r8, r8, #15
 80069a8:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
                        if(read_eeprom(PV) == 0X03)
 80069ac:	d056      	beq.n	8006a5c <SD_thread_2.lto_priv.66+0x11ac>
                        A1 = recibo_wire[8] & 0X0F;
 80069ae:	4699      	mov	r9, r3
                        A2 = recibo_wire[9] & 0X0F;
 80069b0:	4613      	mov	r3, r2
                        A3 = recibo_wire[10] & 0X0F;
 80069b2:	465a      	mov	r2, fp
                        A4 = recibo_wire[11] & 0X0F;
 80069b4:	46d3      	mov	fp, sl
                        A5 = recibo_wire[12] & 0X0F;
 80069b6:	46c2      	mov	sl, r8
                        A6 = 0X00;
 80069b8:	f04f 0800 	mov.w	r8, #0
                        venta_ppu(recibo_wire[4],0x02);
 80069bc:	2102      	movs	r1, #2
 80069be:	7928      	ldrb	r0, [r5, #4]
 80069c0:	9207      	str	r2, [sp, #28]
 80069c2:	9306      	str	r3, [sp, #24]
 80069c4:	f006 fcfc 	bl	800d3c0 <venta_ppu>
 80069c8:	9a07      	ldr	r2, [sp, #28]
 80069ca:	9b06      	ldr	r3, [sp, #24]
 80069cc:	f884 8030 	strb.w	r8, [r4, #48]	; 0x30
 80069d0:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
 80069d4:	f884 b032 	strb.w	fp, [r4, #50]	; 0x32
 80069d8:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
 80069dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80069e0:	f884 9035 	strb.w	r9, [r4, #53]	; 0x35
 80069e4:	f7fe bf7c 	b.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                rx_especial(recibo_wire[4], recibo_wire[5], recibo_wire[6], 0x02);
 80069e8:	2302      	movs	r3, #2
 80069ea:	79aa      	ldrb	r2, [r5, #6]
 80069ec:	7969      	ldrb	r1, [r5, #5]
 80069ee:	7928      	ldrb	r0, [r5, #4]
 80069f0:	f006 fd86 	bl	800d500 <rx_especial>
 80069f4:	f7fe bf74 	b.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                envio_wire[3] = (0xE0 | read_eeprom(real_din14));
 80069f8:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
                envio_wire[4] = (0xE0 | read_eeprom(real_din13));
 80069fc:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
                envio_wire[5] = (0xE0 | read_eeprom(real_din12));
 8006a00:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
                envio_wire[4] = (0xE0 | read_eeprom(real_din23));
 8006a04:	f062 021f 	orn	r2, r2, #31
                envio_wire[1] = (0xE0 | read_eeprom(real_din26));
 8006a08:	f06e 0e1f 	orn	lr, lr, #31
                envio_wire[2] = (0xE0 | read_eeprom(real_din25));
 8006a0c:	f060 001f 	orn	r0, r0, #31
                envio_wire[3] = (0xE0 | read_eeprom(real_din24));
 8006a10:	f061 011f 	orn	r1, r1, #31
                envio_wire[5] = (0xE0 | read_eeprom(real_din22));
 8006a14:	f063 031f 	orn	r3, r3, #31
                envio_wire[4] = (0xE0 | read_eeprom(real_din23));
 8006a18:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                envio_wire[0] = 0xE0; 
 8006a1c:	22e0      	movs	r2, #224	; 0xe0
                envio_wire[1] = (0xE0 | read_eeprom(real_din26));
 8006a1e:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
                envio_wire[2] = (0xE0 | read_eeprom(real_din25));
 8006a22:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
                envio_wire[3] = (0xE0 | read_eeprom(real_din24));
 8006a26:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                envio_wire[5] = (0xE0 | read_eeprom(real_din22));
 8006a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                envio_wire[0] = 0xE0; 
 8006a2e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8006a32:	f7ff bb2c 	b.w	800608e <SD_thread_2.lto_priv.66+0x7de>
    for(i=0; i<(tamano-2); i++)
 8006a36:	2300      	movs	r3, #0
 8006a38:	e561      	b.n	80064fe <SD_thread_2.lto_priv.66+0xc4e>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e6f0      	b.n	8006820 <SD_thread_2.lto_priv.66+0xf70>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e72b      	b.n	800689a <SD_thread_2.lto_priv.66+0xfea>
 8006a42:	2300      	movs	r3, #0
 8006a44:	f7ff b85a 	b.w	8005afc <SD_thread_2.lto_priv.66+0x24c>
                envio_wire[3] = (0xE0 | read_eeprom(real_din24));
 8006a48:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
                envio_wire[4] = (0xE0 | read_eeprom(real_din23));
 8006a4c:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
                envio_wire[5] = (0xE0 | read_eeprom(real_din22));
 8006a50:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8006a54:	e7d6      	b.n	8006a04 <SD_thread_2.lto_priv.66+0x1154>
                            A1=0;
 8006a56:	2100      	movs	r1, #0
 8006a58:	4689      	mov	r9, r1
 8006a5a:	e74b      	b.n	80068f4 <SD_thread_2.lto_priv.66+0x1044>
                            A1=0;
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	4689      	mov	r9, r1
 8006a60:	e7ac      	b.n	80069bc <SD_thread_2.lto_priv.66+0x110c>
 8006a62:	bf00      	nop
 8006a64:	20000a48 	.word	0x20000a48
 8006a68:	20000aae 	.word	0x20000aae
                            A1=recibo_wire[6] & 0X0F;
 8006a6c:	f895 a006 	ldrb.w	sl, [r5, #6]
                            A2=recibo_wire[7] & 0X0F;
 8006a70:	f895 8007 	ldrb.w	r8, [r5, #7]
                            A3=recibo_wire[8] & 0X0F;
 8006a74:	7a2b      	ldrb	r3, [r5, #8]
                            A4=recibo_wire[9] & 0X0F;
 8006a76:	7a6a      	ldrb	r2, [r5, #9]
                            A5=recibo_wire[10] & 0X0F;
 8006a78:	f895 e00a 	ldrb.w	lr, [r5, #10]
                            A6=recibo_wire[11] & 0X0F;
 8006a7c:	f895 c00b 	ldrb.w	ip, [r5, #11]
                            venta_ppu(recibo_wire[4],0x02);
 8006a80:	7928      	ldrb	r0, [r5, #4]
                            A3=recibo_wire[8] & 0X0F;
 8006a82:	f003 090f 	and.w	r9, r3, #15
                            A4=recibo_wire[9] & 0X0F;
 8006a86:	f002 030f 	and.w	r3, r2, #15
                            A6=recibo_wire[11] & 0X0F;
 8006a8a:	f00c 020f 	and.w	r2, ip, #15
                            A4=recibo_wire[9] & 0X0F;
 8006a8e:	9307      	str	r3, [sp, #28]
                            A5=recibo_wire[10] & 0X0F;
 8006a90:	f00e 0b0f 	and.w	fp, lr, #15
                            A6=recibo_wire[11] & 0X0F;
 8006a94:	9206      	str	r2, [sp, #24]
                            A1=recibo_wire[6] & 0X0F;
 8006a96:	f00a 0a0f 	and.w	sl, sl, #15
                            venta_ppu(recibo_wire[4],0x02);
 8006a9a:	f006 fc91 	bl	800d3c0 <venta_ppu>
                            A2=recibo_wire[7] & 0X0F;
 8006a9e:	f008 080f 	and.w	r8, r8, #15
 8006aa2:	9a06      	ldr	r2, [sp, #24]
 8006aa4:	9b07      	ldr	r3, [sp, #28]
 8006aa6:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8006aaa:	f884 b031 	strb.w	fp, [r4, #49]	; 0x31
 8006aae:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 8006ab2:	f884 9033 	strb.w	r9, [r4, #51]	; 0x33
 8006ab6:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
 8006aba:	f884 a035 	strb.w	sl, [r4, #53]	; 0x35
 8006abe:	f7fe bf0f 	b.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                            A1 = recibo_wire[8] & 0X0F;
 8006ac2:	f895 a008 	ldrb.w	sl, [r5, #8]
                            A2 = recibo_wire[9] & 0X0F;
 8006ac6:	f895 8009 	ldrb.w	r8, [r5, #9]
                            A3 = recibo_wire[10] & 0X0F;
 8006aca:	7aab      	ldrb	r3, [r5, #10]
                            A4 = recibo_wire[11] & 0X0F;
 8006acc:	7aea      	ldrb	r2, [r5, #11]
                            A5 = recibo_wire[12] & 0X0F;
 8006ace:	f895 e00c 	ldrb.w	lr, [r5, #12]
                            A6 = recibo_wire[13] & 0X0F;
 8006ad2:	f895 c00d 	ldrb.w	ip, [r5, #13]
 8006ad6:	e7d3      	b.n	8006a80 <SD_thread_2.lto_priv.66+0x11d0>
                            A1=recibo_wire[6] & 0X0F;
 8006ad8:	79ab      	ldrb	r3, [r5, #6]
                            A2=recibo_wire[7] & 0X0F;
 8006ada:	79e9      	ldrb	r1, [r5, #7]
                            A3=recibo_wire[8] & 0X0F;
 8006adc:	7a2a      	ldrb	r2, [r5, #8]
                            A4=recibo_wire[9] & 0X0F;
 8006ade:	f895 8009 	ldrb.w	r8, [r5, #9]
                            A5=recibo_wire[10] & 0X0F;
 8006ae2:	f895 a00a 	ldrb.w	sl, [r5, #10]
                            A6=recibo_wire[11] & 0X0F;
 8006ae6:	f895 b00b 	ldrb.w	fp, [r5, #11]
                            venta_ppu(recibo_wire[4],0x01);
 8006aea:	7928      	ldrb	r0, [r5, #4]
                            A1=recibo_wire[6] & 0X0F;
 8006aec:	f003 030f 	and.w	r3, r3, #15
                            A3=recibo_wire[8] & 0X0F;
 8006af0:	f002 020f 	and.w	r2, r2, #15
                            A2=recibo_wire[7] & 0X0F;
 8006af4:	f001 090f 	and.w	r9, r1, #15
                            venta_ppu(recibo_wire[4],0x01);
 8006af8:	2101      	movs	r1, #1
                            A1=recibo_wire[6] & 0X0F;
 8006afa:	9307      	str	r3, [sp, #28]
                            A3=recibo_wire[8] & 0X0F;
 8006afc:	9206      	str	r2, [sp, #24]
                            A4=recibo_wire[9] & 0X0F;
 8006afe:	f008 080f 	and.w	r8, r8, #15
                            venta_ppu(recibo_wire[4],0x01);
 8006b02:	f006 fc5d 	bl	800d3c0 <venta_ppu>
                            A5=recibo_wire[10] & 0X0F;
 8006b06:	f00a 0a0f 	and.w	sl, sl, #15
                            A6=recibo_wire[11] & 0X0F;
 8006b0a:	f00b 0b0f 	and.w	fp, fp, #15
 8006b0e:	9b07      	ldr	r3, [sp, #28]
 8006b10:	9a06      	ldr	r2, [sp, #24]
 8006b12:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8006b16:	f884 b02a 	strb.w	fp, [r4, #42]	; 0x2a
 8006b1a:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
 8006b1e:	f884 802c 	strb.w	r8, [r4, #44]	; 0x2c
 8006b22:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8006b26:	f884 902e 	strb.w	r9, [r4, #46]	; 0x2e
 8006b2a:	f7fe bed9 	b.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                           A1 = recibo_wire[8] & 0X0F;
 8006b2e:	7a2b      	ldrb	r3, [r5, #8]
                           A2 = recibo_wire[9] & 0X0F;
 8006b30:	7a69      	ldrb	r1, [r5, #9]
                           A3 = recibo_wire[10] & 0X0F;
 8006b32:	7aaa      	ldrb	r2, [r5, #10]
                           A4 = recibo_wire[11] & 0X0F;
 8006b34:	f895 800b 	ldrb.w	r8, [r5, #11]
                           A5 = recibo_wire[12] & 0X0F;
 8006b38:	f895 a00c 	ldrb.w	sl, [r5, #12]
                           A6 = recibo_wire[13] & 0X0F;
 8006b3c:	f895 b00d 	ldrb.w	fp, [r5, #13]
 8006b40:	e7d3      	b.n	8006aea <SD_thread_2.lto_priv.66+0x123a>
    for(i=0; i<(tamano-2); i++)
 8006b42:	2300      	movs	r3, #0
 8006b44:	e70e      	b.n	8006964 <SD_thread_2.lto_priv.66+0x10b4>
 8006b46:	2300      	movs	r3, #0
 8006b48:	f7ff b8f6 	b.w	8005d38 <SD_thread_2.lto_priv.66+0x488>
                                venta_ppu(recibo_wire[4],0x02);
 8006b4c:	f006 fc38 	bl	800d3c0 <venta_ppu>
 8006b50:	2100      	movs	r1, #0
 8006b52:	9b06      	ldr	r3, [sp, #24]
 8006b54:	9a07      	ldr	r2, [sp, #28]
 8006b56:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8006b5a:	f884 b031 	strb.w	fp, [r4, #49]	; 0x31
 8006b5e:	f884 a032 	strb.w	sl, [r4, #50]	; 0x32
 8006b62:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
 8006b66:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 8006b6a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 8006b6e:	f7fe beb7 	b.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
                                venta_ppu(recibo_wire[4],0x01);
 8006b72:	f006 fc25 	bl	800d3c0 <venta_ppu>
 8006b76:	2100      	movs	r1, #0
 8006b78:	9b06      	ldr	r3, [sp, #24]
 8006b7a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8006b7e:	f884 b02a 	strb.w	fp, [r4, #42]	; 0x2a
 8006b82:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
 8006b86:	f884 802c 	strb.w	r8, [r4, #44]	; 0x2c
 8006b8a:	f884 902d 	strb.w	r9, [r4, #45]	; 0x2d
 8006b8e:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
 8006b92:	f7fe bea5 	b.w	80058e0 <SD_thread_2.lto_priv.66+0x30>
 8006b96:	bf00      	nop
	...

08006ba0 <main>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8006ba0:	4b1a      	ldr	r3, [pc, #104]	; (8006c0c <main+0x6c>)
  PWR->CR |= PWR_CR_DBP;
 8006ba2:	4c1b      	ldr	r4, [pc, #108]	; (8006c10 <main+0x70>)
  rccResetAHB1(~0);
 8006ba4:	691a      	ldr	r2, [r3, #16]
 8006ba6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006baa:	2200      	movs	r2, #0
        wdgReset(&WDGD1);                 
   	}
}

int main (void)
{
 8006bac:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8006bb0:	6119      	str	r1, [r3, #16]
 8006bb2:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8006bb4:	6958      	ldr	r0, [r3, #20]
 8006bb6:	6159      	str	r1, [r3, #20]
 8006bb8:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8006bba:	6a18      	ldr	r0, [r3, #32]
 8006bbc:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8006bc0:	6218      	str	r0, [r3, #32]
 8006bc2:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8006bc4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006bc6:	6259      	str	r1, [r3, #36]	; 0x24
 8006bc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8006bca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006bcc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006bd0:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 8006bd2:	6821      	ldr	r1, [r4, #0]
 8006bd4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006bd8:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8006bda:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006bdc:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8006be0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006be4:	b0b9      	sub	sp, #228	; 0xe4
 8006be6:	d003      	beq.n	8006bf0 <main+0x50>
    RCC->BDCR = RCC_BDCR_BDRST;
 8006be8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006bec:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8006bee:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8006bf0:	4c07      	ldr	r4, [pc, #28]	; (8006c10 <main+0x70>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 8006bf2:	4e08      	ldr	r6, [pc, #32]	; (8006c14 <main+0x74>)
 8006bf4:	6863      	ldr	r3, [r4, #4]
 8006bf6:	4a08      	ldr	r2, [pc, #32]	; (8006c18 <main+0x78>)
 8006bf8:	4908      	ldr	r1, [pc, #32]	; (8006c1c <main+0x7c>)
 8006bfa:	4d09      	ldr	r5, [pc, #36]	; (8006c20 <main+0x80>)
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c02:	6063      	str	r3, [r4, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
 8006c04:	4603      	mov	r3, r0
  dma_streams_mask = 0U;
 8006c06:	6030      	str	r0, [r6, #0]
 8006c08:	e00e      	b.n	8006c28 <main+0x88>
 8006c0a:	bf00      	nop
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	40007000 	.word	0x40007000
 8006c14:	20001360 	.word	0x20001360
 8006c18:	0800f84c 	.word	0x0800f84c
 8006c1c:	40026010 	.word	0x40026010
 8006c20:	200012e0 	.word	0x200012e0
 8006c24:	f852 1c0c 	ldr.w	r1, [r2, #-12]
    _stm32_dma_streams[i].stream->CR = 0U;
 8006c28:	600b      	str	r3, [r1, #0]
    dma_isr_redir[i].dma_func = NULL;
 8006c2a:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8006c2e:	3001      	adds	r0, #1
 8006c30:	2810      	cmp	r0, #16
 8006c32:	f102 020c 	add.w	r2, r2, #12
 8006c36:	d1f5      	bne.n	8006c24 <main+0x84>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8006c38:	4cc2      	ldr	r4, [pc, #776]	; (8006f44 <main+0x3a4>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8006c3a:	49c3      	ldr	r1, [pc, #780]	; (8006f48 <main+0x3a8>)
 8006c3c:	9001      	str	r0, [sp, #4]
  DMA1->LIFCR = 0xFFFFFFFFU;
 8006c3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c42:	60a2      	str	r2, [r4, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8006c44:	60e2      	str	r2, [r4, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8006c46:	608a      	str	r2, [r1, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8006c48:	60ca      	str	r2, [r1, #12]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8006c4a:	f5a1 5130 	sub.w	r1, r1, #11264	; 0x2c00
 8006c4e:	f240 15ff 	movw	r5, #511	; 0x1ff
 8006c52:	6b09      	ldr	r1, [r1, #48]	; 0x30
  gpiop->OTYPER  = config->otyper;
 8006c54:	f8df 935c 	ldr.w	r9, [pc, #860]	; 8006fb4 <main+0x414>
  gpiop->PUPDR   = config->pupdr;
 8006c58:	4fbc      	ldr	r7, [pc, #752]	; (8006f4c <main+0x3ac>)
  gpiop->AFRL    = config->afrl;
 8006c5a:	f8df b35c 	ldr.w	fp, [pc, #860]	; 8006fb8 <main+0x418>
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8006c5e:	f8df a35c 	ldr.w	sl, [pc, #860]	; 8006fbc <main+0x41c>
  gpiop->OTYPER  = config->otyper;
 8006c62:	f8df 835c 	ldr.w	r8, [pc, #860]	; 8006fc0 <main+0x420>
 8006c66:	f8df c35c 	ldr.w	ip, [pc, #860]	; 8006fc4 <main+0x424>
 8006c6a:	48b9      	ldr	r0, [pc, #740]	; (8006f50 <main+0x3b0>)
 8006c6c:	4eb9      	ldr	r6, [pc, #740]	; (8006f54 <main+0x3b4>)
 8006c6e:	f8df e358 	ldr.w	lr, [pc, #856]	; 8006fc8 <main+0x428>
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8006c72:	f5a4 5420 	sub.w	r4, r4, #10240	; 0x2800
 8006c76:	4329      	orrs	r1, r5
 8006c78:	6321      	str	r1, [r4, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8006c7a:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8006c7c:	432c      	orrs	r4, r5
 8006c7e:	4db6      	ldr	r5, [pc, #728]	; (8006f58 <main+0x3b8>)
 8006c80:	652c      	str	r4, [r5, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8006c82:	f46f 44a8 	mvn.w	r4, #21504	; 0x5400
  gpiop->OTYPER  = config->otyper;
 8006c86:	f8c9 3004 	str.w	r3, [r9, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8006c8a:	f8c9 4008 	str.w	r4, [r9, #8]
  gpiop->PUPDR   = config->pupdr;
 8006c8e:	f8c9 700c 	str.w	r7, [r9, #12]
  gpiop->AFRH    = config->afrh;
 8006c92:	4fb2      	ldr	r7, [pc, #712]	; (8006f5c <main+0x3bc>)
  gpiop->ODR     = config->odr;
 8006c94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006c98:	f8c9 1014 	str.w	r1, [r9, #20]
  gpiop->AFRL    = config->afrl;
 8006c9c:	f8c9 b020 	str.w	fp, [r9, #32]
  gpiop->AFRH    = config->afrh;
 8006ca0:	f8c9 7024 	str.w	r7, [r9, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8006ca4:	f107 572a 	add.w	r7, r7, #713031680	; 0x2a800000
 8006ca8:	f507 17b0 	add.w	r7, r7, #1441792	; 0x160000
 8006cac:	f8c9 7000 	str.w	r7, [r9]
  gpiop->OTYPER  = config->otyper;
 8006cb0:	f107 57ab 	add.w	r7, r7, #358612992	; 0x15600000
 8006cb4:	f507 37ad 	add.w	r7, r7, #88576	; 0x15a00
 8006cb8:	f44f 7410 	mov.w	r4, #576	; 0x240
 8006cbc:	607c      	str	r4, [r7, #4]
  gpiop->PUPDR   = config->pupdr;
 8006cbe:	4ca8      	ldr	r4, [pc, #672]	; (8006f60 <main+0x3c0>)
  gpiop->OSPEEDR = config->ospeedr;
 8006cc0:	60ba      	str	r2, [r7, #8]
  gpiop->AFRL    = config->afrl;
 8006cc2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  gpiop->PUPDR   = config->pupdr;
 8006cc6:	60fc      	str	r4, [r7, #12]
  gpiop->ODR     = config->odr;
 8006cc8:	463c      	mov	r4, r7
 8006cca:	6179      	str	r1, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8006ccc:	623d      	str	r5, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8006cce:	2740      	movs	r7, #64	; 0x40
 8006cd0:	6267      	str	r7, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8006cd2:	4fa4      	ldr	r7, [pc, #656]	; (8006f64 <main+0x3c4>)
 8006cd4:	6027      	str	r7, [r4, #0]
  gpiop->PUPDR   = config->pupdr;
 8006cd6:	f107 47aa 	add.w	r7, r7, #1426063360	; 0x55000000
  gpiop->OTYPER  = config->otyper;
 8006cda:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->PUPDR   = config->pupdr;
 8006cde:	f5a7 0743 	sub.w	r7, r7, #12779520	; 0xc30000
  gpiop->OTYPER  = config->otyper;
 8006ce2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  gpiop->PUPDR   = config->pupdr;
 8006ce6:	f6a7 372c 	subw	r7, r7, #2860	; 0xb2c
  gpiop->OSPEEDR = config->ospeedr;
 8006cea:	60a2      	str	r2, [r4, #8]
  gpiop->AFRL    = config->afrl;
 8006cec:	f04f 4bc0 	mov.w	fp, #1610612736	; 0x60000000
  gpiop->PUPDR   = config->pupdr;
 8006cf0:	60e7      	str	r7, [r4, #12]
  gpiop->AFRH    = config->afrh;
 8006cf2:	4f9d      	ldr	r7, [pc, #628]	; (8006f68 <main+0x3c8>)
  gpiop->ODR     = config->odr;
 8006cf4:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8006cf6:	f8c4 b020 	str.w	fp, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8006cfa:	6267      	str	r7, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8006cfc:	4f9b      	ldr	r7, [pc, #620]	; (8006f6c <main+0x3cc>)
 8006cfe:	6027      	str	r7, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 8006d00:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
 8006d04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  gpiop->PUPDR   = config->pupdr;
 8006d08:	4f99      	ldr	r7, [pc, #612]	; (8006f70 <main+0x3d0>)
  gpiop->OSPEEDR = config->ospeedr;
 8006d0a:	60a2      	str	r2, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8006d0c:	60e7      	str	r7, [r4, #12]
  gpiop->ODR     = config->odr;
 8006d0e:	4f99      	ldr	r7, [pc, #612]	; (8006f74 <main+0x3d4>)
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8006d10:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 8006fcc <main+0x42c>
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state      = UART_STOP;
 8006d14:	4c98      	ldr	r4, [pc, #608]	; (8006f78 <main+0x3d8>)
 8006d16:	f640 75ff 	movw	r5, #4095	; 0xfff
 8006d1a:	617d      	str	r5, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8006d1c:	463d      	mov	r5, r7
 8006d1e:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8006d22:	4f96      	ldr	r7, [pc, #600]	; (8006f7c <main+0x3dc>)
 8006d24:	602f      	str	r7, [r5, #0]
 8006d26:	2540      	movs	r5, #64	; 0x40
  gpiop->OTYPER  = config->otyper;
 8006d28:	f8c8 3004 	str.w	r3, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8006d2c:	f8c8 2008 	str.w	r2, [r8, #8]
  gpiop->PUPDR   = config->pupdr;
 8006d30:	f8c8 300c 	str.w	r3, [r8, #12]
  gpiop->ODR     = config->odr;
 8006d34:	f8c8 1014 	str.w	r1, [r8, #20]
  gpiop->AFRL    = config->afrl;
 8006d38:	f8c8 3020 	str.w	r3, [r8, #32]
  gpiop->AFRH    = config->afrh;
 8006d3c:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8006d40:	f8c8 5000 	str.w	r5, [r8]
 8006d44:	4655      	mov	r5, sl
  gpiop->OTYPER  = config->otyper;
 8006d46:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8006d48:	6082      	str	r2, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8006d4a:	60c3      	str	r3, [r0, #12]
  gpiop->ODR     = config->odr;
 8006d4c:	6141      	str	r1, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8006d4e:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8006d50:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8006d52:	6003      	str	r3, [r0, #0]
  gpiop->OTYPER  = config->otyper;
 8006d54:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8006d56:	60b2      	str	r2, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8006d58:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 8006d5a:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8006d5c:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8006d5e:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8006d60:	6033      	str	r3, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 8006d62:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8006d66:	f8ce 2008 	str.w	r2, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 8006d6a:	f8ce 300c 	str.w	r3, [lr, #12]
  gpiop->ODR     = config->odr;
 8006d6e:	f8ce 1014 	str.w	r1, [lr, #20]
  gpiop->AFRL    = config->afrl;
 8006d72:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8006d76:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8006d7a:	f8ce 3000 	str.w	r3, [lr]
  gpiop->OTYPER  = config->otyper;
 8006d7e:	f8cc 3004 	str.w	r3, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8006d82:	f8cc 2008 	str.w	r2, [ip, #8]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8006d86:	9f01      	ldr	r7, [sp, #4]
  gpiop->PUPDR   = config->pupdr;
 8006d88:	f8cc 300c 	str.w	r3, [ip, #12]
  gpiop->ODR     = config->odr;
 8006d8c:	f8cc 1014 	str.w	r1, [ip, #20]
 8006d90:	497b      	ldr	r1, [pc, #492]	; (8006f80 <main+0x3e0>)
  gpiop->AFRL    = config->afrl;
 8006d92:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8006d96:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8006d9a:	f8cc 3000 	str.w	r3, [ip]
 8006d9e:	f845 1b04 	str.w	r1, [r5], #4
  iqp->q_counter = 0;
 8006da2:	f8ca 3014 	str.w	r3, [sl, #20]
  oqp->q_counter = size;
 8006da6:	f8ca 7038 	str.w	r7, [sl, #56]	; 0x38
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8006daa:	f10a 0774 	add.w	r7, sl, #116	; 0x74
  iqp->q_top     = bp + size;
 8006dae:	f10a 0164 	add.w	r1, sl, #100	; 0x64
  oqp->q_top     = bp + size;
 8006db2:	f8ca 7040 	str.w	r7, [sl, #64]	; 0x40
  oqp->q_notify  = onfy;
 8006db6:	4f73      	ldr	r7, [pc, #460]	; (8006f84 <main+0x3e4>)
 8006db8:	9502      	str	r5, [sp, #8]
 8006dba:	f8ca 704c 	str.w	r7, [sl, #76]	; 0x4c
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8006dbe:	4d72      	ldr	r5, [pc, #456]	; (8006f88 <main+0x3e8>)
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8006dc0:	4f72      	ldr	r7, [pc, #456]	; (8006f8c <main+0x3ec>)
  iqp->q_top     = bp + size;
 8006dc2:	f8ca 101c 	str.w	r1, [sl, #28]
  oqp->q_buffer  = bp;
 8006dc6:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8006dca:	f8ca 1048 	str.w	r1, [sl, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8006dce:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 * @notapi
 */
void wdg_lld_init(void) {

#if STM32_WDG_USE_IWDG
  WDGD1.state = WDG_STOP;
 8006dd2:	496f      	ldr	r1, [pc, #444]	; (8006f90 <main+0x3f0>)
 8006dd4:	f8ca 7074 	str.w	r7, [sl, #116]	; 0x74
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8006dd8:	2601      	movs	r6, #1
  iqp->q_buffer  = bp;
 8006dda:	f10a 0054 	add.w	r0, sl, #84	; 0x54
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8006dde:	f10a 0c0c 	add.w	ip, sl, #12
 8006de2:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8006de6:	9f02      	ldr	r7, [sp, #8]
 8006de8:	802a      	strh	r2, [r5, #0]
  spip->config = NULL;
 8006dea:	f8cb 3004 	str.w	r3, [fp, #4]
  iqp->q_notify  = infy;
 8006dee:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
 8006df2:	f8ca 7004 	str.w	r7, [sl, #4]
 8006df6:	f8ca c00c 	str.w	ip, [sl, #12]
  tqp->p_prev = (thread_t *)tqp;
 8006dfa:	f8ca c010 	str.w	ip, [sl, #16]
  iqp->q_buffer  = bp;
 8006dfe:	f8ca 0018 	str.w	r0, [sl, #24]
  iqp->q_rdptr   = bp;
 8006e02:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8006e06:	f8ca 0020 	str.w	r0, [sl, #32]
  tqp->p_next = (thread_t *)tqp;
 8006e0a:	f8ca e030 	str.w	lr, [sl, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8006e0e:	f8ca e034 	str.w	lr, [sl, #52]	; 0x34
  iqp->q_link    = link;
 8006e12:	f8ca a02c 	str.w	sl, [sl, #44]	; 0x2c
  oqp->q_link    = link;
 8006e16:	f8ca a050 	str.w	sl, [sl, #80]	; 0x50
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8006e1a:	f8cb 3008 	str.w	r3, [fp, #8]
 8006e1e:	700e      	strb	r6, [r1, #0]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8006e20:	494d      	ldr	r1, [pc, #308]	; (8006f58 <main+0x3b8>)
  spip->state = SPI_STOP;
 8006e22:	f88b 6000 	strb.w	r6, [fp]
  uartp->txstate    = UART_TX_IDLE;
 8006e26:	7063      	strb	r3, [r4, #1]
  uartp->rxstate    = UART_RX_IDLE;
 8006e28:	70a3      	strb	r3, [r4, #2]
 8006e2a:	f88a 6008 	strb.w	r6, [sl, #8]
  uartp->state      = UART_STOP;
 8006e2e:	7026      	strb	r6, [r4, #0]
 8006e30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e32:	4849      	ldr	r0, [pc, #292]	; (8006f58 <main+0x3b8>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8006e34:	f8cb 3014 	str.w	r3, [fp, #20]
  tqp->p_next = (thread_t *)tqp;
 8006e38:	f10b 050c 	add.w	r5, fp, #12
 8006e3c:	f8cb 500c 	str.w	r5, [fp, #12]
  tqp->p_prev = (thread_t *)tqp;
 8006e40:	f8cb 5010 	str.w	r5, [fp, #16]
 8006e44:	4331      	orrs	r1, r6

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8006e46:	4d53      	ldr	r5, [pc, #332]	; (8006f94 <main+0x3f4>)
  ST_ENABLE_CLOCK();
 8006e48:	6401      	str	r1, [r0, #64]	; 0x40
  ST_ENABLE_STOP();
 8006e4a:	68a8      	ldr	r0, [r5, #8]
  uartp->config     = NULL;
 8006e4c:	6063      	str	r3, [r4, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8006e4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  ST_ENABLE_STOP();
 8006e52:	4330      	orrs	r0, r6
 8006e54:	60a8      	str	r0, [r5, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8006e56:	f242 00cf 	movw	r0, #8399	; 0x20cf
 8006e5a:	6288      	str	r0, [r1, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8006e5c:	62ca      	str	r2, [r1, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8006e5e:	618b      	str	r3, [r1, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8006e60:	634b      	str	r3, [r1, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8006e62:	60cb      	str	r3, [r1, #12]
  STM32_ST_TIM->CR2    = 0;
 8006e64:	604b      	str	r3, [r1, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8006e66:	614e      	str	r6, [r1, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8006e68:	600e      	str	r6, [r1, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006e6a:	494b      	ldr	r1, [pc, #300]	; (8006f98 <main+0x3f8>)

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8006e6c:	f8df c160 	ldr.w	ip, [pc, #352]	; 8006fd0 <main+0x430>
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8006e70:	4f4a      	ldr	r7, [pc, #296]	; (8006f9c <main+0x3fc>)
  SPID1.spi       = SPI1;
 8006e72:	f8df e160 	ldr.w	lr, [pc, #352]	; 8006fd4 <main+0x434>
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006e76:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006e7a:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 8006e7e:	f881 531c 	strb.w	r5, [r1, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006e82:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006e86:	6008      	str	r0, [r1, #0]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8006e88:	4845      	ldr	r0, [pc, #276]	; (8006fa0 <main+0x400>)
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8006e8a:	f10c 0124 	add.w	r1, ip, #36	; 0x24
 8006e8e:	6083      	str	r3, [r0, #8]
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8006e90:	f8cb 702c 	str.w	r7, [fp, #44]	; 0x2c
 */
void uart_lld_init(void) {

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
  UARTD1.usart   = USART1;
 8006e94:	f107 5768 	add.w	r7, r7, #973078528	; 0x3a000000
  SPID1.spi       = SPI1;
 8006e98:	f8cb e01c 	str.w	lr, [fp, #28]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8006e9c:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
  UARTD1.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8006ea0:	f04f 0e06 	mov.w	lr, #6
  UARTD1.dmarx   = STM32_DMA_STREAM(STM32_UART_USART1_RX_DMA_STREAM);
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
 8006ea4:	f10c 0154 	add.w	r1, ip, #84	; 0x54
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8006ea8:	483e      	ldr	r0, [pc, #248]	; (8006fa4 <main+0x404>)
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8006eaa:	f8cb c020 	str.w	ip, [fp, #32]
  UARTD1.usart   = USART1;
 8006eae:	f607 77ba 	addw	r7, r7, #4026	; 0xfba
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8006eb2:	f8cb 0028 	str.w	r0, [fp, #40]	; 0x28
 8006eb6:	60a7      	str	r7, [r4, #8]
  UARTD1.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8006eb8:	f8c4 e00c 	str.w	lr, [r4, #12]
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
 8006ebc:	6161      	str	r1, [r4, #20]
  WDGD1.wdg   = IWDG;
 8006ebe:	4934      	ldr	r1, [pc, #208]	; (8006f90 <main+0x3f0>)
 8006ec0:	4839      	ldr	r0, [pc, #228]	; (8006fa8 <main+0x408>)
 8006ec2:	6088      	str	r0, [r1, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ec4:	4936      	ldr	r1, [pc, #216]	; (8006fa0 <main+0x400>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006ec6:	f8df e110 	ldr.w	lr, [pc, #272]	; 8006fd8 <main+0x438>
 8006eca:	68c8      	ldr	r0, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8006ecc:	4937      	ldr	r1, [pc, #220]	; (8006fac <main+0x40c>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ece:	f89d 7004 	ldrb.w	r7, [sp, #4]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8006ed2:	f64f 0bff 	movw	fp, #63743	; 0xf8ff
 8006ed6:	ea00 000b 	and.w	r0, r0, fp
  reg_value  =  (reg_value                                   |
 8006eda:	4301      	orrs	r1, r0
  SCB->AIRCR =  reg_value;
 8006edc:	4830      	ldr	r0, [pc, #192]	; (8006fa0 <main+0x400>)
  UARTD1.dmarx   = STM32_DMA_STREAM(STM32_UART_USART1_RX_DMA_STREAM);
 8006ede:	f10c 053c 	add.w	r5, ip, #60	; 0x3c
 8006ee2:	6125      	str	r5, [r4, #16]
 8006ee4:	60c1      	str	r1, [r0, #12]
 8006ee6:	f8de 100c 	ldr.w	r1, [lr, #12]
  tqp->p_next = (thread_t *)tqp;
 8006eea:	4d31      	ldr	r5, [pc, #196]	; (8006fb0 <main+0x410>)
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8006eec:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8006fdc <main+0x43c>
  tqp->p_prev = (thread_t *)tqp;
 8006ef0:	606d      	str	r5, [r5, #4]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006ef2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8006ef6:	f8ce 100c 	str.w	r1, [lr, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8006efa:	f8dc 1000 	ldr.w	r1, [ip]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8006efe:	60ab      	str	r3, [r5, #8]
 8006f00:	4331      	orrs	r1, r6
 8006f02:	f8cc 1000 	str.w	r1, [ip]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f06:	77c7      	strb	r7, [r0, #31]
 8006f08:	4f25      	ldr	r7, [pc, #148]	; (8006fa0 <main+0x400>)
 8006f0a:	f04f 0e20 	mov.w	lr, #32
 8006f0e:	f887 e022 	strb.w	lr, [r7, #34]	; 0x22
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8006f12:	f105 011c 	add.w	r1, r5, #28
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8006f16:	a826      	add	r0, sp, #152	; 0x98
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8006f18:	9226      	str	r2, [sp, #152]	; 0x98
  tmp->worst      = (rtcnt_t)0;
 8006f1a:	9327      	str	r3, [sp, #156]	; 0x9c
  tmp->last       = (rtcnt_t)0;
 8006f1c:	9328      	str	r3, [sp, #160]	; 0xa0
  tmp->n          = (ucnt_t)0;
 8006f1e:	9329      	str	r3, [sp, #164]	; 0xa4
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8006f20:	626a      	str	r2, [r5, #36]	; 0x24
 8006f22:	9203      	str	r2, [sp, #12]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8006f24:	62ab      	str	r3, [r5, #40]	; 0x28
  tmp->cumulative = (rttime_t)0;
 8006f26:	2200      	movs	r2, #0
  ch.tm.offset = (rtcnt_t)0;
 8006f28:	f8c5 34a0 	str.w	r3, [r5, #1184]	; 0x4a0
 8006f2c:	9302      	str	r3, [sp, #8]
  tqp->p_next = (thread_t *)tqp;
 8006f2e:	602d      	str	r5, [r5, #0]
  tmp->cumulative = (rttime_t)0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8006f36:	61e9      	str	r1, [r5, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8006f38:	6229      	str	r1, [r5, #32]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8006f3a:	612d      	str	r5, [r5, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8006f3c:	616d      	str	r5, [r5, #20]
  chTMStartMeasurementX(&tm);
 8006f3e:	f005 f987 	bl	800c250 <chTMStartMeasurementX>
 8006f42:	e04d      	b.n	8006fe0 <main+0x440>
 8006f44:	40026000 	.word	0x40026000
 8006f48:	40026400 	.word	0x40026400
 8006f4c:	40010054 	.word	0x40010054
 8006f50:	40021400 	.word	0x40021400
 8006f54:	40021800 	.word	0x40021800
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	000aaa00 	.word	0x000aaa00
 8006f60:	55514515 	.word	0x55514515
 8006f64:	00082080 	.word	0x00082080
 8006f68:	00060600 	.word	0x00060600
 8006f6c:	02208001 	.word	0x02208001
 8006f70:	00555055 	.word	0x00555055
 8006f74:	40020c00 	.word	0x40020c00
 8006f78:	20001674 	.word	0x20001674
 8006f7c:	55000100 	.word	0x55000100
 8006f80:	0800fb80 	.word	0x0800fb80
 8006f84:	08008971 	.word	0x08008971
 8006f88:	20001364 	.word	0x20001364
 8006f8c:	40004400 	.word	0x40004400
 8006f90:	20001278 	.word	0x20001278
 8006f94:	e0042000 	.word	0xe0042000
 8006f98:	e000e100 	.word	0xe000e100
 8006f9c:	06010046 	.word	0x06010046
 8006fa0:	e000ed00 	.word	0xe000ed00
 8006fa4:	06010016 	.word	0x06010016
 8006fa8:	40003000 	.word	0x40003000
 8006fac:	05fa0300 	.word	0x05fa0300
 8006fb0:	20001698 	.word	0x20001698
 8006fb4:	40020000 	.word	0x40020000
 8006fb8:	55560000 	.word	0x55560000
 8006fbc:	200015fc 	.word	0x200015fc
 8006fc0:	40021000 	.word	0x40021000
 8006fc4:	40022000 	.word	0x40022000
 8006fc8:	40021c00 	.word	0x40021c00
 8006fcc:	20001248 	.word	0x20001248
 8006fd0:	0800f8a0 	.word	0x0800f8a0
 8006fd4:	40013000 	.word	0x40013000
 8006fd8:	e000edf0 	.word	0xe000edf0
 8006fdc:	e0001000 	.word	0xe0001000
  chTMStopMeasurementX(&tm);
 8006fe0:	a826      	add	r0, sp, #152	; 0x98
 8006fe2:	f005 f8fd 	bl	800c1e0 <chTMStopMeasurementX>
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8006fe6:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 800729c <main+0x6fc>
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8006fea:	489e      	ldr	r0, [pc, #632]	; (8007264 <main+0x6c4>)
 *
 * @init
 */
void _stats_init(void) {

  ch.kernel_stats.n_irq = (ucnt_t)0;
 8006fec:	9b02      	ldr	r3, [sp, #8]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8006fee:	499e      	ldr	r1, [pc, #632]	; (8007268 <main+0x6c8>)
  tmp->best       = (rtcnt_t)-1;
 8006ff0:	9a03      	ldr	r2, [sp, #12]
  default_heap.h_free.h.u.next = NULL;
 8006ff2:	608b      	str	r3, [r1, #8]
 * @brief   Trace circular buffer subsystem initialization.
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
 8006ff4:	f04f 0e40 	mov.w	lr, #64	; 0x40
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8006ff8:	f02c 0707 	bic.w	r7, ip, #7
  tmp->cumulative = (rttime_t)0;
 8006ffc:	f04f 0b00 	mov.w	fp, #0
 8007000:	f04f 0c00 	mov.w	ip, #0
 8007004:	f8c5 e038 	str.w	lr, [r5, #56]	; 0x38
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8007008:	f8c5 e448 	str.w	lr, [r5, #1096]	; 0x448
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800700c:	f8c5 e480 	str.w	lr, [r5, #1152]	; 0x480
 8007010:	f505 6e98 	add.w	lr, r5, #1216	; 0x4c0
 8007014:	e9ce bc00 	strd	fp, ip, [lr]
 8007018:	f505 6e9b 	add.w	lr, r5, #1240	; 0x4d8
 800701c:	e9ce bc00 	strd	fp, ip, [lr]
  ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 8007020:	f105 0e40 	add.w	lr, r5, #64	; 0x40
 8007024:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8007028:	f8df e274 	ldr.w	lr, [pc, #628]	; 80072a0 <main+0x700>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800702c:	9702      	str	r7, [sp, #8]
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800702e:	f020 0007 	bic.w	r0, r0, #7
  ch.tm.offset = tm.last;
 8007032:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8007034:	f8ce 0000 	str.w	r0, [lr]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8007038:	488c      	ldr	r0, [pc, #560]	; (800726c <main+0x6cc>)
 800703a:	f8c5 74a0 	str.w	r7, [r5, #1184]	; 0x4a0
 800703e:	9f02      	ldr	r7, [sp, #8]
 8007040:	6007      	str	r7, [r0, #0]
  default_heap.h_provider = chCoreAlloc;
 8007042:	f8df e260 	ldr.w	lr, [pc, #608]	; 80072a4 <main+0x704>
  default_heap.h_free.h.size = 0;
 8007046:	60cb      	str	r3, [r1, #12]
 8007048:	f101 0010 	add.w	r0, r1, #16
 800704c:	f8c5 34a8 	str.w	r3, [r5, #1192]	; 0x4a8
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 8007050:	f8c5 34ac 	str.w	r3, [r5, #1196]	; 0x4ac
  tmp->best       = (rtcnt_t)-1;
 8007054:	f8c5 24b0 	str.w	r2, [r5, #1200]	; 0x4b0
  tmp->worst      = (rtcnt_t)0;
 8007058:	f8c5 34b4 	str.w	r3, [r5, #1204]	; 0x4b4
  tmp->last       = (rtcnt_t)0;
 800705c:	f8c5 34b8 	str.w	r3, [r5, #1208]	; 0x4b8
  tmp->n          = (ucnt_t)0;
 8007060:	f8c5 34bc 	str.w	r3, [r5, #1212]	; 0x4bc
  tmp->best       = (rtcnt_t)-1;
 8007064:	f8c5 24c8 	str.w	r2, [r5, #1224]	; 0x4c8
  tmp->worst      = (rtcnt_t)0;
 8007068:	f8c5 34cc 	str.w	r3, [r5, #1228]	; 0x4cc
  tmp->last       = (rtcnt_t)0;
 800706c:	f8c5 34d0 	str.w	r3, [r5, #1232]	; 0x4d0
  tmp->n          = (ucnt_t)0;
 8007070:	f8c5 34d4 	str.w	r3, [r5, #1236]	; 0x4d4
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8007074:	f885 3461 	strb.w	r3, [r5, #1121]	; 0x461
  tp->p_mtxlist = NULL;
 8007078:	f8c5 347c 	str.w	r3, [r5, #1148]	; 0x47c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800707c:	f8c5 3478 	str.w	r3, [r5, #1144]	; 0x478
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8007080:	f8c5 3458 	str.w	r3, [r5, #1112]	; 0x458
  tp->p_refs = (trefs_t)1;
 8007084:	f885 6462 	strb.w	r6, [r5, #1122]	; 0x462
  REG_INSERT(tp);
 8007088:	f8c5 5450 	str.w	r5, [r5, #1104]	; 0x450
 800708c:	618b      	str	r3, [r1, #24]
  default_heap.h_provider = chCoreAlloc;
 800708e:	f8c1 e000 	str.w	lr, [r1]
 8007092:	6108      	str	r0, [r1, #16]
  tqp->p_prev = (thread_t *)tqp;
 8007094:	6148      	str	r0, [r1, #20]
 8007096:	6969      	ldr	r1, [r5, #20]
 8007098:	f8c5 1454 	str.w	r1, [r5, #1108]	; 0x454
 800709c:	f505 6088 	add.w	r0, r5, #1088	; 0x440
 80070a0:	6108      	str	r0, [r1, #16]
  tlp->p_next = (thread_t *)tlp;
 80070a2:	f505 6e8d 	add.w	lr, r5, #1128	; 0x468
  tmp->cumulative = (rttime_t)0;
 80070a6:	f505 6193 	add.w	r1, r5, #1176	; 0x498
  tmp->worst      = (rtcnt_t)0;
 80070aa:	f8c5 348c 	str.w	r3, [r5, #1164]	; 0x48c
  tmp->last       = (rtcnt_t)0;
 80070ae:	f8c5 3490 	str.w	r3, [r5, #1168]	; 0x490
  tmp->n          = (ucnt_t)0;
 80070b2:	f8c5 3494 	str.w	r3, [r5, #1172]	; 0x494

  currp->p_state = CH_STATE_CURRENT;
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 80070b6:	4f6e      	ldr	r7, [pc, #440]	; (8007270 <main+0x6d0>)
 80070b8:	6168      	str	r0, [r5, #20]
  tqp->p_next = (thread_t *)tqp;
 80070ba:	f205 436c 	addw	r3, r5, #1132	; 0x46c
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 80070be:	61a8      	str	r0, [r5, #24]
 80070c0:	f8c5 346c 	str.w	r3, [r5, #1132]	; 0x46c
  tqp->p_prev = (thread_t *)tqp;
 80070c4:	f8c5 3470 	str.w	r3, [r5, #1136]	; 0x470
  tmp->best       = (rtcnt_t)-1;
 80070c8:	f8c5 2488 	str.w	r2, [r5, #1160]	; 0x488
#endif

#if CH_DBG_STATISTICS == TRUE
  /* Starting measurement for this thread.*/
  chTMStartMeasurementX(&currp->p_stats);
 80070cc:	f505 6091 	add.w	r0, r5, #1160	; 0x488
  currp->p_state = CH_STATE_CURRENT;
 80070d0:	f885 6460 	strb.w	r6, [r5, #1120]	; 0x460
  tlp->p_next = (thread_t *)tlp;
 80070d4:	f8c5 e468 	str.w	lr, [r5, #1128]	; 0x468
  tmp->cumulative = (rttime_t)0;
 80070d8:	e9c1 bc00 	strd	fp, ip, [r1]
  currp->p_stklimit = &__main_thread_stack_base__;
 80070dc:	f8c5 745c 	str.w	r7, [r5, #1116]	; 0x45c
  chTMStartMeasurementX(&currp->p_stats);
 80070e0:	f005 f8b6 	bl	800c250 <chTMStartMeasurementX>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80070e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80070e6:	b90b      	cbnz	r3, 80070ec <main+0x54c>
 80070e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80070ea:	b11b      	cbz	r3, 80070f4 <main+0x554>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80070ec:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80070ee:	4b61      	ldr	r3, [pc, #388]	; (8007274 <main+0x6d4>)
 80070f0:	62eb      	str	r3, [r5, #44]	; 0x2c
 80070f2:	e7fe      	b.n	80070f2 <main+0x552>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80070f4:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80070f8:	b662      	cpsie	i
 80070fa:	69ab      	ldr	r3, [r5, #24]
 80070fc:	4a5e      	ldr	r2, [pc, #376]	; (8007278 <main+0x6d8>)
 80070fe:	619a      	str	r2, [r3, #24]
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 8007100:	f505 609c 	add.w	r0, r5, #1248	; 0x4e0
 8007104:	4632      	mov	r2, r6
 8007106:	4b5d      	ldr	r3, [pc, #372]	; (800727c <main+0x6dc>)
 8007108:	21f8      	movs	r1, #248	; 0xf8
 800710a:	f007 fdc1 	bl	800ec90 <chThdCreateStatic.constprop.55>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800710e:	4b5c      	ldr	r3, [pc, #368]	; (8007280 <main+0x6e0>)
 8007110:	6183      	str	r3, [r0, #24]

    static thread_t *shelltp = NULL;
   
    event_listener_t el0, el1;

    palSetPadMode(GPIOE, 0,PAL_MODE_OUTPUT_PUSHPULL);
 8007112:	4632      	mov	r2, r6
 8007114:	4631      	mov	r1, r6
 8007116:	4640      	mov	r0, r8
 8007118:	f002 f8aa 	bl	8009270 <_pal_lld_setgroupmode>
    palClearPad(GPIOE, 0);

    palSetPadMode(GPIOE, 1,PAL_MODE_OUTPUT_PUSHPULL);
 800711c:	4632      	mov	r2, r6
 800711e:	4640      	mov	r0, r8
    palClearPad(GPIOE, 0);
 8007120:	f8a8 601a 	strh.w	r6, [r8, #26]
    palSetPadMode(GPIOE, 1,PAL_MODE_OUTPUT_PUSHPULL);
 8007124:	2102      	movs	r1, #2
 8007126:	f002 f8a3 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPad(GPIOE, 1);
 800712a:	f04f 0302 	mov.w	r3, #2
 800712e:	f8a8 3018 	strh.w	r3, [r8, #24]

    palSetPadMode(GPIOE, 2,PAL_MODE_OUTPUT_PUSHPULL);
 8007132:	4632      	mov	r2, r6
 8007134:	4640      	mov	r0, r8
 8007136:	2104      	movs	r1, #4
 8007138:	f002 f89a 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPad(GPIOE, 2);
 800713c:	2304      	movs	r3, #4
 800713e:	f8a8 3018 	strh.w	r3, [r8, #24]

    palSetPadMode(GPIOE, 3,PAL_MODE_OUTPUT_PUSHPULL);
 8007142:	4632      	mov	r2, r6
 8007144:	4640      	mov	r0, r8
 8007146:	2108      	movs	r1, #8
 8007148:	f002 f892 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPad(GPIOE, 3);
 800714c:	2308      	movs	r3, #8

    palSetPadMode(GPIOC, 0,PAL_MODE_OUTPUT_PUSHPULL);
 800714e:	4632      	mov	r2, r6
 8007150:	4631      	mov	r1, r6
    palSetPad(GPIOE, 3);
 8007152:	f8a8 3018 	strh.w	r3, [r8, #24]
    palSetPadMode(GPIOC, 0,PAL_MODE_OUTPUT_PUSHPULL);
 8007156:	484b      	ldr	r0, [pc, #300]	; (8007284 <main+0x6e4>)
 8007158:	f002 f88a 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPad(GPIOC, 0);
 800715c:	4b49      	ldr	r3, [pc, #292]	; (8007284 <main+0x6e4>)
 800715e:	831e      	strh	r6, [r3, #24]

    uint8_t D_T1;
    uint8_t i;

    LCDInit();
 8007160:	f004 fdae 	bl	800bcc0 <LCDInit>
    LCDBegin(16,2);
 8007164:	f007 fd1c 	bl	800eba0 <LCDBegin.constprop.4>
    
    //SPI

    /* Inicializa SPI */ 
    palSetPadMode(GPIOA, 4, PAL_MODE_OUTPUT_PUSHPULL);// | PAL_STM32_OSPEED_HIGHEST);          // NSS
 8007168:	9f01      	ldr	r7, [sp, #4]
 800716a:	4632      	mov	r2, r6
 800716c:	4639      	mov	r1, r7
 800716e:	4648      	mov	r0, r9
 8007170:	f002 f87e 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 5, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);            // SCK
 8007174:	4648      	mov	r0, r9
 8007176:	2120      	movs	r1, #32
 8007178:	f240 229a 	movw	r2, #666	; 0x29a
 800717c:	f002 f878 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 6, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);            // MISO
 8007180:	4648      	mov	r0, r9
 8007182:	2140      	movs	r1, #64	; 0x40
 8007184:	f240 229a 	movw	r2, #666	; 0x29a
 8007188:	f002 f872 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 7, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);            // MOSI
 800718c:	2180      	movs	r1, #128	; 0x80
 800718e:	4648      	mov	r0, r9
 8007190:	f240 229a 	movw	r2, #666	; 0x29a
 8007194:	f002 f86c 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPad(GPIOA, 4);
 8007198:	f8a9 7018 	strh.w	r7, [r9, #24]

    chThdSleepMilliseconds(100);  
 800719c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071a0:	f005 fc4e 	bl	800ca40 <chThdSleep>
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 80071a4:	4632      	mov	r2, r6
 80071a6:	a90d      	add	r1, sp, #52	; 0x34
 80071a8:	4837      	ldr	r0, [pc, #220]	; (8007288 <main+0x6e8>)
 80071aa:	f007 fe31 	bl	800ee10 <chEvtRegisterMaskWithFlags.constprop.50>
 80071ae:	a908      	add	r1, sp, #32
 80071b0:	2202      	movs	r2, #2
 80071b2:	4836      	ldr	r0, [pc, #216]	; (800728c <main+0x6ec>)
 80071b4:	f007 fe2c 	bl	800ee10 <chEvtRegisterMaskWithFlags.constprop.50>

    chEvtRegister(&inserted_event, &el0, 0);
    chEvtRegister(&removed_event, &el1, 1);

    //Congi
    palSetPadMode(GPIOD, IN_1, PAL_MODE_INPUT_PULLDOWN);
 80071b8:	2240      	movs	r2, #64	; 0x40
 80071ba:	4835      	ldr	r0, [pc, #212]	; (8007290 <main+0x6f0>)
 80071bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80071c0:	f002 f856 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOD, IN_2, PAL_MODE_INPUT_PULLDOWN);
 80071c4:	2240      	movs	r2, #64	; 0x40
 80071c6:	4832      	ldr	r0, [pc, #200]	; (8007290 <main+0x6f0>)
 80071c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80071cc:	f002 f850 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOD, IN_3, PAL_MODE_INPUT_PULLDOWN);
 80071d0:	2240      	movs	r2, #64	; 0x40
 80071d2:	482f      	ldr	r0, [pc, #188]	; (8007290 <main+0x6f0>)
 80071d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071d8:	f002 f84a 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB, IN_4, PAL_MODE_INPUT_PULLDOWN);
 80071dc:	2240      	movs	r2, #64	; 0x40
 80071de:	482d      	ldr	r0, [pc, #180]	; (8007294 <main+0x6f4>)
 80071e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80071e4:	f002 f844 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB, IN_5, PAL_MODE_INPUT_PULLDOWN);
 80071e8:	2240      	movs	r2, #64	; 0x40
 80071ea:	482a      	ldr	r0, [pc, #168]	; (8007294 <main+0x6f4>)
 80071ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80071f0:	f002 f83e 	bl	8009270 <_pal_lld_setgroupmode>

    //x100
    palSetPadMode(GPIOC, IN_6, PAL_MODE_INPUT_PULLDOWN);
 80071f4:	2240      	movs	r2, #64	; 0x40
 80071f6:	4823      	ldr	r0, [pc, #140]	; (8007284 <main+0x6e4>)
 80071f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071fc:	f002 f838 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOC, IN_7, PAL_MODE_INPUT_PULLDOWN);
 8007200:	2240      	movs	r2, #64	; 0x40
 8007202:	4611      	mov	r1, r2
 8007204:	481f      	ldr	r0, [pc, #124]	; (8007284 <main+0x6e4>)
 8007206:	f002 f833 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOD, IN_8, PAL_MODE_INPUT_PULLDOWN);
 800720a:	2240      	movs	r2, #64	; 0x40
 800720c:	4820      	ldr	r0, [pc, #128]	; (8007290 <main+0x6f0>)
 800720e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007212:	f002 f82d 	bl	8009270 <_pal_lld_setgroupmode>

    palSetPadMode(GPIOB, BUT_1, PAL_MODE_INPUT_PULLDOWN);//+
 8007216:	2240      	movs	r2, #64	; 0x40
 8007218:	481e      	ldr	r0, [pc, #120]	; (8007294 <main+0x6f4>)
 800721a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800721e:	f002 f827 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOE, BUT_2, PAL_MODE_INPUT_PULLDOWN);//-
 8007222:	4640      	mov	r0, r8
 8007224:	2240      	movs	r2, #64	; 0x40
 8007226:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800722a:	f002 f821 	bl	8009270 <_pal_lld_setgroupmode>

    palSetPadMode(GPIOA, 11, PAL_MODE_OUTPUT_PUSHPULL);//confi EMR3_1
 800722e:	4632      	mov	r2, r6
 8007230:	4648      	mov	r0, r9
 8007232:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007236:	f002 f81b 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, PIN_CONF_B, PAL_MODE_OUTPUT_PUSHPULL);//confi EMR3_2
 800723a:	4632      	mov	r2, r6
 800723c:	4648      	mov	r0, r9
 800723e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007242:	f002 f815 	bl	8009270 <_pal_lld_setgroupmode>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8007246:	2320      	movs	r3, #32
 8007248:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
 800724c:	f005 f810 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8007250:	f005 fa86 	bl	800c760 <_dbg_check_lock>
void uartStart(UARTDriver *uartp, const UARTConfig *config) {

  osalDbgCheck((uartp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
 8007254:	7823      	ldrb	r3, [r4, #0]
 8007256:	1e5a      	subs	r2, r3, #1
 8007258:	2a01      	cmp	r2, #1
 800725a:	d925      	bls.n	80072a8 <main+0x708>
  __ASM volatile ("cpsid i" : : : "memory");
 800725c:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800725e:	4b0e      	ldr	r3, [pc, #56]	; (8007298 <main+0x6f8>)
 8007260:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007262:	e7fe      	b.n	8007262 <main+0x6c2>
 8007264:	20001d17 	.word	0x20001d17
 8007268:	200012c0 	.word	0x200012c0
 800726c:	20001368 	.word	0x20001368
 8007270:	20000400 	.word	0x20000400
 8007274:	0800f940 	.word	0x0800f940
 8007278:	0800f900 	.word	0x0800f900
 800727c:	0800c171 	.word	0x0800c171
 8007280:	0800f948 	.word	0x0800f948
 8007284:	40020800 	.word	0x40020800
 8007288:	2000136c 	.word	0x2000136c
 800728c:	200013fc 	.word	0x200013fc
 8007290:	40020c00 	.word	0x40020c00
 8007294:	40020400 	.word	0x40020400
 8007298:	0800f810 	.word	0x0800f810
 800729c:	20020000 	.word	0x20020000
 80072a0:	200013f8 	.word	0x200013f8
 80072a4:	08009d01 	.word	0x08009d01
                "invalid state");

  uartp->config = config;
 80072a8:	4aa2      	ldr	r2, [pc, #648]	; (8007534 <main+0x994>)
 80072aa:	6062      	str	r2, [r4, #4]
 *
 * @notapi
 */
void uart_lld_start(UARTDriver *uartp) {

  if (uartp->state == UART_STOP) {
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	f000 8092 	beq.w	80073d6 <main+0x836>
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
    uartp->rxbuf = 0;
  }

  uartp->rxstate = UART_RX_IDLE;
 80072b2:	2300      	movs	r3, #0
  dmaStreamDisable(uartp->dmarx);
 80072b4:	6922      	ldr	r2, [r4, #16]
  uartp->rxstate = UART_RX_IDLE;
 80072b6:	70a3      	strb	r3, [r4, #2]
  uartp->txstate = UART_TX_IDLE;
 80072b8:	7063      	strb	r3, [r4, #1]
  dmaStreamDisable(uartp->dmarx);
 80072ba:	6811      	ldr	r1, [r2, #0]
  USART_TypeDef *u = uartp->usart;
 80072bc:	68a3      	ldr	r3, [r4, #8]
  dmaStreamDisable(uartp->dmarx);
 80072be:	6808      	ldr	r0, [r1, #0]
 80072c0:	f020 001f 	bic.w	r0, r0, #31
 80072c4:	6008      	str	r0, [r1, #0]
 80072c6:	6808      	ldr	r0, [r1, #0]
 80072c8:	07c0      	lsls	r0, r0, #31
 80072ca:	d4fc      	bmi.n	80072c6 <main+0x726>
 80072cc:	7a16      	ldrb	r6, [r2, #8]
  dmaStreamDisable(uartp->dmatx);
 80072ce:	6960      	ldr	r0, [r4, #20]
  dmaStreamDisable(uartp->dmarx);
 80072d0:	6857      	ldr	r7, [r2, #4]
 80072d2:	223d      	movs	r2, #61	; 0x3d
 80072d4:	40b2      	lsls	r2, r6
  dmaStreamDisable(uartp->dmatx);
 80072d6:	6806      	ldr	r6, [r0, #0]
  dmaStreamDisable(uartp->dmarx);
 80072d8:	603a      	str	r2, [r7, #0]
  dmaStreamDisable(uartp->dmatx);
 80072da:	6832      	ldr	r2, [r6, #0]
 80072dc:	f022 021f 	bic.w	r2, r2, #31
 80072e0:	6032      	str	r2, [r6, #0]
 80072e2:	6832      	ldr	r2, [r6, #0]
 80072e4:	f012 0201 	ands.w	r2, r2, #1
 80072e8:	d1fb      	bne.n	80072e2 <main+0x742>
 80072ea:	f890 e008 	ldrb.w	lr, [r0, #8]
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 80072ee:	4e92      	ldr	r6, [pc, #584]	; (8007538 <main+0x998>)
  dmaStreamDisable(uartp->dmatx);
 80072f0:	6847      	ldr	r7, [r0, #4]
 80072f2:	203d      	movs	r0, #61	; 0x3d
 80072f4:	fa00 f00e 	lsl.w	r0, r0, lr
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 80072f8:	42b3      	cmp	r3, r6
  dmaStreamDisable(uartp->dmatx);
 80072fa:	6038      	str	r0, [r7, #0]
  uartp->usart->CR1 = 0;
 80072fc:	60da      	str	r2, [r3, #12]
    u->BRR = STM32_PCLK2 / uartp->config->speed;
 80072fe:	6860      	ldr	r0, [r4, #4]
  uartp->usart->CR2 = 0;
 8007300:	611a      	str	r2, [r3, #16]
  uartp->usart->CR3 = 0;
 8007302:	615a      	str	r2, [r3, #20]
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
 8007304:	f000 8107 	beq.w	8007516 <main+0x976>
 8007308:	4a8c      	ldr	r2, [pc, #560]	; (800753c <main+0x99c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	f000 8103 	beq.w	8007516 <main+0x976>
    u->BRR = STM32_PCLK1 / uartp->config->speed;
 8007310:	6940      	ldr	r0, [r0, #20]
 8007312:	4a8b      	ldr	r2, [pc, #556]	; (8007540 <main+0x9a0>)
 8007314:	fbb2 f2f0 	udiv	r2, r2, r0
 8007318:	609a      	str	r2, [r3, #8]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 800731a:	6860      	ldr	r0, [r4, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 800731c:	68e6      	ldr	r6, [r4, #12]
  if (uartp->config->rxchar_cb == NULL)
 800731e:	68c7      	ldr	r7, [r0, #12]
  u->CR1 = uartp->config->cr1 | cr1;
 8007320:	8b02      	ldrh	r2, [r0, #24]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8007322:	8b44      	ldrh	r4, [r0, #26]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8007324:	8b80      	ldrh	r0, [r0, #28]
  (void)u->SR;  /* SR reset step 1.*/
 8007326:	f8d3 e000 	ldr.w	lr, [r3]
  (void)u->DR;  /* SR reset step 2.*/
 800732a:	f8d3 e004 	ldr.w	lr, [r3, #4]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 800732e:	2f00      	cmp	r7, #0
 8007330:	bf14      	ite	ne
 8007332:	f44f 7788 	movne.w	r7, #272	; 0x110
 8007336:	f44f 7780 	moveq.w	r7, #256	; 0x100
  u->CR1 = uartp->config->cr1 | cr1;
 800733a:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 800733e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8007342:	433e      	orrs	r6, r7
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8007344:	b2a4      	uxth	r4, r4
  u->SR = 0;
 8007346:	2700      	movs	r7, #0
  u->CR1 = uartp->config->cr1 | cr1;
 8007348:	f042 020c 	orr.w	r2, r2, #12
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 800734c:	f040 00c1 	orr.w	r0, r0, #193	; 0xc1
  u->SR = 0;
 8007350:	601f      	str	r7, [r3, #0]
  u->CR1 = uartp->config->cr1 | cr1;
 8007352:	b292      	uxth	r2, r2
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8007354:	611c      	str	r4, [r3, #16]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8007356:	b280      	uxth	r0, r0
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8007358:	4f7a      	ldr	r7, [pc, #488]	; (8007544 <main+0x9a4>)
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 800735a:	6158      	str	r0, [r3, #20]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 800735c:	2401      	movs	r4, #1
  u->CR1 = uartp->config->cr1 | cr1;
 800735e:	60da      	str	r2, [r3, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8007360:	60cf      	str	r7, [r1, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8007362:	604c      	str	r4, [r1, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8007364:	600e      	str	r6, [r1, #0]
  dmaStreamEnable(uartp->dmarx);
 8007366:	680b      	ldr	r3, [r1, #0]
 8007368:	4323      	orrs	r3, r4
 800736a:	600b      	str	r3, [r1, #0]
  uart_lld_start(uartp);
  uartp->state = UART_READY;
 800736c:	2302      	movs	r3, #2
 800736e:	f807 3c18 	strb.w	r3, [r7, #-24]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8007372:	f005 f9e5 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8007376:	f004 ff63 	bl	800c240 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800737a:	682b      	ldr	r3, [r5, #0]
 800737c:	42ab      	cmp	r3, r5
 800737e:	d005      	beq.n	800738c <main+0x7ec>
 8007380:	69aa      	ldr	r2, [r5, #24]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	6892      	ldr	r2, [r2, #8]
 8007386:	429a      	cmp	r2, r3
 8007388:	f0c0 80cb 	bcc.w	8007522 <main+0x982>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800738c:	2300      	movs	r3, #0
 800738e:	f383 8811 	msr	BASEPRI, r3

    //CONFIGURACION DEL PUERTO SERIAL DE EMR3
    uartStart(&UARTD1,&uart_cfg_2);     
    
    //PINES DEL TX Y RX DEL SERIAL DE LA EMR3
    palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(7));
 8007392:	f240 3282 	movw	r2, #898	; 0x382
 8007396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800739a:	486b      	ldr	r0, [pc, #428]	; (8007548 <main+0x9a8>)
 800739c:	f001 ff68 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(7));
 80073a0:	f240 3282 	movw	r2, #898	; 0x382
 80073a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073a8:	4867      	ldr	r0, [pc, #412]	; (8007548 <main+0x9a8>)
 80073aa:	f001 ff61 	bl	8009270 <_pal_lld_setgroupmode>

    uartStopReceive(&UARTD1);
 80073ae:	f007 fe67 	bl	800f080 <uartStopReceive.constprop.21>
    uartStopSend(&UARTD1);
 80073b2:	f007 fdbd 	bl	800ef30 <uartStopSend.constprop.25>
 80073b6:	2320      	movs	r3, #32
 80073b8:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80073bc:	f004 ff58 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80073c0:	f005 f9ce 	bl	800c760 <_dbg_check_lock>
void wdgStart(WDGDriver *wdgp, const WDGConfig *config) {

  osalDbgCheck((wdgp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((wdgp->state == WDG_STOP) || (wdgp->state == WDG_READY),
 80073c4:	4b61      	ldr	r3, [pc, #388]	; (800754c <main+0x9ac>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d943      	bls.n	8007456 <main+0x8b6>
  __ASM volatile ("cpsid i" : : : "memory");
 80073ce:	b672      	cpsid	i
 80073d0:	4b5f      	ldr	r3, [pc, #380]	; (8007550 <main+0x9b0>)
 80073d2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80073d4:	e7fe      	b.n	80073d4 <main+0x834>
      b = dmaStreamAllocate(uartp->dmarx,
 80073d6:	4623      	mov	r3, r4
 80073d8:	4a5e      	ldr	r2, [pc, #376]	; (8007554 <main+0x9b4>)
 80073da:	6920      	ldr	r0, [r4, #16]
 80073dc:	210c      	movs	r1, #12
 80073de:	f003 f847 	bl	800a470 <dmaStreamAllocate>
      osalDbgAssert(!b, "stream already allocated");
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d133      	bne.n	800744e <main+0x8ae>
      b = dmaStreamAllocate(uartp->dmatx,
 80073e6:	4623      	mov	r3, r4
 80073e8:	4a5b      	ldr	r2, [pc, #364]	; (8007558 <main+0x9b8>)
 80073ea:	6960      	ldr	r0, [r4, #20]
 80073ec:	210c      	movs	r1, #12
 80073ee:	f003 f83f 	bl	800a470 <dmaStreamAllocate>
      osalDbgAssert(!b, "stream already allocated");
 80073f2:	bb40      	cbnz	r0, 8007446 <main+0x8a6>
      rccEnableUSART1(FALSE);
 80073f4:	4b59      	ldr	r3, [pc, #356]	; (800755c <main+0x9bc>)
 80073f6:	4959      	ldr	r1, [pc, #356]	; (800755c <main+0x9bc>)
 80073f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 80073fa:	6862      	ldr	r2, [r4, #4]
      rccEnableUSART1(FALSE);
 80073fc:	f043 0310 	orr.w	r3, r3, #16
 8007400:	644b      	str	r3, [r1, #68]	; 0x44
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007402:	4957      	ldr	r1, [pc, #348]	; (8007560 <main+0x9c0>)
 8007404:	23c0      	movs	r3, #192	; 0xc0
 8007406:	f881 3325 	strb.w	r3, [r1, #805]	; 0x325
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 800740a:	8b12      	ldrh	r2, [r2, #24]
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART1_RX_DMA_CHANNEL) |
 800740c:	68e3      	ldr	r3, [r4, #12]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800740e:	2020      	movs	r0, #32
 8007410:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 8007414:	f402 52a0 	and.w	r2, r2, #5120	; 0x1400
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007418:	4851      	ldr	r0, [pc, #324]	; (8007560 <main+0x9c0>)
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART1_RX_DMA_CHANNEL) |
 800741a:	f043 6100 	orr.w	r1, r3, #134217728	; 0x8000000
 800741e:	2620      	movs	r6, #32
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 8007420:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8007424:	6046      	str	r6, [r0, #4]
      uartp->dmamode |= STM32_DMA_CR_CHSEL(USART1_RX_DMA_CHANNEL) |
 8007426:	60e1      	str	r1, [r4, #12]
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 8007428:	d102      	bne.n	8007430 <main+0x890>
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800742a:	f441 5320 	orr.w	r3, r1, #10240	; 0x2800
 800742e:	60e3      	str	r3, [r4, #12]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8007430:	6922      	ldr	r2, [r4, #16]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8007432:	6961      	ldr	r1, [r4, #20]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8007434:	68a3      	ldr	r3, [r4, #8]
 8007436:	6812      	ldr	r2, [r2, #0]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8007438:	6809      	ldr	r1, [r1, #0]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 800743a:	3304      	adds	r3, #4
 800743c:	6093      	str	r3, [r2, #8]
    uartp->rxbuf = 0;
 800743e:	2200      	movs	r2, #0
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8007440:	608b      	str	r3, [r1, #8]
    uartp->rxbuf = 0;
 8007442:	8322      	strh	r2, [r4, #24]
 8007444:	e735      	b.n	80072b2 <main+0x712>
 8007446:	b672      	cpsid	i
 8007448:	4b46      	ldr	r3, [pc, #280]	; (8007564 <main+0x9c4>)
 800744a:	62eb      	str	r3, [r5, #44]	; 0x2c
 800744c:	e7fe      	b.n	800744c <main+0x8ac>
 800744e:	b672      	cpsid	i
 8007450:	4b44      	ldr	r3, [pc, #272]	; (8007564 <main+0x9c4>)
 8007452:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007454:	e7fe      	b.n	8007454 <main+0x8b4>

  /* This also triggers a refresh.*/
  wdgp->wdg->WINR = wdgp->config->winr;
#else
  /* Unlock IWDG.*/
  wdgp->wdg->KR   = KR_KEY_WRITE;
 8007456:	4b3d      	ldr	r3, [pc, #244]	; (800754c <main+0x9ac>)
                "invalid state");
  wdgp->config = config;
 8007458:	493c      	ldr	r1, [pc, #240]	; (800754c <main+0x9ac>)
 800745a:	4a43      	ldr	r2, [pc, #268]	; (8007568 <main+0x9c8>)
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	604a      	str	r2, [r1, #4]
 8007460:	f245 5255 	movw	r2, #21845	; 0x5555
 8007464:	601a      	str	r2, [r3, #0]

  /* Write configuration.*/
  while (wdgp->wdg->SR != 0)
 8007466:	68da      	ldr	r2, [r3, #12]
 8007468:	2a00      	cmp	r2, #0
 800746a:	d1fc      	bne.n	8007466 <main+0x8c6>
    ;
  wdgp->wdg->PR   = wdgp->config->pr;
 800746c:	2104      	movs	r1, #4
 800746e:	6059      	str	r1, [r3, #4]
  wdgp->wdg->RLR  = wdgp->config->rlr;
 8007470:	f241 3088 	movw	r0, #5000	; 0x1388

  /* Start operations.*/
  wdgp->wdg->KR   = KR_KEY_RELOAD;
  wdgp->wdg->KR   = KR_KEY_ENABLE;
 8007474:	f64c 41cc 	movw	r1, #52428	; 0xcccc
  wdgp->wdg->KR   = KR_KEY_RELOAD;
 8007478:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  wdgp->wdg->RLR  = wdgp->config->rlr;
 800747c:	6098      	str	r0, [r3, #8]
  wdgp->wdg->KR   = KR_KEY_RELOAD;
 800747e:	601a      	str	r2, [r3, #0]
  wdgp->wdg->KR   = KR_KEY_ENABLE;
 8007480:	6019      	str	r1, [r3, #0]
  wdg_lld_start(wdgp);
  wdgp->state = WDG_READY;
 8007482:	4b32      	ldr	r3, [pc, #200]	; (800754c <main+0x9ac>)
 8007484:	2202      	movs	r2, #2
 8007486:	701a      	strb	r2, [r3, #0]
  _dbg_check_unlock();
 8007488:	f005 f95a 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800748c:	f004 fed8 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	42ab      	cmp	r3, r5
 8007494:	d004      	beq.n	80074a0 <main+0x900>
 8007496:	69aa      	ldr	r2, [r5, #24]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	6892      	ldr	r2, [r2, #8]
 800749c:	429a      	cmp	r2, r3
 800749e:	d344      	bcc.n	800752a <main+0x98a>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80074a0:	2400      	movs	r4, #0
 80074a2:	f384 8811 	msr	BASEPRI, r4

    //Configuracion WDG
    wdgStart(&WDGD1, &wdgcfg);

    //INICIAR LA TAREA ENCARGADA DE VISUALIZAR SI EL MICRO FUNCIONAMIENTO
    chThdCreateStatic(LED, sizeof(LED),NORMALPRIO , LED_thread_3, NULL);
 80074a6:	4b31      	ldr	r3, [pc, #196]	; (800756c <main+0x9cc>)
 80074a8:	4831      	ldr	r0, [pc, #196]	; (8007570 <main+0x9d0>)
 *
 * @init
 */
void mmcObjectInit(MMCDriver *mmcp) {

  mmcp->vmt = &mmc_vmt;
 80074aa:	4e32      	ldr	r6, [pc, #200]	; (8007574 <main+0x9d4>)
 80074ac:	2240      	movs	r2, #64	; 0x40
 80074ae:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80074b2:	f007 fbed 	bl	800ec90 <chThdCreateStatic.constprop.55>

    //Mensaje
    LCDPrintRow(0,"SISTEMA  INSEPET");
 80074b6:	4830      	ldr	r0, [pc, #192]	; (8007578 <main+0x9d8>)
 80074b8:	f007 fbca 	bl	800ec50 <LCDPrintRow.constprop.3>
    LCDPrintRow2(0,"www.insepet.com ");
 80074bc:	482f      	ldr	r0, [pc, #188]	; (800757c <main+0x9dc>)
 80074be:	f008 f8af 	bl	800f620 <LCDPrintRow2.constprop.2>
    
    chThdSleepMilliseconds(1000);
 80074c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80074c6:	f005 fabb 	bl	800ca40 <chThdSleep>
 
    LCDPrintRow( 0," VERSION 2.2.E  ");
 80074ca:	482d      	ldr	r0, [pc, #180]	; (8007580 <main+0x9e0>)
 80074cc:	f007 fbc0 	bl	800ec50 <LCDPrintRow.constprop.3>
    LCDPrintRow2( 0,"  Emr3 to Gil   ");
 80074d0:	482c      	ldr	r0, [pc, #176]	; (8007584 <main+0x9e4>)
 80074d2:	f008 f8a5 	bl	800f620 <LCDPrintRow2.constprop.2>

    chThdSleepMilliseconds(1000);
 80074d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80074da:	f005 fab1 	bl	800ca40 <chThdSleep>
       
    LCDPrintRow( 0,"    microSD:    ");
 80074de:	482a      	ldr	r0, [pc, #168]	; (8007588 <main+0x9e8>)
 80074e0:	f007 fbb6 	bl	800ec50 <LCDPrintRow.constprop.3>
    LCDPrintRow2( 0,"                ");
 80074e4:	4829      	ldr	r0, [pc, #164]	; (800758c <main+0x9ec>)
 80074e6:	f008 f89b 	bl	800f620 <LCDPrintRow2.constprop.2>
 80074ea:	4b29      	ldr	r3, [pc, #164]	; (8007590 <main+0x9f0>)

  osalDbgCheck((mmcp != NULL) && (config != NULL));
  osalDbgAssert((mmcp->state == BLK_STOP) || (mmcp->state == BLK_ACTIVE),
                "invalid state");

  mmcp->config = config;
 80074ec:	4929      	ldr	r1, [pc, #164]	; (8007594 <main+0x9f4>)
  mmcp->block_addresses = false;
 80074ee:	f883 4030 	strb.w	r4, [r3, #48]	; 0x30
  mmcp->state = BLK_ACTIVE;
 80074f2:	2202      	movs	r2, #2
    if (mmcConnect(&MMCD1)) 
 80074f4:	4618      	mov	r0, r3
  mmcp->vmt = &mmc_vmt;
 80074f6:	601e      	str	r6, [r3, #0]
  mmcp->config = config;
 80074f8:	62d9      	str	r1, [r3, #44]	; 0x2c
  mmcp->state = BLK_ACTIVE;
 80074fa:	711a      	strb	r2, [r3, #4]
 80074fc:	f002 f8c0 	bl	8009680 <mmcConnect>
 8007500:	4607      	mov	r7, r0
 8007502:	2800      	cmp	r0, #0
 8007504:	d050      	beq.n	80075a8 <main+0xa08>
        LCDPrintRow2(0,"   Error=0001   ");
 8007506:	4824      	ldr	r0, [pc, #144]	; (8007598 <main+0x9f8>)
 8007508:	f008 f88a 	bl	800f620 <LCDPrintRow2.constprop.2>
            chThdSleepMilliseconds(5000);
 800750c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007510:	f005 fa96 	bl	800ca40 <chThdSleep>
 8007514:	e7fa      	b.n	800750c <main+0x96c>
    u->BRR = STM32_PCLK2 / uartp->config->speed;
 8007516:	6940      	ldr	r0, [r0, #20]
 8007518:	4a20      	ldr	r2, [pc, #128]	; (800759c <main+0x9fc>)
 800751a:	fbb2 f2f0 	udiv	r2, r2, r0
 800751e:	609a      	str	r2, [r3, #8]
 8007520:	e6fb      	b.n	800731a <main+0x77a>
  __ASM volatile ("cpsid i" : : : "memory");
 8007522:	b672      	cpsid	i
 8007524:	4b1e      	ldr	r3, [pc, #120]	; (80075a0 <main+0xa00>)
 8007526:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007528:	e7fe      	b.n	8007528 <main+0x988>
 800752a:	b672      	cpsid	i
 800752c:	4b1d      	ldr	r3, [pc, #116]	; (80075a4 <main+0xa04>)
 800752e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007530:	e7fe      	b.n	8007530 <main+0x990>
 8007532:	bf00      	nop
 8007534:	200008e0 	.word	0x200008e0
 8007538:	40011000 	.word	0x40011000
 800753c:	40011400 	.word	0x40011400
 8007540:	0280de80 	.word	0x0280de80
 8007544:	2000168c 	.word	0x2000168c
 8007548:	40020000 	.word	0x40020000
 800754c:	20001278 	.word	0x20001278
 8007550:	0800f800 	.word	0x0800f800
 8007554:	080088e1 	.word	0x080088e1
 8007558:	08008881 	.word	0x08008881
 800755c:	40023800 	.word	0x40023800
 8007560:	e000e100 	.word	0xe000e100
 8007564:	0800f830 	.word	0x0800f830
 8007568:	0800fba0 	.word	0x0800fba0
 800756c:	0800f591 	.word	0x0800f591
 8007570:	20000c90 	.word	0x20000c90
 8007574:	0800fb60 	.word	0x0800fb60
 8007578:	0800f950 	.word	0x0800f950
 800757c:	0800f964 	.word	0x0800f964
 8007580:	0800f978 	.word	0x0800f978
 8007584:	0800f98c 	.word	0x0800f98c
 8007588:	0800f9a0 	.word	0x0800f9a0
 800758c:	0800f9b4 	.word	0x0800f9b4
 8007590:	20000df8 	.word	0x20000df8
 8007594:	200008c8 	.word	0x200008c8
 8007598:	0800f9c8 	.word	0x0800f9c8
 800759c:	0501bd00 	.word	0x0501bd00
 80075a0:	08010220 	.word	0x08010220
 80075a4:	0800f7f0 	.word	0x0800f7f0
 80075a8:	4e98      	ldr	r6, [pc, #608]	; (800780c <main+0xc6c>)
 80075aa:	4b99      	ldr	r3, [pc, #612]	; (8007810 <main+0xc70>)
 80075ac:	9605      	str	r6, [sp, #20]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 80075ae:	a826      	add	r0, sp, #152	; 0x98
	const TCHAR *rp = path;
 80075b0:	9626      	str	r6, [sp, #152]	; 0x98
 80075b2:	9306      	str	r3, [sp, #24]
	vol = get_ldnumber(&rp);
 80075b4:	f006 fa24 	bl	800da00 <get_ldnumber.lto_priv.89>
	if (vol < 0) return FR_INVALID_DRIVE;
 80075b8:	2800      	cmp	r0, #0
 80075ba:	db0f      	blt.n	80075dc <main+0xa3c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80075bc:	4c95      	ldr	r4, [pc, #596]	; (8007814 <main+0xc74>)
 80075be:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]

	if (cfs) {
 80075c2:	b103      	cbz	r3, 80075c6 <main+0xa26>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80075c4:	701f      	strb	r7, [r3, #0]
	}

	if (fs) {
 80075c6:	9b06      	ldr	r3, [sp, #24]
 80075c8:	b19b      	cbz	r3, 80075f2 <main+0xa52>
		fs->fs_type = 0;				/* Clear new fs object */
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80075ce:	a905      	add	r1, sp, #20
	FatFs[vol] = fs;					/* Register new fs object */
 80075d0:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80075d4:	a806      	add	r0, sp, #24
 80075d6:	f006 fa3b 	bl	800da50 <find_volume.lto_priv.87>
    if (err != FR_OK) 
 80075da:	b160      	cbz	r0, 80075f6 <main+0xa56>
        mmcDisconnect(&MMCD1);
 80075dc:	488e      	ldr	r0, [pc, #568]	; (8007818 <main+0xc78>)
 80075de:	f002 fb2f 	bl	8009c40 <mmcDisconnect>
        LCDPrintRow2(0,"   Error=0002   ");
 80075e2:	488e      	ldr	r0, [pc, #568]	; (800781c <main+0xc7c>)
 80075e4:	f008 f81c 	bl	800f620 <LCDPrintRow2.constprop.2>
            chThdSleepMilliseconds(5000);
 80075e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80075ec:	f005 fa28 	bl	800ca40 <chThdSleep>
 80075f0:	e7fa      	b.n	80075e8 <main+0xa48>
	FatFs[vol] = fs;					/* Register new fs object */
 80075f2:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
    LCDPrintRow2( 0,"   ok microSD   ");
 80075f6:	488a      	ldr	r0, [pc, #552]	; (8007820 <main+0xc80>)
 80075f8:	f008 f812 	bl	800f620 <LCDPrintRow2.constprop.2>
    chThdSleepMilliseconds(1000);
 80075fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007600:	f005 fa1e 	bl	800ca40 <chThdSleep>
 8007604:	a938      	add	r1, sp, #224	; 0xe0
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8007606:	a812      	add	r0, sp, #72	; 0x48
 8007608:	f841 6dc4 	str.w	r6, [r1, #-196]!
 800760c:	2200      	movs	r2, #0
 800760e:	f006 fa1f 	bl	800da50 <find_volume.lto_priv.87>
	fs = *fatfs;
 8007612:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (res == FR_OK) {
 8007614:	2800      	cmp	r0, #0
 8007616:	f040 80a7 	bne.w	8007768 <main+0xbc8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800761a:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800761e:	6921      	ldr	r1, [r4, #16]
 8007620:	f1a8 0202 	sub.w	r2, r8, #2
 8007624:	4291      	cmp	r1, r2
 8007626:	4643      	mov	r3, r8
 8007628:	d91f      	bls.n	800766a <main+0xaca>
			*nclst = fs->free_clust;
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800762a:	f894 9000 	ldrb.w	r9, [r4]
			n = 0;
			if (fat == FS_FAT12) {
 800762e:	f1b9 0f01 	cmp.w	r9, #1
 8007632:	d07f      	beq.n	8007734 <main+0xb94>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) n++;
				} while (++clst < fs->n_fatent);
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
 8007634:	6a27      	ldr	r7, [r4, #32]
				i = 0; p = 0;
 8007636:	4603      	mov	r3, r0
 8007638:	4602      	mov	r2, r0
			n = 0;
 800763a:	4606      	mov	r6, r0
 800763c:	f104 0b30 	add.w	fp, r4, #48	; 0x30
				do {
					if (!i) {
 8007640:	2a00      	cmp	r2, #0
 8007642:	d06d      	beq.n	8007720 <main+0xb80>
						res = move_window(fs, sect++);
						if (res != FR_OK) break;
						p = fs->win;
						i = SS(fs);
					}
					if (fat == FS_FAT16) {
 8007644:	f1b9 0f02 	cmp.w	r9, #2
 8007648:	f000 8096 	beq.w	8007778 <main+0xbd8>
						if (LD_WORD(p) == 0) n++;
						p += 2; i -= 2;
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800764c:	6819      	ldr	r1, [r3, #0]
 800764e:	f031 4170 	bics.w	r1, r1, #4026531840	; 0xf0000000
 8007652:	bf08      	it	eq
 8007654:	3601      	addeq	r6, #1
						p += 4; i -= 4;
 8007656:	3304      	adds	r3, #4
 8007658:	3a04      	subs	r2, #4
					}
				} while (--clst);
 800765a:	f1b8 0801 	subs.w	r8, r8, #1
 800765e:	d1ef      	bne.n	8007640 <main+0xaa0>
			}
			fs->free_clust = n;
			fs->fsi_flag |= 1;
 8007660:	7963      	ldrb	r3, [r4, #5]
			fs->free_clust = n;
 8007662:	6126      	str	r6, [r4, #16]
			fs->fsi_flag |= 1;
 8007664:	f043 0301 	orr.w	r3, r3, #1
 8007668:	7163      	strb	r3, [r4, #5]
    fr = f_stat("config.txt", &fno);
 800766a:	a917      	add	r1, sp, #92	; 0x5c
 800766c:	486d      	ldr	r0, [pc, #436]	; (8007824 <main+0xc84>)
 800766e:	f003 fca7 	bl	800afc0 <f_stat>
    switch (fr) 
 8007672:	2800      	cmp	r0, #0
 8007674:	f000 8089 	beq.w	800778a <main+0xbea>
 8007678:	2804      	cmp	r0, #4
 800767a:	f000 84cc 	beq.w	8008016 <main+0x1476>
 800767e:	ae1d      	add	r6, sp, #116	; 0x74
	return (dato_emr3[num]);
 8007680:	4c69      	ldr	r4, [pc, #420]	; (8007828 <main+0xc88>)
 8007682:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
   
    //DETECTAR SI LA SD ESTA PUESTA 
    memori();
  
    //Determinar el tipo de consola
    if(read_eeprom(consola) == 0x01 || read_eeprom(consola) == 0x02 || read_eeprom(consola) == 0x04)
 8007686:	2b01      	cmp	r3, #1
 8007688:	d044      	beq.n	8007714 <main+0xb74>
 800768a:	2b02      	cmp	r3, #2
 800768c:	d002      	beq.n	8007694 <main+0xaf4>
 800768e:	2b04      	cmp	r3, #4
 8007690:	f040 808c 	bne.w	80077ac <main+0xc0c>
    {  
      
        if(read_eeprom(consola) == 0x02 || read_eeprom(consola) == 0x04) 
        {
            palClearPad(GPIOE, 2);  // emr3 on
 8007694:	4b65      	ldr	r3, [pc, #404]	; (800782c <main+0xc8c>)
 8007696:	2104      	movs	r1, #4
            palClearPad(GPIOE, 3);  // lc on
 8007698:	2208      	movs	r2, #8
            palClearPad(GPIOE, 2);  // emr3 on
 800769a:	8359      	strh	r1, [r3, #26]
            palClearPad(GPIOE, 3);  // lc on
 800769c:	835a      	strh	r2, [r3, #26]
            palClearPad(GPIOE, 2);  //  emr3 on
            palSetPad(GPIOE, 3);    //  lc off
        }

        //ENCARGADO DE SABER CUANTA CABEZAS ESTAN ACTIVAS  
        LCDPrintRow( 0,"   TEST_EMR3    ");
 800769e:	4864      	ldr	r0, [pc, #400]	; (8007830 <main+0xc90>)
 80076a0:	f007 fad6 	bl	800ec50 <LCDPrintRow.constprop.3>

	while (true)
	{
	
		//7E 01 FF 44 25 01 96 7E
		envio[0]=0x7E;
 80076a4:	277e      	movs	r7, #126	; 0x7e
		envio[1]=0x01;
 80076a6:	f04f 0b01 	mov.w	fp, #1
		envio[2]=0xFF;
 80076aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		envio[3]=0x44;
		envio[4]=0x25;
		envio[5]=0x01;
		envio[6]=0x96;
 80076ae:	2396      	movs	r3, #150	; 0x96
		envio[7]=0x7E;	
    		
    	uartStartSend(&UARTD1, 8, envio);
 80076b0:	4631      	mov	r1, r6
 80076b2:	2008      	movs	r0, #8
		envio[2]=0xFF;
 80076b4:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
		envio[3]=0x44;
 80076b8:	f04f 0944 	mov.w	r9, #68	; 0x44
		envio[4]=0x25;
 80076bc:	f04f 0225 	mov.w	r2, #37	; 0x25
 80076c0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
		envio[6]=0x96;
 80076c4:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
		envio[0]=0x7E;
 80076c8:	f88d 7074 	strb.w	r7, [sp, #116]	; 0x74
		envio[1]=0x01;
 80076cc:	f88d b075 	strb.w	fp, [sp, #117]	; 0x75
		envio[5]=0x01;
 80076d0:	f88d b079 	strb.w	fp, [sp, #121]	; 0x79
		envio[7]=0x7E;	
 80076d4:	f88d 707b 	strb.w	r7, [sp, #123]	; 0x7b
		envio[3]=0x44;
 80076d8:	f88d 9077 	strb.w	r9, [sp, #119]	; 0x77
    	uartStartSend(&UARTD1, 8, envio);
 80076dc:	f007 fbd0 	bl	800ee80 <uartStartSend.constprop.27>
      	chThdSleepMilliseconds(20);
 80076e0:	20c8      	movs	r0, #200	; 0xc8
 80076e2:	f005 f9ad 	bl	800ca40 <chThdSleep>
      	uartStopSend(&UARTD1);
 80076e6:	f007 fc23 	bl	800ef30 <uartStopSend.constprop.25>
    	    	      
      	uartStartReceive(&UARTD1, 5, recibo);
 80076ea:	a926      	add	r1, sp, #152	; 0x98
 80076ec:	2005      	movs	r0, #5
 80076ee:	f007 fc67 	bl	800efc0 <uartStartReceive.constprop.23>
   		chThdSleepMilliseconds(500);
 80076f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80076f6:	f005 f9a3 	bl	800ca40 <chThdSleep>
   		uartStopReceive(&UARTD1);
 80076fa:	f007 fcc1 	bl	800f080 <uartStopReceive.constprop.21>

		if (recibo[2] == 0X01)
 80076fe:	f89d 809a 	ldrb.w	r8, [sp, #154]	; 0x9a
 8007702:	f1b8 0f01 	cmp.w	r8, #1

  			LCDPrintRow2(0,"   EMR3_1=ON    ");
			break;
		}	

		chThdSleepMilliseconds(1000);
 8007706:	f242 7010 	movw	r0, #10000	; 0x2710
		if (recibo[2] == 0X01)
 800770a:	f000 84b7 	beq.w	800807c <main+0x14dc>
		chThdSleepMilliseconds(1000);
 800770e:	f005 f997 	bl	800ca40 <chThdSleep>
 8007712:	e7ca      	b.n	80076aa <main+0xb0a>
            palClearPad(GPIOE, 2);  //  emr3 on
 8007714:	4b45      	ldr	r3, [pc, #276]	; (800782c <main+0xc8c>)
 8007716:	2104      	movs	r1, #4
            palSetPad(GPIOE, 3);    //  lc off
 8007718:	2208      	movs	r2, #8
            palClearPad(GPIOE, 2);  //  emr3 on
 800771a:	8359      	strh	r1, [r3, #26]
            palSetPad(GPIOE, 3);    //  lc off
 800771c:	831a      	strh	r2, [r3, #24]
 800771e:	e7be      	b.n	800769e <main+0xafe>
						res = move_window(fs, sect++);
 8007720:	4639      	mov	r1, r7
 8007722:	4620      	mov	r0, r4
 8007724:	3701      	adds	r7, #1
 8007726:	f001 fd13 	bl	8009150 <move_window.lto_priv.88>
						if (res != FR_OK) break;
 800772a:	b9c0      	cbnz	r0, 800775e <main+0xbbe>
						p = fs->win;
 800772c:	465b      	mov	r3, fp
						i = SS(fs);
 800772e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007732:	e787      	b.n	8007644 <main+0xaa4>
			if (fat == FS_FAT12) {
 8007734:	4606      	mov	r6, r0
 8007736:	2702      	movs	r7, #2
	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8007738:	429f      	cmp	r7, r3
 800773a:	4639      	mov	r1, r7
 800773c:	4620      	mov	r0, r4
				} while (++clst < fs->n_fatent);
 800773e:	f107 0701 	add.w	r7, r7, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8007742:	d20c      	bcs.n	800775e <main+0xbbe>
 8007744:	f003 fa14 	bl	800ab70 <get_fat.part.6>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d008      	beq.n	800775e <main+0xbbe>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800774c:	2801      	cmp	r0, #1
 800774e:	d006      	beq.n	800775e <main+0xbbe>
					if (stat == 0) n++;
 8007750:	b900      	cbnz	r0, 8007754 <main+0xbb4>
 8007752:	3601      	adds	r6, #1
				} while (++clst < fs->n_fatent);
 8007754:	6963      	ldr	r3, [r4, #20]
 8007756:	429f      	cmp	r7, r3
 8007758:	d282      	bcs.n	8007660 <main+0xac0>
	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 800775a:	2f01      	cmp	r7, #1
 800775c:	d8ec      	bhi.n	8007738 <main+0xb98>
			fs->fsi_flag |= 1;
 800775e:	7963      	ldrb	r3, [r4, #5]
			fs->free_clust = n;
 8007760:	6126      	str	r6, [r4, #16]
			fs->fsi_flag |= 1;
 8007762:	f043 0301 	orr.w	r3, r3, #1
 8007766:	7163      	strb	r3, [r4, #5]
        LCDPrintRow2(0,"   Error=0003   ");
 8007768:	4832      	ldr	r0, [pc, #200]	; (8007834 <main+0xc94>)
 800776a:	f007 ff59 	bl	800f620 <LCDPrintRow2.constprop.2>
            chThdSleepMilliseconds(5000);
 800776e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007772:	f005 f965 	bl	800ca40 <chThdSleep>
 8007776:	e7fa      	b.n	800776e <main+0xbce>
						if (LD_WORD(p) == 0) n++;
 8007778:	7858      	ldrb	r0, [r3, #1]
 800777a:	7819      	ldrb	r1, [r3, #0]
 800777c:	ea51 2100 	orrs.w	r1, r1, r0, lsl #8
 8007780:	bf08      	it	eq
 8007782:	3601      	addeq	r6, #1
						p += 2; i -= 2;
 8007784:	3302      	adds	r3, #2
 8007786:	3a02      	subs	r2, #2
 8007788:	e767      	b.n	800765a <main+0xaba>
            fr = f_open(&fil, "config.txt", FA_READ);
 800778a:	ae1d      	add	r6, sp, #116	; 0x74
 800778c:	4630      	mov	r0, r6
 800778e:	2201      	movs	r2, #1
 8007790:	4924      	ldr	r1, [pc, #144]	; (8007824 <main+0xc84>)
 8007792:	f006 fc05 	bl	800dfa0 <f_open>
            if (fr)
 8007796:	2800      	cmp	r0, #0
 8007798:	f000 857c 	beq.w	8008294 <main+0x16f4>
                LCDPrintRow2(0,"   Error=0005   ");
 800779c:	4826      	ldr	r0, [pc, #152]	; (8007838 <main+0xc98>)
 800779e:	f007 ff3f 	bl	800f620 <LCDPrintRow2.constprop.2>
                    chThdSleepMilliseconds(5000);
 80077a2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80077a6:	f005 f94b 	bl	800ca40 <chThdSleep>
 80077aa:	e7fa      	b.n	80077a2 <main+0xc02>
    }

   	else
   	{
              
        palSetPad(GPIOE, 2);    // emr3 off
 80077ac:	4b1f      	ldr	r3, [pc, #124]	; (800782c <main+0xc8c>)
        palSetPad(GPIOE, 3);    //lc off
        LCDPrintRow(0,"   CONSOLE 03   ");
 80077ae:	4823      	ldr	r0, [pc, #140]	; (800783c <main+0xc9c>)
        palSetPad(GPIOE, 2);    // emr3 off
 80077b0:	2204      	movs	r2, #4
 80077b2:	831a      	strh	r2, [r3, #24]
        palSetPad(GPIOE, 3);    //lc off
 80077b4:	2208      	movs	r2, #8
 80077b6:	831a      	strh	r2, [r3, #24]
        LCDPrintRow(0,"   CONSOLE 03   ");
 80077b8:	f007 fa4a 	bl	800ec50 <LCDPrintRow.constprop.3>
        LCDPrintRow2(0,"    DISABLED    ");
 80077bc:	4820      	ldr	r0, [pc, #128]	; (8007840 <main+0xca0>)
 80077be:	f007 ff2f 	bl	800f620 <LCDPrintRow2.constprop.2>
        
        ButtonEmr(SALIR_CONSALA,1);
 80077c2:	2101      	movs	r1, #1
 80077c4:	2026      	movs	r0, #38	; 0x26
 80077c6:	f005 f9bb 	bl	800cb40 <ButtonEmr>
        data_recibo(0X07);
 80077ca:	f007 ff49 	bl	800f660 <data_recibo.constprop.1>

        chThdSleepMilliseconds(500);
 80077ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80077d2:	f005 f935 	bl	800ca40 <chThdSleep>

        ButtonEmr(SALIR_CONSALA,2);
 80077d6:	2026      	movs	r0, #38	; 0x26
 80077d8:	2102      	movs	r1, #2
 80077da:	f005 f9b1 	bl	800cb40 <ButtonEmr>
        data_recibo(0X07);
 80077de:	f007 ff3f 	bl	800f660 <data_recibo.constprop.1>
        
        chThdSleepMilliseconds(500);
 80077e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80077e6:	f005 f92b 	bl	800ca40 <chThdSleep>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80077ea:	2320      	movs	r3, #32
 80077ec:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 80077f0:	f004 fd3e 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80077f4:	f004 ffb4 	bl	800c760 <_dbg_check_lock>
void sdStart(SerialDriver *sdp, const SerialConfig *config) {

  osalDbgCheck(sdp != NULL);

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 80077f8:	f89a 3008 	ldrb.w	r3, [sl, #8]
 80077fc:	1e5a      	subs	r2, r3, #1
 80077fe:	2a01      	cmp	r2, #1
 8007800:	d922      	bls.n	8007848 <main+0xca8>
  __ASM volatile ("cpsid i" : : : "memory");
 8007802:	b672      	cpsid	i
 8007804:	4b0f      	ldr	r3, [pc, #60]	; (8007844 <main+0xca4>)
 8007806:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007808:	e7fe      	b.n	8007808 <main+0xc68>
 800780a:	bf00      	nop
 800780c:	0800f9dc 	.word	0x0800f9dc
 8007810:	20000e2c 	.word	0x20000e2c
 8007814:	20000c88 	.word	0x20000c88
 8007818:	20000df8 	.word	0x20000df8
 800781c:	0800f9e0 	.word	0x0800f9e0
 8007820:	0800f9f4 	.word	0x0800f9f4
 8007824:	0800fa1c 	.word	0x0800fa1c
 8007828:	20001c74 	.word	0x20001c74
 800782c:	40021000 	.word	0x40021000
 8007830:	0800fa50 	.word	0x0800fa50
 8007834:	0800fa08 	.word	0x0800fa08
 8007838:	0800fa28 	.word	0x0800fa28
 800783c:	0800f6b8 	.word	0x0800f6b8
 8007840:	0800f6cc 	.word	0x0800f6cc
 8007844:	0800f820 	.word	0x0800f820
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8007848:	2b01      	cmp	r3, #1
 800784a:	d10c      	bne.n	8007866 <main+0xcc6>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 800784c:	49b9      	ldr	r1, [pc, #740]	; (8007b34 <main+0xf94>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800784e:	4bba      	ldr	r3, [pc, #744]	; (8007b38 <main+0xf98>)
 8007850:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007852:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007856:	640a      	str	r2, [r1, #64]	; 0x40
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007858:	2240      	movs	r2, #64	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800785a:	21c0      	movs	r1, #192	; 0xc0
 800785c:	f883 1326 	strb.w	r1, [r3, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007860:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8007864:	605a      	str	r2, [r3, #4]
  USART_TypeDef *u = sdp->usart;
 8007866:	f8da 3074 	ldr.w	r3, [sl, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800786a:	4ab4      	ldr	r2, [pc, #720]	; (8007b3c <main+0xf9c>)
    u->BRR = STM32_PCLK2 / config->speed;
 800786c:	49b4      	ldr	r1, [pc, #720]	; (8007b40 <main+0xfa0>)
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800786e:	4293      	cmp	r3, r2
 8007870:	f000 808f 	beq.w	8007992 <main+0xdf2>
 8007874:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007878:	4293      	cmp	r3, r2
 800787a:	f000 808a 	beq.w	8007992 <main+0xdf2>
    u->BRR = STM32_PCLK1 / config->speed;
 800787e:	6808      	ldr	r0, [r1, #0]
 8007880:	4ab0      	ldr	r2, [pc, #704]	; (8007b44 <main+0xfa4>)
 8007882:	fbb2 f2f0 	udiv	r2, r2, r0
 8007886:	609a      	str	r2, [r3, #8]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8007888:	888a      	ldrh	r2, [r1, #4]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800788a:	88c8      	ldrh	r0, [r1, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800788c:	8909      	ldrh	r1, [r1, #8]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800788e:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8007892:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8007896:	b280      	uxth	r0, r0
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8007898:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800789c:	f041 0101 	orr.w	r1, r1, #1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80078a0:	6118      	str	r0, [r3, #16]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80078a2:	b292      	uxth	r2, r2
  u->SR = 0;
 80078a4:	2000      	movs	r0, #0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80078a6:	b289      	uxth	r1, r1
 80078a8:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80078aa:	60da      	str	r2, [r3, #12]
  u->SR = 0;
 80078ac:	6018      	str	r0, [r3, #0]
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 80078ae:	2202      	movs	r2, #2
  (void)u->SR;  /* SR reset step 1.*/
 80078b0:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f88a 2008 	strb.w	r2, [sl, #8]
  _dbg_check_unlock();
 80078b8:	f004 ff42 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80078bc:	f004 fcc0 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	42ab      	cmp	r3, r5
 80078c4:	d005      	beq.n	80078d2 <main+0xd32>
 80078c6:	69aa      	ldr	r2, [r5, #24]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	6892      	ldr	r2, [r2, #8]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	f0c0 84ee 	bcc.w	80082ae <main+0x170e>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80078d2:	2300      	movs	r3, #0
 80078d4:	f383 8811 	msr	BASEPRI, r3
    }
 
    //CONFIGURAR EL PUERTO SERAL PARA EL LAZO DE CORIENTE O PROTOCOLO GILBARCO
    sdStart(&SD2,&uart_cfg_1);
    //PINES DE TX Y RX DEL PUERTO SERIAL DEL LAZO DE CORRIENTE O PROTOCOLO GILBARCO
    palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 80078d8:	f240 3282 	movw	r2, #898	; 0x382
 80078dc:	2104      	movs	r1, #4
 80078de:	489a      	ldr	r0, [pc, #616]	; (8007b48 <main+0xfa8>)
 80078e0:	4f9a      	ldr	r7, [pc, #616]	; (8007b4c <main+0xfac>)
 80078e2:	4d9b      	ldr	r5, [pc, #620]	; (8007b50 <main+0xfb0>)
    fr = f_open(&fil, "config.txt", FA_WRITE); 
 80078e4:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 8007ba0 <main+0x1000>
    fr = f_write(&fil, &Status1 ,5, &bw);
 80078e8:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8007ba4 <main+0x1004>
    fr = f_write(&fil, &Status2 ,3, &bw);
 80078ec:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 8007ba8 <main+0x1008>
 80078f0:	f001 fcbe 	bl	8009270 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 80078f4:	f240 3282 	movw	r2, #898	; 0x382
 80078f8:	2108      	movs	r1, #8
 80078fa:	4893      	ldr	r0, [pc, #588]	; (8007b48 <main+0xfa8>)
 80078fc:	f001 fcb8 	bl	8009270 <_pal_lld_setgroupmode>

    chThdSleepMilliseconds(500);
 8007900:	f241 3088 	movw	r0, #5000	; 0x1388
 8007904:	f005 f89c 	bl	800ca40 <chThdSleep>

    //INICIO DE LA TAREA PARA CONTROLAR LA EMR3 
    chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8007908:	4b92      	ldr	r3, [pc, #584]	; (8007b54 <main+0xfb4>)
 800790a:	4893      	ldr	r0, [pc, #588]	; (8007b58 <main+0xfb8>)
 800790c:	2240      	movs	r2, #64	; 0x40
 800790e:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8007912:	f007 f9bd 	bl	800ec90 <chThdCreateStatic.constprop.55>

    //INICIO DE LA TAREA ENCARGADA DE LAZO DE CORRIENTE O PROTOCOLO GILBARCO
    chThdCreateStatic(SD, sizeof(SD),NORMALPRIO , SD_thread_2, NULL);
 8007916:	4b91      	ldr	r3, [pc, #580]	; (8007b5c <main+0xfbc>)
 8007918:	4891      	ldr	r0, [pc, #580]	; (8007b60 <main+0xfc0>)
 800791a:	2240      	movs	r2, #64	; 0x40
 800791c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8007920:	f007 f9b6 	bl	800ec90 <chThdCreateStatic.constprop.55>
	dato_emr3[num] = inf;
 8007924:	2301      	movs	r3, #1
 8007926:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
    
    while (TRUE)
    {
        
        //ESCRIBIR EN EL ARCHIVO DE CONFIGURACION
        if (read_eeprom(SD_CONF) == 0x01)
 800792a:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 800792e:	2b01      	cmp	r3, #1
 8007930:	f000 82bd 	beq.w	8007eae <main+0x130e>
            Write();
            write_eeprom(SD_CONF,0x00);
        }

        //ESCRIBIR UNA EVENTUALIDAD EN EL WIRE.
        if (read_eeprom(SD_logwire) == 1)
 8007934:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
 8007938:	2b01      	cmp	r3, #1
 800793a:	f000 8210 	beq.w	8007d5e <main+0x11be>
            log_wire();
            write_eeprom(SD_logwire,0);
        }

        //ESCRIBIR EL LOG DE LA EMR3.
        if (read_eeprom(SD_logemr3) == 1)
 800793e:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
 8007942:	2b01      	cmp	r3, #1
 8007944:	f000 8247 	beq.w	8007dd6 <main+0x1236>
            log_emr3();
            write_eeprom(SD_logemr3,0);
        }        

        //TRANSACIONES REALIZADA POR LA CABEZA 1
        if (read_eeprom(SD_TRANS) == 0X01)
 8007948:	f894 8083 	ldrb.w	r8, [r4, #131]	; 0x83
 800794c:	f1b8 0f01 	cmp.w	r8, #1
 8007950:	f000 81a9 	beq.w	8007ca6 <main+0x1106>
            trans();
            write_eeprom(SD_TRANS,0X00);
        }

        //DATOS DE VENTA OBTENIDA POR LA EMR3 1
        else if (read_eeprom(SD_emr3_sale1) == 0X01)
 8007954:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
 8007958:	2b01      	cmp	r3, #1
 800795a:	f000 8096 	beq.w	8007a8a <main+0xeea>
            sale1_emr3();
            write_eeprom(SD_emr3_sale1,0X00);
        }

        //DATOS ENVIADO POR LAZO DE CORRIENTE 1
        else if (read_eeprom(SD_wire_sale1) == 0X01)
 800795e:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 8007962:	2b01      	cmp	r3, #1
 8007964:	d07a      	beq.n	8007a5c <main+0xebc>
            sale1_wire();
            write_eeprom(SD_wire_sale1,0X00);
        }

        //TRANSACIONES REALIZADA POR LA CABEZA 2        
        if (read_eeprom(SD_TRANS2) == 0X01)
 8007966:	f894 8084 	ldrb.w	r8, [r4, #132]	; 0x84
 800796a:	f1b8 0f01 	cmp.w	r8, #1
 800796e:	f000 82f4 	beq.w	8007f5a <main+0x13ba>
            trans2();
            write_eeprom(SD_TRANS2,0X00);
        }

        //DATOS DE VENTA OBTENIDA POR LA EMR3 2
        else if (read_eeprom(SD_emr3_sale2) == 0X01)
 8007972:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
 8007976:	2b01      	cmp	r3, #1
 8007978:	d05c      	beq.n	8007a34 <main+0xe94>
            sale2_emr3();
            write_eeprom(SD_emr3_sale2,0X00);
        }

        //DATOS ENVIADO POR LAZO DE CORRIENTE 2
        else if (read_eeprom(SD_wire_sale2) == 0X01)
 800797a:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800797e:	2b01      	cmp	r3, #1
 8007980:	d041      	beq.n	8007a06 <main+0xe66>
            sale2_wire();
            write_eeprom(SD_wire_sale2,0X00);
        }
      
        //ESCRIBIR EL VALOR DEL PPU DE LA VENTA
        if(read_eeprom(venta_sd) == 0x01)
 8007982:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8007986:	2b01      	cmp	r3, #1
 8007988:	d009      	beq.n	800799e <main+0xdfe>
            write_ppu();
            write_eeprom(venta_sd,0x00);

        }        
        
        chThdSleepMilliseconds(10);            
 800798a:	2064      	movs	r0, #100	; 0x64
 800798c:	f005 f858 	bl	800ca40 <chThdSleep>
 8007990:	e7cb      	b.n	800792a <main+0xd8a>
    u->BRR = STM32_PCLK2 / config->speed;
 8007992:	6808      	ldr	r0, [r1, #0]
 8007994:	4a73      	ldr	r2, [pc, #460]	; (8007b64 <main+0xfc4>)
 8007996:	fbb2 f2f0 	udiv	r2, r2, r0
 800799a:	609a      	str	r2, [r3, #8]
 800799c:	e774      	b.n	8007888 <main+0xce8>
    FRESULT fr2;    /* FatFs return code */
    uint8_t bw2;
    FILINFO fno;
    uint32_t T;

    fr2 = f_stat("ppu.txt", &fno);
 800799e:	4631      	mov	r1, r6
 80079a0:	4871      	ldr	r0, [pc, #452]	; (8007b68 <main+0xfc8>)
 80079a2:	f003 fb0d 	bl	800afc0 <f_stat>

    switch (fr2) 
 80079a6:	b158      	cbz	r0, 80079c0 <main+0xe20>
 80079a8:	2804      	cmp	r0, #4
 80079aa:	d105      	bne.n	80079b8 <main+0xe18>
        break;

        case FR_NO_FILE:

            
                fr2 = f_open(&fil2, "ppu.txt", FA_CREATE_NEW | FA_WRITE);
 80079ac:	2206      	movs	r2, #6
 80079ae:	496e      	ldr	r1, [pc, #440]	; (8007b68 <main+0xfc8>)
 80079b0:	a826      	add	r0, sp, #152	; 0x98
 80079b2:	f006 faf5 	bl	800dfa0 <f_open>

                if (fr2)
 80079b6:	b150      	cbz	r0, 80079ce <main+0xe2e>
 80079b8:	2300      	movs	r3, #0
 80079ba:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80079be:	e7e4      	b.n	800798a <main+0xdea>
            fr2 = f_open(&fil2, "ppu.txt", FA_WRITE);
 80079c0:	2202      	movs	r2, #2
 80079c2:	4969      	ldr	r1, [pc, #420]	; (8007b68 <main+0xfc8>)
 80079c4:	a826      	add	r0, sp, #152	; 0x98
 80079c6:	f006 faeb 	bl	800dfa0 <f_open>
            if (fr2)
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d1f4      	bne.n	80079b8 <main+0xe18>
            fr2 = f_write(&fil2, &LEVEL1_PPU ,2, &bw2);
 80079ce:	ab17      	add	r3, sp, #92	; 0x5c
 80079d0:	2202      	movs	r2, #2
 80079d2:	4966      	ldr	r1, [pc, #408]	; (8007b6c <main+0xfcc>)
 80079d4:	a826      	add	r0, sp, #152	; 0x98
 80079d6:	f003 fc1b 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &PPU_VENTA1 ,6, &bw2);
 80079da:	ab17      	add	r3, sp, #92	; 0x5c
 80079dc:	2206      	movs	r2, #6
 80079de:	4964      	ldr	r1, [pc, #400]	; (8007b70 <main+0xfd0>)
 80079e0:	a826      	add	r0, sp, #152	; 0x98
 80079e2:	f003 fc15 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &LEVEL2_PPU ,2, &bw2);
 80079e6:	ab17      	add	r3, sp, #92	; 0x5c
 80079e8:	2202      	movs	r2, #2
 80079ea:	4962      	ldr	r1, [pc, #392]	; (8007b74 <main+0xfd4>)
 80079ec:	a826      	add	r0, sp, #152	; 0x98
 80079ee:	f003 fc0f 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &PPU_VENTA2 ,6, &bw2);                
 80079f2:	ab17      	add	r3, sp, #92	; 0x5c
 80079f4:	2206      	movs	r2, #6
 80079f6:	4960      	ldr	r1, [pc, #384]	; (8007b78 <main+0xfd8>)
 80079f8:	a826      	add	r0, sp, #152	; 0x98
 80079fa:	f003 fc09 	bl	800b210 <f_write>
            f_close(&fil2);
 80079fe:	a826      	add	r0, sp, #152	; 0x98
 8007a00:	f003 fbbe 	bl	800b180 <f_close>
 8007a04:	e7d8      	b.n	80079b8 <main+0xe18>
    fr2 = f_stat("s2wire.txt", &fno);
 8007a06:	4631      	mov	r1, r6
 8007a08:	485c      	ldr	r0, [pc, #368]	; (8007b7c <main+0xfdc>)
 8007a0a:	f003 fad9 	bl	800afc0 <f_stat>
    switch (fr2) 
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	f000 8557 	beq.w	80084c2 <main+0x1922>
 8007a14:	2804      	cmp	r0, #4
 8007a16:	f040 8587 	bne.w	8008528 <main+0x1988>
            fr2 = f_open(&fil2, "s2wire.txt", FA_CREATE_NEW | FA_WRITE);
 8007a1a:	4958      	ldr	r1, [pc, #352]	; (8007b7c <main+0xfdc>)
 8007a1c:	2206      	movs	r2, #6
 8007a1e:	a826      	add	r0, sp, #152	; 0x98
 8007a20:	f006 fabe 	bl	800dfa0 <f_open>
            if (fr2)
 8007a24:	4601      	mov	r1, r0
 8007a26:	2800      	cmp	r0, #0
 8007a28:	f000 8554 	beq.w	80084d4 <main+0x1934>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
 8007a32:	e7a6      	b.n	8007982 <main+0xde2>
    fr2 = f_stat("s2emr3.txt", &fno);
 8007a34:	4631      	mov	r1, r6
 8007a36:	4852      	ldr	r0, [pc, #328]	; (8007b80 <main+0xfe0>)
 8007a38:	f003 fac2 	bl	800afc0 <f_stat>
    switch (fr2) 
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d03b      	beq.n	8007ab8 <main+0xf18>
 8007a40:	2804      	cmp	r0, #4
 8007a42:	d16b      	bne.n	8007b1c <main+0xf7c>
            fr2 = f_open(&fil2, "s2emr3.txt", FA_CREATE_NEW | FA_WRITE);
 8007a44:	494e      	ldr	r1, [pc, #312]	; (8007b80 <main+0xfe0>)
 8007a46:	2206      	movs	r2, #6
 8007a48:	a826      	add	r0, sp, #152	; 0x98
 8007a4a:	f006 faa9 	bl	800dfa0 <f_open>
            if (fr2)
 8007a4e:	4601      	mov	r1, r0
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d039      	beq.n	8007ac8 <main+0xf28>
 8007a54:	2300      	movs	r3, #0
 8007a56:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
 8007a5a:	e792      	b.n	8007982 <main+0xde2>
    fr2 = f_stat("s1wire.txt", &fno);
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4849      	ldr	r0, [pc, #292]	; (8007b84 <main+0xfe4>)
 8007a60:	f003 faae 	bl	800afc0 <f_stat>
    switch (fr2) 
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f000 80a1 	beq.w	8007bac <main+0x100c>
 8007a6a:	2804      	cmp	r0, #4
 8007a6c:	f040 80d1 	bne.w	8007c12 <main+0x1072>
            fr2 = f_open(&fil2, "s1wire.txt", FA_CREATE_NEW | FA_WRITE);
 8007a70:	4944      	ldr	r1, [pc, #272]	; (8007b84 <main+0xfe4>)
 8007a72:	2206      	movs	r2, #6
 8007a74:	a826      	add	r0, sp, #152	; 0x98
 8007a76:	f006 fa93 	bl	800dfa0 <f_open>
            if (fr2)
 8007a7a:	4601      	mov	r1, r0
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	f000 809e 	beq.w	8007bbe <main+0x101e>
 8007a82:	2300      	movs	r3, #0
 8007a84:	f884 308b 	strb.w	r3, [r4, #139]	; 0x8b
 8007a88:	e76d      	b.n	8007966 <main+0xdc6>
    fr2 = f_stat("s1emr3.txt", &fno);
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	483e      	ldr	r0, [pc, #248]	; (8007b88 <main+0xfe8>)
 8007a8e:	f003 fa97 	bl	800afc0 <f_stat>
    switch (fr2) 
 8007a92:	2800      	cmp	r0, #0
 8007a94:	f000 80c6 	beq.w	8007c24 <main+0x1084>
 8007a98:	2804      	cmp	r0, #4
 8007a9a:	f040 80f6 	bne.w	8007c8a <main+0x10ea>
            fr2 = f_open(&fil2, "s1emr3.txt", FA_CREATE_NEW | FA_WRITE);
 8007a9e:	493a      	ldr	r1, [pc, #232]	; (8007b88 <main+0xfe8>)
 8007aa0:	2206      	movs	r2, #6
 8007aa2:	a826      	add	r0, sp, #152	; 0x98
 8007aa4:	f006 fa7c 	bl	800dfa0 <f_open>
            if (fr2)
 8007aa8:	4601      	mov	r1, r0
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	f000 80c3 	beq.w	8007c36 <main+0x1096>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
 8007ab6:	e756      	b.n	8007966 <main+0xdc6>
            fr2 = f_open(&fil2, "s2emr3.txt", FA_READ|FA_WRITE);
 8007ab8:	2203      	movs	r2, #3
 8007aba:	4931      	ldr	r1, [pc, #196]	; (8007b80 <main+0xfe0>)
 8007abc:	a826      	add	r0, sp, #152	; 0x98
 8007abe:	f006 fa6f 	bl	800dfa0 <f_open>
            if (fr2)
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d1c6      	bne.n	8007a54 <main+0xeb4>
            fr2 = f_lseek(&fil2,f_size(&fil2));
 8007ac6:	9929      	ldr	r1, [sp, #164]	; 0xa4
            fr2 = f_lseek(&fil2,0);
 8007ac8:	a826      	add	r0, sp, #152	; 0x98
 8007aca:	f003 fac1 	bl	800b050 <f_lseek>
            fr2 = f_write(&fil2, &FECHA ,11, &bw2);
 8007ace:	ab17      	add	r3, sp, #92	; 0x5c
 8007ad0:	220b      	movs	r2, #11
 8007ad2:	492e      	ldr	r1, [pc, #184]	; (8007b8c <main+0xfec>)
 8007ad4:	a826      	add	r0, sp, #152	; 0x98
 8007ad6:	f003 fb9b 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &HORA ,9, &bw2);
 8007ada:	ab17      	add	r3, sp, #92	; 0x5c
 8007adc:	2209      	movs	r2, #9
 8007ade:	492c      	ldr	r1, [pc, #176]	; (8007b90 <main+0xff0>)
 8007ae0:	a826      	add	r0, sp, #152	; 0x98
 8007ae2:	f003 fb95 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &Data_Tx2 ,strlen(Data_Tx2), &bw2);
 8007ae6:	482b      	ldr	r0, [pc, #172]	; (8007b94 <main+0xff4>)
 8007ae8:	f7f8 fd82 	bl	80005f0 <strlen>
 8007aec:	ab17      	add	r3, sp, #92	; 0x5c
 8007aee:	4602      	mov	r2, r0
 8007af0:	4928      	ldr	r1, [pc, #160]	; (8007b94 <main+0xff4>)
 8007af2:	a826      	add	r0, sp, #152	; 0x98
 8007af4:	f003 fb8c 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &Data_Rx2 ,strlen(Data_Rx2), &bw2);
 8007af8:	4827      	ldr	r0, [pc, #156]	; (8007b98 <main+0xff8>)
 8007afa:	f7f8 fd79 	bl	80005f0 <strlen>
 8007afe:	ab17      	add	r3, sp, #92	; 0x5c
 8007b00:	4602      	mov	r2, r0
 8007b02:	4925      	ldr	r1, [pc, #148]	; (8007b98 <main+0xff8>)
 8007b04:	a826      	add	r0, sp, #152	; 0x98
 8007b06:	f003 fb83 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &ENTER_INIC ,2, &bw2);
 8007b0a:	ab17      	add	r3, sp, #92	; 0x5c
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	4923      	ldr	r1, [pc, #140]	; (8007b9c <main+0xffc>)
 8007b10:	a826      	add	r0, sp, #152	; 0x98
 8007b12:	f003 fb7d 	bl	800b210 <f_write>
            f_close(&fil2);
 8007b16:	a826      	add	r0, sp, #152	; 0x98
 8007b18:	f003 fb32 	bl	800b180 <f_close>
    if(ventas_2 && read_eeprom(consola) == 0x01)
 8007b1c:	782b      	ldrb	r3, [r5, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d098      	beq.n	8007a54 <main+0xeb4>
 8007b22:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d194      	bne.n	8007a54 <main+0xeb4>
        borrar_sd2();
 8007b2a:	f006 fc79 	bl	800e420 <borrar_sd2>
        ventas_2 = false;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	702b      	strb	r3, [r5, #0]
 8007b32:	e78f      	b.n	8007a54 <main+0xeb4>
 8007b34:	40023800 	.word	0x40023800
 8007b38:	e000e100 	.word	0xe000e100
 8007b3c:	40011000 	.word	0x40011000
 8007b40:	200008d4 	.word	0x200008d4
 8007b44:	0280de80 	.word	0x0280de80
 8007b48:	40020000 	.word	0x40020000
 8007b4c:	20001400 	.word	0x20001400
 8007b50:	20001401 	.word	0x20001401
 8007b54:	080006d1 	.word	0x080006d1
 8007b58:	20001408 	.word	0x20001408
 8007b5c:	080058b1 	.word	0x080058b1
 8007b60:	20001060 	.word	0x20001060
 8007b64:	0501bd00 	.word	0x0501bd00
 8007b68:	0800faf0 	.word	0x0800faf0
 8007b6c:	20000830 	.word	0x20000830
 8007b70:	20000850 	.word	0x20000850
 8007b74:	20000834 	.word	0x20000834
 8007b78:	20000858 	.word	0x20000858
 8007b7c:	0800fb4c 	.word	0x0800fb4c
 8007b80:	0800fb40 	.word	0x0800fb40
 8007b84:	0800fb28 	.word	0x0800fb28
 8007b88:	0800fb1c 	.word	0x0800fb1c
 8007b8c:	20000818 	.word	0x20000818
 8007b90:	20000824 	.word	0x20000824
 8007b94:	20000b1c 	.word	0x20000b1c
 8007b98:	20000974 	.word	0x20000974
 8007b9c:	20000814 	.word	0x20000814
 8007ba0:	0800fa1c 	.word	0x0800fa1c
 8007ba4:	20000878 	.word	0x20000878
 8007ba8:	20000880 	.word	0x20000880
            fr2 = f_open(&fil2, "s1wire.txt", FA_READ|FA_WRITE);
 8007bac:	2203      	movs	r2, #3
 8007bae:	4993      	ldr	r1, [pc, #588]	; (8007dfc <main+0x125c>)
 8007bb0:	a826      	add	r0, sp, #152	; 0x98
 8007bb2:	f006 f9f5 	bl	800dfa0 <f_open>
            if (fr2)
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f47f af63 	bne.w	8007a82 <main+0xee2>
            fr2 = f_lseek(&fil2,f_size(&fil2));
 8007bbc:	9929      	ldr	r1, [sp, #164]	; 0xa4
            fr2 = f_lseek(&fil2,0);
 8007bbe:	a826      	add	r0, sp, #152	; 0x98
 8007bc0:	f003 fa46 	bl	800b050 <f_lseek>
            fr2 = f_write(&fil2, &FECHA ,11, &bw2);
 8007bc4:	ab17      	add	r3, sp, #92	; 0x5c
 8007bc6:	220b      	movs	r2, #11
 8007bc8:	498d      	ldr	r1, [pc, #564]	; (8007e00 <main+0x1260>)
 8007bca:	a826      	add	r0, sp, #152	; 0x98
 8007bcc:	f003 fb20 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &HORA ,9, &bw2);
 8007bd0:	ab17      	add	r3, sp, #92	; 0x5c
 8007bd2:	2209      	movs	r2, #9
 8007bd4:	498b      	ldr	r1, [pc, #556]	; (8007e04 <main+0x1264>)
 8007bd6:	a826      	add	r0, sp, #152	; 0x98
 8007bd8:	f003 fb1a 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &Data_Tx3 ,strlen(Data_Tx3), &bw2);
 8007bdc:	488a      	ldr	r0, [pc, #552]	; (8007e08 <main+0x1268>)
 8007bde:	f7f8 fd07 	bl	80005f0 <strlen>
 8007be2:	ab17      	add	r3, sp, #92	; 0x5c
 8007be4:	4602      	mov	r2, r0
 8007be6:	4988      	ldr	r1, [pc, #544]	; (8007e08 <main+0x1268>)
 8007be8:	a826      	add	r0, sp, #152	; 0x98
 8007bea:	f003 fb11 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &Data_Rx3 ,strlen(Data_Rx3), &bw2);
 8007bee:	4887      	ldr	r0, [pc, #540]	; (8007e0c <main+0x126c>)
 8007bf0:	f7f8 fcfe 	bl	80005f0 <strlen>
 8007bf4:	ab17      	add	r3, sp, #92	; 0x5c
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	4984      	ldr	r1, [pc, #528]	; (8007e0c <main+0x126c>)
 8007bfa:	a826      	add	r0, sp, #152	; 0x98
 8007bfc:	f003 fb08 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &ENTER_INIC ,2, &bw2);
 8007c00:	ab17      	add	r3, sp, #92	; 0x5c
 8007c02:	2202      	movs	r2, #2
 8007c04:	4982      	ldr	r1, [pc, #520]	; (8007e10 <main+0x1270>)
 8007c06:	a826      	add	r0, sp, #152	; 0x98
 8007c08:	f003 fb02 	bl	800b210 <f_write>
            f_close(&fil2);
 8007c0c:	a826      	add	r0, sp, #152	; 0x98
 8007c0e:	f003 fab7 	bl	800b180 <f_close>
    if(ventas_1)
 8007c12:	783b      	ldrb	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f43f af34 	beq.w	8007a82 <main+0xee2>
        borrar_sd1();
 8007c1a:	f006 fc31 	bl	800e480 <borrar_sd1>
        ventas_1 = false;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	703b      	strb	r3, [r7, #0]
 8007c22:	e72e      	b.n	8007a82 <main+0xee2>
            fr2 = f_open(&fil2, "s1emr3.txt", FA_READ|FA_WRITE);
 8007c24:	2203      	movs	r2, #3
 8007c26:	497b      	ldr	r1, [pc, #492]	; (8007e14 <main+0x1274>)
 8007c28:	a826      	add	r0, sp, #152	; 0x98
 8007c2a:	f006 f9b9 	bl	800dfa0 <f_open>
            if (fr2)
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f47f af3e 	bne.w	8007ab0 <main+0xf10>
            fr2 = f_lseek(&fil2,f_size(&fil2));
 8007c34:	9929      	ldr	r1, [sp, #164]	; 0xa4
            fr2 = f_lseek(&fil2,0);
 8007c36:	a826      	add	r0, sp, #152	; 0x98
 8007c38:	f003 fa0a 	bl	800b050 <f_lseek>
            fr2 = f_write(&fil2, &FECHA ,11, &bw2);
 8007c3c:	ab17      	add	r3, sp, #92	; 0x5c
 8007c3e:	220b      	movs	r2, #11
 8007c40:	496f      	ldr	r1, [pc, #444]	; (8007e00 <main+0x1260>)
 8007c42:	a826      	add	r0, sp, #152	; 0x98
 8007c44:	f003 fae4 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &HORA ,9, &bw2);
 8007c48:	ab17      	add	r3, sp, #92	; 0x5c
 8007c4a:	2209      	movs	r2, #9
 8007c4c:	496d      	ldr	r1, [pc, #436]	; (8007e04 <main+0x1264>)
 8007c4e:	a826      	add	r0, sp, #152	; 0x98
 8007c50:	f003 fade 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &Data_Tx ,strlen(Data_Tx), &bw2);
 8007c54:	4870      	ldr	r0, [pc, #448]	; (8007e18 <main+0x1278>)
 8007c56:	f7f8 fccb 	bl	80005f0 <strlen>
 8007c5a:	ab17      	add	r3, sp, #92	; 0x5c
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	496e      	ldr	r1, [pc, #440]	; (8007e18 <main+0x1278>)
 8007c60:	a826      	add	r0, sp, #152	; 0x98
 8007c62:	f003 fad5 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &Data_Rx ,strlen(Data_Rx), &bw2);
 8007c66:	486d      	ldr	r0, [pc, #436]	; (8007e1c <main+0x127c>)
 8007c68:	f7f8 fcc2 	bl	80005f0 <strlen>
 8007c6c:	ab17      	add	r3, sp, #92	; 0x5c
 8007c6e:	4602      	mov	r2, r0
 8007c70:	496a      	ldr	r1, [pc, #424]	; (8007e1c <main+0x127c>)
 8007c72:	a826      	add	r0, sp, #152	; 0x98
 8007c74:	f003 facc 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &ENTER_INIC ,2, &bw2);
 8007c78:	ab17      	add	r3, sp, #92	; 0x5c
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	4964      	ldr	r1, [pc, #400]	; (8007e10 <main+0x1270>)
 8007c7e:	a826      	add	r0, sp, #152	; 0x98
 8007c80:	f003 fac6 	bl	800b210 <f_write>
            f_close(&fil2);
 8007c84:	a826      	add	r0, sp, #152	; 0x98
 8007c86:	f003 fa7b 	bl	800b180 <f_close>
    if(ventas_1 && read_eeprom(consola) == 0x01)
 8007c8a:	783b      	ldrb	r3, [r7, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f43f af0f 	beq.w	8007ab0 <main+0xf10>
 8007c92:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	f47f af0a 	bne.w	8007ab0 <main+0xf10>
        borrar_sd1();
 8007c9c:	f006 fbf0 	bl	800e480 <borrar_sd1>
        ventas_1 = false;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	703b      	strb	r3, [r7, #0]
 8007ca4:	e704      	b.n	8007ab0 <main+0xf10>
   	fr2 = f_stat("trans.txt", &fno);
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	485d      	ldr	r0, [pc, #372]	; (8007e20 <main+0x1280>)
 8007caa:	f003 f989 	bl	800afc0 <f_stat>
   	switch (fr2) 
 8007cae:	b160      	cbz	r0, 8007cca <main+0x112a>
 8007cb0:	2804      	cmp	r0, #4
 8007cb2:	d106      	bne.n	8007cc2 <main+0x1122>
    		fr2 = f_open(&fil2, "trans.txt", FA_CREATE_NEW | FA_WRITE);
 8007cb4:	495a      	ldr	r1, [pc, #360]	; (8007e20 <main+0x1280>)
 8007cb6:	2206      	movs	r2, #6
 8007cb8:	a826      	add	r0, sp, #152	; 0x98
 8007cba:	f006 f971 	bl	800dfa0 <f_open>
    		if (fr2)
 8007cbe:	4601      	mov	r1, r0
 8007cc0:	b180      	cbz	r0, 8007ce4 <main+0x1144>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
 8007cc8:	e64d      	b.n	8007966 <main+0xdc6>
    		fr2 = f_open(&fil2, "trans.txt", FA_READ|FA_WRITE);
 8007cca:	2203      	movs	r2, #3
 8007ccc:	4954      	ldr	r1, [pc, #336]	; (8007e20 <main+0x1280>)
 8007cce:	a826      	add	r0, sp, #152	; 0x98
 8007cd0:	f006 f966 	bl	800dfa0 <f_open>
    		if (fr2)
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d1f4      	bne.n	8007cc2 <main+0x1122>
            T = f_size(&fil2);
 8007cd8:	9929      	ldr	r1, [sp, #164]	; 0xa4
            if(T > FILE_FIN)
 8007cda:	f5b1 7f1b 	cmp.w	r1, #620	; 0x26c
 8007cde:	d901      	bls.n	8007ce4 <main+0x1144>
                ventas_1 = true;
 8007ce0:	f887 8000 	strb.w	r8, [r7]
            fr2 = f_lseek(&fil2,0);
 8007ce4:	a826      	add	r0, sp, #152	; 0x98
 8007ce6:	f003 f9b3 	bl	800b050 <f_lseek>
    		fr2 = f_write(&fil2, &FECHA ,11, &bw2);
 8007cea:	ab17      	add	r3, sp, #92	; 0x5c
 8007cec:	220b      	movs	r2, #11
 8007cee:	4944      	ldr	r1, [pc, #272]	; (8007e00 <main+0x1260>)
 8007cf0:	a826      	add	r0, sp, #152	; 0x98
 8007cf2:	f003 fa8d 	bl	800b210 <f_write>
    		fr2 = f_write(&fil2, &HORA ,9, &bw2);
 8007cf6:	ab17      	add	r3, sp, #92	; 0x5c
 8007cf8:	2209      	movs	r2, #9
 8007cfa:	4942      	ldr	r1, [pc, #264]	; (8007e04 <main+0x1264>)
 8007cfc:	a826      	add	r0, sp, #152	; 0x98
 8007cfe:	f003 fa87 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &PPU_VENTA1 ,6, &bw2);
 8007d02:	ab17      	add	r3, sp, #92	; 0x5c
 8007d04:	2206      	movs	r2, #6
 8007d06:	4947      	ldr	r1, [pc, #284]	; (8007e24 <main+0x1284>)
 8007d08:	a826      	add	r0, sp, #152	; 0x98
 8007d0a:	f003 fa81 	bl	800b210 <f_write>
    		fr2 = f_write(&fil2, &DINERO1 ,8, &bw2);
 8007d0e:	ab17      	add	r3, sp, #92	; 0x5c
 8007d10:	2208      	movs	r2, #8
 8007d12:	4945      	ldr	r1, [pc, #276]	; (8007e28 <main+0x1288>)
 8007d14:	a826      	add	r0, sp, #152	; 0x98
 8007d16:	f003 fa7b 	bl	800b210 <f_write>
    		fr2 = f_write(&fil2, &VOL1 ,8, &bw2);
 8007d1a:	ab17      	add	r3, sp, #92	; 0x5c
 8007d1c:	2208      	movs	r2, #8
 8007d1e:	4943      	ldr	r1, [pc, #268]	; (8007e2c <main+0x128c>)
 8007d20:	a826      	add	r0, sp, #152	; 0x98
 8007d22:	f003 fa75 	bl	800b210 <f_write>
    		fr2 = f_write(&fil2, &T_DINERO1 ,10, &bw2);
 8007d26:	ab17      	add	r3, sp, #92	; 0x5c
 8007d28:	220a      	movs	r2, #10
 8007d2a:	4941      	ldr	r1, [pc, #260]	; (8007e30 <main+0x1290>)
 8007d2c:	a826      	add	r0, sp, #152	; 0x98
 8007d2e:	f003 fa6f 	bl	800b210 <f_write>
    		fr2 = f_write(&fil2, &T_VOL1 ,10, &bw2);
 8007d32:	ab17      	add	r3, sp, #92	; 0x5c
 8007d34:	220a      	movs	r2, #10
 8007d36:	493f      	ldr	r1, [pc, #252]	; (8007e34 <main+0x1294>)
 8007d38:	a826      	add	r0, sp, #152	; 0x98
 8007d3a:	f003 fa69 	bl	800b210 <f_write>
    		fr2 = f_write(&fil2, &PRESET1 ,9, &bw2);
 8007d3e:	ab17      	add	r3, sp, #92	; 0x5c
 8007d40:	2209      	movs	r2, #9
 8007d42:	493d      	ldr	r1, [pc, #244]	; (8007e38 <main+0x1298>)
 8007d44:	a826      	add	r0, sp, #152	; 0x98
 8007d46:	f003 fa63 	bl	800b210 <f_write>
    		fr2 = f_write(&fil2, &ENTER_INIC ,2, &bw2);
 8007d4a:	ab17      	add	r3, sp, #92	; 0x5c
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	4930      	ldr	r1, [pc, #192]	; (8007e10 <main+0x1270>)
 8007d50:	a826      	add	r0, sp, #152	; 0x98
 8007d52:	f003 fa5d 	bl	800b210 <f_write>
    		f_close(&fil2);
 8007d56:	a826      	add	r0, sp, #152	; 0x98
 8007d58:	f003 fa12 	bl	800b180 <f_close>
 8007d5c:	e7b1      	b.n	8007cc2 <main+0x1122>
    fr2 = f_stat("lwire.txt", &fno);
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4836      	ldr	r0, [pc, #216]	; (8007e3c <main+0x129c>)
 8007d62:	f003 f92d 	bl	800afc0 <f_stat>
    switch (fr2) 
 8007d66:	b160      	cbz	r0, 8007d82 <main+0x11e2>
 8007d68:	2804      	cmp	r0, #4
 8007d6a:	d106      	bne.n	8007d7a <main+0x11da>
            fr2 = f_open(&fil2, "lwire.txt", FA_CREATE_NEW | FA_WRITE);
 8007d6c:	4933      	ldr	r1, [pc, #204]	; (8007e3c <main+0x129c>)
 8007d6e:	2206      	movs	r2, #6
 8007d70:	a826      	add	r0, sp, #152	; 0x98
 8007d72:	f006 f915 	bl	800dfa0 <f_open>
            if (fr2)
 8007d76:	4601      	mov	r1, r0
 8007d78:	b158      	cbz	r0, 8007d92 <main+0x11f2>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
 8007d80:	e5dd      	b.n	800793e <main+0xd9e>
            fr2 = f_open(&fil2, "lwire.txt", FA_READ|FA_WRITE);
 8007d82:	2203      	movs	r2, #3
 8007d84:	492d      	ldr	r1, [pc, #180]	; (8007e3c <main+0x129c>)
 8007d86:	a826      	add	r0, sp, #152	; 0x98
 8007d88:	f006 f90a 	bl	800dfa0 <f_open>
            if (fr2)
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d1f4      	bne.n	8007d7a <main+0x11da>
            fr2 = f_lseek(&fil2,f_size(&fil2));
 8007d90:	9929      	ldr	r1, [sp, #164]	; 0xa4
            fr2 = f_lseek(&fil2,0);
 8007d92:	a826      	add	r0, sp, #152	; 0x98
 8007d94:	f003 f95c 	bl	800b050 <f_lseek>
            fr2 = f_write(&fil2, &FECHA ,11, &bw2);
 8007d98:	ab17      	add	r3, sp, #92	; 0x5c
 8007d9a:	220b      	movs	r2, #11
 8007d9c:	4918      	ldr	r1, [pc, #96]	; (8007e00 <main+0x1260>)
 8007d9e:	a826      	add	r0, sp, #152	; 0x98
 8007da0:	f003 fa36 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &HORA ,9, &bw2);
 8007da4:	ab17      	add	r3, sp, #92	; 0x5c
 8007da6:	2209      	movs	r2, #9
 8007da8:	4916      	ldr	r1, [pc, #88]	; (8007e04 <main+0x1264>)
 8007daa:	a826      	add	r0, sp, #152	; 0x98
 8007dac:	f003 fa30 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &data_log ,strlen(data_log), &bw2);
 8007db0:	4823      	ldr	r0, [pc, #140]	; (8007e40 <main+0x12a0>)
 8007db2:	f7f8 fc1d 	bl	80005f0 <strlen>
 8007db6:	ab17      	add	r3, sp, #92	; 0x5c
 8007db8:	4602      	mov	r2, r0
 8007dba:	4921      	ldr	r1, [pc, #132]	; (8007e40 <main+0x12a0>)
 8007dbc:	a826      	add	r0, sp, #152	; 0x98
 8007dbe:	f003 fa27 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &ENTER_INIC ,2, &bw2);
 8007dc2:	ab17      	add	r3, sp, #92	; 0x5c
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	4912      	ldr	r1, [pc, #72]	; (8007e10 <main+0x1270>)
 8007dc8:	a826      	add	r0, sp, #152	; 0x98
 8007dca:	f003 fa21 	bl	800b210 <f_write>
            f_close(&fil2);
 8007dce:	a826      	add	r0, sp, #152	; 0x98
 8007dd0:	f003 f9d6 	bl	800b180 <f_close>
 8007dd4:	e7d1      	b.n	8007d7a <main+0x11da>
    fr2 = f_stat("lemr3.txt", &fno);
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	481a      	ldr	r0, [pc, #104]	; (8007e44 <main+0x12a4>)
 8007dda:	f003 f8f1 	bl	800afc0 <f_stat>
    switch (fr2) 
 8007dde:	b398      	cbz	r0, 8007e48 <main+0x12a8>
 8007de0:	2804      	cmp	r0, #4
 8007de2:	d106      	bne.n	8007df2 <main+0x1252>
            fr2 = f_open(&fil2, "lemr3.txt", FA_CREATE_NEW | FA_WRITE);
 8007de4:	4917      	ldr	r1, [pc, #92]	; (8007e44 <main+0x12a4>)
 8007de6:	2206      	movs	r2, #6
 8007de8:	a826      	add	r0, sp, #152	; 0x98
 8007dea:	f006 f8d9 	bl	800dfa0 <f_open>
            if (fr2)
 8007dee:	4601      	mov	r1, r0
 8007df0:	b390      	cbz	r0, 8007e58 <main+0x12b8>
 8007df2:	2300      	movs	r3, #0
 8007df4:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
 8007df8:	e5a6      	b.n	8007948 <main+0xda8>
 8007dfa:	bf00      	nop
 8007dfc:	0800fb28 	.word	0x0800fb28
 8007e00:	20000818 	.word	0x20000818
 8007e04:	20000824 	.word	0x20000824
 8007e08:	20000b58 	.word	0x20000b58
 8007e0c:	200009b0 	.word	0x200009b0
 8007e10:	20000814 	.word	0x20000814
 8007e14:	0800fb1c 	.word	0x0800fb1c
 8007e18:	20000ae0 	.word	0x20000ae0
 8007e1c:	20000938 	.word	0x20000938
 8007e20:	0800fb10 	.word	0x0800fb10
 8007e24:	20000850 	.word	0x20000850
 8007e28:	20000804 	.word	0x20000804
 8007e2c:	200008b4 	.word	0x200008b4
 8007e30:	20000884 	.word	0x20000884
 8007e34:	2000089c 	.word	0x2000089c
 8007e38:	20000860 	.word	0x20000860
 8007e3c:	0800faf8 	.word	0x0800faf8
 8007e40:	20001284 	.word	0x20001284
 8007e44:	0800fb04 	.word	0x0800fb04
            fr2 = f_open(&fil2, "lemr3.txt", FA_READ|FA_WRITE);
 8007e48:	2203      	movs	r2, #3
 8007e4a:	4977      	ldr	r1, [pc, #476]	; (8008028 <main+0x1488>)
 8007e4c:	a826      	add	r0, sp, #152	; 0x98
 8007e4e:	f006 f8a7 	bl	800dfa0 <f_open>
            if (fr2)
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d1cd      	bne.n	8007df2 <main+0x1252>
            fr2 = f_lseek(&fil2,f_size(&fil2));
 8007e56:	9929      	ldr	r1, [sp, #164]	; 0xa4
            fr2 = f_lseek(&fil2,0);
 8007e58:	a826      	add	r0, sp, #152	; 0x98
 8007e5a:	f003 f8f9 	bl	800b050 <f_lseek>
            fr2 = f_write(&fil2, &FECHA ,11, &bw2);
 8007e5e:	ab17      	add	r3, sp, #92	; 0x5c
 8007e60:	220b      	movs	r2, #11
 8007e62:	4972      	ldr	r1, [pc, #456]	; (800802c <main+0x148c>)
 8007e64:	a826      	add	r0, sp, #152	; 0x98
 8007e66:	f003 f9d3 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &HORA ,9, &bw2);
 8007e6a:	ab17      	add	r3, sp, #92	; 0x5c
 8007e6c:	2209      	movs	r2, #9
 8007e6e:	4970      	ldr	r1, [pc, #448]	; (8008030 <main+0x1490>)
 8007e70:	a826      	add	r0, sp, #152	; 0x98
 8007e72:	f003 f9cd 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &log_Tx ,strlen(log_Tx), &bw2);
 8007e76:	486f      	ldr	r0, [pc, #444]	; (8008034 <main+0x1494>)
 8007e78:	f7f8 fbba 	bl	80005f0 <strlen>
 8007e7c:	ab17      	add	r3, sp, #92	; 0x5c
 8007e7e:	4602      	mov	r2, r0
 8007e80:	496c      	ldr	r1, [pc, #432]	; (8008034 <main+0x1494>)
 8007e82:	a826      	add	r0, sp, #152	; 0x98
 8007e84:	f003 f9c4 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &log_Rx ,strlen(log_Rx), &bw2);
 8007e88:	486b      	ldr	r0, [pc, #428]	; (8008038 <main+0x1498>)
 8007e8a:	f7f8 fbb1 	bl	80005f0 <strlen>
 8007e8e:	ab17      	add	r3, sp, #92	; 0x5c
 8007e90:	4602      	mov	r2, r0
 8007e92:	4969      	ldr	r1, [pc, #420]	; (8008038 <main+0x1498>)
 8007e94:	a826      	add	r0, sp, #152	; 0x98
 8007e96:	f003 f9bb 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &ENTER_INIC ,2, &bw2);
 8007e9a:	ab17      	add	r3, sp, #92	; 0x5c
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	4967      	ldr	r1, [pc, #412]	; (800803c <main+0x149c>)
 8007ea0:	a826      	add	r0, sp, #152	; 0x98
 8007ea2:	f003 f9b5 	bl	800b210 <f_write>
            f_close(&fil2);
 8007ea6:	a826      	add	r0, sp, #152	; 0x98
 8007ea8:	f003 f96a 	bl	800b180 <f_close>
 8007eac:	e7a1      	b.n	8007df2 <main+0x1252>
    fr = f_open(&fil, "config.txt", FA_WRITE); 
 8007eae:	2202      	movs	r2, #2
 8007eb0:	4659      	mov	r1, fp
 8007eb2:	a826      	add	r0, sp, #152	; 0x98
 8007eb4:	f006 f874 	bl	800dfa0 <f_open>
    if (fr)
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d14a      	bne.n	8007f52 <main+0x13b2>
    fr = f_write(&fil, &Status1 ,5, &bw);
 8007ebc:	4633      	mov	r3, r6
 8007ebe:	2205      	movs	r2, #5
 8007ec0:	4651      	mov	r1, sl
 8007ec2:	a826      	add	r0, sp, #152	; 0x98
 8007ec4:	f003 f9a4 	bl	800b210 <f_write>
    fr = f_write(&fil, &Status2 ,3, &bw);
 8007ec8:	4633      	mov	r3, r6
 8007eca:	2203      	movs	r2, #3
 8007ecc:	4649      	mov	r1, r9
 8007ece:	a826      	add	r0, sp, #152	; 0x98
 8007ed0:	f003 f99e 	bl	800b210 <f_write>
    fr = f_write(&fil, &PPU_POINT ,2, &bw);
 8007ed4:	4633      	mov	r3, r6
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	4959      	ldr	r1, [pc, #356]	; (8008040 <main+0x14a0>)
 8007eda:	a826      	add	r0, sp, #152	; 0x98
 8007edc:	f003 f998 	bl	800b210 <f_write>
    fr = f_write(&fil, &MON_POINT ,2, &bw);
 8007ee0:	4633      	mov	r3, r6
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	4957      	ldr	r1, [pc, #348]	; (8008044 <main+0x14a4>)
 8007ee6:	a826      	add	r0, sp, #152	; 0x98
 8007ee8:	f003 f992 	bl	800b210 <f_write>
    fr = f_write(&fil, &VOL_POINT ,2, &bw);
 8007eec:	4633      	mov	r3, r6
 8007eee:	2202      	movs	r2, #2
 8007ef0:	4955      	ldr	r1, [pc, #340]	; (8008048 <main+0x14a8>)
 8007ef2:	a826      	add	r0, sp, #152	; 0x98
 8007ef4:	f003 f98c 	bl	800b210 <f_write>
    fr = f_write(&fil, &PPU_LEVEL1 ,6, &bw);
 8007ef8:	4633      	mov	r3, r6
 8007efa:	2206      	movs	r2, #6
 8007efc:	4953      	ldr	r1, [pc, #332]	; (800804c <main+0x14ac>)
 8007efe:	a826      	add	r0, sp, #152	; 0x98
 8007f00:	f003 f986 	bl	800b210 <f_write>
    fr = f_write(&fil, &PPU_LEVEL2 ,6, &bw);
 8007f04:	4633      	mov	r3, r6
 8007f06:	2206      	movs	r2, #6
 8007f08:	4951      	ldr	r1, [pc, #324]	; (8008050 <main+0x14b0>)
 8007f0a:	a826      	add	r0, sp, #152	; 0x98
 8007f0c:	f003 f980 	bl	800b210 <f_write>
    fr = f_write(&fil, &T_DINERO1 ,10, &bw);
 8007f10:	4633      	mov	r3, r6
 8007f12:	220a      	movs	r2, #10
 8007f14:	494f      	ldr	r1, [pc, #316]	; (8008054 <main+0x14b4>)
 8007f16:	a826      	add	r0, sp, #152	; 0x98
 8007f18:	f003 f97a 	bl	800b210 <f_write>
    fr = f_write(&fil, &T_VOL1 ,10, &bw);
 8007f1c:	4633      	mov	r3, r6
 8007f1e:	220a      	movs	r2, #10
 8007f20:	494d      	ldr	r1, [pc, #308]	; (8008058 <main+0x14b8>)
 8007f22:	a826      	add	r0, sp, #152	; 0x98
 8007f24:	f003 f974 	bl	800b210 <f_write>
    fr = f_write(&fil, &T_DINERO2 ,10, &bw);
 8007f28:	4633      	mov	r3, r6
 8007f2a:	220a      	movs	r2, #10
 8007f2c:	494b      	ldr	r1, [pc, #300]	; (800805c <main+0x14bc>)
 8007f2e:	a826      	add	r0, sp, #152	; 0x98
 8007f30:	f003 f96e 	bl	800b210 <f_write>
    fr = f_write(&fil, &T_VOL2 ,10, &bw);
 8007f34:	4633      	mov	r3, r6
 8007f36:	220a      	movs	r2, #10
 8007f38:	4949      	ldr	r1, [pc, #292]	; (8008060 <main+0x14c0>)
 8007f3a:	a826      	add	r0, sp, #152	; 0x98
 8007f3c:	f003 f968 	bl	800b210 <f_write>
    fr = f_write(&fil, &ENTER_INIC,2, &bw);
 8007f40:	4633      	mov	r3, r6
 8007f42:	2202      	movs	r2, #2
 8007f44:	493d      	ldr	r1, [pc, #244]	; (800803c <main+0x149c>)
 8007f46:	a826      	add	r0, sp, #152	; 0x98
 8007f48:	f003 f962 	bl	800b210 <f_write>
   	f_close(&fil);
 8007f4c:	a826      	add	r0, sp, #152	; 0x98
 8007f4e:	f003 f917 	bl	800b180 <f_close>
 8007f52:	2300      	movs	r3, #0
 8007f54:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 8007f58:	e4ec      	b.n	8007934 <main+0xd94>
   	fr2 = f_stat("trans2.txt", &fno);
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	4841      	ldr	r0, [pc, #260]	; (8008064 <main+0x14c4>)
 8007f5e:	f003 f82f 	bl	800afc0 <f_stat>
   	switch (fr2) 
 8007f62:	b170      	cbz	r0, 8007f82 <main+0x13e2>
 8007f64:	2804      	cmp	r0, #4
 8007f66:	d108      	bne.n	8007f7a <main+0x13da>
			fr2 = f_open(&fil2, "trans2.txt", FA_CREATE_NEW | FA_WRITE);
 8007f68:	493e      	ldr	r1, [pc, #248]	; (8008064 <main+0x14c4>)
 8007f6a:	2206      	movs	r2, #6
 8007f6c:	a826      	add	r0, sp, #152	; 0x98
 8007f6e:	f006 f817 	bl	800dfa0 <f_open>
			if (fr2)
 8007f72:	4601      	mov	r1, r0
 8007f74:	2800      	cmp	r0, #0
 8007f76:	f000 82e1 	beq.w	800853c <main+0x199c>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 8007f80:	e4ff      	b.n	8007982 <main+0xde2>
			fr2 = f_open(&fil2, "trans2.txt", FA_READ|FA_WRITE);
 8007f82:	2203      	movs	r2, #3
 8007f84:	4937      	ldr	r1, [pc, #220]	; (8008064 <main+0x14c4>)
 8007f86:	a826      	add	r0, sp, #152	; 0x98
 8007f88:	f006 f80a 	bl	800dfa0 <f_open>
			if (fr2)
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d1f4      	bne.n	8007f7a <main+0x13da>
            T = f_size(&fil2);
 8007f90:	9929      	ldr	r1, [sp, #164]	; 0xa4
            fr2 = f_lseek(&fil2,T);
 8007f92:	a826      	add	r0, sp, #152	; 0x98
            if(T > FILE_FIN)
 8007f94:	f5b1 7f1b 	cmp.w	r1, #620	; 0x26c
                ventas_2 = true;
 8007f98:	bf88      	it	hi
 8007f9a:	f885 8000 	strbhi.w	r8, [r5]
            fr2 = f_lseek(&fil2,T);
 8007f9e:	f003 f857 	bl	800b050 <f_lseek>
			fr2 = f_write(&fil2, &FECHA ,11, &bw2);
 8007fa2:	ab17      	add	r3, sp, #92	; 0x5c
 8007fa4:	220b      	movs	r2, #11
 8007fa6:	4921      	ldr	r1, [pc, #132]	; (800802c <main+0x148c>)
 8007fa8:	a826      	add	r0, sp, #152	; 0x98
 8007faa:	f003 f931 	bl	800b210 <f_write>
			fr2 = f_write(&fil2, &HORA ,9, &bw2);
 8007fae:	ab17      	add	r3, sp, #92	; 0x5c
 8007fb0:	2209      	movs	r2, #9
 8007fb2:	491f      	ldr	r1, [pc, #124]	; (8008030 <main+0x1490>)
 8007fb4:	a826      	add	r0, sp, #152	; 0x98
 8007fb6:	f003 f92b 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &PPU_VENTA2 ,6, &bw2);
 8007fba:	ab17      	add	r3, sp, #92	; 0x5c
 8007fbc:	2206      	movs	r2, #6
 8007fbe:	492a      	ldr	r1, [pc, #168]	; (8008068 <main+0x14c8>)
 8007fc0:	a826      	add	r0, sp, #152	; 0x98
 8007fc2:	f003 f925 	bl	800b210 <f_write>
			fr2 = f_write(&fil2, &DINERO2 ,8, &bw2);
 8007fc6:	ab17      	add	r3, sp, #92	; 0x5c
 8007fc8:	2208      	movs	r2, #8
 8007fca:	4928      	ldr	r1, [pc, #160]	; (800806c <main+0x14cc>)
 8007fcc:	a826      	add	r0, sp, #152	; 0x98
 8007fce:	f003 f91f 	bl	800b210 <f_write>
			fr2 = f_write(&fil2, &VOL2 ,8, &bw2);
 8007fd2:	ab17      	add	r3, sp, #92	; 0x5c
 8007fd4:	2208      	movs	r2, #8
 8007fd6:	4926      	ldr	r1, [pc, #152]	; (8008070 <main+0x14d0>)
 8007fd8:	a826      	add	r0, sp, #152	; 0x98
 8007fda:	f003 f919 	bl	800b210 <f_write>
			fr2 = f_write(&fil2, &T_DINERO2 ,10, &bw2);
 8007fde:	ab17      	add	r3, sp, #92	; 0x5c
 8007fe0:	220a      	movs	r2, #10
 8007fe2:	491e      	ldr	r1, [pc, #120]	; (800805c <main+0x14bc>)
 8007fe4:	a826      	add	r0, sp, #152	; 0x98
 8007fe6:	f003 f913 	bl	800b210 <f_write>
			fr2 = f_write(&fil2, &T_VOL2 ,10, &bw2);
 8007fea:	ab17      	add	r3, sp, #92	; 0x5c
 8007fec:	220a      	movs	r2, #10
 8007fee:	491c      	ldr	r1, [pc, #112]	; (8008060 <main+0x14c0>)
 8007ff0:	a826      	add	r0, sp, #152	; 0x98
 8007ff2:	f003 f90d 	bl	800b210 <f_write>
			fr2 = f_write(&fil2, &PRESET2,9, &bw2);
 8007ff6:	ab17      	add	r3, sp, #92	; 0x5c
 8007ff8:	2209      	movs	r2, #9
 8007ffa:	491e      	ldr	r1, [pc, #120]	; (8008074 <main+0x14d4>)
 8007ffc:	a826      	add	r0, sp, #152	; 0x98
 8007ffe:	f003 f907 	bl	800b210 <f_write>
			fr2 = f_write(&fil2, &ENTER_INIC ,2, &bw2);
 8008002:	ab17      	add	r3, sp, #92	; 0x5c
 8008004:	2202      	movs	r2, #2
			fr2 = f_write(&fil2, &ENTER_INIC ,1, &bw2);
 8008006:	490d      	ldr	r1, [pc, #52]	; (800803c <main+0x149c>)
 8008008:	a826      	add	r0, sp, #152	; 0x98
 800800a:	f003 f901 	bl	800b210 <f_write>
			f_close(&fil2);
 800800e:	a826      	add	r0, sp, #152	; 0x98
 8008010:	f003 f8b6 	bl	800b180 <f_close>
 8008014:	e7b1      	b.n	8007f7a <main+0x13da>
            LCDPrintRow2(0,"   Error=0004   ");
 8008016:	4818      	ldr	r0, [pc, #96]	; (8008078 <main+0x14d8>)
 8008018:	f007 fb02 	bl	800f620 <LCDPrintRow2.constprop.2>
                chThdSleepMilliseconds(5000);
 800801c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008020:	f004 fd0e 	bl	800ca40 <chThdSleep>
 8008024:	e7fa      	b.n	800801c <main+0x147c>
 8008026:	bf00      	nop
 8008028:	0800fb04 	.word	0x0800fb04
 800802c:	20000818 	.word	0x20000818
 8008030:	20000824 	.word	0x20000824
 8008034:	200013bc 	.word	0x200013bc
 8008038:	20001380 	.word	0x20001380
 800803c:	20000814 	.word	0x20000814
 8008040:	2000084c 	.word	0x2000084c
 8008044:	20000838 	.word	0x20000838
 8008048:	200008c4 	.word	0x200008c4
 800804c:	2000083c 	.word	0x2000083c
 8008050:	20000844 	.word	0x20000844
 8008054:	20000884 	.word	0x20000884
 8008058:	2000089c 	.word	0x2000089c
 800805c:	20000890 	.word	0x20000890
 8008060:	200008a8 	.word	0x200008a8
 8008064:	0800fb34 	.word	0x0800fb34
 8008068:	20000858 	.word	0x20000858
 800806c:	2000080c 	.word	0x2000080c
 8008070:	200008bc 	.word	0x200008bc
 8008074:	2000086c 	.word	0x2000086c
 8008078:	0800fa3c 	.word	0x0800fa3c
  			LCDPrintRow2(0,"   EMR3_1=ON    ");
 800807c:	48dc      	ldr	r0, [pc, #880]	; (80083f0 <main+0x1850>)
 800807e:	f007 facf 	bl	800f620 <LCDPrintRow2.constprop.2>
	}
	
	chThdSleepMilliseconds(1000);
 8008082:	f242 7010 	movw	r0, #10000	; 0x2710
 8008086:	f004 fcdb 	bl	800ca40 <chThdSleep>
	
	//LADO 2
	envio[0]=0x7E;
	envio[1]=0x02;
	envio[2]=0xFF;
 800808a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	envio[3]=0x44;
	envio[4]=0x25;
	envio[5]=0x01;
	envio[6]=0x95;
 800808e:	2295      	movs	r2, #149	; 0x95
	envio[1]=0x02;
 8008090:	f04f 0e02 	mov.w	lr, #2
	envio[7]=0x7E;	    

	uartStartSend(&UARTD1, 8, envio);
 8008094:	4631      	mov	r1, r6
	envio[2]=0xFF;
 8008096:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
	uartStartSend(&UARTD1, 8, envio);
 800809a:	2008      	movs	r0, #8
	envio[4]=0x25;
 800809c:	f04f 0325 	mov.w	r3, #37	; 0x25
	envio[6]=0x95;
 80080a0:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
	envio[4]=0x25;
 80080a4:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
	envio[1]=0x02;
 80080a8:	f88d e075 	strb.w	lr, [sp, #117]	; 0x75
	envio[0]=0x7E;
 80080ac:	f88d 7074 	strb.w	r7, [sp, #116]	; 0x74
	envio[3]=0x44;
 80080b0:	f88d 9077 	strb.w	r9, [sp, #119]	; 0x77
	envio[5]=0x01;
 80080b4:	f88d 8079 	strb.w	r8, [sp, #121]	; 0x79
	envio[7]=0x7E;	    
 80080b8:	f88d 707b 	strb.w	r7, [sp, #123]	; 0x7b
	uartStartSend(&UARTD1, 8, envio);
 80080bc:	f006 fee0 	bl	800ee80 <uartStartSend.constprop.27>
	chThdSleepMilliseconds(20);
 80080c0:	20c8      	movs	r0, #200	; 0xc8
 80080c2:	f004 fcbd 	bl	800ca40 <chThdSleep>
	uartStopSend(&UARTD1);
 80080c6:	f006 ff33 	bl	800ef30 <uartStopSend.constprop.25>
 	     	
	uartStartReceive(&UARTD1, 5, recibo);
 80080ca:	a926      	add	r1, sp, #152	; 0x98
 80080cc:	2005      	movs	r0, #5
 80080ce:	f006 ff77 	bl	800efc0 <uartStartReceive.constprop.23>
  	chThdSleepMilliseconds(500);
 80080d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80080d6:	f004 fcb3 	bl	800ca40 <chThdSleep>
   	uartStopReceive(&UARTD1);
 80080da:	f006 ffd1 	bl	800f080 <uartStopReceive.constprop.21>
	
	if ( recibo[2] == 0X02)
 80080de:	f89d 209a 	ldrb.w	r2, [sp, #154]	; 0x9a
 80080e2:	2a02      	cmp	r2, #2
 80080e4:	f000 80e7 	beq.w	80082b6 <main+0x1716>
 80080e8:	2200      	movs	r2, #0
	else if (recibo[2] != 0X02)
	{
		
  		write_eeprom(lado2,0x00);
        write_eeprom(turno_aux,0x01);
        LCDPrintRow(0,"   EMR3_1=ON    ");
 80080ea:	48c1      	ldr	r0, [pc, #772]	; (80083f0 <main+0x1850>)
 80080ec:	f884 807f 	strb.w	r8, [r4, #127]	; 0x7f
 80080f0:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
 80080f4:	f006 fdac 	bl	800ec50 <LCDPrintRow.constprop.3>
        LCDPrintRow2(0,"   EMR3_2=OFF   ");
 80080f8:	48be      	ldr	r0, [pc, #760]	; (80083f4 <main+0x1854>)
 80080fa:	f007 fa91 	bl	800f620 <LCDPrintRow2.constprop.2>
        chThdSleepMilliseconds(1000);
 80080fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8008102:	f004 fc9d 	bl	800ca40 <chThdSleep>
        LCDPrintRow( 0,"   TEST POINS   ");
 8008106:	48bc      	ldr	r0, [pc, #752]	; (80083f8 <main+0x1858>)
            LCDPrintRow2(0,"   Error=0007   ");
 8008108:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8008414 <main+0x1874>
        LCDPrintRow( 0,"   TEST POINS   ");
 800810c:	f006 fda0 	bl	800ec50 <LCDPrintRow.constprop.3>
        LCDPrintRow2( 0,"                ");
 8008110:	48ba      	ldr	r0, [pc, #744]	; (80083fc <main+0x185c>)
 8008112:	f007 fa85 	bl	800f620 <LCDPrintRow2.constprop.2>
            aux_punto = ConfEmr3();
 8008116:	f007 f933 	bl	800f380 <ConfEmr3>
            if(aux_punto == 0x01) break; 
 800811a:	2801      	cmp	r0, #1
            aux_punto = ConfEmr3();
 800811c:	4607      	mov	r7, r0
            LCDPrintRow2(0,"   Error=0007   ");
 800811e:	4640      	mov	r0, r8
            if(aux_punto == 0x01) break; 
 8008120:	d1f7      	bne.n	8008112 <main+0x1572>
        LCDPrintRow2( 0,"    OK POINS    ");
 8008122:	48b7      	ldr	r0, [pc, #732]	; (8008400 <main+0x1860>)
        lcd_out [0] = ' ';
 8008124:	f8df b2f0 	ldr.w	fp, [pc, #752]	; 8008418 <main+0x1878>
        LCDPrintRow2( 0,"    OK POINS    ");
 8008128:	f007 fa7a 	bl	800f620 <LCDPrintRow2.constprop.2>
        ButtonEmr(HORAS,1);
 800812c:	4639      	mov	r1, r7
 800812e:	2020      	movs	r0, #32
 8008130:	f004 fd06 	bl	800cb40 <ButtonEmr>
        uartStartReceive(&UARTD1, 10, recibo);
 8008134:	a912      	add	r1, sp, #72	; 0x48
 8008136:	200a      	movs	r0, #10
 8008138:	f006 ff42 	bl	800efc0 <uartStartReceive.constprop.23>
        chThdSleepMilliseconds(500);
 800813c:	f241 3088 	movw	r0, #5000	; 0x1388
 8008140:	f004 fc7e 	bl	800ca40 <chThdSleep>
        uartStopReceive(&UARTD1);
 8008144:	f006 ff9c 	bl	800f080 <uartStopReceive.constprop.21>
        sd_hora(&recibo);
 8008148:	a812      	add	r0, sp, #72	; 0x48
 800814a:	f005 fbd1 	bl	800d8f0 <sd_hora>
        chThdSleepMilliseconds(1000);
 800814e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008152:	f004 fc75 	bl	800ca40 <chThdSleep>
        ButtonEmr(FECHAS,1);
 8008156:	4639      	mov	r1, r7
 8008158:	2021      	movs	r0, #33	; 0x21
 800815a:	f004 fcf1 	bl	800cb40 <ButtonEmr>
        uartStartReceive(&UARTD1, 11, recibo);
 800815e:	a912      	add	r1, sp, #72	; 0x48
 8008160:	200b      	movs	r0, #11
 8008162:	f006 ff2d 	bl	800efc0 <uartStartReceive.constprop.23>
        chThdSleepMilliseconds(500);
 8008166:	f241 3088 	movw	r0, #5000	; 0x1388
 800816a:	f004 fc69 	bl	800ca40 <chThdSleep>
        uartStopReceive(&UARTD1);
 800816e:	f006 ff87 	bl	800f080 <uartStopReceive.constprop.21>
        sd_dia(&recibo);
 8008172:	a812      	add	r0, sp, #72	; 0x48
 8008174:	f005 fb7c 	bl	800d870 <sd_dia>
        LCDPrintRow( 0," READS TOTALES  ");
 8008178:	48a2      	ldr	r0, [pc, #648]	; (8008404 <main+0x1864>)
 800817a:	f006 fd69 	bl	800ec50 <LCDPrintRow.constprop.3>
        LCDPrintRow2( 0,"                ");
 800817e:	489f      	ldr	r0, [pc, #636]	; (80083fc <main+0x185c>)
 8008180:	f007 fa4e 	bl	800f620 <LCDPrintRow2.constprop.2>
        LeerTotales(1);
 8008184:	4638      	mov	r0, r7
 8008186:	f006 fbe3 	bl	800e950 <LeerTotales>
        lcd_out [0] = ' ';
 800818a:	2720      	movs	r7, #32
        lcd_out [4] = '1';
 800818c:	2231      	movs	r2, #49	; 0x31
        lcd_out [2] = 'O';
 800818e:	f04f 034f 	mov.w	r3, #79	; 0x4f
        lcd_out [1] = 'T';
 8008192:	f04f 0854 	mov.w	r8, #84	; 0x54
        lcd_out [5] = '=';
 8008196:	f04f 093d 	mov.w	r9, #61	; 0x3d
        lcd_out [6] = ascii(read_eeprom(tv1_1));
 800819a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
        lcd_out [4] = '1';
 800819e:	f88b 2004 	strb.w	r2, [fp, #4]
        lcd_out [2] = 'O';
 80081a2:	f88b 3002 	strb.w	r3, [fp, #2]
        lcd_out [0] = ' ';
 80081a6:	f88b 7000 	strb.w	r7, [fp]
        lcd_out [1] = 'T';
 80081aa:	f88b 8001 	strb.w	r8, [fp, #1]
        lcd_out [3] = 'T';
 80081ae:	f88b 8003 	strb.w	r8, [fp, #3]
        lcd_out [5] = '=';
 80081b2:	f88b 9005 	strb.w	r9, [fp, #5]
        lcd_out [6] = ascii(read_eeprom(tv1_1));
 80081b6:	f007 f8b3 	bl	800f320 <ascii>
 80081ba:	f88b 0006 	strb.w	r0, [fp, #6]
        lcd_out [7] = ascii(read_eeprom(tv1_2));
 80081be:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
 80081c2:	f007 f8ad 	bl	800f320 <ascii>
 80081c6:	f88b 0007 	strb.w	r0, [fp, #7]
        lcd_out [8] = ascii(read_eeprom(tv1_3));
 80081ca:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 80081ce:	f007 f8a7 	bl	800f320 <ascii>
 80081d2:	f88b 0008 	strb.w	r0, [fp, #8]
        lcd_out [9] = ascii(read_eeprom(tv1_4));
 80081d6:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80081da:	f007 f8a1 	bl	800f320 <ascii>
 80081de:	f88b 0009 	strb.w	r0, [fp, #9]
        lcd_out [10] = ascii(read_eeprom(tv1_5));
 80081e2:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
 80081e6:	f007 f89b 	bl	800f320 <ascii>
 80081ea:	f88b 000a 	strb.w	r0, [fp, #10]
        lcd_out [11] = ascii(read_eeprom(tv1_6));
 80081ee:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
 80081f2:	f007 f895 	bl	800f320 <ascii>
        lcd_out [12] = '.';
 80081f6:	f04f 032e 	mov.w	r3, #46	; 0x2e
        lcd_out [11] = ascii(read_eeprom(tv1_6));
 80081fa:	f88b 000b 	strb.w	r0, [fp, #11]
        lcd_out [13] = ascii(read_eeprom(tv1_7));
 80081fe:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
        lcd_out [12] = '.';
 8008202:	f88b 300c 	strb.w	r3, [fp, #12]
        lcd_out [13] = ascii(read_eeprom(tv1_7));
 8008206:	f007 f88b 	bl	800f320 <ascii>
 800820a:	f88b 000d 	strb.w	r0, [fp, #13]
        lcd_out [14] = ascii(read_eeprom(tv1_8));
 800820e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8008212:	f007 f885 	bl	800f320 <ascii>
        if(read_eeprom(lado2) == 0x01)
 8008216:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
        lcd_out [14] = ascii(read_eeprom(tv1_8));
 800821a:	f88b 000e 	strb.w	r0, [fp, #14]
        if(read_eeprom(lado2) == 0x01)
 800821e:	2a01      	cmp	r2, #1
        lcd_out [15] = ' ';
 8008220:	f88b 700f 	strb.w	r7, [fp, #15]
            LCDPrintRow( 0,lcd_out);
 8008224:	4658      	mov	r0, fp
        if(read_eeprom(lado2) == 0x01)
 8008226:	f000 8095 	beq.w	8008354 <main+0x17b4>
            LCDPrintRow2( 0,lcd_out);
 800822a:	f007 f9f9 	bl	800f620 <LCDPrintRow2.constprop.2>
        chThdSleepMilliseconds(1000);
 800822e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008232:	f004 fc05 	bl	800ca40 <chThdSleep>
    fr2 = f_stat("ppu.txt", &fno);
 8008236:	a917      	add	r1, sp, #92	; 0x5c
 8008238:	4873      	ldr	r0, [pc, #460]	; (8008408 <main+0x1868>)
 800823a:	f002 fec1 	bl	800afc0 <f_stat>
    switch (fr2) 
 800823e:	2800      	cmp	r0, #0
 8008240:	d045      	beq.n	80082ce <main+0x172e>
 8008242:	2804      	cmp	r0, #4
 8008244:	f47f aad1 	bne.w	80077ea <main+0xc4a>
 8008248:	2305      	movs	r3, #5
 800824a:	f04f 0bf4 	mov.w	fp, #244	; 0xf4
 800824e:	f04f 0906 	mov.w	r9, #6
 8008252:	f04f 0807 	mov.w	r8, #7
 8008256:	2708      	movs	r7, #8
        sd_venta(1);
 8008258:	2001      	movs	r0, #1
 800825a:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	f884 b096 	strb.w	fp, [r4, #150]	; 0x96
 8008264:	f884 908e 	strb.w	r9, [r4, #142]	; 0x8e
 8008268:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
 800826c:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 8008270:	f003 f8b6 	bl	800b3e0 <sd_venta>
 8008274:	9b01      	ldr	r3, [sp, #4]
 8008276:	f884 b097 	strb.w	fp, [r4, #151]	; 0x97
        sd_venta(2);
 800827a:	2002      	movs	r0, #2
 800827c:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
 8008280:	f884 9092 	strb.w	r9, [r4, #146]	; 0x92
 8008284:	f884 8093 	strb.w	r8, [r4, #147]	; 0x93
 8008288:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
 800828c:	f003 f8a8 	bl	800b3e0 <sd_venta>
 8008290:	f7ff baab 	b.w	80077ea <main+0xc4a>
            f_gets(line_in, sizeof line_in, &fil);
 8008294:	4632      	mov	r2, r6
 8008296:	2142      	movs	r1, #66	; 0x42
 8008298:	a826      	add	r0, sp, #152	; 0x98
 800829a:	f002 fcf1 	bl	800ac80 <f_gets>
            f_close(&fil);
 800829e:	4630      	mov	r0, r6
 80082a0:	f002 ff6e 	bl	800b180 <f_close>
            ConfInicial(line_in);            
 80082a4:	a826      	add	r0, sp, #152	; 0x98
 80082a6:	f003 fad3 	bl	800b850 <ConfInicial>
 80082aa:	f7ff b9e9 	b.w	8007680 <main+0xae0>
  __ASM volatile ("cpsid i" : : : "memory");
 80082ae:	b672      	cpsid	i
 80082b0:	4b56      	ldr	r3, [pc, #344]	; (800840c <main+0x186c>)
 80082b2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80082b4:	e7fe      	b.n	80082b4 <main+0x1714>
 80082b6:	2200      	movs	r2, #0
        LCDPrintRow(0,"   EMR3_1=ON    ");
 80082b8:	484d      	ldr	r0, [pc, #308]	; (80083f0 <main+0x1850>)
 80082ba:	f884 8057 	strb.w	r8, [r4, #87]	; 0x57
 80082be:	f884 207f 	strb.w	r2, [r4, #127]	; 0x7f
 80082c2:	f006 fcc5 	bl	800ec50 <LCDPrintRow.constprop.3>
        LCDPrintRow2(0,"   EMR3_2=ON    ");
 80082c6:	4852      	ldr	r0, [pc, #328]	; (8008410 <main+0x1870>)
 80082c8:	f007 f9aa 	bl	800f620 <LCDPrintRow2.constprop.2>
 80082cc:	e717      	b.n	80080fe <main+0x155e>
            fr2 = f_open(&fil2, "ppu.txt", FA_READ);
 80082ce:	2201      	movs	r2, #1
 80082d0:	494d      	ldr	r1, [pc, #308]	; (8008408 <main+0x1868>)
 80082d2:	a826      	add	r0, sp, #152	; 0x98
 80082d4:	f005 fe64 	bl	800dfa0 <f_open>
            if (fr2)
 80082d8:	2800      	cmp	r0, #0
 80082da:	f47f aa86 	bne.w	80077ea <main+0xc4a>
            f_gets(line, sizeof(line), &fil2);
 80082de:	aa26      	add	r2, sp, #152	; 0x98
 80082e0:	2119      	movs	r1, #25
 80082e2:	4630      	mov	r0, r6
 80082e4:	f002 fccc 	bl	800ac80 <f_gets>
            f_close(&fil2);
 80082e8:	a826      	add	r0, sp, #152	; 0x98
 80082ea:	f002 ff49 	bl	800b180 <f_close>
        if((data_ppu[0] & 0X0F) == 0x04 || (data_ppu[0] & 0X0F) == 0x05)
 80082ee:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 80082f2:	f002 030f 	and.w	r3, r2, #15
 80082f6:	3b04      	subs	r3, #4
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	f240 808f 	bls.w	800841c <main+0x187c>
        if((data_ppu[8] & 0X0F) == 0x04 || (data_ppu[8] & 0X0F) == 0x05)
 80082fe:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8008302:	f002 030f 	and.w	r3, r2, #15
 8008306:	3b04      	subs	r3, #4
 8008308:	2b01      	cmp	r3, #1
 800830a:	f63f aa6e 	bhi.w	80077ea <main+0xc4a>
            write_eeprom(ppu1_venta2,(data_ppu[10] & 0X0F));
 800830e:	f89d 107e 	ldrb.w	r1, [sp, #126]	; 0x7e
            if(data_ppu[11] == '.')
 8008312:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
            write_eeprom(level_2,(0xF0 | (data_ppu[8] & 0X0F)));
 8008316:	f062 020f 	orn	r2, r2, #15
            write_eeprom(ppu1_venta2,(data_ppu[10] & 0X0F));
 800831a:	f001 010f 	and.w	r1, r1, #15
            if(data_ppu[11] == '.')
 800831e:	2b2e      	cmp	r3, #46	; 0x2e
 8008320:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
 8008324:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
 8008328:	f000 80b8 	beq.w	800849c <main+0x18fc>
            else if(data_ppu[12] == '.')
 800832c:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
                write_eeprom(ppu3_venta2,(data_ppu[13] & 0X0F));
 8008330:	f89d 1081 	ldrb.w	r1, [sp, #129]	; 0x81
            else if(data_ppu[12] == '.')
 8008334:	2a2e      	cmp	r2, #46	; 0x2e
 8008336:	f000 80a2 	beq.w	800847e <main+0x18de>
            else if(data_ppu[13] == '.')
 800833a:	292e      	cmp	r1, #46	; 0x2e
 800833c:	f000 8090 	beq.w	8008460 <main+0x18c0>
            else if(data_ppu[14] == '.')
 8008340:	f89d 0082 	ldrb.w	r0, [sp, #130]	; 0x82
 8008344:	282e      	cmp	r0, #46	; 0x2e
 8008346:	f000 808d 	beq.w	8008464 <main+0x18c4>
            sd_venta(2);
 800834a:	2002      	movs	r0, #2
 800834c:	f003 f848 	bl	800b3e0 <sd_venta>
 8008350:	f7ff ba4b 	b.w	80077ea <main+0xc4a>
            LCDPrintRow( 0,lcd_out);
 8008354:	f006 fc7c 	bl	800ec50 <LCDPrintRow.constprop.3>
            LeerTotales(2);
 8008358:	2002      	movs	r0, #2
 800835a:	f006 faf9 	bl	800e950 <LeerTotales>
	        lcd_out [4] = '2';
 800835e:	2232      	movs	r2, #50	; 0x32
	        lcd_out [2] = 'O';
 8008360:	f04f 034f 	mov.w	r3, #79	; 0x4f
	        lcd_out [6] = ascii(read_eeprom(tv2_1));
 8008364:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
	        lcd_out [4] = '2';
 8008368:	f88b 2004 	strb.w	r2, [fp, #4]
	        lcd_out [2] = 'O';
 800836c:	f88b 3002 	strb.w	r3, [fp, #2]
            lcd_out [0] = ' ';
 8008370:	f88b 7000 	strb.w	r7, [fp]
	        lcd_out [1] = 'T';
 8008374:	f88b 8001 	strb.w	r8, [fp, #1]
	        lcd_out [3] = 'T';
 8008378:	f88b 8003 	strb.w	r8, [fp, #3]
	        lcd_out [5] = '=';
 800837c:	f88b 9005 	strb.w	r9, [fp, #5]
	        lcd_out [6] = ascii(read_eeprom(tv2_1));
 8008380:	f006 ffce 	bl	800f320 <ascii>
 8008384:	f88b 0006 	strb.w	r0, [fp, #6]
	        lcd_out [7] = ascii(read_eeprom(tv2_2));
 8008388:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
 800838c:	f006 ffc8 	bl	800f320 <ascii>
 8008390:	f88b 0007 	strb.w	r0, [fp, #7]
	        lcd_out [8] = ascii(read_eeprom(tv2_3));
 8008394:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008398:	f006 ffc2 	bl	800f320 <ascii>
 800839c:	f88b 0008 	strb.w	r0, [fp, #8]
	        lcd_out [9] = ascii(read_eeprom(tv2_4));
 80083a0:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 80083a4:	f006 ffbc 	bl	800f320 <ascii>
 80083a8:	f88b 0009 	strb.w	r0, [fp, #9]
	        lcd_out [10] = ascii(read_eeprom(tv2_5));
 80083ac:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
 80083b0:	f006 ffb6 	bl	800f320 <ascii>
 80083b4:	f88b 000a 	strb.w	r0, [fp, #10]
	        lcd_out [11] = ascii(read_eeprom(tv2_6));
 80083b8:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 80083bc:	f006 ffb0 	bl	800f320 <ascii>
	        lcd_out [12] = '.';
 80083c0:	f04f 032e 	mov.w	r3, #46	; 0x2e
	        lcd_out [11] = ascii(read_eeprom(tv2_6));
 80083c4:	f88b 000b 	strb.w	r0, [fp, #11]
	        lcd_out [13] = ascii(read_eeprom(tv2_7));
 80083c8:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
	        lcd_out [12] = '.';
 80083cc:	f88b 300c 	strb.w	r3, [fp, #12]
	        lcd_out [13] = ascii(read_eeprom(tv2_7));
 80083d0:	f006 ffa6 	bl	800f320 <ascii>
 80083d4:	f88b 000d 	strb.w	r0, [fp, #13]
	        lcd_out [14] = ascii(read_eeprom(tv2_8));
 80083d8:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 80083dc:	f006 ffa0 	bl	800f320 <ascii>
 80083e0:	f88b 000e 	strb.w	r0, [fp, #14]
            LCDPrintRow2( 0,lcd_out);
 80083e4:	4658      	mov	r0, fp
	        lcd_out [15] = ' ';
 80083e6:	f88b 700f 	strb.w	r7, [fp, #15]
            LCDPrintRow2( 0,lcd_out);
 80083ea:	f007 f919 	bl	800f620 <LCDPrintRow2.constprop.2>
 80083ee:	e71e      	b.n	800822e <main+0x168e>
 80083f0:	0800fa64 	.word	0x0800fa64
 80083f4:	0800fa8c 	.word	0x0800fa8c
 80083f8:	0800faa0 	.word	0x0800faa0
 80083fc:	0800f9b4 	.word	0x0800f9b4
 8008400:	0800fac8 	.word	0x0800fac8
 8008404:	0800fadc 	.word	0x0800fadc
 8008408:	0800faf0 	.word	0x0800faf0
 800840c:	0800f7e0 	.word	0x0800f7e0
 8008410:	0800fa78 	.word	0x0800fa78
 8008414:	0800fab4 	.word	0x0800fab4
 8008418:	20001370 	.word	0x20001370
            write_eeprom(ppu1_venta1,(data_ppu[2] & 0X0F));
 800841c:	f89d 1076 	ldrb.w	r1, [sp, #118]	; 0x76
            if(data_ppu[3] == '.')
 8008420:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
            write_eeprom(level_1,(0xF0 | (data_ppu[0] & 0X0F)));
 8008424:	f062 020f 	orn	r2, r2, #15
            write_eeprom(ppu1_venta1,(data_ppu[2] & 0X0F));
 8008428:	f001 010f 	and.w	r1, r1, #15
            if(data_ppu[3] == '.')
 800842c:	2b2e      	cmp	r3, #46	; 0x2e
 800842e:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
 8008432:	f884 108d 	strb.w	r1, [r4, #141]	; 0x8d
 8008436:	f000 80d5 	beq.w	80085e4 <main+0x1a44>
            else if(data_ppu[4] == '.')
 800843a:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
                write_eeprom(ppu3_venta1,(data_ppu[5] & 0X0F));
 800843e:	f89d 1079 	ldrb.w	r1, [sp, #121]	; 0x79
            else if(data_ppu[4] == '.')
 8008442:	2a2e      	cmp	r2, #46	; 0x2e
 8008444:	f000 80bf 	beq.w	80085c6 <main+0x1a26>
            else if(data_ppu[5] == '.')
 8008448:	292e      	cmp	r1, #46	; 0x2e
 800844a:	f000 80ad 	beq.w	80085a8 <main+0x1a08>
            else if(data_ppu[6] == '.')
 800844e:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
 8008452:	282e      	cmp	r0, #46	; 0x2e
 8008454:	f000 80aa 	beq.w	80085ac <main+0x1a0c>
            sd_venta(1);
 8008458:	2001      	movs	r0, #1
 800845a:	f002 ffc1 	bl	800b3e0 <sd_venta>
 800845e:	e74e      	b.n	80082fe <main+0x175e>
                write_eeprom(ppu4_venta2,(data_ppu[14] & 0X0F));          
 8008460:	f89d 1082 	ldrb.w	r1, [sp, #130]	; 0x82
                write_eeprom(ppu2_venta2,(data_ppu[11] & 0X0F));
 8008464:	f003 030f 	and.w	r3, r3, #15
                write_eeprom(ppu3_venta2,(data_ppu[12] & 0X0F));
 8008468:	f002 020f 	and.w	r2, r2, #15
                write_eeprom(ppu4_venta2,(data_ppu[13] & 0X0F));          
 800846c:	f001 010f 	and.w	r1, r1, #15
 8008470:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
 8008474:	f884 2093 	strb.w	r2, [r4, #147]	; 0x93
 8008478:	f884 1094 	strb.w	r1, [r4, #148]	; 0x94
 800847c:	e765      	b.n	800834a <main+0x17aa>
                write_eeprom(ppu4_venta2,(data_ppu[14] & 0X0F));          
 800847e:	f89d 2082 	ldrb.w	r2, [sp, #130]	; 0x82
                write_eeprom(ppu2_venta2,(data_ppu[11] & 0X0F));
 8008482:	f003 030f 	and.w	r3, r3, #15
                write_eeprom(ppu3_venta2,(data_ppu[13] & 0X0F));
 8008486:	f001 010f 	and.w	r1, r1, #15
                write_eeprom(ppu4_venta2,(data_ppu[14] & 0X0F));          
 800848a:	f002 020f 	and.w	r2, r2, #15
 800848e:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
 8008492:	f884 1093 	strb.w	r1, [r4, #147]	; 0x93
 8008496:	f884 2094 	strb.w	r2, [r4, #148]	; 0x94
 800849a:	e756      	b.n	800834a <main+0x17aa>
                write_eeprom(ppu2_venta2,(data_ppu[12] & 0X0F));
 800849c:	f89d 1080 	ldrb.w	r1, [sp, #128]	; 0x80
                write_eeprom(ppu3_venta2,(data_ppu[13] & 0X0F));
 80084a0:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
                write_eeprom(ppu4_venta2,(data_ppu[14] & 0X0F));          
 80084a4:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
                write_eeprom(ppu2_venta2,(data_ppu[12] & 0X0F));
 80084a8:	f001 010f 	and.w	r1, r1, #15
                write_eeprom(ppu3_venta2,(data_ppu[13] & 0X0F));
 80084ac:	f002 020f 	and.w	r2, r2, #15
                write_eeprom(ppu4_venta2,(data_ppu[14] & 0X0F));          
 80084b0:	f003 030f 	and.w	r3, r3, #15
 80084b4:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
 80084b8:	f884 2093 	strb.w	r2, [r4, #147]	; 0x93
 80084bc:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 80084c0:	e743      	b.n	800834a <main+0x17aa>
            fr2 = f_open(&fil2, "s2wire.txt", FA_READ|FA_WRITE);
 80084c2:	2203      	movs	r2, #3
 80084c4:	4951      	ldr	r1, [pc, #324]	; (800860c <main+0x1a6c>)
 80084c6:	a826      	add	r0, sp, #152	; 0x98
 80084c8:	f005 fd6a 	bl	800dfa0 <f_open>
            if (fr2)
 80084cc:	2800      	cmp	r0, #0
 80084ce:	f47f aaad 	bne.w	8007a2c <main+0xe8c>
            fr2 = f_lseek(&fil2,f_size(&fil2));
 80084d2:	9929      	ldr	r1, [sp, #164]	; 0xa4
            fr2 = f_lseek(&fil2,0);
 80084d4:	a826      	add	r0, sp, #152	; 0x98
 80084d6:	f002 fdbb 	bl	800b050 <f_lseek>
            fr2 = f_write(&fil2, &FECHA ,11, &bw2);
 80084da:	ab17      	add	r3, sp, #92	; 0x5c
 80084dc:	220b      	movs	r2, #11
 80084de:	494c      	ldr	r1, [pc, #304]	; (8008610 <main+0x1a70>)
 80084e0:	a826      	add	r0, sp, #152	; 0x98
 80084e2:	f002 fe95 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &HORA ,9, &bw2);
 80084e6:	ab17      	add	r3, sp, #92	; 0x5c
 80084e8:	2209      	movs	r2, #9
 80084ea:	494a      	ldr	r1, [pc, #296]	; (8008614 <main+0x1a74>)
 80084ec:	a826      	add	r0, sp, #152	; 0x98
 80084ee:	f002 fe8f 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &Data_Tx4 ,strlen(Data_Tx4), &bw2);
 80084f2:	4849      	ldr	r0, [pc, #292]	; (8008618 <main+0x1a78>)
 80084f4:	f7f8 f87c 	bl	80005f0 <strlen>
 80084f8:	ab17      	add	r3, sp, #92	; 0x5c
 80084fa:	4602      	mov	r2, r0
 80084fc:	4946      	ldr	r1, [pc, #280]	; (8008618 <main+0x1a78>)
 80084fe:	a826      	add	r0, sp, #152	; 0x98
 8008500:	f002 fe86 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &Data_Rx4 ,strlen(Data_Rx4), &bw2);
 8008504:	4845      	ldr	r0, [pc, #276]	; (800861c <main+0x1a7c>)
 8008506:	f7f8 f873 	bl	80005f0 <strlen>
 800850a:	ab17      	add	r3, sp, #92	; 0x5c
 800850c:	4602      	mov	r2, r0
 800850e:	4943      	ldr	r1, [pc, #268]	; (800861c <main+0x1a7c>)
 8008510:	a826      	add	r0, sp, #152	; 0x98
 8008512:	f002 fe7d 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &ENTER_INIC ,2, &bw2);
 8008516:	ab17      	add	r3, sp, #92	; 0x5c
 8008518:	2202      	movs	r2, #2
 800851a:	4941      	ldr	r1, [pc, #260]	; (8008620 <main+0x1a80>)
 800851c:	a826      	add	r0, sp, #152	; 0x98
 800851e:	f002 fe77 	bl	800b210 <f_write>
            f_close(&fil2);
 8008522:	a826      	add	r0, sp, #152	; 0x98
 8008524:	f002 fe2c 	bl	800b180 <f_close>
    if(ventas_2)
 8008528:	782b      	ldrb	r3, [r5, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	f43f aa7e 	beq.w	8007a2c <main+0xe8c>
        borrar_sd2();
 8008530:	f005 ff76 	bl	800e420 <borrar_sd2>
        ventas_2 = false;
 8008534:	2300      	movs	r3, #0
 8008536:	702b      	strb	r3, [r5, #0]
 8008538:	f7ff ba78 	b.w	8007a2c <main+0xe8c>
            fr2 = f_lseek(&fil2,0);
 800853c:	a826      	add	r0, sp, #152	; 0x98
 800853e:	f002 fd87 	bl	800b050 <f_lseek>
			fr2 = f_write(&fil2, &FECHA ,11, &bw2);
 8008542:	ab17      	add	r3, sp, #92	; 0x5c
 8008544:	220b      	movs	r2, #11
 8008546:	4932      	ldr	r1, [pc, #200]	; (8008610 <main+0x1a70>)
 8008548:	a826      	add	r0, sp, #152	; 0x98
 800854a:	f002 fe61 	bl	800b210 <f_write>
			fr2 = f_write(&fil2, &HORA ,9, &bw2);
 800854e:	ab17      	add	r3, sp, #92	; 0x5c
 8008550:	2209      	movs	r2, #9
 8008552:	4930      	ldr	r1, [pc, #192]	; (8008614 <main+0x1a74>)
 8008554:	a826      	add	r0, sp, #152	; 0x98
 8008556:	f002 fe5b 	bl	800b210 <f_write>
            fr2 = f_write(&fil2, &PPU_VENTA2 ,6, &bw2);
 800855a:	ab17      	add	r3, sp, #92	; 0x5c
 800855c:	2206      	movs	r2, #6
 800855e:	4931      	ldr	r1, [pc, #196]	; (8008624 <main+0x1a84>)
 8008560:	a826      	add	r0, sp, #152	; 0x98
 8008562:	f002 fe55 	bl	800b210 <f_write>
			fr2 = f_write(&fil2, &DINERO2 ,8, &bw2);
 8008566:	ab17      	add	r3, sp, #92	; 0x5c
 8008568:	2208      	movs	r2, #8
 800856a:	492f      	ldr	r1, [pc, #188]	; (8008628 <main+0x1a88>)
 800856c:	a826      	add	r0, sp, #152	; 0x98
 800856e:	f002 fe4f 	bl	800b210 <f_write>
			fr2 = f_write(&fil2, &VOL2 ,8, &bw2);
 8008572:	ab17      	add	r3, sp, #92	; 0x5c
 8008574:	2208      	movs	r2, #8
 8008576:	492d      	ldr	r1, [pc, #180]	; (800862c <main+0x1a8c>)
 8008578:	a826      	add	r0, sp, #152	; 0x98
 800857a:	f002 fe49 	bl	800b210 <f_write>
			fr2 = f_write(&fil2, &T_DINERO2 ,10, &bw2);
 800857e:	ab17      	add	r3, sp, #92	; 0x5c
 8008580:	220a      	movs	r2, #10
 8008582:	492b      	ldr	r1, [pc, #172]	; (8008630 <main+0x1a90>)
 8008584:	a826      	add	r0, sp, #152	; 0x98
 8008586:	f002 fe43 	bl	800b210 <f_write>
			fr2 = f_write(&fil2, &T_VOL2 ,10, &bw2);
 800858a:	ab17      	add	r3, sp, #92	; 0x5c
 800858c:	220a      	movs	r2, #10
 800858e:	4929      	ldr	r1, [pc, #164]	; (8008634 <main+0x1a94>)
 8008590:	a826      	add	r0, sp, #152	; 0x98
 8008592:	f002 fe3d 	bl	800b210 <f_write>
			fr2 = f_write(&fil2, &PRESET2,9, &bw2);
 8008596:	ab17      	add	r3, sp, #92	; 0x5c
 8008598:	2209      	movs	r2, #9
 800859a:	4927      	ldr	r1, [pc, #156]	; (8008638 <main+0x1a98>)
 800859c:	a826      	add	r0, sp, #152	; 0x98
 800859e:	f002 fe37 	bl	800b210 <f_write>
			fr2 = f_write(&fil2, &ENTER_INIC ,1, &bw2);
 80085a2:	ab17      	add	r3, sp, #92	; 0x5c
 80085a4:	4642      	mov	r2, r8
 80085a6:	e52e      	b.n	8008006 <main+0x1466>
                write_eeprom(ppu4_venta1,(data_ppu[6] & 0X0F));          
 80085a8:	f89d 107a 	ldrb.w	r1, [sp, #122]	; 0x7a
                write_eeprom(ppu2_venta1,(data_ppu[3] & 0X0F));
 80085ac:	f003 030f 	and.w	r3, r3, #15
                write_eeprom(ppu3_venta1,(data_ppu[4] & 0X0F));
 80085b0:	f002 020f 	and.w	r2, r2, #15
                write_eeprom(ppu4_venta1,(data_ppu[5] & 0X0F));          
 80085b4:	f001 010f 	and.w	r1, r1, #15
 80085b8:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
 80085bc:	f884 208f 	strb.w	r2, [r4, #143]	; 0x8f
 80085c0:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
 80085c4:	e748      	b.n	8008458 <main+0x18b8>
                write_eeprom(ppu4_venta1,(data_ppu[6] & 0X0F));          
 80085c6:	f89d 207a 	ldrb.w	r2, [sp, #122]	; 0x7a
                write_eeprom(ppu2_venta1,(data_ppu[3] & 0X0F));
 80085ca:	f003 030f 	and.w	r3, r3, #15
                write_eeprom(ppu3_venta1,(data_ppu[5] & 0X0F));
 80085ce:	f001 010f 	and.w	r1, r1, #15
                write_eeprom(ppu4_venta1,(data_ppu[6] & 0X0F));          
 80085d2:	f002 020f 	and.w	r2, r2, #15
 80085d6:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
 80085da:	f884 108f 	strb.w	r1, [r4, #143]	; 0x8f
 80085de:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
 80085e2:	e739      	b.n	8008458 <main+0x18b8>
                write_eeprom(ppu2_venta1,(data_ppu[4] & 0X0F));
 80085e4:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
                write_eeprom(ppu3_venta1,(data_ppu[5] & 0X0F));
 80085e8:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
                write_eeprom(ppu4_venta1,(data_ppu[6] & 0X0F));          
 80085ec:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
                write_eeprom(ppu2_venta1,(data_ppu[4] & 0X0F));
 80085f0:	f001 010f 	and.w	r1, r1, #15
                write_eeprom(ppu3_venta1,(data_ppu[5] & 0X0F));
 80085f4:	f002 020f 	and.w	r2, r2, #15
                write_eeprom(ppu4_venta1,(data_ppu[6] & 0X0F));          
 80085f8:	f003 030f 	and.w	r3, r3, #15
 80085fc:	f884 108e 	strb.w	r1, [r4, #142]	; 0x8e
 8008600:	f884 208f 	strb.w	r2, [r4, #143]	; 0x8f
 8008604:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 8008608:	e726      	b.n	8008458 <main+0x18b8>
 800860a:	bf00      	nop
 800860c:	0800fb4c 	.word	0x0800fb4c
 8008610:	20000818 	.word	0x20000818
 8008614:	20000824 	.word	0x20000824
 8008618:	20000bf0 	.word	0x20000bf0
 800861c:	20000a48 	.word	0x20000a48
 8008620:	20000814 	.word	0x20000814
 8008624:	20000858 	.word	0x20000858
 8008628:	2000080c 	.word	0x2000080c
 800862c:	200008bc 	.word	0x200008bc
 8008630:	20000890 	.word	0x20000890
 8008634:	200008a8 	.word	0x200008a8
 8008638:	2000086c 	.word	0x2000086c
 800863c:	00000000 	.word	0x00000000

08008640 <sd_preset>:
}

void sd_preset(uint8_t tipo, uint8_t pos)
{
	
	if(pos == 1)
 8008640:	2901      	cmp	r1, #1
{
 8008642:	b538      	push	{r3, r4, r5, lr}
 8008644:	4605      	mov	r5, r0
	if(pos == 1)
 8008646:	d17b      	bne.n	8008740 <sd_preset+0x100>
	{


		PRESET1[8] = ascii(tipo);
 8008648:	f006 fe6a 	bl	800f320 <ascii>
 800864c:	4b7f      	ldr	r3, [pc, #508]	; (800884c <sd_preset+0x20c>)
 800864e:	7218      	strb	r0, [r3, #8]
 8008650:	461c      	mov	r4, r3

		if(tipo == 0)
 8008652:	2d00      	cmp	r5, #0
 8008654:	d07d      	beq.n	8008752 <sd_preset+0x112>
		        PRESET1[6] = ascii(0);
		        break;
		    }
		}

		else if(tipo == 1)
 8008656:	2d01      	cmp	r5, #1
 8008658:	d117      	bne.n	800868a <sd_preset+0x4a>
	return (dato_emr3[num]);
 800865a:	4d7d      	ldr	r5, [pc, #500]	; (8008850 <sd_preset+0x210>)
		{
		    PRESET1[0] = ascii(read_eeprom(preset1_1));
 800865c:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8008660:	f006 fe5e 	bl	800f320 <ascii>
 8008664:	7020      	strb	r0, [r4, #0]
		    PRESET1[1] = ascii(read_eeprom(preset1_2));
 8008666:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
 800866a:	f006 fe59 	bl	800f320 <ascii>
 800866e:	7060      	strb	r0, [r4, #1]
		    PRESET1[2] = ascii(read_eeprom(preset1_3));
 8008670:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
 8008674:	f006 fe54 	bl	800f320 <ascii>

		    switch(read_eeprom(PV))
 8008678:	7bab      	ldrb	r3, [r5, #14]
		    PRESET1[2] = ascii(read_eeprom(preset1_3));
 800867a:	70a0      	strb	r0, [r4, #2]
		    switch(read_eeprom(PV))
 800867c:	2b03      	cmp	r3, #3
 800867e:	f200 80e4 	bhi.w	800884a <sd_preset+0x20a>
 8008682:	e8df f003 	tbb	[pc, r3]
 8008686:	2f1d      	.short	0x2f1d
 8008688:	4b41      	.short	0x4b41
    		        PRESET1[6] = ascii(read_eeprom(preset1_6));
		        break;
		    }
		}

	    else if(tipo == 2)
 800868a:	2d02      	cmp	r5, #2
 800868c:	f040 80dd 	bne.w	800884a <sd_preset+0x20a>
 8008690:	4d6f      	ldr	r5, [pc, #444]	; (8008850 <sd_preset+0x210>)
	    {

		    PRESET1[0] = ascii(read_eeprom(preset1_1));
 8008692:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8008696:	f006 fe43 	bl	800f320 <ascii>
 800869a:	7020      	strb	r0, [r4, #0]
            PRESET1[1] = ascii(read_eeprom(preset1_2));
 800869c:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
 80086a0:	f006 fe3e 	bl	800f320 <ascii>
 80086a4:	7060      	strb	r0, [r4, #1]
            PRESET1[2] = ascii(read_eeprom(preset1_3));
 80086a6:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
 80086aa:	f006 fe39 	bl	800f320 <ascii>

		    switch(read_eeprom(PD))
 80086ae:	7eeb      	ldrb	r3, [r5, #27]
            PRESET1[2] = ascii(read_eeprom(preset1_3));
 80086b0:	70a0      	strb	r0, [r4, #2]
		    switch(read_eeprom(PD))
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	f200 80c9 	bhi.w	800884a <sd_preset+0x20a>
 80086b8:	e8df f003 	tbb	[pc, r3]
 80086bc:	30261402 	.word	0x30261402
		     {
                case 0:
                    PRESET1[3] = ascii(read_eeprom(preset1_4));
 80086c0:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
 80086c4:	f006 fe2c 	bl	800f320 <ascii>
 80086c8:	70e0      	strb	r0, [r4, #3]
                    PRESET1[4] = ascii(read_eeprom(preset1_5));
 80086ca:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
 80086ce:	f006 fe27 	bl	800f320 <ascii>
 80086d2:	7120      	strb	r0, [r4, #4]
                    PRESET1[5] = ascii(read_eeprom(preset1_6));
 80086d4:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 80086d8:	f006 fe22 	bl	800f320 <ascii>
                    PRESET1[6] = '.';
 80086dc:	232e      	movs	r3, #46	; 0x2e
                    PRESET1[5] = ascii(read_eeprom(preset1_6));
 80086de:	7160      	strb	r0, [r4, #5]
                    PRESET1[6] = '.';
 80086e0:	71a3      	strb	r3, [r4, #6]
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
                break;

                case 1:
                    PRESET1[3] = ascii(read_eeprom(preset1_4));
 80086e4:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
 80086e8:	f006 fe1a 	bl	800f320 <ascii>
 80086ec:	70e0      	strb	r0, [r4, #3]
                    PRESET1[4] = ascii(read_eeprom(preset1_5));
 80086ee:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
 80086f2:	f006 fe15 	bl	800f320 <ascii>
                    PRESET1[5] = '.';
 80086f6:	232e      	movs	r3, #46	; 0x2e
                    PRESET1[4] = ascii(read_eeprom(preset1_5));
 80086f8:	7120      	strb	r0, [r4, #4]
                    PRESET1[6] = ascii(read_eeprom(preset1_6));
 80086fa:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
                    PRESET1[5] = '.';
 80086fe:	7163      	strb	r3, [r4, #5]
                    PRESET1[6] = ascii(read_eeprom(preset1_6));
 8008700:	f006 fe0e 	bl	800f320 <ascii>
 8008704:	71a0      	strb	r0, [r4, #6]
 8008706:	bd38      	pop	{r3, r4, r5, pc}
                break;

                case 2:
                    PRESET1[3] = ascii(read_eeprom(preset1_4));
 8008708:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
 800870c:	f006 fe08 	bl	800f320 <ascii>
                    PRESET1[4] = '.';
 8008710:	232e      	movs	r3, #46	; 0x2e
                    PRESET1[3] = ascii(read_eeprom(preset1_4));
 8008712:	70e0      	strb	r0, [r4, #3]
                    PRESET1[4] = '.';
 8008714:	7123      	strb	r3, [r4, #4]
                    PRESET1[5] = ascii(read_eeprom(preset1_5));
 8008716:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
 800871a:	e008      	b.n	800872e <sd_preset+0xee>
                    PRESET1[6] = ascii(read_eeprom(preset1_6));
                break;

                case 3:
                    PRESET1[3] = '.';
 800871c:	232e      	movs	r3, #46	; 0x2e
                    PRESET1[4] = ascii(read_eeprom(preset1_4));
 800871e:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
                    PRESET1[3] = '.';
 8008722:	70e3      	strb	r3, [r4, #3]
                    PRESET1[4] = ascii(read_eeprom(preset1_4));
 8008724:	f006 fdfc 	bl	800f320 <ascii>
 8008728:	7120      	strb	r0, [r4, #4]
                    PRESET1[5] = ascii(read_eeprom(preset1_5));
 800872a:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
 800872e:	f006 fdf7 	bl	800f320 <ascii>
 8008732:	7160      	strb	r0, [r4, #5]
                    PRESET1[6] = ascii(read_eeprom(preset1_6));
 8008734:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 8008738:	f006 fdf2 	bl	800f320 <ascii>
 800873c:	71a0      	strb	r0, [r4, #6]
 800873e:	bd38      	pop	{r3, r4, r5, pc}
                break;
            }
		}
	}

    else if(pos == 2)
 8008740:	2902      	cmp	r1, #2
 8008742:	f040 8082 	bne.w	800884a <sd_preset+0x20a>
    {


        PRESET2[8] = ascii(tipo);
 8008746:	f006 fdeb 	bl	800f320 <ascii>
 800874a:	4b42      	ldr	r3, [pc, #264]	; (8008854 <sd_preset+0x214>)
 800874c:	7218      	strb	r0, [r3, #8]
 800874e:	461c      	mov	r4, r3

        if(tipo == 0)
 8008750:	b955      	cbnz	r5, 8008768 <sd_preset+0x128>
        {
            PRESET2[0] = ascii(9);
            PRESET2[1] = ascii(0);
 8008752:	2230      	movs	r2, #48	; 0x30
            PRESET2[0] = ascii(9);
 8008754:	2039      	movs	r0, #57	; 0x39
            {
                case 0:
                PRESET2[3] = ascii(0);
                PRESET2[4] = ascii(0);
                PRESET2[5] = ascii(0);
                PRESET2[6] = '.';
 8008756:	212e      	movs	r1, #46	; 0x2e
            PRESET2[0] = ascii(9);
 8008758:	7018      	strb	r0, [r3, #0]
            PRESET2[1] = ascii(0);
 800875a:	705a      	strb	r2, [r3, #1]
            PRESET2[2] = ascii(0);
 800875c:	709a      	strb	r2, [r3, #2]
                PRESET2[3] = ascii(0);
 800875e:	70da      	strb	r2, [r3, #3]
                PRESET2[4] = ascii(0);
 8008760:	711a      	strb	r2, [r3, #4]
                PRESET2[5] = ascii(0);
 8008762:	715a      	strb	r2, [r3, #5]
                PRESET2[6] = '.';
 8008764:	7199      	strb	r1, [r3, #6]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
                PRESET2[6] = ascii(0);
                break;
            }
        }

        else if(tipo == 1)
 8008768:	2d01      	cmp	r5, #1
 800876a:	d116      	bne.n	800879a <sd_preset+0x15a>
 800876c:	4d38      	ldr	r5, [pc, #224]	; (8008850 <sd_preset+0x210>)
        {
            PRESET2[0] = ascii(read_eeprom(preset2_1));
 800876e:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8008772:	f006 fdd5 	bl	800f320 <ascii>
 8008776:	7020      	strb	r0, [r4, #0]
            PRESET2[1] = ascii(read_eeprom(preset2_2));
 8008778:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
 800877c:	f006 fdd0 	bl	800f320 <ascii>
 8008780:	7060      	strb	r0, [r4, #1]
            PRESET2[2] = ascii(read_eeprom(preset2_3));
 8008782:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
 8008786:	f006 fdcb 	bl	800f320 <ascii>

            switch(read_eeprom(PV))
 800878a:	7bab      	ldrb	r3, [r5, #14]
            PRESET2[2] = ascii(read_eeprom(preset2_3));
 800878c:	70a0      	strb	r0, [r4, #2]
            switch(read_eeprom(PV))
 800878e:	2b03      	cmp	r3, #3
 8008790:	d85b      	bhi.n	800884a <sd_preset+0x20a>
 8008792:	e8df f003 	tbb	[pc, r3]
 8008796:	2d1b      	.short	0x2d1b
 8008798:	493f      	.short	0x493f
                    PRESET2[6] = ascii(read_eeprom(preset2_6));
                break;
            }
        }

        else if(tipo == 2)
 800879a:	2d02      	cmp	r5, #2
 800879c:	d155      	bne.n	800884a <sd_preset+0x20a>
 800879e:	4d2c      	ldr	r5, [pc, #176]	; (8008850 <sd_preset+0x210>)
        {

            PRESET2[0] = ascii(read_eeprom(preset2_1));
 80087a0:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 80087a4:	f006 fdbc 	bl	800f320 <ascii>
 80087a8:	7020      	strb	r0, [r4, #0]
            PRESET2[1] = ascii(read_eeprom(preset2_2));
 80087aa:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
 80087ae:	f006 fdb7 	bl	800f320 <ascii>
 80087b2:	7060      	strb	r0, [r4, #1]
            PRESET2[2] = ascii(read_eeprom(preset2_3));
 80087b4:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
 80087b8:	f006 fdb2 	bl	800f320 <ascii>

            switch(read_eeprom(PD))
 80087bc:	7eeb      	ldrb	r3, [r5, #27]
            PRESET2[2] = ascii(read_eeprom(preset2_3));
 80087be:	70a0      	strb	r0, [r4, #2]
            switch(read_eeprom(PD))
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	d842      	bhi.n	800884a <sd_preset+0x20a>
 80087c4:	e8df f003 	tbb	[pc, r3]
 80087c8:	30261402 	.word	0x30261402
             {
                case 0:
                    PRESET2[3] = ascii(read_eeprom(preset2_4));
 80087cc:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
 80087d0:	f006 fda6 	bl	800f320 <ascii>
 80087d4:	70e0      	strb	r0, [r4, #3]
                    PRESET2[4] = ascii(read_eeprom(preset2_5));
 80087d6:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 80087da:	f006 fda1 	bl	800f320 <ascii>
 80087de:	7120      	strb	r0, [r4, #4]
                    PRESET2[5] = ascii(read_eeprom(preset2_6));
 80087e0:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
 80087e4:	f006 fd9c 	bl	800f320 <ascii>
                    PRESET2[6] = '.';
 80087e8:	232e      	movs	r3, #46	; 0x2e
                    PRESET2[5] = ascii(read_eeprom(preset2_6));
 80087ea:	7160      	strb	r0, [r4, #5]
                    PRESET2[6] = '.';
 80087ec:	71a3      	strb	r3, [r4, #6]
 80087ee:	bd38      	pop	{r3, r4, r5, pc}
                break;

                case 1:
                    PRESET2[3] = ascii(read_eeprom(preset2_4));
 80087f0:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
 80087f4:	f006 fd94 	bl	800f320 <ascii>
 80087f8:	70e0      	strb	r0, [r4, #3]
                    PRESET2[4] = ascii(read_eeprom(preset2_5));
 80087fa:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 80087fe:	f006 fd8f 	bl	800f320 <ascii>
                    PRESET2[5] = '.';
 8008802:	232e      	movs	r3, #46	; 0x2e
                    PRESET2[4] = ascii(read_eeprom(preset2_5));
 8008804:	7120      	strb	r0, [r4, #4]
                    PRESET2[6] = ascii(read_eeprom(preset2_6));
 8008806:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
                    PRESET2[5] = '.';
 800880a:	7163      	strb	r3, [r4, #5]
                    PRESET2[6] = ascii(read_eeprom(preset2_6));
 800880c:	f006 fd88 	bl	800f320 <ascii>
 8008810:	71a0      	strb	r0, [r4, #6]
 8008812:	bd38      	pop	{r3, r4, r5, pc}
                break;

                case 2:
                    PRESET2[3] = ascii(read_eeprom(preset2_4));
 8008814:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
 8008818:	f006 fd82 	bl	800f320 <ascii>
                    PRESET2[4] = '.';
 800881c:	232e      	movs	r3, #46	; 0x2e
                    PRESET2[3] = ascii(read_eeprom(preset2_4));
 800881e:	70e0      	strb	r0, [r4, #3]
                    PRESET2[4] = '.';
 8008820:	7123      	strb	r3, [r4, #4]
                    PRESET2[5] = ascii(read_eeprom(preset2_5));
 8008822:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8008826:	e008      	b.n	800883a <sd_preset+0x1fa>
                    PRESET2[6] = ascii(read_eeprom(preset2_6));
                break;

                case 3:
                    PRESET2[3] = '.';
 8008828:	232e      	movs	r3, #46	; 0x2e
                    PRESET2[4] = ascii(read_eeprom(preset2_4));
 800882a:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
                    PRESET2[3] = '.';
 800882e:	70e3      	strb	r3, [r4, #3]
                    PRESET2[4] = ascii(read_eeprom(preset2_4));
 8008830:	f006 fd76 	bl	800f320 <ascii>
 8008834:	7120      	strb	r0, [r4, #4]
                    PRESET2[5] = ascii(read_eeprom(preset2_5));
 8008836:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800883a:	f006 fd71 	bl	800f320 <ascii>
 800883e:	7160      	strb	r0, [r4, #5]
                    PRESET2[6] = ascii(read_eeprom(preset2_6));
 8008840:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
 8008844:	f006 fd6c 	bl	800f320 <ascii>
 8008848:	71a0      	strb	r0, [r4, #6]
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	20000860 	.word	0x20000860
 8008850:	20001c74 	.word	0x20001c74
 8008854:	2000086c 	.word	0x2000086c
	...

08008860 <mmc_lld_is_write_protected>:
bool mmc_lld_is_write_protected(MMCDriver *mmcp) {

  (void)mmcp;
  /* TODO: Fill the implementation.*/
  return false;
}
 8008860:	2000      	movs	r0, #0
 8008862:	4770      	bx	lr
	...

08008870 <mmc_lld_is_card_inserted>:
}
 8008870:	2001      	movs	r0, #1
 8008872:	4770      	bx	lr
	...

08008880 <uart_lld_serve_tx_end_irq.lto_priv.73>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8008880:	f011 0f0c 	tst.w	r1, #12
 8008884:	d11a      	bne.n	80088bc <uart_lld_serve_tx_end_irq.lto_priv.73+0x3c>
  dmaStreamDisable(uartp->dmatx);
 8008886:	6942      	ldr	r2, [r0, #20]
 8008888:	6813      	ldr	r3, [r2, #0]
 800888a:	6819      	ldr	r1, [r3, #0]
 800888c:	f021 011f 	bic.w	r1, r1, #31
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8008890:	b510      	push	{r4, lr}
  dmaStreamDisable(uartp->dmatx);
 8008892:	6019      	str	r1, [r3, #0]
 8008894:	6819      	ldr	r1, [r3, #0]
 8008896:	07c9      	lsls	r1, r1, #31
 8008898:	d4fc      	bmi.n	8008894 <uart_lld_serve_tx_end_irq.lto_priv.73+0x14>
 800889a:	7a11      	ldrb	r1, [r2, #8]
 800889c:	4604      	mov	r4, r0
 800889e:	233d      	movs	r3, #61	; 0x3d
 80088a0:	6850      	ldr	r0, [r2, #4]
  _uart_tx1_isr_code(uartp);
 80088a2:	6862      	ldr	r2, [r4, #4]
  dmaStreamDisable(uartp->dmatx);
 80088a4:	408b      	lsls	r3, r1
  _uart_tx1_isr_code(uartp);
 80088a6:	2102      	movs	r1, #2
  dmaStreamDisable(uartp->dmatx);
 80088a8:	6003      	str	r3, [r0, #0]
  _uart_tx1_isr_code(uartp);
 80088aa:	7061      	strb	r1, [r4, #1]
 80088ac:	6813      	ldr	r3, [r2, #0]
 80088ae:	b153      	cbz	r3, 80088c6 <uart_lld_serve_tx_end_irq.lto_priv.73+0x46>
 80088b0:	4620      	mov	r0, r4
 80088b2:	4798      	blx	r3
 80088b4:	7863      	ldrb	r3, [r4, #1]
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d005      	beq.n	80088c6 <uart_lld_serve_tx_end_irq.lto_priv.73+0x46>
 80088ba:	bd10      	pop	{r4, pc}
 80088bc:	b672      	cpsid	i
 80088be:	4b03      	ldr	r3, [pc, #12]	; (80088cc <uart_lld_serve_tx_end_irq.lto_priv.73+0x4c>)
 80088c0:	4a03      	ldr	r2, [pc, #12]	; (80088d0 <uart_lld_serve_tx_end_irq.lto_priv.73+0x50>)
 80088c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80088c4:	e7fe      	b.n	80088c4 <uart_lld_serve_tx_end_irq.lto_priv.73+0x44>
 80088c6:	2300      	movs	r3, #0
 80088c8:	7063      	strb	r3, [r4, #1]
 80088ca:	bd10      	pop	{r4, pc}
 80088cc:	20001698 	.word	0x20001698
 80088d0:	0800fc30 	.word	0x0800fc30
	...

080088e0 <uart_lld_serve_rx_end_irq.lto_priv.72>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80088e0:	f011 0f0c 	tst.w	r1, #12
 80088e4:	d10c      	bne.n	8008900 <uart_lld_serve_rx_end_irq.lto_priv.72+0x20>
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {
 80088e6:	b570      	push	{r4, r5, r6, lr}
  if (uartp->rxstate == UART_RX_IDLE) {
 80088e8:	7883      	ldrb	r3, [r0, #2]
 80088ea:	4604      	mov	r4, r0
 80088ec:	b96b      	cbnz	r3, 800890a <uart_lld_serve_rx_end_irq.lto_priv.72+0x2a>
    _uart_rx_idle_code(uartp);
 80088ee:	6843      	ldr	r3, [r0, #4]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d037      	beq.n	8008966 <uart_lld_serve_rx_end_irq.lto_priv.72+0x86>
 80088f6:	8b01      	ldrh	r1, [r0, #24]
}
 80088f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _uart_rx_idle_code(uartp);
 80088fc:	b289      	uxth	r1, r1
 80088fe:	4718      	bx	r3
 8008900:	b672      	cpsid	i
 8008902:	4b19      	ldr	r3, [pc, #100]	; (8008968 <uart_lld_serve_rx_end_irq.lto_priv.72+0x88>)
 8008904:	4a19      	ldr	r2, [pc, #100]	; (800896c <uart_lld_serve_rx_end_irq.lto_priv.72+0x8c>)
 8008906:	62da      	str	r2, [r3, #44]	; 0x2c
 8008908:	e7fe      	b.n	8008908 <uart_lld_serve_rx_end_irq.lto_priv.72+0x28>
    dmaStreamDisable(uartp->dmarx);
 800890a:	6902      	ldr	r2, [r0, #16]
 800890c:	6813      	ldr	r3, [r2, #0]
 800890e:	6819      	ldr	r1, [r3, #0]
 8008910:	f021 011f 	bic.w	r1, r1, #31
 8008914:	6019      	str	r1, [r3, #0]
 8008916:	6819      	ldr	r1, [r3, #0]
 8008918:	07c9      	lsls	r1, r1, #31
 800891a:	d4fc      	bmi.n	8008916 <uart_lld_serve_rx_end_irq.lto_priv.72+0x36>
 800891c:	7a10      	ldrb	r0, [r2, #8]
 800891e:	6855      	ldr	r5, [r2, #4]
    _uart_rx_complete_isr_code(uartp);
 8008920:	6862      	ldr	r2, [r4, #4]
    dmaStreamDisable(uartp->dmarx);
 8008922:	213d      	movs	r1, #61	; 0x3d
 8008924:	4081      	lsls	r1, r0
    _uart_rx_complete_isr_code(uartp);
 8008926:	2002      	movs	r0, #2
    dmaStreamDisable(uartp->dmarx);
 8008928:	6029      	str	r1, [r5, #0]
    _uart_rx_complete_isr_code(uartp);
 800892a:	70a0      	strb	r0, [r4, #2]
 800892c:	6891      	ldr	r1, [r2, #8]
 800892e:	b139      	cbz	r1, 8008940 <uart_lld_serve_rx_end_irq.lto_priv.72+0x60>
 8008930:	4620      	mov	r0, r4
 8008932:	4788      	blx	r1
 8008934:	78a3      	ldrb	r3, [r4, #2]
 8008936:	2b02      	cmp	r3, #2
 8008938:	d115      	bne.n	8008966 <uart_lld_serve_rx_end_irq.lto_priv.72+0x86>
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	6862      	ldr	r2, [r4, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8008940:	68e1      	ldr	r1, [r4, #12]
    _uart_rx_complete_isr_code(uartp);
 8008942:	2000      	movs	r0, #0
 8008944:	70a0      	strb	r0, [r4, #2]
  if (uartp->config->rxchar_cb == NULL)
 8008946:	68d2      	ldr	r2, [r2, #12]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 8008948:	4282      	cmp	r2, r0
 800894a:	bf14      	ite	ne
 800894c:	f44f 7288 	movne.w	r2, #272	; 0x110
 8008950:	f44f 7280 	moveq.w	r2, #256	; 0x100
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8008954:	430a      	orrs	r2, r1
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8008956:	3418      	adds	r4, #24
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8008958:	2101      	movs	r1, #1
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 800895a:	60dc      	str	r4, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 800895c:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 800895e:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(uartp->dmarx);
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	bd70      	pop	{r4, r5, r6, pc}
 8008968:	20001698 	.word	0x20001698
 800896c:	0800fc30 	.word	0x0800fc30

08008970 <notify2.lto_priv.75>:
  USART2->CR1 |= USART_CR1_TXEIE;
 8008970:	4a02      	ldr	r2, [pc, #8]	; (800897c <notify2.lto_priv.75+0xc>)
 8008972:	68d3      	ldr	r3, [r2, #12]
 8008974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008978:	60d3      	str	r3, [r2, #12]
 800897a:	4770      	bx	lr
 800897c:	40004400 	.word	0x40004400

08008980 <spi_lld_serve_tx_interrupt.lto_priv.140>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8008980:	f011 0f0c 	tst.w	r1, #12
 8008984:	d100      	bne.n	8008988 <spi_lld_serve_tx_interrupt.lto_priv.140+0x8>
 8008986:	4770      	bx	lr
 8008988:	b672      	cpsid	i
 800898a:	4b02      	ldr	r3, [pc, #8]	; (8008994 <spi_lld_serve_tx_interrupt.lto_priv.140+0x14>)
 800898c:	4a02      	ldr	r2, [pc, #8]	; (8008998 <spi_lld_serve_tx_interrupt.lto_priv.140+0x18>)
 800898e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008990:	e7fe      	b.n	8008990 <spi_lld_serve_tx_interrupt.lto_priv.140+0x10>
 8008992:	bf00      	nop
 8008994:	20001698 	.word	0x20001698
 8008998:	0800fc30 	.word	0x0800fc30
 800899c:	00000000 	.word	0x00000000

080089a0 <VectorD4>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 80089a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USART_TypeDef *u = uartp->usart;
 80089a2:	4e20      	ldr	r6, [pc, #128]	; (8008a24 <VectorD4+0x84>)
  OSAL_IRQ_PROLOGUE();
 80089a4:	f003 fbec 	bl	800c180 <_stats_increase_irq>
 80089a8:	f003 fe4a 	bl	800c640 <_dbg_check_enter_isr>
  USART_TypeDef *u = uartp->usart;
 80089ac:	68b4      	ldr	r4, [r6, #8]
  uint32_t cr1 = u->CR1;
 80089ae:	68e7      	ldr	r7, [r4, #12]
  sr = u->SR;   /* SR reset step 1.*/
 80089b0:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80089b2:	6863      	ldr	r3, [r4, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 80089b4:	f240 130f 	movw	r3, #271	; 0x10f
 80089b8:	421d      	tst	r5, r3
 80089ba:	d01d      	beq.n	80089f8 <VectorD4+0x58>
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 80089bc:	6873      	ldr	r3, [r6, #4]
 80089be:	691a      	ldr	r2, [r3, #16]
    u->SR = ~USART_SR_LBD;
 80089c0:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80089c4:	6023      	str	r3, [r4, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 80089c6:	b1ba      	cbz	r2, 80089f8 <VectorD4+0x58>
  sr = u->SR;   /* SR reset step 1.*/
 80089c8:	b2ab      	uxth	r3, r5
    sts |= UART_OVERRUN_ERROR;
 80089ca:	f013 0f08 	tst.w	r3, #8
 80089ce:	bf0c      	ite	eq
 80089d0:	2100      	moveq	r1, #0
 80089d2:	2110      	movne	r1, #16
  if (sr & USART_SR_PE)
 80089d4:	07d8      	lsls	r0, r3, #31
    sts |= UART_PARITY_ERROR;
 80089d6:	bf48      	it	mi
 80089d8:	f041 0104 	orrmi.w	r1, r1, #4
  if (sr & USART_SR_FE)
 80089dc:	0798      	lsls	r0, r3, #30
    sts |= UART_FRAMING_ERROR;
 80089de:	bf48      	it	mi
 80089e0:	f041 0108 	orrmi.w	r1, r1, #8
  if (sr & USART_SR_NE)
 80089e4:	0758      	lsls	r0, r3, #29
    sts |= UART_NOISE_ERROR;
 80089e6:	bf48      	it	mi
 80089e8:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_LBD)
 80089ec:	05d8      	lsls	r0, r3, #23
    sts |= UART_BREAK_DETECTED;
 80089ee:	bf48      	it	mi
 80089f0:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 80089f4:	480b      	ldr	r0, [pc, #44]	; (8008a24 <VectorD4+0x84>)
 80089f6:	4790      	blx	r2
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 80089f8:	066a      	lsls	r2, r5, #25
 80089fa:	d50c      	bpl.n	8008a16 <VectorD4+0x76>
 80089fc:	067b      	lsls	r3, r7, #25
 80089fe:	d50a      	bpl.n	8008a16 <VectorD4+0x76>
    _uart_tx2_isr_code(uartp);
 8008a00:	6873      	ldr	r3, [r6, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8008a04:	f027 0740 	bic.w	r7, r7, #64	; 0x40
    u->SR = ~USART_SR_TC;
 8008a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a0c:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8008a0e:	60e7      	str	r7, [r4, #12]
    _uart_tx2_isr_code(uartp);
 8008a10:	b10b      	cbz	r3, 8008a16 <VectorD4+0x76>
 8008a12:	4804      	ldr	r0, [pc, #16]	; (8008a24 <VectorD4+0x84>)
 8008a14:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8008a16:	f003 fdfb 	bl	800c610 <_dbg_check_leave_isr>
}
 8008a1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8008a1e:	f001 b8df 	b.w	8009be0 <_port_irq_epilogue>
 8008a22:	bf00      	nop
 8008a24:	20001674 	.word	0x20001674
	...

08008a30 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8008a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USART_TypeDef *u = sdp->usart;
 8008a34:	4d76      	ldr	r5, [pc, #472]	; (8008c10 <VectorD8+0x1e0>)
  OSAL_IRQ_PROLOGUE();
 8008a36:	f003 fba3 	bl	800c180 <_stats_increase_irq>
 8008a3a:	f003 fe01 	bl	800c640 <_dbg_check_enter_isr>
  USART_TypeDef *u = sdp->usart;
 8008a3e:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8008a40:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 8008a44:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8008a46:	05d8      	lsls	r0, r3, #23
  uint16_t sr = u->SR;
 8008a48:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8008a4a:	f100 8090 	bmi.w	8008b6e <VectorD8+0x13e>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8008a4e:	2320      	movs	r3, #32
 8008a50:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
 8008a54:	f003 fc04 	bl	800c260 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8008a58:	f003 fe22 	bl	800c6a0 <_dbg_check_lock_from_isr>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008a5c:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8008a60:	d044      	beq.n	8008aec <VectorD8+0xbc>
  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 8008a62:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8008c18 <VectorD8+0x1e8>
 8008a66:	e007      	b.n	8008a78 <VectorD8+0x48>
    if (sr & USART_SR_RXNE)
 8008a68:	06a1      	lsls	r1, r4, #26
    b = u->DR;
 8008a6a:	6877      	ldr	r7, [r6, #4]
    if (sr & USART_SR_RXNE)
 8008a6c:	d41c      	bmi.n	8008aa8 <VectorD8+0x78>
    sr = u->SR;
 8008a6e:	6834      	ldr	r4, [r6, #0]
 8008a70:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008a72:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8008a76:	d039      	beq.n	8008aec <VectorD8+0xbc>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8008a78:	0721      	lsls	r1, r4, #28
 8008a7a:	d0f5      	beq.n	8008a68 <VectorD8+0x38>
    sts |= SD_OVERRUN_ERROR;
 8008a7c:	f014 0f08 	tst.w	r4, #8
 8008a80:	bf0c      	ite	eq
 8008a82:	2000      	moveq	r0, #0
 8008a84:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 8008a86:	07e2      	lsls	r2, r4, #31
    sts |= SD_PARITY_ERROR;
 8008a88:	bf48      	it	mi
 8008a8a:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 8008a8e:	07a3      	lsls	r3, r4, #30
    sts |= SD_FRAMING_ERROR;
 8008a90:	bf48      	it	mi
 8008a92:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 8008a96:	0767      	lsls	r7, r4, #29
    sts |= SD_NOISE_ERROR;
 8008a98:	bf48      	it	mi
 8008a9a:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8008a9e:	f006 f817 	bl	800ead0 <chEvtBroadcastFlagsI.constprop.49>
    if (sr & USART_SR_RXNE)
 8008aa2:	06a1      	lsls	r1, r4, #26
    b = u->DR;
 8008aa4:	6877      	ldr	r7, [r6, #4]
    if (sr & USART_SR_RXNE)
 8008aa6:	d5e2      	bpl.n	8008a6e <VectorD8+0x3e>
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
 8008aa8:	f003 fcaa 	bl	800c400 <chDbgCheckClassI>
  chDbgCheckClassI();
 8008aac:	f003 fca8 	bl	800c400 <chDbgCheckClassI>
  return (bool)(chQSpaceI(iqp) == 0U);
 8008ab0:	696b      	ldr	r3, [r5, #20]
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8008ab2:	b37b      	cbz	r3, 8008b14 <VectorD8+0xe4>
  chDbgCheckClassI();
 8008ab4:	f003 fca4 	bl	800c400 <chDbgCheckClassI>
  chDbgCheckClassI();
 8008ab8:	f003 fca2 	bl	800c400 <chDbgCheckClassI>
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8008abc:	6a2b      	ldr	r3, [r5, #32]
 8008abe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d02b      	beq.n	8008b1c <VectorD8+0xec>
  iqp->q_counter++;
 8008ac4:	696a      	ldr	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
 8008ac6:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
 8008ac8:	3201      	adds	r2, #1
 8008aca:	616a      	str	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
 8008acc:	6229      	str	r1, [r5, #32]
    b = u->DR;
 8008ace:	701f      	strb	r7, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8008ad0:	6a2a      	ldr	r2, [r5, #32]
 8008ad2:	69eb      	ldr	r3, [r5, #28]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d301      	bcc.n	8008adc <VectorD8+0xac>
    iqp->q_wrptr = iqp->q_buffer;
 8008ad8:	69ab      	ldr	r3, [r5, #24]
 8008ada:	622b      	str	r3, [r5, #32]
  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 8008adc:	4640      	mov	r0, r8
 8008ade:	f005 ffd7 	bl	800ea90 <chThdDequeueNextI.constprop.51>
    sr = u->SR;
 8008ae2:	6834      	ldr	r4, [r6, #0]
 8008ae4:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8008ae6:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8008aea:	d1c5      	bne.n	8008a78 <VectorD8+0x48>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8008aec:	f003 fdc0 	bl	800c670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8008af0:	f003 fb9e 	bl	800c230 <_stats_stop_measure_crit_isr>
 8008af4:	2300      	movs	r3, #0
 8008af6:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8008afa:	f019 0f80 	tst.w	r9, #128	; 0x80
 8008afe:	d001      	beq.n	8008b04 <VectorD8+0xd4>
 8008b00:	0622      	lsls	r2, r4, #24
 8008b02:	d44a      	bmi.n	8008b9a <VectorD8+0x16a>
  if (sr & USART_SR_TC) {
 8008b04:	0663      	lsls	r3, r4, #25
 8008b06:	d410      	bmi.n	8008b2a <VectorD8+0xfa>
  OSAL_IRQ_EPILOGUE();
 8008b08:	f003 fd82 	bl	800c610 <_dbg_check_leave_isr>
}
 8008b0c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8008b10:	f001 b866 	b.w	8009be0 <_port_irq_epilogue>
 8008b14:	2004      	movs	r0, #4
 8008b16:	f005 ffdb 	bl	800ead0 <chEvtBroadcastFlagsI.constprop.49>
 8008b1a:	e7cb      	b.n	8008ab4 <VectorD8+0x84>
 8008b1c:	696a      	ldr	r2, [r5, #20]
 8008b1e:	2a00      	cmp	r2, #0
 8008b20:	d0d0      	beq.n	8008ac4 <VectorD8+0x94>
 8008b22:	2080      	movs	r0, #128	; 0x80
 8008b24:	f005 ffd4 	bl	800ead0 <chEvtBroadcastFlagsI.constprop.49>
 8008b28:	e7a1      	b.n	8008a6e <VectorD8+0x3e>
 8008b2a:	2320      	movs	r3, #32
 8008b2c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8008b30:	f003 fb96 	bl	800c260 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8008b34:	f003 fdb4 	bl	800c6a0 <_dbg_check_lock_from_isr>
  chDbgCheckClassI();
 8008b38:	f003 fc62 	bl	800c400 <chDbgCheckClassI>
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8008b3c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8008b3e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d050      	beq.n	8008be6 <VectorD8+0x1b6>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8008b44:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8008b48:	ea09 0303 	and.w	r3, r9, r3
    u->SR = ~USART_SR_TC;
 8008b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8008b50:	60f3      	str	r3, [r6, #12]
    u->SR = ~USART_SR_TC;
 8008b52:	6032      	str	r2, [r6, #0]
  _dbg_check_unlock_from_isr();
 8008b54:	f003 fd8c 	bl	800c670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8008b58:	f003 fb6a 	bl	800c230 <_stats_stop_measure_crit_isr>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 8008b62:	f003 fd55 	bl	800c610 <_dbg_check_leave_isr>
}
 8008b66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8008b6a:	f001 b839 	b.w	8009be0 <_port_irq_epilogue>
 8008b6e:	2320      	movs	r3, #32
 8008b70:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8008b74:	f003 fb74 	bl	800c260 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8008b78:	f003 fd92 	bl	800c6a0 <_dbg_check_lock_from_isr>
 8008b7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008b80:	f005 ffa6 	bl	800ead0 <chEvtBroadcastFlagsI.constprop.49>
    u->SR = ~USART_SR_LBD;
 8008b84:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8008b88:	6033      	str	r3, [r6, #0]
  _dbg_check_unlock_from_isr();
 8008b8a:	f003 fd71 	bl	800c670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8008b8e:	f003 fb4f 	bl	800c230 <_stats_stop_measure_crit_isr>
 8008b92:	2300      	movs	r3, #0
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	e759      	b.n	8008a4e <VectorD8+0x1e>
 8008b9a:	2320      	movs	r3, #32
 8008b9c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8008ba0:	f003 fb5e 	bl	800c260 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8008ba4:	f003 fd7c 	bl	800c6a0 <_dbg_check_lock_from_isr>
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
  uint8_t b;

  chDbgCheckClassI();
 8008ba8:	f003 fc2a 	bl	800c400 <chDbgCheckClassI>
  chDbgCheckClassI();
 8008bac:	f003 fc28 	bl	800c400 <chDbgCheckClassI>
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8008bb0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8008bb2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d01d      	beq.n	8008bf4 <VectorD8+0x1c4>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8008bb8:	6baa      	ldr	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8008bba:	6c29      	ldr	r1, [r5, #64]	; 0x40
  b = *oqp->q_rdptr++;
 8008bbc:	1c58      	adds	r0, r3, #1
  oqp->q_counter++;
 8008bbe:	3201      	adds	r2, #1
 8008bc0:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8008bc2:	64a8      	str	r0, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 8008bc4:	4288      	cmp	r0, r1
  b = *oqp->q_rdptr++;
 8008bc6:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8008bc8:	d301      	bcc.n	8008bce <VectorD8+0x19e>
    oqp->q_rdptr = oqp->q_buffer;
 8008bca:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008bcc:	64ab      	str	r3, [r5, #72]	; 0x48
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 8008bce:	4811      	ldr	r0, [pc, #68]	; (8008c14 <VectorD8+0x1e4>)
 8008bd0:	f005 ff5e 	bl	800ea90 <chThdDequeueNextI.constprop.51>
      u->DR = b;
 8008bd4:	6077      	str	r7, [r6, #4]
  _dbg_check_unlock_from_isr();
 8008bd6:	f003 fd4b 	bl	800c670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8008bda:	f003 fb29 	bl	800c230 <_stats_stop_measure_crit_isr>
 8008bde:	2300      	movs	r3, #0
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	e78e      	b.n	8008b04 <VectorD8+0xd4>
 8008be6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0ab      	beq.n	8008b44 <VectorD8+0x114>
 8008bec:	2010      	movs	r0, #16
 8008bee:	f005 ff6f 	bl	800ead0 <chEvtBroadcastFlagsI.constprop.49>
 8008bf2:	e7a7      	b.n	8008b44 <VectorD8+0x114>
 8008bf4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	d0de      	beq.n	8008bb8 <VectorD8+0x188>
 8008bfa:	2008      	movs	r0, #8
 8008bfc:	f005 ff68 	bl	800ead0 <chEvtBroadcastFlagsI.constprop.49>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8008c00:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8008c04:	ea09 0303 	and.w	r3, r9, r3
 8008c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c0c:	60f3      	str	r3, [r6, #12]
 8008c0e:	e7e2      	b.n	8008bd6 <VectorD8+0x1a6>
 8008c10:	200015fc 	.word	0x200015fc
 8008c14:	2000162c 	.word	0x2000162c
 8008c18:	20001608 	.word	0x20001608
 8008c1c:	00000000 	.word	0x00000000

08008c20 <spi_lld_serve_rx_interrupt.lto_priv.139>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8008c20:	f011 0f0c 	tst.w	r1, #12
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8008c24:	b538      	push	{r3, r4, r5, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8008c26:	d149      	bne.n	8008cbc <spi_lld_serve_rx_interrupt.lto_priv.139+0x9c>
  dmaStreamDisable(spip->dmatx);
 8008c28:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008c2a:	680b      	ldr	r3, [r1, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	f022 021f 	bic.w	r2, r2, #31
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	07d4      	lsls	r4, r2, #31
 8008c38:	d4fc      	bmi.n	8008c34 <spi_lld_serve_rx_interrupt.lto_priv.139+0x14>
 8008c3a:	7a0d      	ldrb	r5, [r1, #8]
  dmaStreamDisable(spip->dmarx);
 8008c3c:	6a02      	ldr	r2, [r0, #32]
  dmaStreamDisable(spip->dmatx);
 8008c3e:	684c      	ldr	r4, [r1, #4]
  dmaStreamDisable(spip->dmarx);
 8008c40:	6813      	ldr	r3, [r2, #0]
  dmaStreamDisable(spip->dmatx);
 8008c42:	213d      	movs	r1, #61	; 0x3d
 8008c44:	40a9      	lsls	r1, r5
 8008c46:	6021      	str	r1, [r4, #0]
  dmaStreamDisable(spip->dmarx);
 8008c48:	6819      	ldr	r1, [r3, #0]
 8008c4a:	f021 011f 	bic.w	r1, r1, #31
 8008c4e:	6019      	str	r1, [r3, #0]
 8008c50:	6819      	ldr	r1, [r3, #0]
 8008c52:	07c9      	lsls	r1, r1, #31
 8008c54:	d4fc      	bmi.n	8008c50 <spi_lld_serve_rx_interrupt.lto_priv.139+0x30>
  _spi_isr_code(spip);
 8008c56:	6843      	ldr	r3, [r0, #4]
  dmaStreamDisable(spip->dmarx);
 8008c58:	6851      	ldr	r1, [r2, #4]
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	7a10      	ldrb	r0, [r2, #8]
  _spi_isr_code(spip);
 8008c5e:	681a      	ldr	r2, [r3, #0]
  dmaStreamDisable(spip->dmarx);
 8008c60:	233d      	movs	r3, #61	; 0x3d
 8008c62:	4083      	lsls	r3, r0
 8008c64:	600b      	str	r3, [r1, #0]
  _spi_isr_code(spip);
 8008c66:	b332      	cbz	r2, 8008cb6 <spi_lld_serve_rx_interrupt.lto_priv.139+0x96>
 8008c68:	2304      	movs	r3, #4
 8008c6a:	7023      	strb	r3, [r4, #0]
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	4790      	blx	r2
 8008c70:	7823      	ldrb	r3, [r4, #0]
 8008c72:	2b04      	cmp	r3, #4
 8008c74:	d01f      	beq.n	8008cb6 <spi_lld_serve_rx_interrupt.lto_priv.139+0x96>
 8008c76:	2320      	movs	r3, #32
 8008c78:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 8008c7c:	f003 faf0 	bl	800c260 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 8008c80:	f003 fd0e 	bl	800c6a0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8008c84:	68a3      	ldr	r3, [r4, #8]
 8008c86:	b173      	cbz	r3, 8008ca6 <spi_lld_serve_rx_interrupt.lto_priv.139+0x86>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
 8008c88:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008c8c:	2a03      	cmp	r2, #3
 8008c8e:	d004      	beq.n	8008c9a <spi_lld_serve_rx_interrupt.lto_priv.139+0x7a>
  __ASM volatile ("cpsid i" : : : "memory");
 8008c90:	b672      	cpsid	i
 8008c92:	4b0d      	ldr	r3, [pc, #52]	; (8008cc8 <spi_lld_serve_rx_interrupt.lto_priv.139+0xa8>)
 8008c94:	4a0d      	ldr	r2, [pc, #52]	; (8008ccc <spi_lld_serve_rx_interrupt.lto_priv.139+0xac>)
 8008c96:	62da      	str	r2, [r3, #44]	; 0x2c
 8008c98:	e7fe      	b.n	8008c98 <spi_lld_serve_rx_interrupt.lto_priv.139+0x78>
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	60a2      	str	r2, [r4, #8]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8008c9e:	4618      	mov	r0, r3
    tp->p_u.rdymsg = msg;
 8008ca0:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8008ca2:	f003 fc8d 	bl	800c5c0 <chSchReadyI>
  _dbg_check_unlock_from_isr();
 8008ca6:	f003 fce3 	bl	800c670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 8008caa:	f003 fac1 	bl	800c230 <_stats_stop_measure_crit_isr>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	bd38      	pop	{r3, r4, r5, pc}
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	7023      	strb	r3, [r4, #0]
 8008cba:	e7dc      	b.n	8008c76 <spi_lld_serve_rx_interrupt.lto_priv.139+0x56>
  __ASM volatile ("cpsid i" : : : "memory");
 8008cbc:	b672      	cpsid	i
 8008cbe:	4b02      	ldr	r3, [pc, #8]	; (8008cc8 <spi_lld_serve_rx_interrupt.lto_priv.139+0xa8>)
 8008cc0:	4a03      	ldr	r2, [pc, #12]	; (8008cd0 <spi_lld_serve_rx_interrupt.lto_priv.139+0xb0>)
 8008cc2:	62da      	str	r2, [r3, #44]	; 0x2c
 8008cc4:	e7fe      	b.n	8008cc4 <spi_lld_serve_rx_interrupt.lto_priv.139+0xa4>
 8008cc6:	bf00      	nop
 8008cc8:	20001698 	.word	0x20001698
 8008ccc:	0800fbb0 	.word	0x0800fbb0
 8008cd0:	0800fc30 	.word	0x0800fc30
	...

08008ce0 <dir_sdi.lto_priv.131>:
{
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	460d      	mov	r5, r1
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8008ce4:	6881      	ldr	r1, [r0, #8]
	dp->index = (WORD)idx;	/* Current index */
 8008ce6:	80c5      	strh	r5, [r0, #6]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8008ce8:	2901      	cmp	r1, #1
 8008cea:	d004      	beq.n	8008cf6 <dir_sdi.lto_priv.131+0x16>
 8008cec:	4604      	mov	r4, r0
 8008cee:	6800      	ldr	r0, [r0, #0]
 8008cf0:	6943      	ldr	r3, [r0, #20]
 8008cf2:	4299      	cmp	r1, r3
 8008cf4:	d301      	bcc.n	8008cfa <dir_sdi.lto_priv.131+0x1a>
	if (!sect) return FR_INT_ERR;
 8008cf6:	2002      	movs	r0, #2
}
 8008cf8:	bd70      	pop	{r4, r5, r6, pc}
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8008cfa:	b9c1      	cbnz	r1, 8008d2e <dir_sdi.lto_priv.131+0x4e>
 8008cfc:	7802      	ldrb	r2, [r0, #0]
 8008cfe:	2a03      	cmp	r2, #3
 8008d00:	d011      	beq.n	8008d26 <dir_sdi.lto_priv.131+0x46>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8008d02:	8903      	ldrh	r3, [r0, #8]
 8008d04:	429d      	cmp	r5, r3
 8008d06:	d2f6      	bcs.n	8008cf6 <dir_sdi.lto_priv.131+0x16>
		sect = dp->fs->dirbase;
 8008d08:	6a43      	ldr	r3, [r0, #36]	; 0x24
	dp->clust = clst;	/* Current cluster# */
 8008d0a:	60e1      	str	r1, [r4, #12]
	if (!sect) return FR_INT_ERR;
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0f2      	beq.n	8008cf6 <dir_sdi.lto_priv.131+0x16>
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8008d10:	f005 020f 	and.w	r2, r5, #15
 8008d14:	3030      	adds	r0, #48	; 0x30
 8008d16:	eb00 1042 	add.w	r0, r0, r2, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
 8008d1a:	eb03 1515 	add.w	r5, r3, r5, lsr #4
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
 8008d1e:	6160      	str	r0, [r4, #20]
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
 8008d20:	6125      	str	r5, [r4, #16]
	return FR_OK;
 8008d22:	2000      	movs	r0, #0
 8008d24:	bd70      	pop	{r4, r5, r6, pc}
		clst = dp->fs->dirbase;
 8008d26:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008d28:	2a00      	cmp	r2, #0
 8008d2a:	d0ea      	beq.n	8008d02 <dir_sdi.lto_priv.131+0x22>
 8008d2c:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
 8008d2e:	7886      	ldrb	r6, [r0, #2]
 8008d30:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8008d32:	42b5      	cmp	r5, r6
 8008d34:	d20f      	bcs.n	8008d56 <dir_sdi.lto_priv.131+0x76>
 8008d36:	e015      	b.n	8008d64 <dir_sdi.lto_priv.131+0x84>
 8008d38:	f001 ff1a 	bl	800ab70 <get_fat.part.6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	4601      	mov	r1, r0
			idx -= ic;
 8008d40:	eba5 0506 	sub.w	r5, r5, r6
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d44:	d019      	beq.n	8008d7a <dir_sdi.lto_priv.131+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8008d46:	2801      	cmp	r0, #1
 8008d48:	d9d5      	bls.n	8008cf6 <dir_sdi.lto_priv.131+0x16>
 8008d4a:	6820      	ldr	r0, [r4, #0]
 8008d4c:	6943      	ldr	r3, [r0, #20]
 8008d4e:	428b      	cmp	r3, r1
 8008d50:	d9d1      	bls.n	8008cf6 <dir_sdi.lto_priv.131+0x16>
		while (idx >= ic) {	/* Follow cluster chain */
 8008d52:	42ae      	cmp	r6, r5
 8008d54:	d806      	bhi.n	8008d64 <dir_sdi.lto_priv.131+0x84>
	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8008d56:	2901      	cmp	r1, #1
 8008d58:	d9cd      	bls.n	8008cf6 <dir_sdi.lto_priv.131+0x16>
 8008d5a:	6943      	ldr	r3, [r0, #20]
 8008d5c:	428b      	cmp	r3, r1
 8008d5e:	d8eb      	bhi.n	8008d38 <dir_sdi.lto_priv.131+0x58>
	if (!sect) return FR_INT_ERR;
 8008d60:	2002      	movs	r0, #2
}
 8008d62:	bd70      	pop	{r4, r5, r6, pc}
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8008d64:	3b02      	subs	r3, #2
	clst -= 2;
 8008d66:	1e8a      	subs	r2, r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d204      	bcs.n	8008d76 <dir_sdi.lto_priv.131+0x96>
	return clst * fs->csize + fs->database;
 8008d6c:	7883      	ldrb	r3, [r0, #2]
 8008d6e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008d70:	fb02 6303 	mla	r3, r2, r3, r6
 8008d74:	e7c9      	b.n	8008d0a <dir_sdi.lto_priv.131+0x2a>
	dp->clust = clst;	/* Current cluster# */
 8008d76:	60e1      	str	r1, [r4, #12]
 8008d78:	e7bd      	b.n	8008cf6 <dir_sdi.lto_priv.131+0x16>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d7a:	2001      	movs	r0, #1
 8008d7c:	bd70      	pop	{r4, r5, r6, pc}
 8008d7e:	bf00      	nop

08008d80 <create_chain.lto_priv.133>:
{
 8008d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d82:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 8008d84:	460f      	mov	r7, r1
 8008d86:	b9f1      	cbnz	r1, 8008dc6 <create_chain.lto_priv.133+0x46>
		scl = fs->last_clust;			/* Get suggested start point */
 8008d88:	68c6      	ldr	r6, [r0, #12]
 8008d8a:	6943      	ldr	r3, [r0, #20]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8008d8c:	bb66      	cbnz	r6, 8008de8 <create_chain.lto_priv.133+0x68>
 8008d8e:	2601      	movs	r6, #1
 8008d90:	4634      	mov	r4, r6
 8008d92:	e010      	b.n	8008db6 <create_chain.lto_priv.133+0x36>
			if (ncl > scl) return 0;	/* No free cluster */
 8008d94:	2e01      	cmp	r6, #1
 8008d96:	d92b      	bls.n	8008df0 <create_chain.lto_priv.133+0x70>
	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d911      	bls.n	8008dc0 <create_chain.lto_priv.133+0x40>
			ncl = 2;
 8008d9c:	2402      	movs	r4, #2
 8008d9e:	4621      	mov	r1, r4
 8008da0:	4628      	mov	r0, r5
 8008da2:	f001 fee5 	bl	800ab70 <get_fat.part.6>
		if (cs == 0) break;				/* Found a free cluster */
 8008da6:	b360      	cbz	r0, 8008e02 <create_chain.lto_priv.133+0x82>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8008da8:	1c41      	adds	r1, r0, #1
 8008daa:	d026      	beq.n	8008dfa <create_chain.lto_priv.133+0x7a>
 8008dac:	2801      	cmp	r0, #1
 8008dae:	d007      	beq.n	8008dc0 <create_chain.lto_priv.133+0x40>
		if (ncl == scl) return 0;		/* No free cluster */
 8008db0:	42a6      	cmp	r6, r4
 8008db2:	d01d      	beq.n	8008df0 <create_chain.lto_priv.133+0x70>
 8008db4:	696b      	ldr	r3, [r5, #20]
		ncl++;							/* Next cluster */
 8008db6:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8008db8:	429c      	cmp	r4, r3
 8008dba:	d2eb      	bcs.n	8008d94 <create_chain.lto_priv.133+0x14>
	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8008dbc:	2c01      	cmp	r4, #1
 8008dbe:	d8ee      	bhi.n	8008d9e <create_chain.lto_priv.133+0x1e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8008dc0:	2401      	movs	r4, #1
}
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8008dc6:	2901      	cmp	r1, #1
 8008dc8:	d9fa      	bls.n	8008dc0 <create_chain.lto_priv.133+0x40>
 8008dca:	6943      	ldr	r3, [r0, #20]
 8008dcc:	4299      	cmp	r1, r3
 8008dce:	d2f7      	bcs.n	8008dc0 <create_chain.lto_priv.133+0x40>
 8008dd0:	f001 fece 	bl	800ab70 <get_fat.part.6>
		if (cs < 2) return 1;			/* Invalid value */
 8008dd4:	2801      	cmp	r0, #1
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	d9f2      	bls.n	8008dc0 <create_chain.lto_priv.133+0x40>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008dda:	3001      	adds	r0, #1
 8008ddc:	d00d      	beq.n	8008dfa <create_chain.lto_priv.133+0x7a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008dde:	696b      	ldr	r3, [r5, #20]
 8008de0:	42a3      	cmp	r3, r4
 8008de2:	d8ee      	bhi.n	8008dc2 <create_chain.lto_priv.133+0x42>
 8008de4:	463e      	mov	r6, r7
 8008de6:	e7d3      	b.n	8008d90 <create_chain.lto_priv.133+0x10>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8008de8:	429e      	cmp	r6, r3
 8008dea:	bf28      	it	cs
 8008dec:	2601      	movcs	r6, #1
 8008dee:	e7cf      	b.n	8008d90 <create_chain.lto_priv.133+0x10>
			if (ncl > scl) return 0;	/* No free cluster */
 8008df0:	2400      	movs	r4, #0
}
 8008df2:	4620      	mov	r0, r4
 8008df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8008df6:	2801      	cmp	r0, #1
 8008df8:	d1e2      	bne.n	8008dc0 <create_chain.lto_priv.133+0x40>
			ncl = 2;
 8008dfa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8008dfe:	4620      	mov	r0, r4
 8008e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008e02:	696b      	ldr	r3, [r5, #20]
 8008e04:	42a3      	cmp	r3, r4
 8008e06:	d9db      	bls.n	8008dc0 <create_chain.lto_priv.133+0x40>
 8008e08:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f001 fe16 	bl	800aa40 <put_fat.part.8>
	if (res == FR_OK && clst != 0) {
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d1ee      	bne.n	8008df6 <create_chain.lto_priv.133+0x76>
 8008e18:	b15f      	cbz	r7, 8008e32 <create_chain.lto_priv.133+0xb2>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008e1a:	2f01      	cmp	r7, #1
 8008e1c:	d9d0      	bls.n	8008dc0 <create_chain.lto_priv.133+0x40>
 8008e1e:	696b      	ldr	r3, [r5, #20]
 8008e20:	429f      	cmp	r7, r3
 8008e22:	d2cd      	bcs.n	8008dc0 <create_chain.lto_priv.133+0x40>
 8008e24:	4639      	mov	r1, r7
 8008e26:	4622      	mov	r2, r4
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f001 fe09 	bl	800aa40 <put_fat.part.8>
	if (res == FR_OK) {
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d1e1      	bne.n	8008df6 <create_chain.lto_priv.133+0x76>
		if (fs->free_clust != 0xFFFFFFFF) {
 8008e32:	692b      	ldr	r3, [r5, #16]
		fs->last_clust = ncl;			/* Update FSINFO */
 8008e34:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	d0c3      	beq.n	8008dc2 <create_chain.lto_priv.133+0x42>
			fs->fsi_flag |= 1;
 8008e3a:	796a      	ldrb	r2, [r5, #5]
			fs->free_clust--;
 8008e3c:	3b01      	subs	r3, #1
			fs->fsi_flag |= 1;
 8008e3e:	f042 0201 	orr.w	r2, r2, #1
			fs->free_clust--;
 8008e42:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8008e44:	716a      	strb	r2, [r5, #5]
 8008e46:	e7bc      	b.n	8008dc2 <create_chain.lto_priv.133+0x42>
	...

08008e50 <dir_next.lto_priv.132>:
{
 8008e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	i = dp->index + 1;
 8008e54:	88c4      	ldrh	r4, [r0, #6]
 8008e56:	3401      	adds	r4, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8008e58:	b2a3      	uxth	r3, r4
 8008e5a:	b913      	cbnz	r3, 8008e62 <dir_next.lto_priv.132+0x12>
		return FR_NO_FILE;
 8008e5c:	2004      	movs	r0, #4
 8008e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8008e62:	6903      	ldr	r3, [r0, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d0f9      	beq.n	8008e5c <dir_next.lto_priv.132+0xc>
	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
 8008e68:	f014 070f 	ands.w	r7, r4, #15
 8008e6c:	460e      	mov	r6, r1
 8008e6e:	4605      	mov	r5, r0
 8008e70:	d008      	beq.n	8008e84 <dir_next.lto_priv.132+0x34>
 8008e72:	6803      	ldr	r3, [r0, #0]
	dp->index = (WORD)i;	/* Current index */
 8008e74:	80ec      	strh	r4, [r5, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */
 8008e76:	3330      	adds	r3, #48	; 0x30
 8008e78:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 8008e7c:	616b      	str	r3, [r5, #20]
	return FR_OK;
 8008e7e:	2000      	movs	r0, #0
 8008e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!dp->clust) {		/* Static table */
 8008e84:	68c1      	ldr	r1, [r0, #12]
		dp->sect++;					/* Next sector */
 8008e86:	3301      	adds	r3, #1
 8008e88:	6103      	str	r3, [r0, #16]
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8008e8a:	6803      	ldr	r3, [r0, #0]
		if (!dp->clust) {		/* Static table */
 8008e8c:	b161      	cbz	r1, 8008ea8 <dir_next.lto_priv.132+0x58>
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8008e8e:	789a      	ldrb	r2, [r3, #2]
 8008e90:	3a01      	subs	r2, #1
 8008e92:	ea12 1814 	ands.w	r8, r2, r4, lsr #4
 8008e96:	d1ed      	bne.n	8008e74 <dir_next.lto_priv.132+0x24>
	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 8008e98:	2901      	cmp	r1, #1
 8008e9a:	d902      	bls.n	8008ea2 <dir_next.lto_priv.132+0x52>
 8008e9c:	695a      	ldr	r2, [r3, #20]
 8008e9e:	4291      	cmp	r1, r2
 8008ea0:	d306      	bcc.n	8008eb0 <dir_next.lto_priv.132+0x60>
				if (clst <= 1) return FR_INT_ERR;
 8008ea2:	2002      	movs	r0, #2
 8008ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8008ea8:	891a      	ldrh	r2, [r3, #8]
 8008eaa:	4294      	cmp	r4, r2
 8008eac:	d2d6      	bcs.n	8008e5c <dir_next.lto_priv.132+0xc>
 8008eae:	e7e1      	b.n	8008e74 <dir_next.lto_priv.132+0x24>
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f001 fe5d 	bl	800ab70 <get_fat.part.6>
				if (clst <= 1) return FR_INT_ERR;
 8008eb6:	2801      	cmp	r0, #1
 8008eb8:	4681      	mov	r9, r0
 8008eba:	d9f2      	bls.n	8008ea2 <dir_next.lto_priv.132+0x52>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008ebc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008ec0:	d01b      	beq.n	8008efa <dir_next.lto_priv.132+0xaa>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8008ec2:	682b      	ldr	r3, [r5, #0]
 8008ec4:	695a      	ldr	r2, [r3, #20]
 8008ec6:	4282      	cmp	r2, r0
 8008ec8:	d90c      	bls.n	8008ee4 <dir_next.lto_priv.132+0x94>
 8008eca:	1e86      	subs	r6, r0, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8008ecc:	3a02      	subs	r2, #2
 8008ece:	4296      	cmp	r6, r2
				dp->clust = clst;				/* Initialize data for new cluster */
 8008ed0:	f8c5 900c 	str.w	r9, [r5, #12]
	return clst * fs->csize + fs->database;
 8008ed4:	bf3b      	ittet	cc
 8008ed6:	789a      	ldrbcc	r2, [r3, #2]
 8008ed8:	6a99      	ldrcc	r1, [r3, #40]	; 0x28
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8008eda:	2600      	movcs	r6, #0
	return clst * fs->csize + fs->database;
 8008edc:	fb06 1602 	mlacc	r6, r6, r2, r1
				dp->sect = clust2sect(dp->fs, clst);
 8008ee0:	612e      	str	r6, [r5, #16]
 8008ee2:	e7c7      	b.n	8008e74 <dir_next.lto_priv.132+0x24>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8008ee4:	2e00      	cmp	r6, #0
 8008ee6:	d0b9      	beq.n	8008e5c <dir_next.lto_priv.132+0xc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8008ee8:	4618      	mov	r0, r3
 8008eea:	68e9      	ldr	r1, [r5, #12]
 8008eec:	f7ff ff48 	bl	8008d80 <create_chain.lto_priv.133>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008ef0:	4681      	mov	r9, r0
 8008ef2:	b928      	cbnz	r0, 8008f00 <dir_next.lto_priv.132+0xb0>
 8008ef4:	2007      	movs	r0, #7
}
 8008ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008efa:	2001      	movs	r0, #1
 8008efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 1) return FR_INT_ERR;
 8008f00:	2801      	cmp	r0, #1
 8008f02:	d0ce      	beq.n	8008ea2 <dir_next.lto_priv.132+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008f04:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008f08:	d0f7      	beq.n	8008efa <dir_next.lto_priv.132+0xaa>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8008f0a:	682a      	ldr	r2, [r5, #0]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008f0c:	7913      	ldrb	r3, [r2, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d12e      	bne.n	8008f70 <dir_next.lto_priv.132+0x120>
 8008f12:	f502 710c 	add.w	r1, r2, #560	; 0x230
		*d++ = (BYTE)val;
 8008f16:	2300      	movs	r3, #0
	BYTE *d = (BYTE*)dst;
 8008f18:	3230      	adds	r2, #48	; 0x30
		*d++ = (BYTE)val;
 8008f1a:	f802 3b01 	strb.w	r3, [r2], #1
	while (cnt--)
 8008f1e:	428a      	cmp	r2, r1
 8008f20:	d1fb      	bne.n	8008f1a <dir_next.lto_priv.132+0xca>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8008f22:	682a      	ldr	r2, [r5, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8008f24:	6953      	ldr	r3, [r2, #20]
	clst -= 2;
 8008f26:	f1a9 0602 	sub.w	r6, r9, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8008f2a:	3b02      	subs	r3, #2
 8008f2c:	429e      	cmp	r6, r3
	return clst * fs->csize + fs->database;
 8008f2e:	bf3b      	ittet	cc
 8008f30:	6a93      	ldrcc	r3, [r2, #40]	; 0x28
 8008f32:	7891      	ldrbcc	r1, [r2, #2]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8008f34:	2300      	movcs	r3, #0
	return clst * fs->csize + fs->database;
 8008f36:	fb06 3301 	mlacc	r3, r6, r1, r3
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8008f3a:	62d3      	str	r3, [r2, #44]	; 0x2c
						dp->fs->wflag = 1;
 8008f3c:	f04f 0a01 	mov.w	sl, #1
 8008f40:	e00b      	b.n	8008f5a <dir_next.lto_priv.132+0x10a>
 8008f42:	f882 a004 	strb.w	sl, [r2, #4]
 8008f46:	f001 fe73 	bl	800ac30 <sync_window.part.3.lto_priv.135>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d1d5      	bne.n	8008efa <dir_next.lto_priv.132+0xaa>
						dp->fs->winsect++;
 8008f4e:	682a      	ldr	r2, [r5, #0]
 8008f50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008f52:	3301      	adds	r3, #1
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008f54:	f108 0801 	add.w	r8, r8, #1
						dp->fs->winsect++;
 8008f58:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008f5a:	7891      	ldrb	r1, [r2, #2]
 8008f5c:	4588      	cmp	r8, r1
 8008f5e:	4610      	mov	r0, r2
 8008f60:	4613      	mov	r3, r2
 8008f62:	d3ee      	bcc.n	8008f42 <dir_next.lto_priv.132+0xf2>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8008f64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008f66:	6952      	ldr	r2, [r2, #20]
 8008f68:	eba1 0108 	sub.w	r1, r1, r8
 8008f6c:	62c1      	str	r1, [r0, #44]	; 0x2c
 8008f6e:	e7ad      	b.n	8008ecc <dir_next.lto_priv.132+0x7c>
 8008f70:	4610      	mov	r0, r2
 8008f72:	f001 fe5d 	bl	800ac30 <sync_window.part.3.lto_priv.135>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d1bf      	bne.n	8008efa <dir_next.lto_priv.132+0xaa>
 8008f7a:	682a      	ldr	r2, [r5, #0]
 8008f7c:	e7c9      	b.n	8008f12 <dir_next.lto_priv.132+0xc2>
 8008f7e:	bf00      	nop

08008f80 <disk_write>:
    const BYTE *buff,    /* Data to be written */
    DWORD sector,        /* Sector address (LBA) */
    UINT count            /* Number of sectors to write (1..255) */
)
{
  switch (pdrv) {
 8008f80:	b108      	cbz	r0, 8008f86 <disk_write+0x6>
    if (sdcWrite(&SDCD1, sector, buff, count))
      return RES_ERROR;
    return RES_OK;
#endif
  }
  return RES_PARERR;
 8008f82:	2004      	movs	r0, #4
 8008f84:	4770      	bx	lr
{
 8008f86:	b570      	push	{r4, r5, r6, lr}
    if (blkGetDriverState(&MMCD1) != BLK_READY)
 8008f88:	4d20      	ldr	r5, [pc, #128]	; (800900c <disk_write+0x8c>)
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	7929      	ldrb	r1, [r5, #4]
 8008f8e:	2905      	cmp	r1, #5
{
 8008f90:	b082      	sub	sp, #8
        return RES_NOTRDY;
 8008f92:	bf18      	it	ne
 8008f94:	2003      	movne	r0, #3
    if (blkGetDriverState(&MMCD1) != BLK_READY)
 8008f96:	d001      	beq.n	8008f9c <disk_write+0x1c>
}
 8008f98:	b002      	add	sp, #8
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}
    if (mmcStartSequentialWrite(&MMCD1, sector))
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	f000 fcd5 	bl	8009950 <mmcStartSequentialWrite>
 8008fa6:	9b01      	ldr	r3, [sp, #4]
 8008fa8:	b920      	cbnz	r0, 8008fb4 <disk_write+0x34>
    while (count > 0) {
 8008faa:	b1eb      	cbz	r3, 8008fe8 <disk_write+0x68>
 */
bool mmcSequentialWrite(MMCDriver *mmcp, const uint8_t *buffer) {
  static const uint8_t start[] = {0xFF, 0xFC};
  uint8_t b[1];

  osalDbgCheck((mmcp != NULL) && (buffer != NULL));
 8008fac:	b1bc      	cbz	r4, 8008fde <disk_write+0x5e>

  if (mmcp->state != BLK_WRITING) {
 8008fae:	792a      	ldrb	r2, [r5, #4]
 8008fb0:	2a07      	cmp	r2, #7
 8008fb2:	d001      	beq.n	8008fb8 <disk_write+0x38>
        return RES_ERROR;
 8008fb4:	2001      	movs	r0, #1
 8008fb6:	e7ef      	b.n	8008f98 <disk_write+0x18>
 8008fb8:	462e      	mov	r6, r5
 8008fba:	e002      	b.n	8008fc2 <disk_write+0x42>
 8008fbc:	792a      	ldrb	r2, [r5, #4]
 8008fbe:	2a07      	cmp	r2, #7
 8008fc0:	d1f8      	bne.n	8008fb4 <disk_write+0x34>
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	9301      	str	r3, [sp, #4]
 8008fc8:	f000 fc72 	bl	80098b0 <mmcSequentialWrite.part.8>
        buff += MMCSD_BLOCK_SIZE;
 8008fcc:	f504 7400 	add.w	r4, r4, #512	; 0x200
        if (mmcSequentialWrite(&MMCD1, buff))
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d1ef      	bne.n	8008fb4 <disk_write+0x34>
    while (count > 0) {
 8008fd4:	9b01      	ldr	r3, [sp, #4]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	d006      	beq.n	8008fe8 <disk_write+0x68>
  osalDbgCheck((mmcp != NULL) && (buffer != NULL));
 8008fda:	2c00      	cmp	r4, #0
 8008fdc:	d1ee      	bne.n	8008fbc <disk_write+0x3c>
 8008fde:	b672      	cpsid	i
 8008fe0:	4b0b      	ldr	r3, [pc, #44]	; (8009010 <disk_write+0x90>)
 8008fe2:	4a0c      	ldr	r2, [pc, #48]	; (8009014 <disk_write+0x94>)
 8008fe4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008fe6:	e7fe      	b.n	8008fe6 <disk_write+0x66>
bool mmcStopSequentialWrite(MMCDriver *mmcp) {
  static const uint8_t stop[] = {0xFD, 0xFF};

  osalDbgCheck(mmcp != NULL);

  if (mmcp->state != BLK_WRITING) {
 8008fe8:	792b      	ldrb	r3, [r5, #4]
 8008fea:	2b07      	cmp	r3, #7
 8008fec:	d1e2      	bne.n	8008fb4 <disk_write+0x34>
    return HAL_FAILED;
  }

  spiSend(mmcp->config->spip, sizeof(stop), stop);
 8008fee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008ff0:	4a09      	ldr	r2, [pc, #36]	; (8009018 <disk_write+0x98>)
 8008ff2:	6818      	ldr	r0, [r3, #0]
 8008ff4:	2102      	movs	r1, #2
 8008ff6:	f001 faa3 	bl	800a540 <spiSend>
  spiUnselect(mmcp->config->spip);
 8008ffa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008ffc:	6818      	ldr	r0, [r3, #0]
 8008ffe:	f001 fbbf 	bl	800a780 <spiUnselect>

  /* Write operation finished.*/
  mmcp->state = BLK_READY;
 8009002:	2305      	movs	r3, #5
 8009004:	712b      	strb	r3, [r5, #4]
    return RES_OK;
 8009006:	2000      	movs	r0, #0
 8009008:	e7c6      	b.n	8008f98 <disk_write+0x18>
 800900a:	bf00      	nop
 800900c:	20000df8 	.word	0x20000df8
 8009010:	20001698 	.word	0x20001698
 8009014:	0800fbe0 	.word	0x0800fbe0
 8009018:	0800fc20 	.word	0x0800fc20
 800901c:	00000000 	.word	0x00000000

08009020 <sync_fs.lto_priv.126>:
{
 8009020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009022:	7903      	ldrb	r3, [r0, #4]
{
 8009024:	4605      	mov	r5, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009026:	b93b      	cbnz	r3, 8009038 <sync_fs.lto_priv.126+0x18>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009028:	782b      	ldrb	r3, [r5, #0]
 800902a:	2b03      	cmp	r3, #3
 800902c:	d009      	beq.n	8009042 <sync_fs.lto_priv.126+0x22>
    BYTE pdrv,        /* Physical drive nmuber (0..) */
    BYTE cmd,        /* Control code */
    void *buff        /* Buffer to send/receive control data */
)
{
  switch (pdrv) {
 800902e:	7868      	ldrb	r0, [r5, #1]
			res = FR_DISK_ERR;
 8009030:	3000      	adds	r0, #0
 8009032:	bf18      	it	ne
 8009034:	2001      	movne	r0, #1
}
 8009036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009038:	f001 fdfa 	bl	800ac30 <sync_window.part.3.lto_priv.135>
	if (res == FR_OK) {
 800903c:	2800      	cmp	r0, #0
 800903e:	d0f3      	beq.n	8009028 <sync_fs.lto_priv.126+0x8>
}
 8009040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009042:	796b      	ldrb	r3, [r5, #5]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d1f2      	bne.n	800902e <sync_fs.lto_priv.126+0xe>
			mem_set(fs->win, 0, SS(fs));
 8009048:	f105 0130 	add.w	r1, r5, #48	; 0x30
	BYTE *d = (BYTE*)dst;
 800904c:	460b      	mov	r3, r1
 800904e:	f505 720c 	add.w	r2, r5, #560	; 0x230
		*d++ = (BYTE)val;
 8009052:	2400      	movs	r4, #0
 8009054:	f803 4b01 	strb.w	r4, [r3], #1
	while (cnt--)
 8009058:	4293      	cmp	r3, r2
 800905a:	d1fb      	bne.n	8009054 <sync_fs.lto_priv.126+0x34>
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 800905c:	692b      	ldr	r3, [r5, #16]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 800905e:	68e8      	ldr	r0, [r5, #12]
			fs->winsect = fs->volbase + 1;
 8009060:	69ea      	ldr	r2, [r5, #28]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8009062:	f885 3218 	strb.w	r3, [r5, #536]	; 0x218
 8009066:	f3c3 2707 	ubfx	r7, r3, #8, #8
 800906a:	0c1e      	lsrs	r6, r3, #16
 800906c:	0e1b      	lsrs	r3, r3, #24
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 800906e:	f3c0 2e07 	ubfx	lr, r0, #8, #8
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8009072:	f885 7219 	strb.w	r7, [r5, #537]	; 0x219
 8009076:	f885 621a 	strb.w	r6, [r5, #538]	; 0x21a
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 800907a:	0c07      	lsrs	r7, r0, #16
 800907c:	0e06      	lsrs	r6, r0, #24
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 800907e:	f885 321b 	strb.w	r3, [r5, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8009082:	f885 021c 	strb.w	r0, [r5, #540]	; 0x21c
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 8009086:	23aa      	movs	r3, #170	; 0xaa
 8009088:	2055      	movs	r0, #85	; 0x55
			fs->winsect = fs->volbase + 1;
 800908a:	3201      	adds	r2, #1
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 800908c:	f885 721e 	strb.w	r7, [r5, #542]	; 0x21e
 8009090:	f885 621f 	strb.w	r6, [r5, #543]	; 0x21f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 8009094:	2752      	movs	r7, #82	; 0x52
 8009096:	2661      	movs	r6, #97	; 0x61
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 8009098:	f885 022e 	strb.w	r0, [r5, #558]	; 0x22e
 800909c:	f885 322f 	strb.w	r3, [r5, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 80090a0:	2041      	movs	r0, #65	; 0x41
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80090a2:	2372      	movs	r3, #114	; 0x72
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 80090a4:	f885 0033 	strb.w	r0, [r5, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80090a8:	f885 0216 	strb.w	r0, [r5, #534]	; 0x216
 80090ac:	f885 3214 	strb.w	r3, [r5, #532]	; 0x214
 80090b0:	f885 3215 	strb.w	r3, [r5, #533]	; 0x215
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 80090b4:	f885 e21d 	strb.w	lr, [r5, #541]	; 0x21d
			fs->winsect = fs->volbase + 1;
 80090b8:	62ea      	str	r2, [r5, #44]	; 0x2c
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 80090ba:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
 80090be:	f885 7031 	strb.w	r7, [r5, #49]	; 0x31
 80090c2:	f885 6032 	strb.w	r6, [r5, #50]	; 0x32
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80090c6:	f885 6217 	strb.w	r6, [r5, #535]	; 0x217
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80090ca:	2301      	movs	r3, #1
 80090cc:	7868      	ldrb	r0, [r5, #1]
 80090ce:	f7ff ff57 	bl	8008f80 <disk_write>
			fs->fsi_flag = 0;
 80090d2:	716c      	strb	r4, [r5, #5]
 80090d4:	e7ab      	b.n	800902e <sync_fs.lto_priv.126+0xe>
 80090d6:	bf00      	nop
	...

080090e0 <disk_read>:
  switch (pdrv) {
 80090e0:	b108      	cbz	r0, 80090e6 <disk_read+0x6>
  return RES_PARERR;
 80090e2:	2004      	movs	r0, #4
 80090e4:	4770      	bx	lr
{
 80090e6:	b570      	push	{r4, r5, r6, lr}
    if (blkGetDriverState(&MMCD1) != BLK_READY)
 80090e8:	4d15      	ldr	r5, [pc, #84]	; (8009140 <disk_read+0x60>)
 80090ea:	460c      	mov	r4, r1
 80090ec:	7929      	ldrb	r1, [r5, #4]
 80090ee:	2905      	cmp	r1, #5
{
 80090f0:	b082      	sub	sp, #8
      return RES_NOTRDY;
 80090f2:	bf18      	it	ne
 80090f4:	2003      	movne	r0, #3
    if (blkGetDriverState(&MMCD1) != BLK_READY)
 80090f6:	d001      	beq.n	80090fc <disk_read+0x1c>
}
 80090f8:	b002      	add	sp, #8
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
    if (mmcStartSequentialRead(&MMCD1, sector))
 80090fc:	4611      	mov	r1, r2
 80090fe:	4628      	mov	r0, r5
 8009100:	9301      	str	r3, [sp, #4]
 8009102:	f000 fced 	bl	8009ae0 <mmcStartSequentialRead>
 8009106:	9b01      	ldr	r3, [sp, #4]
 8009108:	b970      	cbnz	r0, 8009128 <disk_read+0x48>
      if (mmcSequentialRead(&MMCD1, buff))
 800910a:	462e      	mov	r6, r5
    while (count > 0) {
 800910c:	b91b      	cbnz	r3, 8009116 <disk_read+0x36>
 800910e:	e00d      	b.n	800912c <disk_read+0x4c>
 8009110:	9b01      	ldr	r3, [sp, #4]
 8009112:	3b01      	subs	r3, #1
 8009114:	d00a      	beq.n	800912c <disk_read+0x4c>
      if (mmcSequentialRead(&MMCD1, buff))
 8009116:	4621      	mov	r1, r4
 8009118:	4630      	mov	r0, r6
 800911a:	9301      	str	r3, [sp, #4]
 800911c:	f000 fca0 	bl	8009a60 <mmcSequentialRead>
      buff += MMCSD_BLOCK_SIZE;
 8009120:	f504 7400 	add.w	r4, r4, #512	; 0x200
      if (mmcSequentialRead(&MMCD1, buff))
 8009124:	2800      	cmp	r0, #0
 8009126:	d0f3      	beq.n	8009110 <disk_read+0x30>
      return RES_ERROR;
 8009128:	2001      	movs	r0, #1
 800912a:	e7e5      	b.n	80090f8 <disk_read+0x18>
  if (mmcp->state != BLK_READING) {
 800912c:	792b      	ldrb	r3, [r5, #4]
 800912e:	2b06      	cmp	r3, #6
 8009130:	d1fa      	bne.n	8009128 <disk_read+0x48>
 8009132:	4803      	ldr	r0, [pc, #12]	; (8009140 <disk_read+0x60>)
}
 8009134:	b002      	add	sp, #8
 8009136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800913a:	f000 bbf1 	b.w	8009920 <mmcStopSequentialRead.part.6>
 800913e:	bf00      	nop
 8009140:	20000df8 	.word	0x20000df8
	...

08009150 <move_window.lto_priv.88>:
{
 8009150:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Changed current window */
 8009152:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009154:	428b      	cmp	r3, r1
 8009156:	d013      	beq.n	8009180 <move_window.lto_priv.88+0x30>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009158:	7903      	ldrb	r3, [r0, #4]
 800915a:	4604      	mov	r4, r0
 800915c:	460d      	mov	r5, r1
 800915e:	b94b      	cbnz	r3, 8009174 <move_window.lto_priv.88+0x24>
		if (disk_read(fs->drv, fs->win, sector, 1))
 8009160:	2301      	movs	r3, #1
 8009162:	462a      	mov	r2, r5
 8009164:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8009168:	7860      	ldrb	r0, [r4, #1]
 800916a:	f7ff ffb9 	bl	80090e0 <disk_read>
 800916e:	b928      	cbnz	r0, 800917c <move_window.lto_priv.88+0x2c>
		fs->winsect = sector;
 8009170:	62e5      	str	r5, [r4, #44]	; 0x2c
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	f001 fd5c 	bl	800ac30 <sync_window.part.3.lto_priv.135>
		if (sync_window(fs) != FR_OK)
 8009178:	2800      	cmp	r0, #0
 800917a:	d0f1      	beq.n	8009160 <move_window.lto_priv.88+0x10>
			return FR_DISK_ERR;
 800917c:	2001      	movs	r0, #1
 800917e:	bd38      	pop	{r3, r4, r5, pc}
	return FR_OK;
 8009180:	2000      	movs	r0, #0
}
 8009182:	bd38      	pop	{r3, r4, r5, pc}
	...

08009190 <disk_initialize>:
  switch (pdrv) {
 8009190:	b928      	cbnz	r0, 800919e <disk_initialize+0xe>
    if (blkGetDriverState(&MMCD1) != BLK_READY)
 8009192:	4b04      	ldr	r3, [pc, #16]	; (80091a4 <disk_initialize+0x14>)
 8009194:	7918      	ldrb	r0, [r3, #4]
  return STA_NOINIT;
 8009196:	3805      	subs	r0, #5
 8009198:	bf18      	it	ne
 800919a:	2001      	movne	r0, #1
 800919c:	4770      	bx	lr
 800919e:	2001      	movs	r0, #1
}
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	20000df8 	.word	0x20000df8
	...

080091b0 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80091b0:	4a2a      	ldr	r2, [pc, #168]	; (800925c <__early_init+0xac>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80091b2:	4b2b      	ldr	r3, [pc, #172]	; (8009260 <__early_init+0xb0>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80091b4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 80091b8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80091bc:	6410      	str	r0, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 80091be:	6019      	str	r1, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80091c0:	6813      	ldr	r3, [r2, #0]
 80091c2:	f043 0301 	orr.w	r3, r3, #1
 80091c6:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80091c8:	6813      	ldr	r3, [r2, #0]
 80091ca:	0799      	lsls	r1, r3, #30
 80091cc:	d5fc      	bpl.n	80091c8 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80091ce:	6893      	ldr	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80091d0:	4922      	ldr	r1, [pc, #136]	; (800925c <__early_init+0xac>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80091d2:	f023 0303 	bic.w	r3, r3, #3
 80091d6:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 80091d8:	6893      	ldr	r3, [r2, #8]
 80091da:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80091dc:	688b      	ldr	r3, [r1, #8]
 80091de:	f013 030c 	ands.w	r3, r3, #12
 80091e2:	d1fb      	bne.n	80091dc <__early_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80091e4:	680a      	ldr	r2, [r1, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80091e6:	481d      	ldr	r0, [pc, #116]	; (800925c <__early_init+0xac>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80091e8:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 80091ec:	600a      	str	r2, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80091ee:	608b      	str	r3, [r1, #8]
  RCC->CR |= RCC_CR_HSEON;
 80091f0:	680b      	ldr	r3, [r1, #0]
 80091f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091f6:	600b      	str	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80091f8:	6803      	ldr	r3, [r0, #0]
 80091fa:	039b      	lsls	r3, r3, #14
 80091fc:	d5fc      	bpl.n	80091f8 <__early_init+0x48>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80091fe:	6f43      	ldr	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8009200:	4a16      	ldr	r2, [pc, #88]	; (800925c <__early_init+0xac>)
  RCC->CSR |= RCC_CSR_LSION;
 8009202:	f043 0301 	orr.w	r3, r3, #1
 8009206:	6743      	str	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8009208:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800920a:	0799      	lsls	r1, r3, #30
 800920c:	d5fc      	bpl.n	8009208 <__early_init+0x58>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800920e:	4b15      	ldr	r3, [pc, #84]	; (8009264 <__early_init+0xb4>)
 8009210:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8009212:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8009214:	4912      	ldr	r1, [pc, #72]	; (8009260 <__early_init+0xb0>)
  RCC->CR |= RCC_CR_PLLON;
 8009216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800921a:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800921c:	684b      	ldr	r3, [r1, #4]
 800921e:	045a      	lsls	r2, r3, #17
 8009220:	d5fc      	bpl.n	800921c <__early_init+0x6c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8009222:	490e      	ldr	r1, [pc, #56]	; (800925c <__early_init+0xac>)
 8009224:	680b      	ldr	r3, [r1, #0]
 8009226:	019b      	lsls	r3, r3, #6
 8009228:	d5fc      	bpl.n	8009224 <__early_init+0x74>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800922a:	4b0f      	ldr	r3, [pc, #60]	; (8009268 <__early_init+0xb8>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800922c:	4a0f      	ldr	r2, [pc, #60]	; (800926c <__early_init+0xbc>)
 800922e:	608a      	str	r2, [r1, #8]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8009230:	f240 7205 	movw	r2, #1797	; 0x705
 8009234:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8009236:	688b      	ldr	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8009238:	4a08      	ldr	r2, [pc, #32]	; (800925c <__early_init+0xac>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800923a:	f043 0302 	orr.w	r3, r3, #2
 800923e:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8009240:	6893      	ldr	r3, [r2, #8]
 8009242:	f003 030c 	and.w	r3, r3, #12
 8009246:	2b08      	cmp	r3, #8
 8009248:	d1fa      	bne.n	8009240 <__early_init+0x90>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800924a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800924c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009250:	6453      	str	r3, [r2, #68]	; 0x44
 8009252:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8009254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009258:	6653      	str	r3, [r2, #100]	; 0x64
 800925a:	4770      	bx	lr
 800925c:	40023800 	.word	0x40023800
 8009260:	40007000 	.word	0x40007000
 8009264:	07405408 	.word	0x07405408
 8009268:	40023c00 	.word	0x40023c00
 800926c:	38889400 	.word	0x38889400

08009270 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8009270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8009274:	f002 0a03 	and.w	sl, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8009278:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800927c:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8009280:	f3c2 1e41 	ubfx	lr, r2, #5, #2
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8009284:	46d1      	mov	r9, sl
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8009286:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  uint32_t bit     = 0;
 800928a:	2700      	movs	r7, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 800928c:	f04f 0b0f 	mov.w	fp, #15
 8009290:	e00f      	b.n	80092b2 <_pal_lld_setgroupmode+0x42>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8009292:	6a03      	ldr	r3, [r0, #32]
 8009294:	ea23 0404 	bic.w	r4, r3, r4
 8009298:	4325      	orrs	r5, r4
 800929a:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800929c:	0849      	lsrs	r1, r1, #1
 800929e:	d039      	beq.n	8009314 <_pal_lld_setgroupmode+0xa4>
      return;
    otyper <<= 1;
 80092a0:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
 80092a4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
 80092a8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
 80092ac:	ea4f 0989 	mov.w	r9, r9, lsl #2
    bit++;
 80092b0:	3701      	adds	r7, #1
    if ((mask & 1) != 0) {
 80092b2:	07cb      	lsls	r3, r1, #31
 80092b4:	d5f2      	bpl.n	800929c <_pal_lld_setgroupmode+0x2c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80092b6:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 80092b8:	2401      	movs	r4, #1
 80092ba:	40bc      	lsls	r4, r7
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80092bc:	ea23 0304 	bic.w	r3, r3, r4
 80092c0:	ea43 0308 	orr.w	r3, r3, r8
 80092c4:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 80092c6:	2503      	movs	r5, #3
 80092c8:	007b      	lsls	r3, r7, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80092ca:	6884      	ldr	r4, [r0, #8]
      m2 = 3 << (bit * 2);
 80092cc:	fa05 f303 	lsl.w	r3, r5, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80092d0:	43db      	mvns	r3, r3
 80092d2:	401c      	ands	r4, r3
 80092d4:	ea44 040c 	orr.w	r4, r4, ip
 80092d8:	6084      	str	r4, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80092da:	68c5      	ldr	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 80092dc:	f007 0407 	and.w	r4, r7, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80092e0:	401d      	ands	r5, r3
 80092e2:	ea45 050e 	orr.w	r5, r5, lr
      altrmask = altr << ((bit & 7) * 4);
 80092e6:	00a4      	lsls	r4, r4, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80092e8:	f1ba 0f02 	cmp.w	sl, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80092ec:	60c5      	str	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 80092ee:	fa02 f504 	lsl.w	r5, r2, r4
      m4 = 15 << ((bit & 7) * 4);
 80092f2:	fa0b f404 	lsl.w	r4, fp, r4
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80092f6:	d00f      	beq.n	8009318 <_pal_lld_setgroupmode+0xa8>
        port->MODER   = (port->MODER & ~m2) | moder;
 80092f8:	6806      	ldr	r6, [r0, #0]
 80092fa:	4033      	ands	r3, r6
 80092fc:	ea43 0309 	orr.w	r3, r3, r9
        if (bit < 8)
 8009300:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8009302:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8009304:	d9c5      	bls.n	8009292 <_pal_lld_setgroupmode+0x22>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8009306:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009308:	ea23 0404 	bic.w	r4, r3, r4
 800930c:	4325      	orrs	r5, r4
    if (!mask)
 800930e:	0849      	lsrs	r1, r1, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8009310:	6245      	str	r5, [r0, #36]	; 0x24
    if (!mask)
 8009312:	d1c5      	bne.n	80092a0 <_pal_lld_setgroupmode+0x30>
 8009314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bit < 8)
 8009318:	2f07      	cmp	r7, #7
 800931a:	d80a      	bhi.n	8009332 <_pal_lld_setgroupmode+0xc2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800931c:	6a06      	ldr	r6, [r0, #32]
 800931e:	ea26 0404 	bic.w	r4, r6, r4
 8009322:	4325      	orrs	r5, r4
 8009324:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8009326:	6804      	ldr	r4, [r0, #0]
 8009328:	4023      	ands	r3, r4
 800932a:	ea43 0309 	orr.w	r3, r3, r9
 800932e:	6003      	str	r3, [r0, #0]
 8009330:	e7b4      	b.n	800929c <_pal_lld_setgroupmode+0x2c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8009332:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009334:	ea26 0404 	bic.w	r4, r6, r4
 8009338:	4325      	orrs	r5, r4
 800933a:	6245      	str	r5, [r0, #36]	; 0x24
 800933c:	e7f3      	b.n	8009326 <_pal_lld_setgroupmode+0xb6>
 800933e:	bf00      	nop

08009340 <mmcGetInfo>:
 *
 * @api
 */
bool mmcGetInfo(MMCDriver *mmcp, BlockDeviceInfo *bdip) {

  osalDbgCheck((mmcp != NULL) && (bdip != NULL));
 8009340:	b128      	cbz	r0, 800934e <mmcGetInfo+0xe>
 8009342:	b121      	cbz	r1, 800934e <mmcGetInfo+0xe>

  if (mmcp->state != BLK_READY) {
 8009344:	7903      	ldrb	r3, [r0, #4]
 8009346:	2b05      	cmp	r3, #5
 8009348:	d006      	beq.n	8009358 <mmcGetInfo+0x18>
    return HAL_FAILED;
 800934a:	2001      	movs	r0, #1

  bdip->blk_num  = mmcp->capacity;
  bdip->blk_size = MMCSD_BLOCK_SIZE;

  return HAL_SUCCESS;
}
 800934c:	4770      	bx	lr
 800934e:	b672      	cpsid	i
 8009350:	4b05      	ldr	r3, [pc, #20]	; (8009368 <mmcGetInfo+0x28>)
 8009352:	4a06      	ldr	r2, [pc, #24]	; (800936c <mmcGetInfo+0x2c>)
 8009354:	62da      	str	r2, [r3, #44]	; 0x2c
 8009356:	e7fe      	b.n	8009356 <mmcGetInfo+0x16>
  bdip->blk_num  = mmcp->capacity;
 8009358:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800935a:	604b      	str	r3, [r1, #4]
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 800935c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009360:	600b      	str	r3, [r1, #0]
  return HAL_SUCCESS;
 8009362:	2000      	movs	r0, #0
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	20001698 	.word	0x20001698
 800936c:	0800fd50 	.word	0x0800fd50

08009370 <_mmcsd_get_slice>:
                          uint32_t end,
                          uint32_t start) {
  unsigned startidx, endidx, startoff;
  uint32_t endmask;

  osalDbgCheck((end >= start) && ((end - start) < 32U));
 8009370:	4291      	cmp	r1, r2
 8009372:	d302      	bcc.n	800937a <_mmcsd_get_slice+0xa>
 8009374:	1a8b      	subs	r3, r1, r2
 8009376:	2b1f      	cmp	r3, #31
 8009378:	d904      	bls.n	8009384 <_mmcsd_get_slice+0x14>
 800937a:	b672      	cpsid	i
 800937c:	4b13      	ldr	r3, [pc, #76]	; (80093cc <_mmcsd_get_slice+0x5c>)
 800937e:	4a14      	ldr	r2, [pc, #80]	; (80093d0 <_mmcsd_get_slice+0x60>)
 8009380:	62da      	str	r2, [r3, #44]	; 0x2c
 8009382:	e7fe      	b.n	8009382 <_mmcsd_get_slice+0x12>

  startidx = start / 32U;
  startoff = start % 32U;
  endidx   = end / 32U;
  endmask  = ((uint32_t)1U << ((end % 32U) + 1U)) - 1U;
 8009384:	f001 031f 	and.w	r3, r1, #31
                          uint32_t start) {
 8009388:	b430      	push	{r4, r5}
  endmask  = ((uint32_t)1U << ((end % 32U) + 1U)) - 1U;
 800938a:	1c5c      	adds	r4, r3, #1
 800938c:	2301      	movs	r3, #1
 800938e:	40a3      	lsls	r3, r4
  endidx   = end / 32U;
 8009390:	0949      	lsrs	r1, r1, #5
  startidx = start / 32U;
 8009392:	0954      	lsrs	r4, r2, #5

  /* One or two pieces?*/
  if (startidx < endidx) {
 8009394:	428c      	cmp	r4, r1
  endmask  = ((uint32_t)1U << ((end % 32U) + 1U)) - 1U;
 8009396:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  startoff = start % 32U;
 800939a:	f002 021f 	and.w	r2, r2, #31
  if (startidx < endidx) {
 800939e:	d306      	bcc.n	80093ae <_mmcsd_get_slice+0x3e>
    return (data[startidx] >> startoff) |               /* Two pieces case. */
           ((data[endidx] & endmask) << (32U - startoff));
  }
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 80093a0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80093a4:	4003      	ands	r3, r0
 80093a6:	fa23 f002 	lsr.w	r0, r3, r2
}
 80093aa:	bc30      	pop	{r4, r5}
 80093ac:	4770      	bx	lr
           ((data[endidx] & endmask) << (32U - startoff));
 80093ae:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 80093b2:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
           ((data[endidx] & endmask) << (32U - startoff));
 80093b6:	ea03 0005 	and.w	r0, r3, r5
 80093ba:	f1c2 0320 	rsb	r3, r2, #32
 80093be:	4098      	lsls	r0, r3
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 80093c0:	fa21 f202 	lsr.w	r2, r1, r2
 80093c4:	4310      	orrs	r0, r2
}
 80093c6:	bc30      	pop	{r4, r5}
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	20001698 	.word	0x20001698
 80093d0:	0800fc90 	.word	0x0800fc90
	...

080093e0 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 80093e0:	b480      	push	{r7}
 80093e2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80093e4:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 80093e8:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80093ea:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80093ee:	2300      	movs	r3, #0
 80093f0:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bc80      	pop	{r7}
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	0000      	movs	r0, r0
	...

08009400 <recvr1.isra.0>:
static uint8_t recvr1(MMCDriver *mmcp) {
 8009400:	b530      	push	{r4, r5, lr}
 8009402:	4605      	mov	r5, r0
 8009404:	b083      	sub	sp, #12
 8009406:	2409      	movs	r4, #9
    spiReceive(mmcp->config->spip, 1, r1);
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	aa01      	add	r2, sp, #4
 800940c:	6818      	ldr	r0, [r3, #0]
 800940e:	2101      	movs	r1, #1
 8009410:	f001 f8f6 	bl	800a600 <spiReceive>
    if (r1[0] != 0xFFU) {
 8009414:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8009418:	28ff      	cmp	r0, #255	; 0xff
 800941a:	d101      	bne.n	8009420 <recvr1.isra.0+0x20>
  for (i = 0; i < 9; i++) {
 800941c:	3c01      	subs	r4, #1
 800941e:	d1f3      	bne.n	8009408 <recvr1.isra.0+0x8>
}
 8009420:	b003      	add	sp, #12
 8009422:	bd30      	pop	{r4, r5, pc}
	...

08009430 <wait.isra.2>:
static void wait(MMCDriver *mmcp) {
 8009430:	b530      	push	{r4, r5, lr}
 8009432:	4605      	mov	r5, r0
 8009434:	b083      	sub	sp, #12
 8009436:	2410      	movs	r4, #16
    spiReceive(mmcp->config->spip, 1, buf);
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	aa01      	add	r2, sp, #4
 800943c:	6818      	ldr	r0, [r3, #0]
 800943e:	2101      	movs	r1, #1
 8009440:	f001 f8de 	bl	800a600 <spiReceive>
    if (buf[0] == 0xFFU) {
 8009444:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009448:	2bff      	cmp	r3, #255	; 0xff
 800944a:	d010      	beq.n	800946e <wait.isra.2+0x3e>
  for (i = 0; i < 16; i++) {
 800944c:	3c01      	subs	r4, #1
 800944e:	d1f3      	bne.n	8009438 <wait.isra.2+0x8>
 8009450:	e001      	b.n	8009456 <wait.isra.2+0x26>
  chThdSleep(time);
 8009452:	f003 faf5 	bl	800ca40 <chThdSleep>
    spiReceive(mmcp->config->spip, 1, buf);
 8009456:	682b      	ldr	r3, [r5, #0]
 8009458:	aa01      	add	r2, sp, #4
 800945a:	6818      	ldr	r0, [r3, #0]
 800945c:	2101      	movs	r1, #1
 800945e:	f001 f8cf 	bl	800a600 <spiReceive>
    if (buf[0] == 0xFFU) {
 8009462:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009466:	2bff      	cmp	r3, #255	; 0xff
 8009468:	f04f 000a 	mov.w	r0, #10
 800946c:	d1f1      	bne.n	8009452 <wait.isra.2+0x22>
}
 800946e:	b003      	add	sp, #12
 8009470:	bd30      	pop	{r4, r5, pc}
 8009472:	bf00      	nop
	...

08009480 <send_hdr>:
static void send_hdr(MMCDriver *mmcp, uint8_t cmd, uint32_t arg) {
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	4616      	mov	r6, r2
 8009484:	b082      	sub	sp, #8
 8009486:	4605      	mov	r5, r0
  wait(mmcp);
 8009488:	302c      	adds	r0, #44	; 0x2c
static void send_hdr(MMCDriver *mmcp, uint8_t cmd, uint32_t arg) {
 800948a:	460c      	mov	r4, r1
  wait(mmcp);
 800948c:	f7ff ffd0 	bl	8009430 <wait.isra.2>
  buf[3] = (uint8_t)(arg >> 8U);
 8009490:	0a33      	lsrs	r3, r6, #8
  buf[0] = (uint8_t)(0x40U | cmd);
 8009492:	f044 0140 	orr.w	r1, r4, #64	; 0x40
  buf[1] = (uint8_t)(arg >> 24U);
 8009496:	0e30      	lsrs	r0, r6, #24
  buf[2] = (uint8_t)(arg >> 16U);
 8009498:	0c32      	lsrs	r2, r6, #16
  buf[3] = (uint8_t)(arg >> 8U);
 800949a:	f88d 3003 	strb.w	r3, [sp, #3]
  buf[4] = (uint8_t)arg;
 800949e:	2300      	movs	r3, #0
 80094a0:	4c12      	ldr	r4, [pc, #72]	; (80094ec <send_hdr+0x6c>)
  buf[0] = (uint8_t)(0x40U | cmd);
 80094a2:	f88d 1000 	strb.w	r1, [sp]
  buf[1] = (uint8_t)(arg >> 24U);
 80094a6:	f88d 0001 	strb.w	r0, [sp, #1]
  buf[2] = (uint8_t)(arg >> 16U);
 80094aa:	f88d 2002 	strb.w	r2, [sp, #2]
 80094ae:	f10d 0005 	add.w	r0, sp, #5
 80094b2:	f10d 0201 	add.w	r2, sp, #1
    crc = crc7_lookup_table[(crc << 1) ^ (*buffer++)];
 80094b6:	ea81 0143 	eor.w	r1, r1, r3, lsl #1
  while (len > 0U) {
 80094ba:	4290      	cmp	r0, r2
  buf[4] = (uint8_t)arg;
 80094bc:	f88d 6004 	strb.w	r6, [sp, #4]
    crc = crc7_lookup_table[(crc << 1) ^ (*buffer++)];
 80094c0:	5c63      	ldrb	r3, [r4, r1]
  while (len > 0U) {
 80094c2:	d006      	beq.n	80094d2 <send_hdr+0x52>
 80094c4:	f812 1b01 	ldrb.w	r1, [r2], #1
    crc = crc7_lookup_table[(crc << 1) ^ (*buffer++)];
 80094c8:	ea81 0143 	eor.w	r1, r1, r3, lsl #1
  while (len > 0U) {
 80094cc:	4290      	cmp	r0, r2
    crc = crc7_lookup_table[(crc << 1) ^ (*buffer++)];
 80094ce:	5c63      	ldrb	r3, [r4, r1]
  while (len > 0U) {
 80094d0:	d1f8      	bne.n	80094c4 <send_hdr+0x44>
  buf[5] = ((crc7(0, buf, 5U) & 0x7FU) << 1U) | 0x01U;
 80094d2:	0059      	lsls	r1, r3, #1
 80094d4:	f041 0101 	orr.w	r1, r1, #1
  spiSend(mmcp->config->spip, 6, buf);
 80094d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  buf[5] = ((crc7(0, buf, 5U) & 0x7FU) << 1U) | 0x01U;
 80094da:	f88d 1005 	strb.w	r1, [sp, #5]
  spiSend(mmcp->config->spip, 6, buf);
 80094de:	6818      	ldr	r0, [r3, #0]
 80094e0:	466a      	mov	r2, sp
 80094e2:	2106      	movs	r1, #6
 80094e4:	f001 f82c 	bl	800a540 <spiSend>
}
 80094e8:	b002      	add	sp, #8
 80094ea:	bd70      	pop	{r4, r5, r6, pc}
 80094ec:	0800fd60 	.word	0x0800fd60

080094f0 <sync.isra.3>:
static void sync(MMCDriver *mmcp) {
 80094f0:	b510      	push	{r4, lr}
  spiSelect(mmcp->config->spip);
 80094f2:	6803      	ldr	r3, [r0, #0]
static void sync(MMCDriver *mmcp) {
 80094f4:	4604      	mov	r4, r0
 80094f6:	b082      	sub	sp, #8
  spiSelect(mmcp->config->spip);
 80094f8:	6818      	ldr	r0, [r3, #0]
 80094fa:	f001 f981 	bl	800a800 <spiSelect>
 80094fe:	e001      	b.n	8009504 <sync.isra.3+0x14>
 8009500:	f003 fa9e 	bl	800ca40 <chThdSleep>
    spiReceive(mmcp->config->spip, 1, buf);
 8009504:	6823      	ldr	r3, [r4, #0]
 8009506:	aa01      	add	r2, sp, #4
 8009508:	6818      	ldr	r0, [r3, #0]
 800950a:	2101      	movs	r1, #1
 800950c:	f001 f878 	bl	800a600 <spiReceive>
    if (buf[0] == 0xFFU) {
 8009510:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009514:	2bff      	cmp	r3, #255	; 0xff
 8009516:	f04f 000a 	mov.w	r0, #10
 800951a:	d1f1      	bne.n	8009500 <sync.isra.3+0x10>
  spiUnselect(mmcp->config->spip);
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	6818      	ldr	r0, [r3, #0]
 8009520:	f001 f92e 	bl	800a780 <spiUnselect>
}
 8009524:	b002      	add	sp, #8
 8009526:	bd10      	pop	{r4, pc}
	...

08009530 <read_CxD>:
static bool read_CxD(MMCDriver *mmcp, uint8_t cmd, uint32_t cxd[4]) {
 8009530:	b570      	push	{r4, r5, r6, lr}
  spiSelect(mmcp->config->spip);
 8009532:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
static bool read_CxD(MMCDriver *mmcp, uint8_t cmd, uint32_t cxd[4]) {
 8009534:	b084      	sub	sp, #16
 8009536:	4605      	mov	r5, r0
 8009538:	460c      	mov	r4, r1
  spiSelect(mmcp->config->spip);
 800953a:	6818      	ldr	r0, [r3, #0]
static bool read_CxD(MMCDriver *mmcp, uint8_t cmd, uint32_t cxd[4]) {
 800953c:	4616      	mov	r6, r2
  spiSelect(mmcp->config->spip);
 800953e:	f001 f95f 	bl	800a800 <spiSelect>
  send_hdr(mmcp, cmd, 0);
 8009542:	4628      	mov	r0, r5
 8009544:	4621      	mov	r1, r4
 8009546:	2200      	movs	r2, #0
 8009548:	f7ff ff9a 	bl	8009480 <send_hdr>
  if (recvr1(mmcp) != 0x00U) {
 800954c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8009550:	f7ff ff56 	bl	8009400 <recvr1.isra.0>
 8009554:	bb58      	cbnz	r0, 80095ae <read_CxD+0x7e>
 8009556:	f242 7410 	movw	r4, #10000	; 0x2710
 800955a:	e001      	b.n	8009560 <read_CxD+0x30>
  for (i = 0U; i < MMC_WAIT_DATA; i++) {
 800955c:	3c01      	subs	r4, #1
 800955e:	d02d      	beq.n	80095bc <read_CxD+0x8c>
    spiReceive(mmcp->config->spip, 1, buf);
 8009560:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009562:	466a      	mov	r2, sp
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	2101      	movs	r1, #1
 8009568:	f001 f84a 	bl	800a600 <spiReceive>
    if (buf[0] == 0xFEU) {
 800956c:	f89d 3000 	ldrb.w	r3, [sp]
 8009570:	2bfe      	cmp	r3, #254	; 0xfe
 8009572:	d1f3      	bne.n	800955c <read_CxD+0x2c>
      spiReceive(mmcp->config->spip, 16, buf);
 8009574:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009576:	466a      	mov	r2, sp
 8009578:	6818      	ldr	r0, [r3, #0]
 800957a:	2110      	movs	r1, #16
 800957c:	f001 f840 	bl	800a600 <spiReceive>
 8009580:	466b      	mov	r3, sp
      for (wp = &cxd[3]; wp >= cxd; wp--) {
 8009582:	f106 000c 	add.w	r0, r6, #12
 8009586:	1f32      	subs	r2, r6, #4
 8009588:	f853 1b04 	ldr.w	r1, [r3], #4
 800958c:	ba09      	rev	r1, r1
        *wp = ((uint32_t)bp[0] << 24U) | ((uint32_t)bp[1] << 16U) |
 800958e:	f840 1904 	str.w	r1, [r0], #-4
      for (wp = &cxd[3]; wp >= cxd; wp--) {
 8009592:	4282      	cmp	r2, r0
 8009594:	d1f8      	bne.n	8009588 <read_CxD+0x58>
      spiIgnore(mmcp->config->spip, 2);
 8009596:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009598:	2102      	movs	r1, #2
 800959a:	6818      	ldr	r0, [r3, #0]
 800959c:	f001 f890 	bl	800a6c0 <spiIgnore>
      spiUnselect(mmcp->config->spip);
 80095a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80095a2:	6818      	ldr	r0, [r3, #0]
 80095a4:	f001 f8ec 	bl	800a780 <spiUnselect>
      return HAL_SUCCESS;
 80095a8:	2000      	movs	r0, #0
}
 80095aa:	b004      	add	sp, #16
 80095ac:	bd70      	pop	{r4, r5, r6, pc}
    spiUnselect(mmcp->config->spip);
 80095ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80095b0:	6818      	ldr	r0, [r3, #0]
 80095b2:	f001 f8e5 	bl	800a780 <spiUnselect>
    return HAL_FAILED;
 80095b6:	2001      	movs	r0, #1
}
 80095b8:	b004      	add	sp, #16
 80095ba:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_FAILED;
 80095bc:	2001      	movs	r0, #1
}
 80095be:	b004      	add	sp, #16
 80095c0:	bd70      	pop	{r4, r5, r6, pc}
 80095c2:	bf00      	nop
	...

080095d0 <send_command_R3>:
                               uint8_t *response) {
 80095d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d2:	460d      	mov	r5, r1
  spiSelect(mmcp->config->spip);
 80095d4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
                               uint8_t *response) {
 80095d6:	4604      	mov	r4, r0
 80095d8:	4617      	mov	r7, r2
  spiSelect(mmcp->config->spip);
 80095da:	6808      	ldr	r0, [r1, #0]
                               uint8_t *response) {
 80095dc:	461e      	mov	r6, r3
  spiSelect(mmcp->config->spip);
 80095de:	f001 f90f 	bl	800a800 <spiSelect>
  send_hdr(mmcp, cmd, arg);
 80095e2:	463a      	mov	r2, r7
 80095e4:	4629      	mov	r1, r5
 80095e6:	4620      	mov	r0, r4
 80095e8:	f7ff ff4a 	bl	8009480 <send_hdr>
  r1 = recvr1(mmcp);
 80095ec:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80095f0:	f7ff ff06 	bl	8009400 <recvr1.isra.0>
  spiReceive(mmcp->config->spip, 4, buffer);
 80095f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  r1 = recvr1(mmcp);
 80095f6:	4605      	mov	r5, r0
  spiReceive(mmcp->config->spip, 4, buffer);
 80095f8:	4632      	mov	r2, r6
 80095fa:	6808      	ldr	r0, [r1, #0]
 80095fc:	2104      	movs	r1, #4
 80095fe:	f000 ffff 	bl	800a600 <spiReceive>
  spiUnselect(mmcp->config->spip);
 8009602:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009604:	6818      	ldr	r0, [r3, #0]
 8009606:	f001 f8bb 	bl	800a780 <spiUnselect>
}
 800960a:	4628      	mov	r0, r5
 800960c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800960e:	bf00      	nop

08009610 <send_command_R1>:
  spiSelect(mmcp->config->spip);
 8009610:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
static uint8_t send_command_R1(MMCDriver *mmcp, uint8_t cmd, uint32_t arg) {
 8009612:	b570      	push	{r4, r5, r6, lr}
 8009614:	4604      	mov	r4, r0
 8009616:	460d      	mov	r5, r1
  spiSelect(mmcp->config->spip);
 8009618:	6818      	ldr	r0, [r3, #0]
static uint8_t send_command_R1(MMCDriver *mmcp, uint8_t cmd, uint32_t arg) {
 800961a:	4616      	mov	r6, r2
  spiSelect(mmcp->config->spip);
 800961c:	f001 f8f0 	bl	800a800 <spiSelect>
  send_hdr(mmcp, cmd, arg);
 8009620:	4629      	mov	r1, r5
 8009622:	4632      	mov	r2, r6
 8009624:	4620      	mov	r0, r4
 8009626:	f7ff ff2b 	bl	8009480 <send_hdr>
  r1 = recvr1(mmcp);
 800962a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800962e:	f7ff fee7 	bl	8009400 <recvr1.isra.0>
  spiUnselect(mmcp->config->spip);
 8009632:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  r1 = recvr1(mmcp);
 8009634:	4605      	mov	r5, r0
  spiUnselect(mmcp->config->spip);
 8009636:	6818      	ldr	r0, [r3, #0]
 8009638:	f001 f8a2 	bl	800a780 <spiUnselect>
}
 800963c:	4628      	mov	r0, r5
 800963e:	bd70      	pop	{r4, r5, r6, pc}

08009640 <mmcSync>:
  osalDbgCheck(mmcp != NULL);
 8009640:	b1a8      	cbz	r0, 800966e <mmcSync+0x2e>
bool mmcSync(MMCDriver *mmcp) {
 8009642:	b570      	push	{r4, r5, r6, lr}
  if (mmcp->state != BLK_READY) {
 8009644:	7906      	ldrb	r6, [r0, #4]
 8009646:	2e05      	cmp	r6, #5
 8009648:	d001      	beq.n	800964e <mmcSync+0xe>
    return HAL_FAILED;
 800964a:	2001      	movs	r0, #1
}
 800964c:	bd70      	pop	{r4, r5, r6, pc}
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 800964e:	4605      	mov	r5, r0
  mmcp->state = BLK_SYNCING;
 8009650:	2308      	movs	r3, #8
 8009652:	7103      	strb	r3, [r0, #4]
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 8009654:	f855 3f2c 	ldr.w	r3, [r5, #44]!
 8009658:	4604      	mov	r4, r0
 800965a:	6899      	ldr	r1, [r3, #8]
 800965c:	6818      	ldr	r0, [r3, #0]
 800965e:	f001 f95f 	bl	800a920 <spiStart>
  sync(mmcp);
 8009662:	4628      	mov	r0, r5
 8009664:	f7ff ff44 	bl	80094f0 <sync.isra.3>
  mmcp->state = BLK_READY;
 8009668:	7126      	strb	r6, [r4, #4]
 800966a:	2000      	movs	r0, #0
 800966c:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800966e:	b672      	cpsid	i
 8009670:	4b01      	ldr	r3, [pc, #4]	; (8009678 <mmcSync+0x38>)
 8009672:	4a02      	ldr	r2, [pc, #8]	; (800967c <mmcSync+0x3c>)
 8009674:	62da      	str	r2, [r3, #44]	; 0x2c
 8009676:	e7fe      	b.n	8009676 <mmcSync+0x36>
 8009678:	20001698 	.word	0x20001698
 800967c:	0800fd40 	.word	0x0800fd40

08009680 <mmcConnect>:
  osalDbgCheck(mmcp != NULL);
 8009680:	2800      	cmp	r0, #0
 8009682:	f000 80f0 	beq.w	8009866 <mmcConnect+0x1e6>
  osalDbgAssert((mmcp->state == BLK_ACTIVE) || (mmcp->state == BLK_READY),
 8009686:	7903      	ldrb	r3, [r0, #4]
 8009688:	2b02      	cmp	r3, #2
 800968a:	d006      	beq.n	800969a <mmcConnect+0x1a>
 800968c:	2b05      	cmp	r3, #5
 800968e:	d004      	beq.n	800969a <mmcConnect+0x1a>
 8009690:	b672      	cpsid	i
 8009692:	4b83      	ldr	r3, [pc, #524]	; (80098a0 <mmcConnect+0x220>)
 8009694:	4a83      	ldr	r2, [pc, #524]	; (80098a4 <mmcConnect+0x224>)
 8009696:	62da      	str	r2, [r3, #44]	; 0x2c
 8009698:	e7fe      	b.n	8009698 <mmcConnect+0x18>
bool mmcConnect(MMCDriver *mmcp) {
 800969a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  spiStart(mmcp->config->spip, mmcp->config->lscfg);
 800969e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80096a0:	4f81      	ldr	r7, [pc, #516]	; (80098a8 <mmcConnect+0x228>)
 80096a2:	4605      	mov	r5, r0
  mmcp->state = BLK_CONNECTING;
 80096a4:	2203      	movs	r2, #3
 80096a6:	7102      	strb	r2, [r0, #4]
  spiIgnore(mmcp->config->spip, 16);
 80096a8:	4681      	mov	r9, r0
  mmcp->block_addresses = false;
 80096aa:	2200      	movs	r2, #0
  spiStart(mmcp->config->spip, mmcp->config->lscfg);
 80096ac:	e893 0003 	ldmia.w	r3, {r0, r1}
bool mmcConnect(MMCDriver *mmcp) {
 80096b0:	b083      	sub	sp, #12
  mmcp->block_addresses = false;
 80096b2:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
  spiStart(mmcp->config->spip, mmcp->config->lscfg);
 80096b6:	f001 f933 	bl	800a920 <spiStart>
  spiIgnore(mmcp->config->spip, 16);
 80096ba:	f859 3f2c 	ldr.w	r3, [r9, #44]!
 80096be:	2110      	movs	r1, #16
 80096c0:	6818      	ldr	r0, [r3, #0]
 80096c2:	f000 fffd 	bl	800a6c0 <spiIgnore>
 80096c6:	f04f 080a 	mov.w	r8, #10
 80096ca:	f10d 0605 	add.w	r6, sp, #5
  spiSelect(mmcp->config->spip);
 80096ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80096d0:	6818      	ldr	r0, [r3, #0]
 80096d2:	f001 f895 	bl	800a800 <spiSelect>
    for (i = 0; i < 50; i++) 
 80096d6:	2400      	movs	r4, #0
 80096d8:	e002      	b.n	80096e0 <mmcConnect+0x60>
 80096da:	3401      	adds	r4, #1
 80096dc:	2c32      	cmp	r4, #50	; 0x32
 80096de:	d00b      	beq.n	80096f8 <mmcConnect+0x78>
        spiReceive(mmcp->config->spip, 1, buf);
 80096e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80096e2:	466a      	mov	r2, sp
 80096e4:	6818      	ldr	r0, [r3, #0]
 80096e6:	2101      	movs	r1, #1
 80096e8:	f000 ff8a 	bl	800a600 <spiReceive>
        if (buf[0] == 0xFFU) 
 80096ec:	f89d 3000 	ldrb.w	r3, [sp]
 80096f0:	2bff      	cmp	r3, #255	; 0xff
 80096f2:	d1f2      	bne.n	80096da <mmcConnect+0x5a>
            if( i > 15)
 80096f4:	2c0f      	cmp	r4, #15
 80096f6:	dc32      	bgt.n	800975e <mmcConnect+0xde>
  buf[1] = (uint8_t)(arg >> 24U);
 80096f8:	2300      	movs	r3, #0
  buf[0] = (uint8_t)(0x40U | cmd);
 80096fa:	2240      	movs	r2, #64	; 0x40
 80096fc:	f88d 2000 	strb.w	r2, [sp]
  buf[1] = (uint8_t)(arg >> 24U);
 8009700:	f88d 3001 	strb.w	r3, [sp, #1]
  buf[2] = (uint8_t)(arg >> 16U);
 8009704:	f88d 3002 	strb.w	r3, [sp, #2]
  buf[3] = (uint8_t)(arg >> 8U);
 8009708:	f88d 3003 	strb.w	r3, [sp, #3]
  buf[4] = (uint8_t)arg;
 800970c:	f88d 3004 	strb.w	r3, [sp, #4]
 8009710:	f10d 0201 	add.w	r2, sp, #1
 8009714:	2164      	movs	r1, #100	; 0x64
 8009716:	e004      	b.n	8009722 <mmcConnect+0xa2>
 8009718:	f812 3b01 	ldrb.w	r3, [r2], #1
 800971c:	ea83 0341 	eor.w	r3, r3, r1, lsl #1
 8009720:	5cf9      	ldrb	r1, [r7, r3]
  while (len > 0U) {
 8009722:	4296      	cmp	r6, r2
 8009724:	d1f8      	bne.n	8009718 <mmcConnect+0x98>
  buf[5] = ((crc7(0, buf, 5U) & 0x7FU) << 1U) | 0x01U;
 8009726:	004b      	lsls	r3, r1, #1
 8009728:	f043 0301 	orr.w	r3, r3, #1
  spiSend(mmcp->config->spip, 6, buf);
 800972c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  buf[5] = ((crc7(0, buf, 5U) & 0x7FU) << 1U) | 0x01U;
 800972e:	f88d 3005 	strb.w	r3, [sp, #5]
  spiSend(mmcp->config->spip, 6, buf);
 8009732:	6810      	ldr	r0, [r2, #0]
 8009734:	2106      	movs	r1, #6
 8009736:	466a      	mov	r2, sp
 8009738:	f000 ff02 	bl	800a540 <spiSend>
  r1 = recvr1(mmcp);
 800973c:	4648      	mov	r0, r9
 800973e:	f7ff fe5f 	bl	8009400 <recvr1.isra.0>
  spiUnselect(mmcp->config->spip);
 8009742:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  r1 = recvr1(mmcp);
 8009744:	4604      	mov	r4, r0
  spiUnselect(mmcp->config->spip);
 8009746:	6818      	ldr	r0, [r3, #0]
 8009748:	f001 f81a 	bl	800a780 <spiUnselect>
    if (send_command_R1_2(mmcp, MMCSD_CMD_GO_IDLE_STATE, 0) == 0x01U) {
 800974c:	2c01      	cmp	r4, #1
 800974e:	d015      	beq.n	800977c <mmcConnect+0xfc>
    if (++i >= MMC_CMD0_RETRY) {
 8009750:	f1b8 0801 	subs.w	r8, r8, #1
 8009754:	d008      	beq.n	8009768 <mmcConnect+0xe8>
 8009756:	2064      	movs	r0, #100	; 0x64
 8009758:	f003 f972 	bl	800ca40 <chThdSleep>
 800975c:	e7b7      	b.n	80096ce <mmcConnect+0x4e>
 800975e:	200a      	movs	r0, #10
 8009760:	f003 f96e 	bl	800ca40 <chThdSleep>
 8009764:	e7c8      	b.n	80096f8 <mmcConnect+0x78>
  mmcp->capacity = _mmcsd_get_capacity(mmcp->csd);
 8009766:	62ac      	str	r4, [r5, #40]	; 0x28
  spiStop(mmcp->config->spip);
 8009768:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800976a:	6818      	ldr	r0, [r3, #0]
 800976c:	f001 f888 	bl	800a880 <spiStop>
  mmcp->state = BLK_ACTIVE;
 8009770:	2302      	movs	r3, #2
  return HAL_FAILED;
 8009772:	2001      	movs	r0, #1
  mmcp->state = BLK_ACTIVE;
 8009774:	712b      	strb	r3, [r5, #4]
}
 8009776:	b003      	add	sp, #12
 8009778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (send_command_R3(mmcp, MMCSD_CMD_SEND_IF_COND,
 800977c:	466b      	mov	r3, sp
 800977e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009782:	2108      	movs	r1, #8
 8009784:	4628      	mov	r0, r5
 8009786:	f7ff ff23 	bl	80095d0 <send_command_R3>
 800978a:	2805      	cmp	r0, #5
 800978c:	d024      	beq.n	80097d8 <mmcConnect+0x158>
          (send_command_R3(mmcp, MMCSD_CMD_APP_OP_COND, 0x400001AAU, r3) == 0x00U)) {
 800978e:	4f47      	ldr	r7, [pc, #284]	; (80098ac <mmcConnect+0x22c>)
  if (send_command_R3(mmcp, MMCSD_CMD_SEND_IF_COND,
 8009790:	2464      	movs	r4, #100	; 0x64
 8009792:	e005      	b.n	80097a0 <mmcConnect+0x120>
      if (++i >= MMC_ACMD41_RETRY) {
 8009794:	3c01      	subs	r4, #1
 8009796:	f04f 0064 	mov.w	r0, #100	; 0x64
 800979a:	d0e5      	beq.n	8009768 <mmcConnect+0xe8>
 800979c:	f003 f950 	bl	800ca40 <chThdSleep>
      if ((send_command_R1(mmcp, MMCSD_CMD_APP_CMD, 0) == 0x01U) &&
 80097a0:	2200      	movs	r2, #0
 80097a2:	2137      	movs	r1, #55	; 0x37
 80097a4:	4628      	mov	r0, r5
 80097a6:	f7ff ff33 	bl	8009610 <send_command_R1>
 80097aa:	2801      	cmp	r0, #1
 80097ac:	4606      	mov	r6, r0
 80097ae:	d1f1      	bne.n	8009794 <mmcConnect+0x114>
          (send_command_R3(mmcp, MMCSD_CMD_APP_OP_COND, 0x400001AAU, r3) == 0x00U)) {
 80097b0:	463a      	mov	r2, r7
 80097b2:	466b      	mov	r3, sp
 80097b4:	2129      	movs	r1, #41	; 0x29
 80097b6:	4628      	mov	r0, r5
 80097b8:	f7ff ff0a 	bl	80095d0 <send_command_R3>
      if ((send_command_R1(mmcp, MMCSD_CMD_APP_CMD, 0) == 0x01U) &&
 80097bc:	4602      	mov	r2, r0
 80097be:	2800      	cmp	r0, #0
 80097c0:	d1e8      	bne.n	8009794 <mmcConnect+0x114>
    (void) send_command_R3(mmcp, MMCSD_CMD_READ_OCR, 0, r3);
 80097c2:	466b      	mov	r3, sp
 80097c4:	213a      	movs	r1, #58	; 0x3a
 80097c6:	4628      	mov	r0, r5
 80097c8:	f7ff ff02 	bl	80095d0 <send_command_R3>
    if ((r3[0] & 0x40U) != 0U) {
 80097cc:	f89d 3000 	ldrb.w	r3, [sp]
 80097d0:	065b      	lsls	r3, r3, #25
      mmcp->block_addresses = true;
 80097d2:	bf48      	it	mi
 80097d4:	f885 6030 	strbmi.w	r6, [r5, #48]	; 0x30
  if (send_command_R3(mmcp, MMCSD_CMD_SEND_IF_COND,
 80097d8:	2464      	movs	r4, #100	; 0x64
 80097da:	e007      	b.n	80097ec <mmcConnect+0x16c>
    if (b != 0x01U) {
 80097dc:	2801      	cmp	r0, #1
 80097de:	f04f 0064 	mov.w	r0, #100	; 0x64
 80097e2:	d1c1      	bne.n	8009768 <mmcConnect+0xe8>
    if (++i >= MMC_CMD1_RETRY) {
 80097e4:	3c01      	subs	r4, #1
 80097e6:	d0bf      	beq.n	8009768 <mmcConnect+0xe8>
 80097e8:	f003 f92a 	bl	800ca40 <chThdSleep>
    uint8_t b = send_command_R1(mmcp, MMCSD_CMD_INIT, 0);
 80097ec:	2200      	movs	r2, #0
 80097ee:	2101      	movs	r1, #1
 80097f0:	4628      	mov	r0, r5
 80097f2:	f7ff ff0d 	bl	8009610 <send_command_R1>
    if (b == 0x00U) {
 80097f6:	2800      	cmp	r0, #0
 80097f8:	d1f0      	bne.n	80097dc <mmcConnect+0x15c>
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 80097fa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80097fc:	6899      	ldr	r1, [r3, #8]
 80097fe:	6818      	ldr	r0, [r3, #0]
 8009800:	f001 f88e 	bl	800a920 <spiStart>
  if (send_command_R1(mmcp, MMCSD_CMD_SET_BLOCKLEN,
 8009804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009808:	2110      	movs	r1, #16
 800980a:	4628      	mov	r0, r5
 800980c:	f7ff ff00 	bl	8009610 <send_command_R1>
 8009810:	2800      	cmp	r0, #0
 8009812:	d1a9      	bne.n	8009768 <mmcConnect+0xe8>
  if (read_CxD(mmcp, MMCSD_CMD_SEND_CSD, mmcp->csd)) {
 8009814:	f105 0618 	add.w	r6, r5, #24
 8009818:	4632      	mov	r2, r6
 800981a:	2109      	movs	r1, #9
 800981c:	4628      	mov	r0, r5
 800981e:	f7ff fe87 	bl	8009530 <read_CxD>
 8009822:	4604      	mov	r4, r0
 8009824:	2800      	cmp	r0, #0
 8009826:	d19f      	bne.n	8009768 <mmcConnect+0xe8>
uint32_t _mmcsd_get_capacity(const uint32_t *csd) {
  uint32_t a, b, c;

  osalDbgCheck(NULL != csd);

  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8009828:	227e      	movs	r2, #126	; 0x7e
 800982a:	217f      	movs	r1, #127	; 0x7f
 800982c:	4630      	mov	r0, r6
 800982e:	f7ff fd9f 	bl	8009370 <_mmcsd_get_slice>
 8009832:	b1e8      	cbz	r0, 8009870 <mmcConnect+0x1f0>
 8009834:	2801      	cmp	r0, #1
 8009836:	d196      	bne.n	8009766 <mmcConnect+0xe6>
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
  case 1:
    /* CSD version 2.0.*/
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
 8009838:	4630      	mov	r0, r6
 800983a:	2230      	movs	r2, #48	; 0x30
 800983c:	2145      	movs	r1, #69	; 0x45
 800983e:	f7ff fd97 	bl	8009370 <_mmcsd_get_slice>
 8009842:	1c43      	adds	r3, r0, #1
 8009844:	029b      	lsls	r3, r3, #10
  mmcp->capacity = _mmcsd_get_capacity(mmcp->csd);
 8009846:	62ab      	str	r3, [r5, #40]	; 0x28
  if (mmcp->capacity == 0U) {
 8009848:	2b00      	cmp	r3, #0
 800984a:	d08d      	beq.n	8009768 <mmcConnect+0xe8>
  if (read_CxD(mmcp, MMCSD_CMD_SEND_CID, mmcp->cid)) {
 800984c:	f105 0208 	add.w	r2, r5, #8
 8009850:	210a      	movs	r1, #10
 8009852:	4628      	mov	r0, r5
 8009854:	f7ff fe6c 	bl	8009530 <read_CxD>
 8009858:	2800      	cmp	r0, #0
 800985a:	d185      	bne.n	8009768 <mmcConnect+0xe8>
  mmcp->state = BLK_READY;
 800985c:	2305      	movs	r3, #5
 800985e:	712b      	strb	r3, [r5, #4]
}
 8009860:	b003      	add	sp, #12
 8009862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009866:	b672      	cpsid	i
 8009868:	4b0d      	ldr	r3, [pc, #52]	; (80098a0 <mmcConnect+0x220>)
 800986a:	4a0e      	ldr	r2, [pc, #56]	; (80098a4 <mmcConnect+0x224>)
 800986c:	62da      	str	r2, [r3, #44]	; 0x2c
 800986e:	e7fe      	b.n	800986e <mmcConnect+0x1ee>
    a = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_SLICE);
 8009870:	223e      	movs	r2, #62	; 0x3e
 8009872:	2149      	movs	r1, #73	; 0x49
 8009874:	4630      	mov	r0, r6
 8009876:	f7ff fd7b 	bl	8009370 <_mmcsd_get_slice>
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
 800987a:	222f      	movs	r2, #47	; 0x2f
    a = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_SLICE);
 800987c:	4604      	mov	r4, r0
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
 800987e:	2131      	movs	r1, #49	; 0x31
 8009880:	4630      	mov	r0, r6
 8009882:	f7ff fd75 	bl	8009370 <_mmcsd_get_slice>
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
 8009886:	2250      	movs	r2, #80	; 0x50
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
 8009888:	4607      	mov	r7, r0
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
 800988a:	2153      	movs	r1, #83	; 0x53
 800988c:	4630      	mov	r0, r6
 800988e:	f7ff fd6f 	bl	8009370 <_mmcsd_get_slice>
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
 8009892:	3401      	adds	r4, #1
 8009894:	1cbb      	adds	r3, r7, #2
 8009896:	3809      	subs	r0, #9
 8009898:	409c      	lsls	r4, r3
 800989a:	fa04 f300 	lsl.w	r3, r4, r0
 800989e:	e7d2      	b.n	8009846 <mmcConnect+0x1c6>
 80098a0:	20001698 	.word	0x20001698
 80098a4:	0800fcc0 	.word	0x0800fcc0
 80098a8:	0800fd60 	.word	0x0800fd60
 80098ac:	400001aa 	.word	0x400001aa

080098b0 <mmcSequentialWrite.part.8>:
bool mmcSequentialWrite(MMCDriver *mmcp, const uint8_t *buffer) {
 80098b0:	b530      	push	{r4, r5, lr}
  spiSend(mmcp->config->spip, sizeof(start), start);    /* Data prologue.   */
 80098b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80098b4:	4a19      	ldr	r2, [pc, #100]	; (800991c <mmcSequentialWrite.part.8+0x6c>)
bool mmcSequentialWrite(MMCDriver *mmcp, const uint8_t *buffer) {
 80098b6:	4604      	mov	r4, r0
 80098b8:	b083      	sub	sp, #12
  spiSend(mmcp->config->spip, sizeof(start), start);    /* Data prologue.   */
 80098ba:	6818      	ldr	r0, [r3, #0]
bool mmcSequentialWrite(MMCDriver *mmcp, const uint8_t *buffer) {
 80098bc:	460d      	mov	r5, r1
  spiSend(mmcp->config->spip, sizeof(start), start);    /* Data prologue.   */
 80098be:	2102      	movs	r1, #2
 80098c0:	f000 fe3e 	bl	800a540 <spiSend>
  spiSend(mmcp->config->spip, MMCSD_BLOCK_SIZE, buffer);/* Data.            */
 80098c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80098c6:	462a      	mov	r2, r5
 80098c8:	6818      	ldr	r0, [r3, #0]
 80098ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80098ce:	f000 fe37 	bl	800a540 <spiSend>
  spiIgnore(mmcp->config->spip, 2);                     /* CRC ignored.     */
 80098d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80098d4:	2102      	movs	r1, #2
 80098d6:	6818      	ldr	r0, [r3, #0]
 80098d8:	f000 fef2 	bl	800a6c0 <spiIgnore>
  spiReceive(mmcp->config->spip, 1, b);
 80098dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80098de:	aa01      	add	r2, sp, #4
 80098e0:	6818      	ldr	r0, [r3, #0]
 80098e2:	2101      	movs	r1, #1
 80098e4:	f000 fe8c 	bl	800a600 <spiReceive>
  if ((b[0] & 0x1FU) == 0x05U) {
 80098e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80098ec:	f003 031f 	and.w	r3, r3, #31
 80098f0:	2b05      	cmp	r3, #5
 80098f2:	d00c      	beq.n	800990e <mmcSequentialWrite.part.8+0x5e>
  spiUnselect(mmcp->config->spip);
 80098f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80098f6:	6818      	ldr	r0, [r3, #0]
 80098f8:	f000 ff42 	bl	800a780 <spiUnselect>
  spiStop(mmcp->config->spip);
 80098fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80098fe:	6818      	ldr	r0, [r3, #0]
 8009900:	f000 ffbe 	bl	800a880 <spiStop>
  mmcp->state = BLK_READY;
 8009904:	2305      	movs	r3, #5
  return HAL_FAILED;
 8009906:	2001      	movs	r0, #1
  mmcp->state = BLK_READY;
 8009908:	7123      	strb	r3, [r4, #4]
}
 800990a:	b003      	add	sp, #12
 800990c:	bd30      	pop	{r4, r5, pc}
    wait(mmcp);
 800990e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8009912:	f7ff fd8d 	bl	8009430 <wait.isra.2>
    return HAL_SUCCESS;
 8009916:	2000      	movs	r0, #0
}
 8009918:	b003      	add	sp, #12
 800991a:	bd30      	pop	{r4, r5, pc}
 800991c:	0800fe60 	.word	0x0800fe60

08009920 <mmcStopSequentialRead.part.6>:
bool mmcStopSequentialRead(MMCDriver *mmcp) {
 8009920:	b538      	push	{r3, r4, r5, lr}
  spiSend(mmcp->config->spip, sizeof(stopcmd), stopcmd);
 8009922:	4605      	mov	r5, r0
bool mmcStopSequentialRead(MMCDriver *mmcp) {
 8009924:	4604      	mov	r4, r0
  spiSend(mmcp->config->spip, sizeof(stopcmd), stopcmd);
 8009926:	f855 3f2c 	ldr.w	r3, [r5, #44]!
 800992a:	4a08      	ldr	r2, [pc, #32]	; (800994c <mmcStopSequentialRead.part.6+0x2c>)
 800992c:	6818      	ldr	r0, [r3, #0]
 800992e:	2107      	movs	r1, #7
 8009930:	f000 fe06 	bl	800a540 <spiSend>
  (void) recvr1(mmcp);
 8009934:	4628      	mov	r0, r5
 8009936:	f7ff fd63 	bl	8009400 <recvr1.isra.0>
  spiUnselect(mmcp->config->spip);
 800993a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800993c:	6818      	ldr	r0, [r3, #0]
 800993e:	f000 ff1f 	bl	800a780 <spiUnselect>
  mmcp->state = BLK_READY;
 8009942:	2305      	movs	r3, #5
 8009944:	7123      	strb	r3, [r4, #4]
}
 8009946:	2000      	movs	r0, #0
 8009948:	bd38      	pop	{r3, r4, r5, pc}
 800994a:	bf00      	nop
 800994c:	0800fe70 	.word	0x0800fe70

08009950 <mmcStartSequentialWrite>:
bool mmcStartSequentialWrite(MMCDriver *mmcp, uint32_t startblk) {
 8009950:	b538      	push	{r3, r4, r5, lr}
  osalDbgCheck(mmcp != NULL);
 8009952:	b310      	cbz	r0, 800999a <mmcStartSequentialWrite+0x4a>
  osalDbgAssert(mmcp->state == BLK_READY, "invalid state");
 8009954:	7903      	ldrb	r3, [r0, #4]
 8009956:	2b05      	cmp	r3, #5
 8009958:	d004      	beq.n	8009964 <mmcStartSequentialWrite+0x14>
 800995a:	b672      	cpsid	i
 800995c:	4b1b      	ldr	r3, [pc, #108]	; (80099cc <mmcStartSequentialWrite+0x7c>)
 800995e:	4a1c      	ldr	r2, [pc, #112]	; (80099d0 <mmcStartSequentialWrite+0x80>)
 8009960:	62da      	str	r2, [r3, #44]	; 0x2c
 8009962:	e7fe      	b.n	8009962 <mmcStartSequentialWrite+0x12>
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 8009964:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  mmcp->state = BLK_WRITING;
 8009966:	2207      	movs	r2, #7
 8009968:	7102      	strb	r2, [r0, #4]
 800996a:	4604      	mov	r4, r0
 800996c:	460d      	mov	r5, r1
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 800996e:	6818      	ldr	r0, [r3, #0]
 8009970:	6899      	ldr	r1, [r3, #8]
 8009972:	f000 ffd5 	bl	800a920 <spiStart>
  spiSelect(mmcp->config->spip);
 8009976:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009978:	6818      	ldr	r0, [r3, #0]
 800997a:	f000 ff41 	bl	800a800 <spiSelect>
  if (mmcp->block_addresses) {
 800997e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009982:	b17b      	cbz	r3, 80099a4 <mmcStartSequentialWrite+0x54>
    send_hdr(mmcp, MMCSD_CMD_WRITE_MULTIPLE_BLOCK, startblk);
 8009984:	4620      	mov	r0, r4
 8009986:	462a      	mov	r2, r5
 8009988:	2119      	movs	r1, #25
 800998a:	f7ff fd79 	bl	8009480 <send_hdr>
  if (recvr1(mmcp) != 0x00U) {
 800998e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8009992:	f7ff fd35 	bl	8009400 <recvr1.isra.0>
 8009996:	b980      	cbnz	r0, 80099ba <mmcStartSequentialWrite+0x6a>
}
 8009998:	bd38      	pop	{r3, r4, r5, pc}
 800999a:	b672      	cpsid	i
 800999c:	4b0b      	ldr	r3, [pc, #44]	; (80099cc <mmcStartSequentialWrite+0x7c>)
 800999e:	4a0c      	ldr	r2, [pc, #48]	; (80099d0 <mmcStartSequentialWrite+0x80>)
 80099a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80099a2:	e7fe      	b.n	80099a2 <mmcStartSequentialWrite+0x52>
    send_hdr(mmcp, MMCSD_CMD_WRITE_MULTIPLE_BLOCK,
 80099a4:	4620      	mov	r0, r4
 80099a6:	026a      	lsls	r2, r5, #9
 80099a8:	2119      	movs	r1, #25
 80099aa:	f7ff fd69 	bl	8009480 <send_hdr>
  if (recvr1(mmcp) != 0x00U) {
 80099ae:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80099b2:	f7ff fd25 	bl	8009400 <recvr1.isra.0>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d0ee      	beq.n	8009998 <mmcStartSequentialWrite+0x48>
    spiStop(mmcp->config->spip);
 80099ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80099bc:	6818      	ldr	r0, [r3, #0]
 80099be:	f000 ff5f 	bl	800a880 <spiStop>
    mmcp->state = BLK_READY;
 80099c2:	2305      	movs	r3, #5
 80099c4:	7123      	strb	r3, [r4, #4]
    return HAL_FAILED;
 80099c6:	2001      	movs	r0, #1
}
 80099c8:	bd38      	pop	{r3, r4, r5, pc}
 80099ca:	bf00      	nop
 80099cc:	20001698 	.word	0x20001698
 80099d0:	0800fd20 	.word	0x0800fd20
	...

080099e0 <mmc_write.lto_priv.78>:
                 const uint8_t *buffer, uint32_t n) {
 80099e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e2:	4615      	mov	r5, r2
 80099e4:	461e      	mov	r6, r3
 80099e6:	4604      	mov	r4, r0
  if (mmcStartSequentialWrite((MMCDriver *)instance, startblk)) {
 80099e8:	f7ff ffb2 	bl	8009950 <mmcStartSequentialWrite>
 80099ec:	b930      	cbnz	r0, 80099fc <mmc_write.lto_priv.78+0x1c>
 80099ee:	4607      	mov	r7, r0
  while (n > 0U) {
 80099f0:	b1be      	cbz	r6, 8009a22 <mmc_write.lto_priv.78+0x42>
  osalDbgCheck((mmcp != NULL) && (buffer != NULL));
 80099f2:	b134      	cbz	r4, 8009a02 <mmc_write.lto_priv.78+0x22>
 80099f4:	b12d      	cbz	r5, 8009a02 <mmc_write.lto_priv.78+0x22>
  if (mmcp->state != BLK_WRITING) {
 80099f6:	7923      	ldrb	r3, [r4, #4]
 80099f8:	2b07      	cmp	r3, #7
 80099fa:	d007      	beq.n	8009a0c <mmc_write.lto_priv.78+0x2c>
    return HAL_FAILED;
 80099fc:	2701      	movs	r7, #1
}
 80099fe:	4638      	mov	r0, r7
 8009a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a02:	b672      	cpsid	i
 8009a04:	4b12      	ldr	r3, [pc, #72]	; (8009a50 <mmc_write.lto_priv.78+0x70>)
 8009a06:	4a13      	ldr	r2, [pc, #76]	; (8009a54 <mmc_write.lto_priv.78+0x74>)
 8009a08:	62da      	str	r2, [r3, #44]	; 0x2c
 8009a0a:	e7fe      	b.n	8009a0a <mmc_write.lto_priv.78+0x2a>
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f7ff ff4e 	bl	80098b0 <mmcSequentialWrite.part.8>
    buffer += MMCSD_BLOCK_SIZE;
 8009a14:	f505 7500 	add.w	r5, r5, #512	; 0x200
    if (mmcSequentialWrite((MMCDriver *)instance, buffer)) {
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d1ef      	bne.n	80099fc <mmc_write.lto_priv.78+0x1c>
  while (n > 0U) {
 8009a1c:	3e01      	subs	r6, #1
 8009a1e:	d1e9      	bne.n	80099f4 <mmc_write.lto_priv.78+0x14>
 8009a20:	e000      	b.n	8009a24 <mmc_write.lto_priv.78+0x44>
  osalDbgCheck(mmcp != NULL);
 8009a22:	b184      	cbz	r4, 8009a46 <mmc_write.lto_priv.78+0x66>
  if (mmcp->state != BLK_WRITING) {
 8009a24:	7923      	ldrb	r3, [r4, #4]
 8009a26:	2b07      	cmp	r3, #7
 8009a28:	d1e8      	bne.n	80099fc <mmc_write.lto_priv.78+0x1c>
  spiSend(mmcp->config->spip, sizeof(stop), stop);
 8009a2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a2c:	4a0a      	ldr	r2, [pc, #40]	; (8009a58 <mmc_write.lto_priv.78+0x78>)
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	2102      	movs	r1, #2
 8009a32:	f000 fd85 	bl	800a540 <spiSend>
  spiUnselect(mmcp->config->spip);
 8009a36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	f000 fea1 	bl	800a780 <spiUnselect>
  mmcp->state = BLK_READY;
 8009a3e:	2305      	movs	r3, #5
 8009a40:	7123      	strb	r3, [r4, #4]
}
 8009a42:	4638      	mov	r0, r7
 8009a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a46:	b672      	cpsid	i
 8009a48:	4b01      	ldr	r3, [pc, #4]	; (8009a50 <mmc_write.lto_priv.78+0x70>)
 8009a4a:	4a04      	ldr	r2, [pc, #16]	; (8009a5c <mmc_write.lto_priv.78+0x7c>)
 8009a4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8009a4e:	e7fe      	b.n	8009a4e <mmc_write.lto_priv.78+0x6e>
 8009a50:	20001698 	.word	0x20001698
 8009a54:	0800fbe0 	.word	0x0800fbe0
 8009a58:	0800fc20 	.word	0x0800fc20
 8009a5c:	0800fc00 	.word	0x0800fc00

08009a60 <mmcSequentialRead>:
  osalDbgCheck((mmcp != NULL) && (buffer != NULL));
 8009a60:	b320      	cbz	r0, 8009aac <mmcSequentialRead+0x4c>
 8009a62:	b319      	cbz	r1, 8009aac <mmcSequentialRead+0x4c>
  if (mmcp->state != BLK_READING) {
 8009a64:	7903      	ldrb	r3, [r0, #4]
 8009a66:	2b06      	cmp	r3, #6
 8009a68:	d001      	beq.n	8009a6e <mmcSequentialRead+0xe>
    return HAL_FAILED;
 8009a6a:	2001      	movs	r0, #1
 8009a6c:	4770      	bx	lr
bool mmcSequentialRead(MMCDriver *mmcp, uint8_t *buffer) {
 8009a6e:	b570      	push	{r4, r5, r6, lr}
 8009a70:	4604      	mov	r4, r0
 8009a72:	460d      	mov	r5, r1
  if (mmcp->state != BLK_READING) {
 8009a74:	f242 7610 	movw	r6, #10000	; 0x2710
 8009a78:	e001      	b.n	8009a7e <mmcSequentialRead+0x1e>
  for (i = 0; i < MMC_WAIT_DATA; i++) {
 8009a7a:	3e01      	subs	r6, #1
 8009a7c:	d01b      	beq.n	8009ab6 <mmcSequentialRead+0x56>
    spiReceive(mmcp->config->spip, 1, buffer);
 8009a7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a80:	462a      	mov	r2, r5
 8009a82:	6818      	ldr	r0, [r3, #0]
 8009a84:	2101      	movs	r1, #1
 8009a86:	f000 fdbb 	bl	800a600 <spiReceive>
    if (buffer[0] == 0xFEU) {
 8009a8a:	782b      	ldrb	r3, [r5, #0]
 8009a8c:	2bfe      	cmp	r3, #254	; 0xfe
 8009a8e:	d1f4      	bne.n	8009a7a <mmcSequentialRead+0x1a>
      spiReceive(mmcp->config->spip, MMCSD_BLOCK_SIZE, buffer);
 8009a90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a92:	462a      	mov	r2, r5
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a9a:	f000 fdb1 	bl	800a600 <spiReceive>
      spiIgnore(mmcp->config->spip, 2);
 8009a9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009aa0:	2102      	movs	r1, #2
 8009aa2:	6818      	ldr	r0, [r3, #0]
 8009aa4:	f000 fe0c 	bl	800a6c0 <spiIgnore>
      return HAL_SUCCESS;
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	bd70      	pop	{r4, r5, r6, pc}
 8009aac:	b672      	cpsid	i
 8009aae:	4b08      	ldr	r3, [pc, #32]	; (8009ad0 <mmcSequentialRead+0x70>)
 8009ab0:	4a08      	ldr	r2, [pc, #32]	; (8009ad4 <mmcSequentialRead+0x74>)
 8009ab2:	62da      	str	r2, [r3, #44]	; 0x2c
 8009ab4:	e7fe      	b.n	8009ab4 <mmcSequentialRead+0x54>
  spiUnselect(mmcp->config->spip);
 8009ab6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009ab8:	6818      	ldr	r0, [r3, #0]
 8009aba:	f000 fe61 	bl	800a780 <spiUnselect>
  spiStop(mmcp->config->spip);
 8009abe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009ac0:	6818      	ldr	r0, [r3, #0]
 8009ac2:	f000 fedd 	bl	800a880 <spiStop>
  mmcp->state = BLK_READY;
 8009ac6:	2305      	movs	r3, #5
 8009ac8:	7123      	strb	r3, [r4, #4]
 8009aca:	2001      	movs	r0, #1
 8009acc:	bd70      	pop	{r4, r5, r6, pc}
 8009ace:	bf00      	nop
 8009ad0:	20001698 	.word	0x20001698
 8009ad4:	0800fd00 	.word	0x0800fd00
	...

08009ae0 <mmcStartSequentialRead>:
bool mmcStartSequentialRead(MMCDriver *mmcp, uint32_t startblk) {
 8009ae0:	b538      	push	{r3, r4, r5, lr}
  osalDbgCheck(mmcp != NULL);
 8009ae2:	b310      	cbz	r0, 8009b2a <mmcStartSequentialRead+0x4a>
  osalDbgAssert(mmcp->state == BLK_READY, "invalid state");
 8009ae4:	7903      	ldrb	r3, [r0, #4]
 8009ae6:	2b05      	cmp	r3, #5
 8009ae8:	d004      	beq.n	8009af4 <mmcStartSequentialRead+0x14>
 8009aea:	b672      	cpsid	i
 8009aec:	4b1b      	ldr	r3, [pc, #108]	; (8009b5c <mmcStartSequentialRead+0x7c>)
 8009aee:	4a1c      	ldr	r2, [pc, #112]	; (8009b60 <mmcStartSequentialRead+0x80>)
 8009af0:	62da      	str	r2, [r3, #44]	; 0x2c
 8009af2:	e7fe      	b.n	8009af2 <mmcStartSequentialRead+0x12>
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 8009af4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  mmcp->state = BLK_READING;
 8009af6:	2206      	movs	r2, #6
 8009af8:	7102      	strb	r2, [r0, #4]
 8009afa:	4604      	mov	r4, r0
 8009afc:	460d      	mov	r5, r1
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 8009afe:	6818      	ldr	r0, [r3, #0]
 8009b00:	6899      	ldr	r1, [r3, #8]
 8009b02:	f000 ff0d 	bl	800a920 <spiStart>
  spiSelect(mmcp->config->spip);
 8009b06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b08:	6818      	ldr	r0, [r3, #0]
 8009b0a:	f000 fe79 	bl	800a800 <spiSelect>
  if (mmcp->block_addresses) {
 8009b0e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009b12:	b17b      	cbz	r3, 8009b34 <mmcStartSequentialRead+0x54>
    send_hdr(mmcp, MMCSD_CMD_READ_MULTIPLE_BLOCK, startblk);
 8009b14:	4620      	mov	r0, r4
 8009b16:	462a      	mov	r2, r5
 8009b18:	2112      	movs	r1, #18
 8009b1a:	f7ff fcb1 	bl	8009480 <send_hdr>
  if (recvr1(mmcp) != 0x00U) {
 8009b1e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8009b22:	f7ff fc6d 	bl	8009400 <recvr1.isra.0>
 8009b26:	b980      	cbnz	r0, 8009b4a <mmcStartSequentialRead+0x6a>
}
 8009b28:	bd38      	pop	{r3, r4, r5, pc}
 8009b2a:	b672      	cpsid	i
 8009b2c:	4b0b      	ldr	r3, [pc, #44]	; (8009b5c <mmcStartSequentialRead+0x7c>)
 8009b2e:	4a0c      	ldr	r2, [pc, #48]	; (8009b60 <mmcStartSequentialRead+0x80>)
 8009b30:	62da      	str	r2, [r3, #44]	; 0x2c
 8009b32:	e7fe      	b.n	8009b32 <mmcStartSequentialRead+0x52>
    send_hdr(mmcp, MMCSD_CMD_READ_MULTIPLE_BLOCK, startblk * MMCSD_BLOCK_SIZE);
 8009b34:	4620      	mov	r0, r4
 8009b36:	026a      	lsls	r2, r5, #9
 8009b38:	2112      	movs	r1, #18
 8009b3a:	f7ff fca1 	bl	8009480 <send_hdr>
  if (recvr1(mmcp) != 0x00U) {
 8009b3e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8009b42:	f7ff fc5d 	bl	8009400 <recvr1.isra.0>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d0ee      	beq.n	8009b28 <mmcStartSequentialRead+0x48>
    spiStop(mmcp->config->spip);
 8009b4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b4c:	6818      	ldr	r0, [r3, #0]
 8009b4e:	f000 fe97 	bl	800a880 <spiStop>
    mmcp->state = BLK_READY;
 8009b52:	2305      	movs	r3, #5
 8009b54:	7123      	strb	r3, [r4, #4]
    return HAL_FAILED;
 8009b56:	2001      	movs	r0, #1
}
 8009b58:	bd38      	pop	{r3, r4, r5, pc}
 8009b5a:	bf00      	nop
 8009b5c:	20001698 	.word	0x20001698
 8009b60:	0800fce0 	.word	0x0800fce0
	...

08009b70 <mmc_read.lto_priv.77>:
                uint8_t *buffer, uint32_t n) {
 8009b70:	b570      	push	{r4, r5, r6, lr}
 8009b72:	4614      	mov	r4, r2
 8009b74:	461d      	mov	r5, r3
 8009b76:	4606      	mov	r6, r0
  if (mmcStartSequentialRead((MMCDriver *)instance, startblk)) {
 8009b78:	f7ff ffb2 	bl	8009ae0 <mmcStartSequentialRead>
 8009b7c:	b958      	cbnz	r0, 8009b96 <mmc_read.lto_priv.77+0x26>
  while (n > 0U) {
 8009b7e:	b915      	cbnz	r5, 8009b86 <mmc_read.lto_priv.77+0x16>
 8009b80:	e00b      	b.n	8009b9a <mmc_read.lto_priv.77+0x2a>
 8009b82:	3d01      	subs	r5, #1
 8009b84:	d009      	beq.n	8009b9a <mmc_read.lto_priv.77+0x2a>
    if (mmcSequentialRead((MMCDriver *)instance, buffer)) {
 8009b86:	4621      	mov	r1, r4
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f7ff ff69 	bl	8009a60 <mmcSequentialRead>
    buffer += MMCSD_BLOCK_SIZE;
 8009b8e:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (mmcSequentialRead((MMCDriver *)instance, buffer)) {
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d0f5      	beq.n	8009b82 <mmc_read.lto_priv.77+0x12>
}
 8009b96:	2001      	movs	r0, #1
 8009b98:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgCheck(mmcp != NULL);
 8009b9a:	b13e      	cbz	r6, 8009bac <mmc_read.lto_priv.77+0x3c>
  if (mmcp->state != BLK_READING) {
 8009b9c:	7933      	ldrb	r3, [r6, #4]
 8009b9e:	2b06      	cmp	r3, #6
 8009ba0:	d1f9      	bne.n	8009b96 <mmc_read.lto_priv.77+0x26>
 8009ba2:	4630      	mov	r0, r6
}
 8009ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ba8:	f7ff beba 	b.w	8009920 <mmcStopSequentialRead.part.6>
 8009bac:	b672      	cpsid	i
 8009bae:	4b02      	ldr	r3, [pc, #8]	; (8009bb8 <mmc_read.lto_priv.77+0x48>)
 8009bb0:	4a02      	ldr	r2, [pc, #8]	; (8009bbc <mmc_read.lto_priv.77+0x4c>)
 8009bb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8009bb4:	e7fe      	b.n	8009bb4 <mmc_read.lto_priv.77+0x44>
 8009bb6:	bf00      	nop
 8009bb8:	20001698 	.word	0x20001698
 8009bbc:	0800fbc0 	.word	0x0800fbc0

08009bc0 <stSetAlarm>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8009bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009bc4:	68da      	ldr	r2, [r3, #12]
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8009bc6:	0792      	lsls	r2, r2, #30
 8009bc8:	d501      	bpl.n	8009bce <stSetAlarm+0xe>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8009bca:	6358      	str	r0, [r3, #52]	; 0x34
 8009bcc:	4770      	bx	lr
 8009bce:	b672      	cpsid	i
 8009bd0:	4b01      	ldr	r3, [pc, #4]	; (8009bd8 <stSetAlarm+0x18>)
 8009bd2:	4a02      	ldr	r2, [pc, #8]	; (8009bdc <stSetAlarm+0x1c>)
 8009bd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8009bd6:	e7fe      	b.n	8009bd6 <stSetAlarm+0x16>
 8009bd8:	20001698 	.word	0x20001698
 8009bdc:	0800fcb0 	.word	0x0800fcb0

08009be0 <_port_irq_epilogue>:
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8009be0:	2320      	movs	r3, #32
 8009be2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8009be6:	4b11      	ldr	r3, [pc, #68]	; (8009c2c <_port_irq_epilogue+0x4c>)
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8009bee:	d102      	bne.n	8009bf6 <_port_irq_epilogue+0x16>
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	4770      	bx	lr
void _port_irq_epilogue(void) {
 8009bf6:	b480      	push	{r7}
 8009bf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8009bfa:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8009bfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c02:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8009c06:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8009c0a:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8009c0e:	4a08      	ldr	r2, [pc, #32]	; (8009c30 <_port_irq_epilogue+0x50>)
 8009c10:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8009c12:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8009c14:	6889      	ldr	r1, [r1, #8]
 8009c16:	6892      	ldr	r2, [r2, #8]
 8009c18:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8009c1a:	bf8c      	ite	hi
 8009c1c:	4a05      	ldrhi	r2, [pc, #20]	; (8009c34 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8009c1e:	4a06      	ldrls	r2, [pc, #24]	; (8009c38 <_port_irq_epilogue+0x58>)
 8009c20:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bc80      	pop	{r7}
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	e000ed00 	.word	0xe000ed00
 8009c30:	20001698 	.word	0x20001698
 8009c34:	080002b9 	.word	0x080002b9
 8009c38:	080002cc 	.word	0x080002cc
 8009c3c:	00000000 	.word	0x00000000

08009c40 <mmcDisconnect>:
bool mmcDisconnect(MMCDriver *mmcp) {
 8009c40:	b538      	push	{r3, r4, r5, lr}
  osalDbgCheck(mmcp != NULL);
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d047      	beq.n	8009cd6 <mmcDisconnect+0x96>
 8009c46:	4604      	mov	r4, r0
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8009c48:	2320      	movs	r3, #32
 8009c4a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009c4e:	f002 fb0f 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009c52:	f002 fd85 	bl	800c760 <_dbg_check_lock>
  osalDbgAssert((mmcp->state == BLK_ACTIVE) || (mmcp->state == BLK_READY),
 8009c56:	7923      	ldrb	r3, [r4, #4]
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d02a      	beq.n	8009cb2 <mmcDisconnect+0x72>
 8009c5c:	2b05      	cmp	r3, #5
 8009c5e:	d004      	beq.n	8009c6a <mmcDisconnect+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8009c60:	b672      	cpsid	i
 8009c62:	4b23      	ldr	r3, [pc, #140]	; (8009cf0 <mmcDisconnect+0xb0>)
 8009c64:	4a23      	ldr	r2, [pc, #140]	; (8009cf4 <mmcDisconnect+0xb4>)
 8009c66:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c68:	e7fe      	b.n	8009c68 <mmcDisconnect+0x28>
  mmcp->state = BLK_DISCONNECTING;
 8009c6a:	2304      	movs	r3, #4
 8009c6c:	7123      	strb	r3, [r4, #4]
  _dbg_check_unlock();
 8009c6e:	f002 fd67 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009c72:	f002 fae5 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8009c76:	4b1e      	ldr	r3, [pc, #120]	; (8009cf0 <mmcDisconnect+0xb0>)
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d004      	beq.n	8009c88 <mmcDisconnect+0x48>
 8009c7e:	6999      	ldr	r1, [r3, #24]
 8009c80:	6892      	ldr	r2, [r2, #8]
 8009c82:	6889      	ldr	r1, [r1, #8]
 8009c84:	4291      	cmp	r1, r2
 8009c86:	d32f      	bcc.n	8009ce8 <mmcDisconnect+0xa8>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f383 8811 	msr	BASEPRI, r3
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 8009c8e:	4625      	mov	r5, r4
 8009c90:	f855 3f2c 	ldr.w	r3, [r5, #44]!
 8009c94:	6899      	ldr	r1, [r3, #8]
 8009c96:	6818      	ldr	r0, [r3, #0]
 8009c98:	f000 fe42 	bl	800a920 <spiStart>
  sync(mmcp);
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f7ff fc27 	bl	80094f0 <sync.isra.3>
  spiStop(mmcp->config->spip);
 8009ca2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009ca4:	6818      	ldr	r0, [r3, #0]
 8009ca6:	f000 fdeb 	bl	800a880 <spiStop>
  mmcp->state = BLK_ACTIVE;
 8009caa:	2302      	movs	r3, #2
 8009cac:	7123      	strb	r3, [r4, #4]
}
 8009cae:	2000      	movs	r0, #0
 8009cb0:	bd38      	pop	{r3, r4, r5, pc}
  _dbg_check_unlock();
 8009cb2:	f002 fd45 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009cb6:	f002 fac3 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8009cba:	4b0d      	ldr	r3, [pc, #52]	; (8009cf0 <mmcDisconnect+0xb0>)
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d004      	beq.n	8009ccc <mmcDisconnect+0x8c>
 8009cc2:	6999      	ldr	r1, [r3, #24]
 8009cc4:	6892      	ldr	r2, [r2, #8]
 8009cc6:	6889      	ldr	r1, [r1, #8]
 8009cc8:	4291      	cmp	r1, r2
 8009cca:	d309      	bcc.n	8009ce0 <mmcDisconnect+0xa0>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8009cd6:	b672      	cpsid	i
 8009cd8:	4b05      	ldr	r3, [pc, #20]	; (8009cf0 <mmcDisconnect+0xb0>)
 8009cda:	4a06      	ldr	r2, [pc, #24]	; (8009cf4 <mmcDisconnect+0xb4>)
 8009cdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8009cde:	e7fe      	b.n	8009cde <mmcDisconnect+0x9e>
 8009ce0:	b672      	cpsid	i
 8009ce2:	4a05      	ldr	r2, [pc, #20]	; (8009cf8 <mmcDisconnect+0xb8>)
 8009ce4:	62da      	str	r2, [r3, #44]	; 0x2c
 8009ce6:	e7fe      	b.n	8009ce6 <mmcDisconnect+0xa6>
 8009ce8:	b672      	cpsid	i
 8009cea:	4a03      	ldr	r2, [pc, #12]	; (8009cf8 <mmcDisconnect+0xb8>)
 8009cec:	62da      	str	r2, [r3, #44]	; 0x2c
 8009cee:	e7fe      	b.n	8009cee <mmcDisconnect+0xae>
 8009cf0:	20001698 	.word	0x20001698
 8009cf4:	0800fcd0 	.word	0x0800fcd0
 8009cf8:	0800fc60 	.word	0x0800fc60
 8009cfc:	00000000 	.word	0x00000000

08009d00 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8009d00:	b510      	push	{r4, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8009d02:	2320      	movs	r3, #32
 8009d04:	4604      	mov	r4, r0
 8009d06:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 8009d0a:	f002 fab1 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009d0e:	f002 fd27 	bl	800c760 <_dbg_check_lock>
 * @iclass
 */
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();
 8009d12:	f002 fb75 	bl	800c400 <chDbgCheckClassI>

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8009d16:	4812      	ldr	r0, [pc, #72]	; (8009d60 <chCoreAlloc+0x60>)
 8009d18:	4b12      	ldr	r3, [pc, #72]	; (8009d64 <chCoreAlloc+0x64>)
 8009d1a:	6802      	ldr	r2, [r0, #0]
 8009d1c:	6819      	ldr	r1, [r3, #0]
  size = MEM_ALIGN_NEXT(size);
 8009d1e:	1de3      	adds	r3, r4, #7
 8009d20:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size) {
 8009d24:	1a89      	subs	r1, r1, r2
 8009d26:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8009d28:	bf9d      	ittte	ls
 8009d2a:	189b      	addls	r3, r3, r2
 8009d2c:	6003      	strls	r3, [r0, #0]

  return p;
 8009d2e:	4614      	movls	r4, r2
    return NULL;
 8009d30:	2400      	movhi	r4, #0
  _dbg_check_unlock();
 8009d32:	f002 fd05 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009d36:	f002 fa83 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8009d3a:	4b0b      	ldr	r3, [pc, #44]	; (8009d68 <chCoreAlloc+0x68>)
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d004      	beq.n	8009d4c <chCoreAlloc+0x4c>
 8009d42:	6999      	ldr	r1, [r3, #24]
 8009d44:	6892      	ldr	r2, [r2, #8]
 8009d46:	6889      	ldr	r1, [r1, #8]
 8009d48:	4291      	cmp	r1, r2
 8009d4a:	d304      	bcc.n	8009d56 <chCoreAlloc+0x56>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f383 8811 	msr	BASEPRI, r3
}
 8009d52:	4620      	mov	r0, r4
 8009d54:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8009d56:	b672      	cpsid	i
 8009d58:	4a04      	ldr	r2, [pc, #16]	; (8009d6c <chCoreAlloc+0x6c>)
 8009d5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8009d5c:	e7fe      	b.n	8009d5c <chCoreAlloc+0x5c>
 8009d5e:	bf00      	nop
 8009d60:	200013f8 	.word	0x200013f8
 8009d64:	20001368 	.word	0x20001368
 8009d68:	20001698 	.word	0x20001698
 8009d6c:	0800fc50 	.word	0x0800fc50

08009d70 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8009d70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  qnotify_t nfy = oqp->q_notify;
  size_t w = 0;

  chDbgCheck(n > 0U);
 8009d74:	2a00      	cmp	r2, #0
 8009d76:	d065      	beq.n	8009e44 <chOQWriteTimeout+0xd4>
 8009d78:	4604      	mov	r4, r0
 8009d7a:	4689      	mov	r9, r1
 8009d7c:	469b      	mov	fp, r3
 8009d7e:	4690      	mov	r8, r2
  qnotify_t nfy = oqp->q_notify;
 8009d80:	f8d0 a01c 	ldr.w	sl, [r0, #28]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8009d84:	2720      	movs	r7, #32
 8009d86:	f387 8811 	msr	BASEPRI, r7
  _stats_start_measure_crit_thd();
 8009d8a:	f002 fa71 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009d8e:	f002 fce7 	bl	800c760 <_dbg_check_lock>
 8009d92:	4d31      	ldr	r5, [pc, #196]	; (8009e58 <chOQWriteTimeout+0xe8>)
  size_t w = 0;
 8009d94:	2600      	movs	r6, #0
  chDbgCheckClassI();
 8009d96:	f002 fb33 	bl	800c400 <chDbgCheckClassI>
  return (bool)(chQSpaceI(oqp) == 0U);
 8009d9a:	68a3      	ldr	r3, [r4, #8]
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8009d9c:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d034      	beq.n	8009e0c <chOQWriteTimeout+0x9c>
    *oqp->q_wrptr++ = *bp++;
 8009da2:	6962      	ldr	r2, [r4, #20]
    oqp->q_counter--;
 8009da4:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8009da6:	1c51      	adds	r1, r2, #1
    oqp->q_counter--;
 8009da8:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 8009daa:	6161      	str	r1, [r4, #20]
    oqp->q_counter--;
 8009dac:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8009dae:	f899 3000 	ldrb.w	r3, [r9]
 8009db2:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8009db4:	6923      	ldr	r3, [r4, #16]
 8009db6:	6962      	ldr	r2, [r4, #20]
 8009db8:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 8009dba:	bf24      	itt	cs
 8009dbc:	68e3      	ldrcs	r3, [r4, #12]
 8009dbe:	6163      	strcs	r3, [r4, #20]
    if (nfy != NULL) {
 8009dc0:	f1ba 0f00 	cmp.w	sl, #0
 8009dc4:	d000      	beq.n	8009dc8 <chOQWriteTimeout+0x58>
      nfy(oqp);
 8009dc6:	47d0      	blx	sl
  _dbg_check_unlock();
 8009dc8:	f002 fcba 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009dcc:	f002 fa38 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8009dd0:	682b      	ldr	r3, [r5, #0]
 8009dd2:	42ab      	cmp	r3, r5
 8009dd4:	d004      	beq.n	8009de0 <chOQWriteTimeout+0x70>
 8009dd6:	69aa      	ldr	r2, [r5, #24]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	6892      	ldr	r2, [r2, #8]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d32d      	bcc.n	8009e3c <chOQWriteTimeout+0xcc>
 8009de0:	2300      	movs	r3, #0
 8009de2:	f383 8811 	msr	BASEPRI, r3
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8009de6:	f1b8 0801 	subs.w	r8, r8, #1
    w++;
 8009dea:	f106 0601 	add.w	r6, r6, #1
    *oqp->q_wrptr++ = *bp++;
 8009dee:	f109 0901 	add.w	r9, r9, #1
    if (--n == 0U) {
 8009df2:	d020      	beq.n	8009e36 <chOQWriteTimeout+0xc6>
 8009df4:	f387 8811 	msr	BASEPRI, r7
  _stats_start_measure_crit_thd();
 8009df8:	f002 fa3a 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8009dfc:	f002 fcb0 	bl	800c760 <_dbg_check_lock>
  chDbgCheckClassI();
 8009e00:	f002 fafe 	bl	800c400 <chDbgCheckClassI>
  return (bool)(chQSpaceI(oqp) == 0U);
 8009e04:	68a3      	ldr	r3, [r4, #8]
      nfy(oqp);
 8009e06:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1ca      	bne.n	8009da2 <chOQWriteTimeout+0x32>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8009e0c:	4659      	mov	r1, fp
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f002 fbbe 	bl	800c590 <chThdEnqueueTimeoutS>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d0be      	beq.n	8009d96 <chOQWriteTimeout+0x26>
  _dbg_check_unlock();
 8009e18:	f002 fc92 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8009e1c:	f002 fa10 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	42ab      	cmp	r3, r5
 8009e24:	d004      	beq.n	8009e30 <chOQWriteTimeout+0xc0>
 8009e26:	69aa      	ldr	r2, [r5, #24]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	6892      	ldr	r2, [r2, #8]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d30e      	bcc.n	8009e4e <chOQWriteTimeout+0xde>
 8009e30:	2300      	movs	r3, #0
 8009e32:	f383 8811 	msr	BASEPRI, r3
      return w;
    }
    chSysLock();
  }
}
 8009e36:	4630      	mov	r0, r6
 8009e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8009e3c:	b672      	cpsid	i
 8009e3e:	4b07      	ldr	r3, [pc, #28]	; (8009e5c <chOQWriteTimeout+0xec>)
 8009e40:	62eb      	str	r3, [r5, #44]	; 0x2c
 8009e42:	e7fe      	b.n	8009e42 <chOQWriteTimeout+0xd2>
 8009e44:	b672      	cpsid	i
 8009e46:	4b04      	ldr	r3, [pc, #16]	; (8009e58 <chOQWriteTimeout+0xe8>)
 8009e48:	4a05      	ldr	r2, [pc, #20]	; (8009e60 <chOQWriteTimeout+0xf0>)
 8009e4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8009e4c:	e7fe      	b.n	8009e4c <chOQWriteTimeout+0xdc>
 8009e4e:	b672      	cpsid	i
 8009e50:	4b02      	ldr	r3, [pc, #8]	; (8009e5c <chOQWriteTimeout+0xec>)
 8009e52:	62eb      	str	r3, [r5, #44]	; 0x2c
 8009e54:	e7fe      	b.n	8009e54 <chOQWriteTimeout+0xe4>
 8009e56:	bf00      	nop
 8009e58:	20001698 	.word	0x20001698
 8009e5c:	0800fc40 	.word	0x0800fc40
 8009e60:	0800fc70 	.word	0x0800fc70
	...

08009e70 <dmaStreamRelease>:
 *
 * @special
 */
void dmaStreamRelease(const stm32_dma_stream_t *dmastp) {

  osalDbgCheck(dmastp != NULL);
 8009e70:	2800      	cmp	r0, #0
 8009e72:	d02f      	beq.n	8009ed4 <dmaStreamRelease+0x64>
void dmaStreamRelease(const stm32_dma_stream_t *dmastp) {
 8009e74:	b4f0      	push	{r4, r5, r6, r7}

  /* Check if the streams is not taken.*/
  osalDbgAssert((dma_streams_mask & (1U << dmastp->selfindex)) != 0U,
 8009e76:	4d1a      	ldr	r5, [pc, #104]	; (8009ee0 <dmaStreamRelease+0x70>)
 8009e78:	7a44      	ldrb	r4, [r0, #9]
 8009e7a:	682b      	ldr	r3, [r5, #0]
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	fa01 f404 	lsl.w	r4, r1, r4
 8009e82:	421c      	tst	r4, r3
 8009e84:	d021      	beq.n	8009eca <dmaStreamRelease+0x5a>
                "not allocated");

  /* Disables the associated IRQ vector.*/
  nvicDisableVector(dmastp->vector);
 8009e86:	7a82      	ldrb	r2, [r0, #10]
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8009e88:	4e16      	ldr	r6, [pc, #88]	; (8009ee4 <dmaStreamRelease+0x74>)
 8009e8a:	0950      	lsrs	r0, r2, #5

  /* Marks the stream as not allocated.*/
  dma_streams_mask &= ~(1U << dmastp->selfindex);
 8009e8c:	ea23 0304 	bic.w	r3, r3, r4
 8009e90:	f002 071f 	and.w	r7, r2, #31
 8009e94:	3020      	adds	r0, #32
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8009e96:	4432      	add	r2, r6
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8009e98:	40b9      	lsls	r1, r7
  NVIC->IP[n] = 0U;
 8009e9a:	2400      	movs	r4, #0

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8009e9c:	f013 0fff 	tst.w	r3, #255	; 0xff
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8009ea0:	f846 1020 	str.w	r1, [r6, r0, lsl #2]
  NVIC->IP[n] = 0U;
 8009ea4:	f882 4300 	strb.w	r4, [r2, #768]	; 0x300
  dma_streams_mask &= ~(1U << dmastp->selfindex);
 8009ea8:	602b      	str	r3, [r5, #0]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8009eaa:	d104      	bne.n	8009eb6 <dmaStreamRelease+0x46>
    rccDisableDMA1(false);
 8009eac:	490e      	ldr	r1, [pc, #56]	; (8009ee8 <dmaStreamRelease+0x78>)
 8009eae:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8009eb0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009eb4:	630a      	str	r2, [r1, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 8009eb6:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8009eba:	d104      	bne.n	8009ec6 <dmaStreamRelease+0x56>
    rccDisableDMA2(false);
 8009ebc:	4a0a      	ldr	r2, [pc, #40]	; (8009ee8 <dmaStreamRelease+0x78>)
 8009ebe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009ec0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009ec4:	6313      	str	r3, [r2, #48]	; 0x30
  }
}
 8009ec6:	bcf0      	pop	{r4, r5, r6, r7}
 8009ec8:	4770      	bx	lr
 8009eca:	b672      	cpsid	i
 8009ecc:	4b07      	ldr	r3, [pc, #28]	; (8009eec <dmaStreamRelease+0x7c>)
 8009ece:	4a08      	ldr	r2, [pc, #32]	; (8009ef0 <dmaStreamRelease+0x80>)
 8009ed0:	62da      	str	r2, [r3, #44]	; 0x2c
 8009ed2:	e7fe      	b.n	8009ed2 <dmaStreamRelease+0x62>
 8009ed4:	b672      	cpsid	i
 8009ed6:	4b05      	ldr	r3, [pc, #20]	; (8009eec <dmaStreamRelease+0x7c>)
 8009ed8:	4a05      	ldr	r2, [pc, #20]	; (8009ef0 <dmaStreamRelease+0x80>)
 8009eda:	62da      	str	r2, [r3, #44]	; 0x2c
 8009edc:	e7fe      	b.n	8009edc <dmaStreamRelease+0x6c>
 8009ede:	bf00      	nop
 8009ee0:	20001360 	.word	0x20001360
 8009ee4:	e000e100 	.word	0xe000e100
 8009ee8:	40023800 	.word	0x40023800
 8009eec:	20001698 	.word	0x20001698
 8009ef0:	0800ff40 	.word	0x0800ff40
	...

08009f00 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8009f00:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8009f02:	f002 f93d 	bl	800c180 <_stats_increase_irq>
 8009f06:	f002 fb9b 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8009f0a:	4b09      	ldr	r3, [pc, #36]	; (8009f30 <Vector158+0x30>)
  if (dma_isr_redir[15].dma_func)
 8009f0c:	4809      	ldr	r0, [pc, #36]	; (8009f34 <Vector158+0x34>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8009f0e:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
 8009f10:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8009f12:	0d89      	lsrs	r1, r1, #22
 8009f14:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 8009f18:	058c      	lsls	r4, r1, #22
 8009f1a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8009f1c:	b10a      	cbz	r2, 8009f22 <Vector158+0x22>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8009f1e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8009f20:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8009f22:	f002 fb75 	bl	800c610 <_dbg_check_leave_isr>
}
 8009f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8009f2a:	f7ff be59 	b.w	8009be0 <_port_irq_epilogue>
 8009f2e:	bf00      	nop
 8009f30:	40026400 	.word	0x40026400
 8009f34:	200012e0 	.word	0x200012e0
	...

08009f40 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8009f40:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8009f42:	f002 f91d 	bl	800c180 <_stats_increase_irq>
 8009f46:	f002 fb7b 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8009f4a:	4b09      	ldr	r3, [pc, #36]	; (8009f70 <Vector154+0x30>)
  if (dma_isr_redir[14].dma_func)
 8009f4c:	4809      	ldr	r0, [pc, #36]	; (8009f74 <Vector154+0x34>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8009f4e:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
 8009f50:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8009f52:	0c09      	lsrs	r1, r1, #16
 8009f54:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 8009f58:	040c      	lsls	r4, r1, #16
 8009f5a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8009f5c:	b10a      	cbz	r2, 8009f62 <Vector154+0x22>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8009f5e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8009f60:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8009f62:	f002 fb55 	bl	800c610 <_dbg_check_leave_isr>
}
 8009f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8009f6a:	f7ff be39 	b.w	8009be0 <_port_irq_epilogue>
 8009f6e:	bf00      	nop
 8009f70:	40026400 	.word	0x40026400
 8009f74:	200012e0 	.word	0x200012e0
	...

08009f80 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8009f80:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8009f82:	f002 f8fd 	bl	800c180 <_stats_increase_irq>
 8009f86:	f002 fb5b 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8009f8a:	4b09      	ldr	r3, [pc, #36]	; (8009fb0 <Vector150+0x30>)
  if (dma_isr_redir[13].dma_func)
 8009f8c:	4809      	ldr	r0, [pc, #36]	; (8009fb4 <Vector150+0x34>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8009f8e:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
 8009f90:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8009f92:	0989      	lsrs	r1, r1, #6
 8009f94:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 8009f98:	018c      	lsls	r4, r1, #6
 8009f9a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8009f9c:	b10a      	cbz	r2, 8009fa2 <Vector150+0x22>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8009f9e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8009fa0:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8009fa2:	f002 fb35 	bl	800c610 <_dbg_check_leave_isr>
}
 8009fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8009faa:	f7ff be19 	b.w	8009be0 <_port_irq_epilogue>
 8009fae:	bf00      	nop
 8009fb0:	40026400 	.word	0x40026400
 8009fb4:	200012e0 	.word	0x200012e0
	...

08009fc0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8009fc0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8009fc2:	f002 f8dd 	bl	800c180 <_stats_increase_irq>
 8009fc6:	f002 fb3b 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8009fca:	4b08      	ldr	r3, [pc, #32]	; (8009fec <Vector130+0x2c>)
  if (dma_isr_redir[12].dma_func)
 8009fcc:	4808      	ldr	r0, [pc, #32]	; (8009ff0 <Vector130+0x30>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8009fce:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
 8009fd0:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8009fd2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8009fd6:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8009fd8:	b10a      	cbz	r2, 8009fde <Vector130+0x1e>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8009fda:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8009fdc:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8009fde:	f002 fb17 	bl	800c610 <_dbg_check_leave_isr>
}
 8009fe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8009fe6:	f7ff bdfb 	b.w	8009be0 <_port_irq_epilogue>
 8009fea:	bf00      	nop
 8009fec:	40026400 	.word	0x40026400
 8009ff0:	200012e0 	.word	0x200012e0
	...

0800a000 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 800a000:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 800a002:	f002 f8bd 	bl	800c180 <_stats_increase_irq>
 800a006:	f002 fb1b 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800a00a:	4b09      	ldr	r3, [pc, #36]	; (800a030 <Vector12C+0x30>)
  if (dma_isr_redir[11].dma_func)
 800a00c:	4809      	ldr	r0, [pc, #36]	; (800a034 <Vector12C+0x34>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800a00e:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
 800a010:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800a012:	0d89      	lsrs	r1, r1, #22
 800a014:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 800a018:	058c      	lsls	r4, r1, #22
 800a01a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 800a01c:	b10a      	cbz	r2, 800a022 <Vector12C+0x22>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 800a01e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800a020:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800a022:	f002 faf5 	bl	800c610 <_dbg_check_leave_isr>
}
 800a026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a02a:	f7ff bdd9 	b.w	8009be0 <_port_irq_epilogue>
 800a02e:	bf00      	nop
 800a030:	40026400 	.word	0x40026400
 800a034:	200012e0 	.word	0x200012e0
	...

0800a040 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800a040:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 800a042:	f002 f89d 	bl	800c180 <_stats_increase_irq>
 800a046:	f002 fafb 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800a04a:	4b09      	ldr	r3, [pc, #36]	; (800a070 <Vector128+0x30>)
  if (dma_isr_redir[10].dma_func)
 800a04c:	4809      	ldr	r0, [pc, #36]	; (800a074 <Vector128+0x34>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800a04e:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
 800a050:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800a052:	0c09      	lsrs	r1, r1, #16
 800a054:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 800a058:	040c      	lsls	r4, r1, #16
 800a05a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 800a05c:	b10a      	cbz	r2, 800a062 <Vector128+0x22>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 800a05e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800a060:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800a062:	f002 fad5 	bl	800c610 <_dbg_check_leave_isr>
}
 800a066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a06a:	f7ff bdb9 	b.w	8009be0 <_port_irq_epilogue>
 800a06e:	bf00      	nop
 800a070:	40026400 	.word	0x40026400
 800a074:	200012e0 	.word	0x200012e0
	...

0800a080 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800a080:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 800a082:	f002 f87d 	bl	800c180 <_stats_increase_irq>
 800a086:	f002 fadb 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800a08a:	4b09      	ldr	r3, [pc, #36]	; (800a0b0 <Vector124+0x30>)
  if (dma_isr_redir[9].dma_func)
 800a08c:	4809      	ldr	r0, [pc, #36]	; (800a0b4 <Vector124+0x34>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800a08e:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
 800a090:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800a092:	0989      	lsrs	r1, r1, #6
 800a094:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 800a098:	018c      	lsls	r4, r1, #6
 800a09a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 800a09c:	b10a      	cbz	r2, 800a0a2 <Vector124+0x22>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 800a09e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800a0a0:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800a0a2:	f002 fab5 	bl	800c610 <_dbg_check_leave_isr>
}
 800a0a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a0aa:	f7ff bd99 	b.w	8009be0 <_port_irq_epilogue>
 800a0ae:	bf00      	nop
 800a0b0:	40026400 	.word	0x40026400
 800a0b4:	200012e0 	.word	0x200012e0
	...

0800a0c0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 800a0c0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 800a0c2:	f002 f85d 	bl	800c180 <_stats_increase_irq>
 800a0c6:	f002 fabb 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800a0ca:	4b08      	ldr	r3, [pc, #32]	; (800a0ec <Vector120+0x2c>)
  if (dma_isr_redir[8].dma_func)
 800a0cc:	4808      	ldr	r0, [pc, #32]	; (800a0f0 <Vector120+0x30>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800a0ce:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
 800a0d0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800a0d2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 800a0d6:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 800a0d8:	b10a      	cbz	r2, 800a0de <Vector120+0x1e>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 800a0da:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800a0dc:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800a0de:	f002 fa97 	bl	800c610 <_dbg_check_leave_isr>
}
 800a0e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800a0e6:	f7ff bd7b 	b.w	8009be0 <_port_irq_epilogue>
 800a0ea:	bf00      	nop
 800a0ec:	40026400 	.word	0x40026400
 800a0f0:	200012e0 	.word	0x200012e0
	...

0800a100 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 800a100:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 800a102:	f002 f83d 	bl	800c180 <_stats_increase_irq>
 800a106:	f002 fa9b 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800a10a:	4b09      	ldr	r3, [pc, #36]	; (800a130 <VectorFC+0x30>)
  if (dma_isr_redir[7].dma_func)
 800a10c:	4809      	ldr	r0, [pc, #36]	; (800a134 <VectorFC+0x34>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800a10e:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
 800a110:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800a112:	0d89      	lsrs	r1, r1, #22
 800a114:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 800a118:	058c      	lsls	r4, r1, #22
 800a11a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 800a11c:	b10a      	cbz	r2, 800a122 <VectorFC+0x22>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 800a11e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800a120:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800a122:	f002 fa75 	bl	800c610 <_dbg_check_leave_isr>
}
 800a126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a12a:	f7ff bd59 	b.w	8009be0 <_port_irq_epilogue>
 800a12e:	bf00      	nop
 800a130:	40026000 	.word	0x40026000
 800a134:	200012e0 	.word	0x200012e0
	...

0800a140 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800a140:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 800a142:	f002 f81d 	bl	800c180 <_stats_increase_irq>
 800a146:	f002 fa7b 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800a14a:	4b09      	ldr	r3, [pc, #36]	; (800a170 <Vector84+0x30>)
  if (dma_isr_redir[6].dma_func)
 800a14c:	4809      	ldr	r0, [pc, #36]	; (800a174 <Vector84+0x34>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800a14e:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 800a150:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800a152:	0c09      	lsrs	r1, r1, #16
 800a154:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 800a158:	040c      	lsls	r4, r1, #16
 800a15a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 800a15c:	b10a      	cbz	r2, 800a162 <Vector84+0x22>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 800a15e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800a160:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800a162:	f002 fa55 	bl	800c610 <_dbg_check_leave_isr>
}
 800a166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a16a:	f7ff bd39 	b.w	8009be0 <_port_irq_epilogue>
 800a16e:	bf00      	nop
 800a170:	40026000 	.word	0x40026000
 800a174:	200012e0 	.word	0x200012e0
	...

0800a180 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800a180:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 800a182:	f001 fffd 	bl	800c180 <_stats_increase_irq>
 800a186:	f002 fa5b 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800a18a:	4b09      	ldr	r3, [pc, #36]	; (800a1b0 <Vector80+0x30>)
  if (dma_isr_redir[5].dma_func)
 800a18c:	4809      	ldr	r0, [pc, #36]	; (800a1b4 <Vector80+0x34>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800a18e:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 800a190:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800a192:	0989      	lsrs	r1, r1, #6
 800a194:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 800a198:	018c      	lsls	r4, r1, #6
 800a19a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 800a19c:	b10a      	cbz	r2, 800a1a2 <Vector80+0x22>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 800a19e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800a1a0:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800a1a2:	f002 fa35 	bl	800c610 <_dbg_check_leave_isr>
}
 800a1a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a1aa:	f7ff bd19 	b.w	8009be0 <_port_irq_epilogue>
 800a1ae:	bf00      	nop
 800a1b0:	40026000 	.word	0x40026000
 800a1b4:	200012e0 	.word	0x200012e0
	...

0800a1c0 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 800a1c0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 800a1c2:	f001 ffdd 	bl	800c180 <_stats_increase_irq>
 800a1c6:	f002 fa3b 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800a1ca:	4b08      	ldr	r3, [pc, #32]	; (800a1ec <Vector7C+0x2c>)
  if (dma_isr_redir[4].dma_func)
 800a1cc:	4808      	ldr	r0, [pc, #32]	; (800a1f0 <Vector7C+0x30>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800a1ce:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 800a1d0:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800a1d2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800a1d6:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 800a1d8:	b10a      	cbz	r2, 800a1de <Vector7C+0x1e>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 800a1da:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800a1dc:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800a1de:	f002 fa17 	bl	800c610 <_dbg_check_leave_isr>
}
 800a1e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800a1e6:	f7ff bcfb 	b.w	8009be0 <_port_irq_epilogue>
 800a1ea:	bf00      	nop
 800a1ec:	40026000 	.word	0x40026000
 800a1f0:	200012e0 	.word	0x200012e0
	...

0800a200 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800a200:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 800a202:	f001 ffbd 	bl	800c180 <_stats_increase_irq>
 800a206:	f002 fa1b 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800a20a:	4b09      	ldr	r3, [pc, #36]	; (800a230 <Vector78+0x30>)
  if (dma_isr_redir[3].dma_func)
 800a20c:	4809      	ldr	r0, [pc, #36]	; (800a234 <Vector78+0x34>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800a20e:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
 800a210:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800a212:	0d89      	lsrs	r1, r1, #22
 800a214:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 800a218:	058c      	lsls	r4, r1, #22
 800a21a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 800a21c:	b10a      	cbz	r2, 800a222 <Vector78+0x22>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 800a21e:	69c0      	ldr	r0, [r0, #28]
 800a220:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800a222:	f002 f9f5 	bl	800c610 <_dbg_check_leave_isr>
}
 800a226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a22a:	f7ff bcd9 	b.w	8009be0 <_port_irq_epilogue>
 800a22e:	bf00      	nop
 800a230:	40026000 	.word	0x40026000
 800a234:	200012e0 	.word	0x200012e0
	...

0800a240 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 800a240:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 800a242:	f001 ff9d 	bl	800c180 <_stats_increase_irq>
 800a246:	f002 f9fb 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800a24a:	4b09      	ldr	r3, [pc, #36]	; (800a270 <Vector74+0x30>)
  if (dma_isr_redir[2].dma_func)
 800a24c:	4809      	ldr	r0, [pc, #36]	; (800a274 <Vector74+0x34>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800a24e:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
 800a250:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800a252:	0c09      	lsrs	r1, r1, #16
 800a254:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 800a258:	040c      	lsls	r4, r1, #16
 800a25a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 800a25c:	b10a      	cbz	r2, 800a262 <Vector74+0x22>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 800a25e:	6940      	ldr	r0, [r0, #20]
 800a260:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800a262:	f002 f9d5 	bl	800c610 <_dbg_check_leave_isr>
}
 800a266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a26a:	f7ff bcb9 	b.w	8009be0 <_port_irq_epilogue>
 800a26e:	bf00      	nop
 800a270:	40026000 	.word	0x40026000
 800a274:	200012e0 	.word	0x200012e0
	...

0800a280 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 800a280:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 800a282:	f001 ff7d 	bl	800c180 <_stats_increase_irq>
 800a286:	f002 f9db 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800a28a:	4b09      	ldr	r3, [pc, #36]	; (800a2b0 <Vector70+0x30>)
  if (dma_isr_redir[1].dma_func)
 800a28c:	4809      	ldr	r0, [pc, #36]	; (800a2b4 <Vector70+0x34>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800a28e:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
 800a290:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800a292:	0989      	lsrs	r1, r1, #6
 800a294:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 800a298:	018c      	lsls	r4, r1, #6
 800a29a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 800a29c:	b10a      	cbz	r2, 800a2a2 <Vector70+0x22>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 800a29e:	68c0      	ldr	r0, [r0, #12]
 800a2a0:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800a2a2:	f002 f9b5 	bl	800c610 <_dbg_check_leave_isr>
}
 800a2a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800a2aa:	f7ff bc99 	b.w	8009be0 <_port_irq_epilogue>
 800a2ae:	bf00      	nop
 800a2b0:	40026000 	.word	0x40026000
 800a2b4:	200012e0 	.word	0x200012e0
	...

0800a2c0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 800a2c0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 800a2c2:	f001 ff5d 	bl	800c180 <_stats_increase_irq>
 800a2c6:	f002 f9bb 	bl	800c640 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800a2ca:	4b08      	ldr	r3, [pc, #32]	; (800a2ec <Vector6C+0x2c>)
  if (dma_isr_redir[0].dma_func)
 800a2cc:	4a08      	ldr	r2, [pc, #32]	; (800a2f0 <Vector6C+0x30>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800a2ce:	6819      	ldr	r1, [r3, #0]
 800a2d0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800a2d4:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800a2d6:	6813      	ldr	r3, [r2, #0]
 800a2d8:	b10b      	cbz	r3, 800a2de <Vector6C+0x1e>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 800a2da:	6850      	ldr	r0, [r2, #4]
 800a2dc:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800a2de:	f002 f997 	bl	800c610 <_dbg_check_leave_isr>
}
 800a2e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800a2e6:	f7ff bc7b 	b.w	8009be0 <_port_irq_epilogue>
 800a2ea:	bf00      	nop
 800a2ec:	40026000 	.word	0x40026000
 800a2f0:	200012e0 	.word	0x200012e0
	...

0800a300 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 800a300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800a304:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  OSAL_IRQ_PROLOGUE();
 800a308:	f001 ff3a 	bl	800c180 <_stats_increase_irq>
 800a30c:	f002 f998 	bl	800c640 <_dbg_check_enter_isr>
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800a310:	6933      	ldr	r3, [r6, #16]
 800a312:	079b      	lsls	r3, r3, #30
 800a314:	d405      	bmi.n	800a322 <VectorB0+0x22>
  OSAL_IRQ_EPILOGUE();
 800a316:	f002 f97b 	bl	800c610 <_dbg_check_leave_isr>
}
 800a31a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 800a31e:	f7ff bc5f 	b.w	8009be0 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 800a322:	2700      	movs	r7, #0
 800a324:	6137      	str	r7, [r6, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a326:	f04f 0820 	mov.w	r8, #32
 800a32a:	f388 8811 	msr	BASEPRI, r8
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 800a32e:	4c2e      	ldr	r4, [pc, #184]	; (800a3e8 <VectorB0+0xe8>)
  _stats_start_measure_crit_isr();
 800a330:	f001 ff96 	bl	800c260 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800a334:	f002 f9b4 	bl	800c6a0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 800a338:	f002 f862 	bl	800c400 <chDbgCheckClassI>
  chDbgCheckClassI();
 800a33c:	f002 f860 	bl	800c400 <chDbgCheckClassI>
  vtp = ch.vtlist.vt_next;
 800a340:	69e5      	ldr	r5, [r4, #28]
  return (systime_t)STM32_ST_TIM->CNT;
 800a342:	6a73      	ldr	r3, [r6, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800a344:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a346:	68aa      	ldr	r2, [r5, #8]
 800a348:	1a58      	subs	r0, r3, r1
 800a34a:	4290      	cmp	r0, r2
 800a34c:	bf38      	it	cc
 800a34e:	f104 061c 	addcc.w	r6, r4, #28
 800a352:	d325      	bcc.n	800a3a0 <VectorB0+0xa0>
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 800a354:	46b9      	mov	r9, r7
  STM32_ST_TIM->DIER = 0;
 800a356:	4637      	mov	r7, r6
 800a358:	f104 061c 	add.w	r6, r4, #28
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800a35c:	682b      	ldr	r3, [r5, #0]
    fn = vtp->vt_func;
 800a35e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 800a362:	440a      	add	r2, r1

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 800a364:	42b3      	cmp	r3, r6
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 800a366:	62a2      	str	r2, [r4, #40]	; 0x28
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800a368:	605e      	str	r6, [r3, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 800a36a:	61e3      	str	r3, [r4, #28]
    vtp->vt_func = NULL;
 800a36c:	f8c5 900c 	str.w	r9, [r5, #12]
 800a370:	bf08      	it	eq
 800a372:	f8c7 900c 	streq.w	r9, [r7, #12]
  _dbg_check_unlock_from_isr();
 800a376:	f002 f97b 	bl	800c670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800a37a:	f001 ff59 	bl	800c230 <_stats_stop_measure_crit_isr>
 800a37e:	f389 8811 	msr	BASEPRI, r9
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 800a382:	6928      	ldr	r0, [r5, #16]
 800a384:	47d0      	blx	sl
 800a386:	f388 8811 	msr	BASEPRI, r8
  _stats_start_measure_crit_isr();
 800a38a:	f001 ff69 	bl	800c260 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800a38e:	f002 f987 	bl	800c6a0 <_dbg_check_lock_from_isr>
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 800a392:	69e5      	ldr	r5, [r4, #28]
  return (systime_t)STM32_ST_TIM->CNT;
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800a396:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a398:	68aa      	ldr	r2, [r5, #8]
 800a39a:	1a58      	subs	r0, r3, r1
 800a39c:	4282      	cmp	r2, r0
 800a39e:	d9dd      	bls.n	800a35c <VectorB0+0x5c>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 800a3a0:	42b5      	cmp	r5, r6
 800a3a2:	d014      	beq.n	800a3ce <VectorB0+0xce>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 800a3a4:	1855      	adds	r5, r2, r1
 800a3a6:	1aed      	subs	r5, r5, r3
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 800a3a8:	2d02      	cmp	r5, #2
 800a3aa:	bf2c      	ite	cs
 800a3ac:	195d      	addcs	r5, r3, r5
 800a3ae:	1c9d      	addcc	r5, r3, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	f7ff fc05 	bl	8009bc0 <stSetAlarm>
 800a3b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.vt_lasttime) <=
 800a3ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a3bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3be:	1a6b      	subs	r3, r5, r1
 800a3c0:	1a52      	subs	r2, r2, r1
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d903      	bls.n	800a3ce <VectorB0+0xce>
  __ASM volatile ("cpsid i" : : : "memory");
 800a3c6:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800a3c8:	4b08      	ldr	r3, [pc, #32]	; (800a3ec <VectorB0+0xec>)
 800a3ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3cc:	e7fe      	b.n	800a3cc <VectorB0+0xcc>
  _dbg_check_unlock_from_isr();
 800a3ce:	f002 f94f 	bl	800c670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800a3d2:	f001 ff2d 	bl	800c230 <_stats_stop_measure_crit_isr>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 800a3dc:	f002 f918 	bl	800c610 <_dbg_check_leave_isr>
}
 800a3e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 800a3e4:	f7ff bbfc 	b.w	8009be0 <_port_irq_epilogue>
 800a3e8:	20001698 	.word	0x20001698
 800a3ec:	0800fe90 	.word	0x0800fe90

0800a3f0 <readt.lto_priv.86>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 800a3f0:	300c      	adds	r0, #12
 800a3f2:	f002 ba1d 	b.w	800c830 <chIQReadTimeout>
 800a3f6:	bf00      	nop
	...

0800a400 <read.lto_priv.80>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 800a400:	300c      	adds	r0, #12
 800a402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a406:	f002 ba13 	b.w	800c830 <chIQReadTimeout>
 800a40a:	bf00      	nop
 800a40c:	0000      	movs	r0, r0
	...

0800a410 <writet.lto_priv.85>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 800a410:	3030      	adds	r0, #48	; 0x30
 800a412:	f7ff bcad 	b.w	8009d70 <chOQWriteTimeout>
 800a416:	bf00      	nop
	...

0800a420 <write.lto_priv.79>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 800a420:	3030      	adds	r0, #48	; 0x30
 800a422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a426:	f7ff bca3 	b.w	8009d70 <chOQWriteTimeout>
 800a42a:	bf00      	nop
 800a42c:	0000      	movs	r0, r0
	...

0800a430 <gett.lto_priv.84>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 800a430:	300c      	adds	r0, #12
 800a432:	f002 ba7d 	b.w	800c930 <chIQGetTimeout>
 800a436:	bf00      	nop
	...

0800a440 <get.lto_priv.82>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 800a440:	300c      	adds	r0, #12
 800a442:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a446:	f002 ba73 	b.w	800c930 <chIQGetTimeout>
 800a44a:	bf00      	nop
 800a44c:	0000      	movs	r0, r0
	...

0800a450 <putt.lto_priv.83>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 800a450:	3030      	adds	r0, #48	; 0x30
 800a452:	f002 b995 	b.w	800c780 <chOQPutTimeout>
 800a456:	bf00      	nop
	...

0800a460 <put.lto_priv.81>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 800a460:	3030      	adds	r0, #48	; 0x30
 800a462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a466:	f002 b98b 	b.w	800c780 <chOQPutTimeout>
 800a46a:	bf00      	nop
 800a46c:	0000      	movs	r0, r0
	...

0800a470 <dmaStreamAllocate>:
  osalDbgCheck(dmastp != NULL);
 800a470:	2800      	cmp	r0, #0
 800a472:	d054      	beq.n	800a51e <dmaStreamAllocate+0xae>
                       void *param) {
 800a474:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 800a476:	4f2c      	ldr	r7, [pc, #176]	; (800a528 <dmaStreamAllocate+0xb8>)
 800a478:	7a45      	ldrb	r5, [r0, #9]
 800a47a:	f8d7 e000 	ldr.w	lr, [r7]
 800a47e:	469c      	mov	ip, r3
 800a480:	2301      	movs	r3, #1
 800a482:	fa03 f405 	lsl.w	r4, r3, r5
 800a486:	ea14 0f0e 	tst.w	r4, lr
 800a48a:	d13d      	bne.n	800a508 <dmaStreamAllocate+0x98>
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800a48c:	4e27      	ldr	r6, [pc, #156]	; (800a52c <dmaStreamAllocate+0xbc>)
  dma_streams_mask |= (1U << dmastp->selfindex);
 800a48e:	ea44 040e 	orr.w	r4, r4, lr
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800a492:	eb06 0ec5 	add.w	lr, r6, r5, lsl #3
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 800a496:	f014 0fff 	tst.w	r4, #255	; 0xff
  dma_streams_mask |= (1U << dmastp->selfindex);
 800a49a:	603c      	str	r4, [r7, #0]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800a49c:	f846 2035 	str.w	r2, [r6, r5, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800a4a0:	f8ce c004 	str.w	ip, [lr, #4]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 800a4a4:	d004      	beq.n	800a4b0 <dmaStreamAllocate+0x40>
    rccEnableDMA1(false);
 800a4a6:	4d22      	ldr	r5, [pc, #136]	; (800a530 <dmaStreamAllocate+0xc0>)
 800a4a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a4aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a4ae:	632b      	str	r3, [r5, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 800a4b0:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
 800a4b4:	d12a      	bne.n	800a50c <dmaStreamAllocate+0x9c>
  dmaStreamDisable(dmastp);
 800a4b6:	6804      	ldr	r4, [r0, #0]
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	f023 031f 	bic.w	r3, r3, #31
 800a4be:	6023      	str	r3, [r4, #0]
 800a4c0:	6823      	ldr	r3, [r4, #0]
 800a4c2:	f013 0301 	ands.w	r3, r3, #1
 800a4c6:	d1fb      	bne.n	800a4c0 <dmaStreamAllocate+0x50>
 800a4c8:	7a07      	ldrb	r7, [r0, #8]
 800a4ca:	6846      	ldr	r6, [r0, #4]
 800a4cc:	253d      	movs	r5, #61	; 0x3d
 800a4ce:	40bd      	lsls	r5, r7
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800a4d0:	2721      	movs	r7, #33	; 0x21
  dmaStreamDisable(dmastp);
 800a4d2:	6035      	str	r5, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 800a4d4:	6023      	str	r3, [r4, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800a4d6:	6167      	str	r7, [r4, #20]
  if (func != NULL) {
 800a4d8:	b1f2      	cbz	r2, 800a518 <dmaStreamAllocate+0xa8>
    nvicEnableVector(dmastp->vector, priority);
 800a4da:	7a80      	ldrb	r0, [r0, #10]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800a4dc:	0942      	lsrs	r2, r0, #5
 800a4de:	0092      	lsls	r2, r2, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800a4e0:	f100 4560 	add.w	r5, r0, #3758096384	; 0xe0000000
 800a4e4:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 800a4e8:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 800a4ec:	0109      	lsls	r1, r1, #4
 800a4ee:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800a4f2:	f000 001f 	and.w	r0, r0, #31
 800a4f6:	2401      	movs	r4, #1
 800a4f8:	fa04 f000 	lsl.w	r0, r4, r0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800a4fc:	b2c9      	uxtb	r1, r1
 800a4fe:	f885 1300 	strb.w	r1, [r5, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800a502:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800a506:	6010      	str	r0, [r2, #0]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rccEnableDMA2(false);
 800a50c:	4c08      	ldr	r4, [pc, #32]	; (800a530 <dmaStreamAllocate+0xc0>)
 800a50e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a514:	6323      	str	r3, [r4, #48]	; 0x30
 800a516:	e7ce      	b.n	800a4b6 <dmaStreamAllocate+0x46>
  if (func != NULL) {
 800a518:	4613      	mov	r3, r2
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800a51e:	b672      	cpsid	i
 800a520:	4b04      	ldr	r3, [pc, #16]	; (800a534 <dmaStreamAllocate+0xc4>)
 800a522:	4a05      	ldr	r2, [pc, #20]	; (800a538 <dmaStreamAllocate+0xc8>)
 800a524:	62da      	str	r2, [r3, #44]	; 0x2c
 800a526:	e7fe      	b.n	800a526 <dmaStreamAllocate+0xb6>
 800a528:	20001360 	.word	0x20001360
 800a52c:	200012e0 	.word	0x200012e0
 800a530:	40023800 	.word	0x40023800
 800a534:	20001698 	.word	0x20001698
 800a538:	0800ff20 	.word	0x0800ff20
 800a53c:	00000000 	.word	0x00000000

0800a540 <spiSend>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 800a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
 800a542:	b198      	cbz	r0, 800a56c <spiSend+0x2c>
 800a544:	b191      	cbz	r1, 800a56c <spiSend+0x2c>
 800a546:	b18a      	cbz	r2, 800a56c <spiSend+0x2c>
 800a548:	4604      	mov	r4, r0
 800a54a:	4616      	mov	r6, r2
 800a54c:	460d      	mov	r5, r1
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a54e:	2320      	movs	r3, #32
 800a550:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a554:	f001 fe8c 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a558:	f002 f902 	bl	800c760 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 800a55c:	7823      	ldrb	r3, [r4, #0]
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d009      	beq.n	800a576 <spiSend+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800a562:	b672      	cpsid	i
 800a564:	4b21      	ldr	r3, [pc, #132]	; (800a5ec <spiSend+0xac>)
 800a566:	4a22      	ldr	r2, [pc, #136]	; (800a5f0 <spiSend+0xb0>)
 800a568:	62da      	str	r2, [r3, #44]	; 0x2c
 800a56a:	e7fe      	b.n	800a56a <spiSend+0x2a>
 800a56c:	b672      	cpsid	i
 800a56e:	4b1f      	ldr	r3, [pc, #124]	; (800a5ec <spiSend+0xac>)
 800a570:	4a1f      	ldr	r2, [pc, #124]	; (800a5f0 <spiSend+0xb0>)
 800a572:	62da      	str	r2, [r3, #44]	; 0x2c
 800a574:	e7fe      	b.n	800a574 <spiSend+0x34>
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
 800a576:	6863      	ldr	r3, [r4, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	b123      	cbz	r3, 800a586 <spiSend+0x46>
 800a57c:	b672      	cpsid	i
 800a57e:	4b1b      	ldr	r3, [pc, #108]	; (800a5ec <spiSend+0xac>)
 800a580:	4a1b      	ldr	r2, [pc, #108]	; (800a5f0 <spiSend+0xb0>)
 800a582:	62da      	str	r2, [r3, #44]	; 0x2c
 800a584:	e7fe      	b.n	800a584 <spiSend+0x44>
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800a586:	6a22      	ldr	r2, [r4, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800a588:	6a63      	ldr	r3, [r4, #36]	; 0x24
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800a58a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800a58c:	4f19      	ldr	r7, [pc, #100]	; (800a5f4 <spiSend+0xb4>)
  spiStartSendI(spip, n, txbuf);
 800a58e:	2103      	movs	r1, #3
 800a590:	7021      	strb	r1, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800a592:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800a594:	681b      	ldr	r3, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800a596:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800a598:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800a59c:	60d7      	str	r7, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 800a59e:	6055      	str	r5, [r2, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800a5a0:	6010      	str	r0, [r2, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800a5a2:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800a5a4:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800a5a6:	6019      	str	r1, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 800a5a8:	6811      	ldr	r1, [r2, #0]
 800a5aa:	f041 0101 	orr.w	r1, r1, #1
 800a5ae:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	f042 0201 	orr.w	r2, r2, #1
 800a5b6:	601a      	str	r2, [r3, #0]
  return chThdSuspendS(trp);
 800a5b8:	f104 0008 	add.w	r0, r4, #8
 800a5bc:	f001 ff08 	bl	800c3d0 <chThdSuspendS>
  _dbg_check_unlock();
 800a5c0:	f002 f8be 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a5c4:	f001 fe3c 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800a5c8:	4b08      	ldr	r3, [pc, #32]	; (800a5ec <spiSend+0xac>)
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d004      	beq.n	800a5da <spiSend+0x9a>
 800a5d0:	6999      	ldr	r1, [r3, #24]
 800a5d2:	6892      	ldr	r2, [r2, #8]
 800a5d4:	6889      	ldr	r1, [r1, #8]
 800a5d6:	4291      	cmp	r1, r2
 800a5d8:	d303      	bcc.n	800a5e2 <spiSend+0xa2>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a5da:	2300      	movs	r3, #0
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800a5e2:	b672      	cpsid	i
 800a5e4:	4a04      	ldr	r2, [pc, #16]	; (800a5f8 <spiSend+0xb8>)
 800a5e6:	62da      	str	r2, [r3, #44]	; 0x2c
 800a5e8:	e7fe      	b.n	800a5e8 <spiSend+0xa8>
 800a5ea:	bf00      	nop
 800a5ec:	20001698 	.word	0x20001698
 800a5f0:	0800ff00 	.word	0x0800ff00
 800a5f4:	200015f0 	.word	0x200015f0
 800a5f8:	0800fe80 	.word	0x0800fe80
 800a5fc:	00000000 	.word	0x00000000

0800a600 <spiReceive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 800a600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));
 800a602:	b198      	cbz	r0, 800a62c <spiReceive+0x2c>
 800a604:	b191      	cbz	r1, 800a62c <spiReceive+0x2c>
 800a606:	b18a      	cbz	r2, 800a62c <spiReceive+0x2c>
 800a608:	4604      	mov	r4, r0
 800a60a:	4616      	mov	r6, r2
 800a60c:	460d      	mov	r5, r1
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a60e:	2320      	movs	r3, #32
 800a610:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a614:	f001 fe2c 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a618:	f002 f8a2 	bl	800c760 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 800a61c:	7823      	ldrb	r3, [r4, #0]
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d009      	beq.n	800a636 <spiReceive+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800a622:	b672      	cpsid	i
 800a624:	4b21      	ldr	r3, [pc, #132]	; (800a6ac <spiReceive+0xac>)
 800a626:	4a22      	ldr	r2, [pc, #136]	; (800a6b0 <spiReceive+0xb0>)
 800a628:	62da      	str	r2, [r3, #44]	; 0x2c
 800a62a:	e7fe      	b.n	800a62a <spiReceive+0x2a>
 800a62c:	b672      	cpsid	i
 800a62e:	4b1f      	ldr	r3, [pc, #124]	; (800a6ac <spiReceive+0xac>)
 800a630:	4a1f      	ldr	r2, [pc, #124]	; (800a6b0 <spiReceive+0xb0>)
 800a632:	62da      	str	r2, [r3, #44]	; 0x2c
 800a634:	e7fe      	b.n	800a634 <spiReceive+0x34>
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
 800a636:	6863      	ldr	r3, [r4, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	b123      	cbz	r3, 800a646 <spiReceive+0x46>
 800a63c:	b672      	cpsid	i
 800a63e:	4b1b      	ldr	r3, [pc, #108]	; (800a6ac <spiReceive+0xac>)
 800a640:	4a1b      	ldr	r2, [pc, #108]	; (800a6b0 <spiReceive+0xb0>)
 800a642:	62da      	str	r2, [r3, #44]	; 0x2c
 800a644:	e7fe      	b.n	800a644 <spiReceive+0x44>
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800a646:	6a22      	ldr	r2, [r4, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800a648:	6a63      	ldr	r3, [r4, #36]	; 0x24
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 800a64a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800a64c:	4f19      	ldr	r7, [pc, #100]	; (800a6b4 <spiReceive+0xb4>)
  spiStartReceiveI(spip, n, rxbuf);
 800a64e:	2103      	movs	r1, #3
 800a650:	7021      	strb	r1, [r4, #0]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 800a652:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800a654:	681b      	ldr	r3, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800a656:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 800a658:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800a65c:	60d6      	str	r6, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 800a65e:	6055      	str	r5, [r2, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 800a660:	6011      	str	r1, [r2, #0]
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800a662:	60df      	str	r7, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800a664:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 800a666:	6018      	str	r0, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 800a668:	6811      	ldr	r1, [r2, #0]
 800a66a:	f041 0101 	orr.w	r1, r1, #1
 800a66e:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	f042 0201 	orr.w	r2, r2, #1
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	f104 0008 	add.w	r0, r4, #8
 800a67c:	f001 fea8 	bl	800c3d0 <chThdSuspendS>
  _dbg_check_unlock();
 800a680:	f002 f85e 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a684:	f001 fddc 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800a688:	4b08      	ldr	r3, [pc, #32]	; (800a6ac <spiReceive+0xac>)
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d004      	beq.n	800a69a <spiReceive+0x9a>
 800a690:	6999      	ldr	r1, [r3, #24]
 800a692:	6892      	ldr	r2, [r2, #8]
 800a694:	6889      	ldr	r1, [r1, #8]
 800a696:	4291      	cmp	r1, r2
 800a698:	d303      	bcc.n	800a6a2 <spiReceive+0xa2>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a69a:	2300      	movs	r3, #0
 800a69c:	f383 8811 	msr	BASEPRI, r3
 800a6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800a6a2:	b672      	cpsid	i
 800a6a4:	4a04      	ldr	r2, [pc, #16]	; (800a6b8 <spiReceive+0xb8>)
 800a6a6:	62da      	str	r2, [r3, #44]	; 0x2c
 800a6a8:	e7fe      	b.n	800a6a8 <spiReceive+0xa8>
 800a6aa:	bf00      	nop
 800a6ac:	20001698 	.word	0x20001698
 800a6b0:	0800ff10 	.word	0x0800ff10
 800a6b4:	20001364 	.word	0x20001364
 800a6b8:	0800fe80 	.word	0x0800fe80
 800a6bc:	00000000 	.word	0x00000000

0800a6c0 <spiIgnore>:
void spiIgnore(SPIDriver *spip, size_t n) {
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  osalDbgCheck((spip != NULL) && (n > 0U));
 800a6c2:	b100      	cbz	r0, 800a6c6 <spiIgnore+0x6>
 800a6c4:	b921      	cbnz	r1, 800a6d0 <spiIgnore+0x10>
 800a6c6:	b672      	cpsid	i
 800a6c8:	4b26      	ldr	r3, [pc, #152]	; (800a764 <spiIgnore+0xa4>)
 800a6ca:	4a27      	ldr	r2, [pc, #156]	; (800a768 <spiIgnore+0xa8>)
 800a6cc:	62da      	str	r2, [r3, #44]	; 0x2c
 800a6ce:	e7fe      	b.n	800a6ce <spiIgnore+0xe>
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	460d      	mov	r5, r1
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a6d4:	2320      	movs	r3, #32
 800a6d6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a6da:	f001 fdc9 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a6de:	f002 f83f 	bl	800c760 <_dbg_check_lock>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 800a6e2:	7823      	ldrb	r3, [r4, #0]
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	d004      	beq.n	800a6f2 <spiIgnore+0x32>
  __ASM volatile ("cpsid i" : : : "memory");
 800a6e8:	b672      	cpsid	i
 800a6ea:	4b1e      	ldr	r3, [pc, #120]	; (800a764 <spiIgnore+0xa4>)
 800a6ec:	4a1e      	ldr	r2, [pc, #120]	; (800a768 <spiIgnore+0xa8>)
 800a6ee:	62da      	str	r2, [r3, #44]	; 0x2c
 800a6f0:	e7fe      	b.n	800a6f0 <spiIgnore+0x30>
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
 800a6f2:	6863      	ldr	r3, [r4, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	b123      	cbz	r3, 800a702 <spiIgnore+0x42>
 800a6f8:	b672      	cpsid	i
 800a6fa:	4b1a      	ldr	r3, [pc, #104]	; (800a764 <spiIgnore+0xa4>)
 800a6fc:	4a1a      	ldr	r2, [pc, #104]	; (800a768 <spiIgnore+0xa8>)
 800a6fe:	62da      	str	r2, [r3, #44]	; 0x2c
 800a700:	e7fe      	b.n	800a700 <spiIgnore+0x40>
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800a702:	6a22      	ldr	r2, [r4, #32]
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800a704:	6a63      	ldr	r3, [r4, #36]	; 0x24
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800a706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800a708:	4818      	ldr	r0, [pc, #96]	; (800a76c <spiIgnore+0xac>)
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800a70a:	4f19      	ldr	r7, [pc, #100]	; (800a770 <spiIgnore+0xb0>)
  spiStartIgnoreI(spip, n);
 800a70c:	2103      	movs	r1, #3
 800a70e:	7021      	strb	r1, [r4, #0]
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800a710:	681b      	ldr	r3, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800a712:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 800a714:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 800a716:	60d7      	str	r7, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 800a718:	6055      	str	r5, [r2, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800a71a:	6016      	str	r6, [r2, #0]
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800a71c:	60d8      	str	r0, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800a71e:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 800a720:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(spip->dmarx);
 800a722:	6811      	ldr	r1, [r2, #0]
 800a724:	f041 0101 	orr.w	r1, r1, #1
 800a728:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	f042 0201 	orr.w	r2, r2, #1
 800a730:	601a      	str	r2, [r3, #0]
 800a732:	f104 0008 	add.w	r0, r4, #8
 800a736:	f001 fe4b 	bl	800c3d0 <chThdSuspendS>
  _dbg_check_unlock();
 800a73a:	f002 f801 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a73e:	f001 fd7f 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800a742:	4b08      	ldr	r3, [pc, #32]	; (800a764 <spiIgnore+0xa4>)
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	d004      	beq.n	800a754 <spiIgnore+0x94>
 800a74a:	6999      	ldr	r1, [r3, #24]
 800a74c:	6892      	ldr	r2, [r2, #8]
 800a74e:	6889      	ldr	r1, [r1, #8]
 800a750:	4291      	cmp	r1, r2
 800a752:	d303      	bcc.n	800a75c <spiIgnore+0x9c>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a754:	2300      	movs	r3, #0
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800a75c:	b672      	cpsid	i
 800a75e:	4a05      	ldr	r2, [pc, #20]	; (800a774 <spiIgnore+0xb4>)
 800a760:	62da      	str	r2, [r3, #44]	; 0x2c
 800a762:	e7fe      	b.n	800a762 <spiIgnore+0xa2>
 800a764:	20001698 	.word	0x20001698
 800a768:	0800fef0 	.word	0x0800fef0
 800a76c:	20001364 	.word	0x20001364
 800a770:	200015f0 	.word	0x200015f0
 800a774:	0800fe80 	.word	0x0800fe80
	...

0800a780 <spiUnselect>:
  osalDbgCheck(spip != NULL);
 800a780:	b340      	cbz	r0, 800a7d4 <spiUnselect+0x54>
void spiUnselect(SPIDriver *spip) {
 800a782:	b510      	push	{r4, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a784:	2320      	movs	r3, #32
 800a786:	4604      	mov	r4, r0
 800a788:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a78c:	f001 fd70 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a790:	f001 ffe6 	bl	800c760 <_dbg_check_lock>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 800a794:	7823      	ldrb	r3, [r4, #0]
 800a796:	2b02      	cmp	r3, #2
 800a798:	d004      	beq.n	800a7a4 <spiUnselect+0x24>
  __ASM volatile ("cpsid i" : : : "memory");
 800a79a:	b672      	cpsid	i
 800a79c:	4b12      	ldr	r3, [pc, #72]	; (800a7e8 <spiUnselect+0x68>)
 800a79e:	4a13      	ldr	r2, [pc, #76]	; (800a7ec <spiUnselect+0x6c>)
 800a7a0:	62da      	str	r2, [r3, #44]	; 0x2c
 800a7a2:	e7fe      	b.n	800a7a2 <spiUnselect+0x22>
  palSetPad(spip->config->ssport, spip->config->sspad);
 800a7a4:	6863      	ldr	r3, [r4, #4]
 800a7a6:	8919      	ldrh	r1, [r3, #8]
 800a7a8:	685a      	ldr	r2, [r3, #4]
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	408b      	lsls	r3, r1
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	8313      	strh	r3, [r2, #24]
  _dbg_check_unlock();
 800a7b2:	f001 ffc5 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a7b6:	f001 fd43 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800a7ba:	4b0b      	ldr	r3, [pc, #44]	; (800a7e8 <spiUnselect+0x68>)
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d004      	beq.n	800a7cc <spiUnselect+0x4c>
 800a7c2:	6999      	ldr	r1, [r3, #24]
 800a7c4:	6892      	ldr	r2, [r2, #8]
 800a7c6:	6889      	ldr	r1, [r1, #8]
 800a7c8:	4291      	cmp	r1, r2
 800a7ca:	d308      	bcc.n	800a7de <spiUnselect+0x5e>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800a7d4:	b672      	cpsid	i
 800a7d6:	4b04      	ldr	r3, [pc, #16]	; (800a7e8 <spiUnselect+0x68>)
 800a7d8:	4a04      	ldr	r2, [pc, #16]	; (800a7ec <spiUnselect+0x6c>)
 800a7da:	62da      	str	r2, [r3, #44]	; 0x2c
 800a7dc:	e7fe      	b.n	800a7dc <spiUnselect+0x5c>
 800a7de:	b672      	cpsid	i
 800a7e0:	4a03      	ldr	r2, [pc, #12]	; (800a7f0 <spiUnselect+0x70>)
 800a7e2:	62da      	str	r2, [r3, #44]	; 0x2c
 800a7e4:	e7fe      	b.n	800a7e4 <spiUnselect+0x64>
 800a7e6:	bf00      	nop
 800a7e8:	20001698 	.word	0x20001698
 800a7ec:	0800fed0 	.word	0x0800fed0
 800a7f0:	0800fe80 	.word	0x0800fe80
	...

0800a800 <spiSelect>:
  osalDbgCheck(spip != NULL);
 800a800:	b340      	cbz	r0, 800a854 <spiSelect+0x54>
void spiSelect(SPIDriver *spip) {
 800a802:	b510      	push	{r4, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a804:	2320      	movs	r3, #32
 800a806:	4604      	mov	r4, r0
 800a808:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a80c:	f001 fd30 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a810:	f001 ffa6 	bl	800c760 <_dbg_check_lock>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 800a814:	7823      	ldrb	r3, [r4, #0]
 800a816:	2b02      	cmp	r3, #2
 800a818:	d004      	beq.n	800a824 <spiSelect+0x24>
  __ASM volatile ("cpsid i" : : : "memory");
 800a81a:	b672      	cpsid	i
 800a81c:	4b12      	ldr	r3, [pc, #72]	; (800a868 <spiSelect+0x68>)
 800a81e:	4a13      	ldr	r2, [pc, #76]	; (800a86c <spiSelect+0x6c>)
 800a820:	62da      	str	r2, [r3, #44]	; 0x2c
 800a822:	e7fe      	b.n	800a822 <spiSelect+0x22>
  palClearPad(spip->config->ssport, spip->config->sspad);
 800a824:	6863      	ldr	r3, [r4, #4]
 800a826:	8919      	ldrh	r1, [r3, #8]
 800a828:	685a      	ldr	r2, [r3, #4]
 800a82a:	2301      	movs	r3, #1
 800a82c:	408b      	lsls	r3, r1
 800a82e:	b29b      	uxth	r3, r3
 800a830:	8353      	strh	r3, [r2, #26]
  _dbg_check_unlock();
 800a832:	f001 ff85 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a836:	f001 fd03 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800a83a:	4b0b      	ldr	r3, [pc, #44]	; (800a868 <spiSelect+0x68>)
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d004      	beq.n	800a84c <spiSelect+0x4c>
 800a842:	6999      	ldr	r1, [r3, #24]
 800a844:	6892      	ldr	r2, [r2, #8]
 800a846:	6889      	ldr	r1, [r1, #8]
 800a848:	4291      	cmp	r1, r2
 800a84a:	d308      	bcc.n	800a85e <spiSelect+0x5e>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a84c:	2300      	movs	r3, #0
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800a854:	b672      	cpsid	i
 800a856:	4b04      	ldr	r3, [pc, #16]	; (800a868 <spiSelect+0x68>)
 800a858:	4a04      	ldr	r2, [pc, #16]	; (800a86c <spiSelect+0x6c>)
 800a85a:	62da      	str	r2, [r3, #44]	; 0x2c
 800a85c:	e7fe      	b.n	800a85c <spiSelect+0x5c>
 800a85e:	b672      	cpsid	i
 800a860:	4a03      	ldr	r2, [pc, #12]	; (800a870 <spiSelect+0x70>)
 800a862:	62da      	str	r2, [r3, #44]	; 0x2c
 800a864:	e7fe      	b.n	800a864 <spiSelect+0x64>
 800a866:	bf00      	nop
 800a868:	20001698 	.word	0x20001698
 800a86c:	0800fec0 	.word	0x0800fec0
 800a870:	0800fe80 	.word	0x0800fe80
	...

0800a880 <spiStop>:
  osalDbgCheck(spip != NULL);
 800a880:	2800      	cmp	r0, #0
 800a882:	d039      	beq.n	800a8f8 <spiStop+0x78>
void spiStop(SPIDriver *spip) {
 800a884:	b510      	push	{r4, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a886:	2320      	movs	r3, #32
 800a888:	4604      	mov	r4, r0
 800a88a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a88e:	f001 fcef 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a892:	f001 ff65 	bl	800c760 <_dbg_check_lock>
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 800a896:	7823      	ldrb	r3, [r4, #0]
 800a898:	1e5a      	subs	r2, r3, #1
 800a89a:	2a01      	cmp	r2, #1
 800a89c:	d904      	bls.n	800a8a8 <spiStop+0x28>
  __ASM volatile ("cpsid i" : : : "memory");
 800a89e:	b672      	cpsid	i
 800a8a0:	4b1a      	ldr	r3, [pc, #104]	; (800a90c <spiStop+0x8c>)
 800a8a2:	4a1b      	ldr	r2, [pc, #108]	; (800a910 <spiStop+0x90>)
 800a8a4:	62da      	str	r2, [r3, #44]	; 0x2c
 800a8a6:	e7fe      	b.n	800a8a6 <spiStop+0x26>
  if (spip->state == SPI_READY) {
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d012      	beq.n	800a8d2 <spiStop+0x52>
  spip->state = SPI_STOP;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 800a8b0:	f001 ff46 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a8b4:	f001 fcc4 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800a8b8:	4b14      	ldr	r3, [pc, #80]	; (800a90c <spiStop+0x8c>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d004      	beq.n	800a8ca <spiStop+0x4a>
 800a8c0:	6999      	ldr	r1, [r3, #24]
 800a8c2:	6892      	ldr	r2, [r2, #8]
 800a8c4:	6889      	ldr	r1, [r1, #8]
 800a8c6:	4291      	cmp	r1, r2
 800a8c8:	d31b      	bcc.n	800a902 <spiStop+0x82>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	bd10      	pop	{r4, pc}
    spip->spi->CR1 = 0;
 800a8d2:	69e3      	ldr	r3, [r4, #28]
    dmaStreamRelease(spip->dmarx);
 800a8d4:	6a20      	ldr	r0, [r4, #32]
    spip->spi->CR1 = 0;
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	601a      	str	r2, [r3, #0]
    spip->spi->CR2 = 0;
 800a8da:	605a      	str	r2, [r3, #4]
    dmaStreamRelease(spip->dmarx);
 800a8dc:	f7ff fac8 	bl	8009e70 <dmaStreamRelease>
    dmaStreamRelease(spip->dmatx);
 800a8e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a8e2:	f7ff fac5 	bl	8009e70 <dmaStreamRelease>
    if (&SPID1 == spip)
 800a8e6:	4b0b      	ldr	r3, [pc, #44]	; (800a914 <spiStop+0x94>)
 800a8e8:	429c      	cmp	r4, r3
 800a8ea:	d1df      	bne.n	800a8ac <spiStop+0x2c>
      rccDisableSPI1(FALSE);
 800a8ec:	4a0a      	ldr	r2, [pc, #40]	; (800a918 <spiStop+0x98>)
 800a8ee:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800a8f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8f4:	6453      	str	r3, [r2, #68]	; 0x44
 800a8f6:	e7d9      	b.n	800a8ac <spiStop+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
 800a8f8:	b672      	cpsid	i
 800a8fa:	4b04      	ldr	r3, [pc, #16]	; (800a90c <spiStop+0x8c>)
 800a8fc:	4a04      	ldr	r2, [pc, #16]	; (800a910 <spiStop+0x90>)
 800a8fe:	62da      	str	r2, [r3, #44]	; 0x2c
 800a900:	e7fe      	b.n	800a900 <spiStop+0x80>
 800a902:	b672      	cpsid	i
 800a904:	4a05      	ldr	r2, [pc, #20]	; (800a91c <spiStop+0x9c>)
 800a906:	62da      	str	r2, [r3, #44]	; 0x2c
 800a908:	e7fe      	b.n	800a908 <spiStop+0x88>
 800a90a:	bf00      	nop
 800a90c:	20001698 	.word	0x20001698
 800a910:	0800feb0 	.word	0x0800feb0
 800a914:	20001248 	.word	0x20001248
 800a918:	40023800 	.word	0x40023800
 800a91c:	0800fe80 	.word	0x0800fe80

0800a920 <spiStart>:
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 800a920:	b538      	push	{r3, r4, r5, lr}
  osalDbgCheck((spip != NULL) && (config != NULL));
 800a922:	2800      	cmp	r0, #0
 800a924:	d051      	beq.n	800a9ca <spiStart+0xaa>
 800a926:	460d      	mov	r5, r1
 800a928:	2900      	cmp	r1, #0
 800a92a:	d04e      	beq.n	800a9ca <spiStart+0xaa>
 800a92c:	4604      	mov	r4, r0
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a92e:	2320      	movs	r3, #32
 800a930:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800a934:	f001 fc9c 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800a938:	f001 ff12 	bl	800c760 <_dbg_check_lock>
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 800a93c:	7823      	ldrb	r3, [r4, #0]
 800a93e:	1e5a      	subs	r2, r3, #1
 800a940:	2a01      	cmp	r2, #1
 800a942:	d904      	bls.n	800a94e <spiStart+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 800a944:	b672      	cpsid	i
 800a946:	4b35      	ldr	r3, [pc, #212]	; (800aa1c <spiStart+0xfc>)
 800a948:	4a35      	ldr	r2, [pc, #212]	; (800aa20 <spiStart+0x100>)
 800a94a:	62da      	str	r2, [r3, #44]	; 0x2c
 800a94c:	e7fe      	b.n	800a94c <spiStart+0x2c>
  if (spip->state == SPI_STOP) {
 800a94e:	2b01      	cmp	r3, #1
  spip->config = config;
 800a950:	6065      	str	r5, [r4, #4]
 800a952:	d02d      	beq.n	800a9b0 <spiStart+0x90>
 800a954:	69e3      	ldr	r3, [r4, #28]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 800a956:	8968      	ldrh	r0, [r5, #10]
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 800a958:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 800a95a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 800a95c:	0505      	lsls	r5, r0, #20
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 800a95e:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 800a962:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800a966:	bf44      	itt	mi
 800a968:	f441 5120 	orrmi.w	r1, r1, #10240	; 0x2800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800a96c:	f442 5220 	orrmi.w	r2, r2, #10240	; 0x2800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800a970:	62a1      	str	r1, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800a972:	62e2      	str	r2, [r4, #44]	; 0x2c
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800a974:	f440 7041 	orr.w	r0, r0, #772	; 0x304
  spip->spi->CR1  = 0;
 800a978:	2100      	movs	r1, #0
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 800a97a:	2207      	movs	r2, #7
  spip->spi->CR1  = 0;
 800a97c:	6019      	str	r1, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800a97e:	6018      	str	r0, [r3, #0]
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 800a980:	605a      	str	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 800a982:	681a      	ldr	r2, [r3, #0]
  spip->state = SPI_READY;
 800a984:	2102      	movs	r1, #2
 800a986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	7021      	strb	r1, [r4, #0]
  _dbg_check_unlock();
 800a98e:	f001 fed7 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800a992:	f001 fc55 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800a996:	4b21      	ldr	r3, [pc, #132]	; (800aa1c <spiStart+0xfc>)
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d004      	beq.n	800a9a8 <spiStart+0x88>
 800a99e:	6999      	ldr	r1, [r3, #24]
 800a9a0:	6892      	ldr	r2, [r2, #8]
 800a9a2:	6889      	ldr	r1, [r1, #8]
 800a9a4:	4291      	cmp	r1, r2
 800a9a6:	d315      	bcc.n	800a9d4 <spiStart+0xb4>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	bd38      	pop	{r3, r4, r5, pc}
    if (&SPID1 == spip) {
 800a9b0:	4b1c      	ldr	r3, [pc, #112]	; (800aa24 <spiStart+0x104>)
 800a9b2:	429c      	cmp	r4, r3
 800a9b4:	d012      	beq.n	800a9dc <spiStart+0xbc>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 800a9b6:	6a21      	ldr	r1, [r4, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800a9b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 800a9ba:	69e3      	ldr	r3, [r4, #28]
 800a9bc:	6808      	ldr	r0, [r1, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800a9be:	6811      	ldr	r1, [r2, #0]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 800a9c0:	f103 020c 	add.w	r2, r3, #12
 800a9c4:	6082      	str	r2, [r0, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800a9c6:	608a      	str	r2, [r1, #8]
 800a9c8:	e7c5      	b.n	800a956 <spiStart+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800a9ca:	b672      	cpsid	i
 800a9cc:	4b13      	ldr	r3, [pc, #76]	; (800aa1c <spiStart+0xfc>)
 800a9ce:	4a14      	ldr	r2, [pc, #80]	; (800aa20 <spiStart+0x100>)
 800a9d0:	62da      	str	r2, [r3, #44]	; 0x2c
 800a9d2:	e7fe      	b.n	800a9d2 <spiStart+0xb2>
 800a9d4:	b672      	cpsid	i
 800a9d6:	4a14      	ldr	r2, [pc, #80]	; (800aa28 <spiStart+0x108>)
 800a9d8:	62da      	str	r2, [r3, #44]	; 0x2c
 800a9da:	e7fe      	b.n	800a9da <spiStart+0xba>
      b = dmaStreamAllocate(spip->dmarx,
 800a9dc:	4623      	mov	r3, r4
 800a9de:	4a13      	ldr	r2, [pc, #76]	; (800aa2c <spiStart+0x10c>)
 800a9e0:	6a20      	ldr	r0, [r4, #32]
 800a9e2:	210a      	movs	r1, #10
 800a9e4:	f7ff fd44 	bl	800a470 <dmaStreamAllocate>
      osalDbgAssert(!b, "stream already allocated");
 800a9e8:	b968      	cbnz	r0, 800aa06 <spiStart+0xe6>
      b = dmaStreamAllocate(spip->dmatx,
 800a9ea:	4623      	mov	r3, r4
 800a9ec:	4a10      	ldr	r2, [pc, #64]	; (800aa30 <spiStart+0x110>)
 800a9ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a9f0:	210a      	movs	r1, #10
 800a9f2:	f7ff fd3d 	bl	800a470 <dmaStreamAllocate>
      osalDbgAssert(!b, "stream already allocated");
 800a9f6:	b958      	cbnz	r0, 800aa10 <spiStart+0xf0>
      rccEnableSPI1(FALSE);
 800a9f8:	4a0e      	ldr	r2, [pc, #56]	; (800aa34 <spiStart+0x114>)
 800a9fa:	6865      	ldr	r5, [r4, #4]
 800a9fc:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800a9fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aa02:	6453      	str	r3, [r2, #68]	; 0x44
 800aa04:	e7d7      	b.n	800a9b6 <spiStart+0x96>
 800aa06:	b672      	cpsid	i
 800aa08:	4b04      	ldr	r3, [pc, #16]	; (800aa1c <spiStart+0xfc>)
 800aa0a:	4a0b      	ldr	r2, [pc, #44]	; (800aa38 <spiStart+0x118>)
 800aa0c:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa0e:	e7fe      	b.n	800aa0e <spiStart+0xee>
 800aa10:	b672      	cpsid	i
 800aa12:	4b02      	ldr	r3, [pc, #8]	; (800aa1c <spiStart+0xfc>)
 800aa14:	4a08      	ldr	r2, [pc, #32]	; (800aa38 <spiStart+0x118>)
 800aa16:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa18:	e7fe      	b.n	800aa18 <spiStart+0xf8>
 800aa1a:	bf00      	nop
 800aa1c:	20001698 	.word	0x20001698
 800aa20:	0800fea0 	.word	0x0800fea0
 800aa24:	20001248 	.word	0x20001248
 800aa28:	0800fe80 	.word	0x0800fe80
 800aa2c:	08008c21 	.word	0x08008c21
 800aa30:	08008981 	.word	0x08008981
 800aa34:	40023800 	.word	0x40023800
 800aa38:	0800fee0 	.word	0x0800fee0
 800aa3c:	00000000 	.word	0x00000000

0800aa40 <put_fat.part.8>:
FRESULT put_fat (
 800aa40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 800aa44:	f890 9000 	ldrb.w	r9, [r0]
 800aa48:	f1b9 0f02 	cmp.w	r9, #2
FRESULT put_fat (
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	460d      	mov	r5, r1
 800aa50:	4617      	mov	r7, r2
		switch (fs->fs_type) {
 800aa52:	d052      	beq.n	800aafa <put_fat.part.8+0xba>
 800aa54:	f1b9 0f03 	cmp.w	r9, #3
 800aa58:	d02d      	beq.n	800aab6 <put_fat.part.8+0x76>
 800aa5a:	f1b9 0f01 	cmp.w	r9, #1
 800aa5e:	d005      	beq.n	800aa6c <put_fat.part.8+0x2c>
			res = FR_INT_ERR;
 800aa60:	2602      	movs	r6, #2
		fs->wflag = 1;
 800aa62:	2301      	movs	r3, #1
 800aa64:	7123      	strb	r3, [r4, #4]
}
 800aa66:	4630      	mov	r0, r6
 800aa68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa6c:	6a01      	ldr	r1, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 800aa6e:	eb05 0855 	add.w	r8, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa72:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800aa76:	f7fe fb6b 	bl	8009150 <move_window.lto_priv.88>
			if (res != FR_OK) break;
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d1f0      	bne.n	800aa62 <put_fat.part.8+0x22>
			p = &fs->win[bc % SS(fs)];
 800aa80:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aa84:	07ea      	lsls	r2, r5, #31
 800aa86:	4423      	add	r3, r4
			bc++;
 800aa88:	f108 0801 	add.w	r8, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aa8c:	d54c      	bpl.n	800ab28 <put_fat.part.8+0xe8>
 800aa8e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800aa92:	f002 020f 	and.w	r2, r2, #15
 800aa96:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 800aa9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa9e:	6a21      	ldr	r1, [r4, #32]
			fs->wflag = 1;
 800aaa0:	f884 9004 	strb.w	r9, [r4, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aaa4:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f7fe fb51 	bl	8009150 <move_window.lto_priv.88>
			if (res != FR_OK) break;
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d053      	beq.n	800ab5a <put_fat.part.8+0x11a>
 800aab2:	4606      	mov	r6, r0
 800aab4:	e7d5      	b.n	800aa62 <put_fat.part.8+0x22>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aab6:	6a01      	ldr	r1, [r0, #32]
 800aab8:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800aabc:	f7fe fb48 	bl	8009150 <move_window.lto_priv.88>
			if (res != FR_OK) break;
 800aac0:	4606      	mov	r6, r0
 800aac2:	2800      	cmp	r0, #0
 800aac4:	d1cd      	bne.n	800aa62 <put_fat.part.8+0x22>
			p = &fs->win[clst * 4 % SS(fs)];
 800aac6:	00ad      	lsls	r5, r5, #2
 800aac8:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 800aacc:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800aad0:	4423      	add	r3, r4
			val |= LD_DWORD(p) & 0xF0000000;
 800aad2:	4425      	add	r5, r4
 800aad4:	78da      	ldrb	r2, [r3, #3]
 800aad6:	0612      	lsls	r2, r2, #24
 800aad8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800aadc:	4317      	orrs	r7, r2
			ST_DWORD(p, val);
 800aade:	f3c7 2007 	ubfx	r0, r7, #8, #8
 800aae2:	0c39      	lsrs	r1, r7, #16
 800aae4:	0e3a      	lsrs	r2, r7, #24
 800aae6:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
 800aaea:	7058      	strb	r0, [r3, #1]
 800aaec:	7099      	strb	r1, [r3, #2]
 800aaee:	70da      	strb	r2, [r3, #3]
		fs->wflag = 1;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	7123      	strb	r3, [r4, #4]
}
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aafa:	6a01      	ldr	r1, [r0, #32]
 800aafc:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800ab00:	f7fe fb26 	bl	8009150 <move_window.lto_priv.88>
			if (res != FR_OK) break;
 800ab04:	4606      	mov	r6, r0
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d1ab      	bne.n	800aa62 <put_fat.part.8+0x22>
			p = &fs->win[clst * 2 % SS(fs)];
 800ab0a:	006d      	lsls	r5, r5, #1
 800ab0c:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 800ab10:	4425      	add	r5, r4
 800ab12:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800ab16:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
		fs->wflag = 1;
 800ab1a:	2301      	movs	r3, #1
			ST_WORD(p, (WORD)val);
 800ab1c:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
		fs->wflag = 1;
 800ab20:	7123      	strb	r3, [r4, #4]
}
 800ab22:	4630      	mov	r0, r6
 800ab24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ab28:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ab2c:	6a21      	ldr	r1, [r4, #32]
			fs->wflag = 1;
 800ab2e:	f884 9004 	strb.w	r9, [r4, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ab32:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800ab36:	4620      	mov	r0, r4
 800ab38:	f7fe fb0a 	bl	8009150 <move_window.lto_priv.88>
			if (res != FR_OK) break;
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	d1b8      	bne.n	800aab2 <put_fat.part.8+0x72>
			p = &fs->win[bc % SS(fs)];
 800ab40:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ab44:	44a0      	add	r8, r4
 800ab46:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800ab4a:	f898 2030 	ldrb.w	r2, [r8, #48]	; 0x30
 800ab4e:	f022 020f 	bic.w	r2, r2, #15
 800ab52:	4317      	orrs	r7, r2
 800ab54:	f888 7030 	strb.w	r7, [r8, #48]	; 0x30
 800ab58:	e783      	b.n	800aa62 <put_fat.part.8+0x22>
			p = &fs->win[bc % SS(fs)];
 800ab5a:	f3c8 0808 	ubfx	r8, r8, #0, #9
 800ab5e:	44a0      	add	r8, r4
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ab60:	f3c7 1707 	ubfx	r7, r7, #4, #8
 800ab64:	e7f6      	b.n	800ab54 <put_fat.part.8+0x114>
 800ab66:	bf00      	nop
	...

0800ab70 <get_fat.part.6>:
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
 800ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (fs->fs_type) {
 800ab72:	7803      	ldrb	r3, [r0, #0]
 800ab74:	2b02      	cmp	r3, #2
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
 800ab76:	4604      	mov	r4, r0
 800ab78:	460d      	mov	r5, r1
	switch (fs->fs_type) {
 800ab7a:	d02c      	beq.n	800abd6 <get_fat.part.6+0x66>
 800ab7c:	2b03      	cmp	r3, #3
 800ab7e:	d00e      	beq.n	800ab9e <get_fat.part.6+0x2e>
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d001      	beq.n	800ab88 <get_fat.part.6+0x18>
		return 1;
 800ab84:	2001      	movs	r0, #1
}
 800ab86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 800ab88:	6a01      	ldr	r1, [r0, #32]
		bc = (UINT)clst; bc += bc / 2;
 800ab8a:	eb05 0755 	add.w	r7, r5, r5, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 800ab8e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800ab92:	f7fe fadd 	bl	8009150 <move_window.lto_priv.88>
 800ab96:	b380      	cbz	r0, 800abfa <get_fat.part.6+0x8a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 800ab98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 800ab9e:	6a01      	ldr	r1, [r0, #32]
 800aba0:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800aba4:	f7fe fad4 	bl	8009150 <move_window.lto_priv.88>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d1f5      	bne.n	800ab98 <get_fat.part.6+0x28>
		p = &fs->win[clst * 4 % SS(fs)];
 800abac:	00ad      	lsls	r5, r5, #2
 800abae:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 800abb2:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800abb6:	4423      	add	r3, r4
		return LD_DWORD(p) & 0x0FFFFFFF;
 800abb8:	442c      	add	r4, r5
 800abba:	7898      	ldrb	r0, [r3, #2]
 800abbc:	78d9      	ldrb	r1, [r3, #3]
 800abbe:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800abc2:	785b      	ldrb	r3, [r3, #1]
 800abc4:	0400      	lsls	r0, r0, #16
 800abc6:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 800abca:	4310      	orrs	r0, r2
 800abcc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800abd0:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800abd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 800abd6:	6a01      	ldr	r1, [r0, #32]
 800abd8:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800abdc:	f7fe fab8 	bl	8009150 <move_window.lto_priv.88>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d1d9      	bne.n	800ab98 <get_fat.part.6+0x28>
		p = &fs->win[clst * 2 % SS(fs)];
 800abe4:	006d      	lsls	r5, r5, #1
 800abe6:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
		return LD_WORD(p);
 800abea:	442c      	add	r4, r5
 800abec:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800abf0:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 800abf4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800abf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
 800abfa:	f3c7 0308 	ubfx	r3, r7, #0, #9
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 800abfe:	6a21      	ldr	r1, [r4, #32]
		wc = fs->win[bc % SS(fs)]; bc++;
 800ac00:	4423      	add	r3, r4
 800ac02:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 800ac04:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800ac08:	4620      	mov	r0, r4
		wc = fs->win[bc % SS(fs)]; bc++;
 800ac0a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 800ac0e:	f7fe fa9f 	bl	8009150 <move_window.lto_priv.88>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d1c0      	bne.n	800ab98 <get_fat.part.6+0x28>
		wc |= fs->win[bc % SS(fs)] << 8;
 800ac16:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800ac1a:	443c      	add	r4, r7
		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800ac1c:	07eb      	lsls	r3, r5, #31
		wc |= fs->win[bc % SS(fs)] << 8;
 800ac1e:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 800ac22:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800ac26:	bf4c      	ite	mi
 800ac28:	0900      	lsrmi	r0, r0, #4
 800ac2a:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800ac2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac30 <sync_window.part.3.lto_priv.135>:
FRESULT sync_window (
 800ac30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 800ac32:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1))
 800ac34:	f100 0730 	add.w	r7, r0, #48	; 0x30
FRESULT sync_window (
 800ac38:	4605      	mov	r5, r0
		if (disk_write(fs->drv, fs->win, wsect, 1))
 800ac3a:	4622      	mov	r2, r4
 800ac3c:	7840      	ldrb	r0, [r0, #1]
 800ac3e:	4639      	mov	r1, r7
 800ac40:	2301      	movs	r3, #1
 800ac42:	f7fe f99d 	bl	8008f80 <disk_write>
 800ac46:	b9b0      	cbnz	r0, 800ac76 <sync_window.part.3.lto_priv.135+0x46>
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ac48:	6a2a      	ldr	r2, [r5, #32]
 800ac4a:	69ab      	ldr	r3, [r5, #24]
		fs->wflag = 0;
 800ac4c:	7128      	strb	r0, [r5, #4]
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ac4e:	1aa2      	subs	r2, r4, r2
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d20e      	bcs.n	800ac72 <sync_window.part.3.lto_priv.135+0x42>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ac54:	78ee      	ldrb	r6, [r5, #3]
 800ac56:	2e01      	cmp	r6, #1
 800ac58:	d801      	bhi.n	800ac5e <sync_window.part.3.lto_priv.135+0x2e>
 800ac5a:	e00a      	b.n	800ac72 <sync_window.part.3.lto_priv.135+0x42>
 800ac5c:	69ab      	ldr	r3, [r5, #24]
				disk_write(fs->drv, fs->win, wsect, 1);
 800ac5e:	7868      	ldrb	r0, [r5, #1]
				wsect += fs->fsize;
 800ac60:	441c      	add	r4, r3
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ac62:	3e01      	subs	r6, #1
				disk_write(fs->drv, fs->win, wsect, 1);
 800ac64:	4622      	mov	r2, r4
 800ac66:	2301      	movs	r3, #1
 800ac68:	4639      	mov	r1, r7
 800ac6a:	f7fe f989 	bl	8008f80 <disk_write>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ac6e:	2e01      	cmp	r6, #1
 800ac70:	d1f4      	bne.n	800ac5c <sync_window.part.3.lto_priv.135+0x2c>
	return FR_OK;
 800ac72:	2000      	movs	r0, #0
 800ac74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_DISK_ERR;
 800ac76:	2001      	movs	r0, #1
}
 800ac78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	0000      	movs	r0, r0
	...

0800ac80 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800ac80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac84:	4680      	mov	r8, r0
 800ac86:	4614      	mov	r4, r2
 800ac88:	1e4f      	subs	r7, r1, #1
	int n = 0;
	TCHAR c, *p = buff;
 800ac8a:	4606      	mov	r6, r0
	int n = 0;
 800ac8c:	2500      	movs	r5, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ac8e:	42bd      	cmp	r5, r7
 800ac90:	da08      	bge.n	800aca4 <f_gets+0x24>
	res = validate(fp);							/* Check validity */
 800ac92:	4620      	mov	r0, r4
 800ac94:	f002 fe9c 	bl	800d9d0 <validate.lto_priv.125>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ac98:	b920      	cbnz	r0, 800aca4 <f_gets+0x24>
	if (fp->err)								/* Check error */
 800ac9a:	79e3      	ldrb	r3, [r4, #7]
 800ac9c:	b913      	cbnz	r3, 800aca4 <f_gets+0x24>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800ac9e:	79a3      	ldrb	r3, [r4, #6]
 800aca0:	07da      	lsls	r2, r3, #31
 800aca2:	d407      	bmi.n	800acb4 <f_gets+0x34>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
 800aca4:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800aca6:	2d00      	cmp	r5, #0
	*p = 0;
 800aca8:	7033      	strb	r3, [r6, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800acaa:	bf14      	ite	ne
 800acac:	4640      	movne	r0, r8
 800acae:	4618      	moveq	r0, r3
}
 800acb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	remain = fp->fsize - fp->fptr;
 800acb4:	68a2      	ldr	r2, [r4, #8]
	for ( ;  btr;								/* Repeat until all data read */
 800acb6:	68e3      	ldr	r3, [r4, #12]
 800acb8:	4293      	cmp	r3, r2
 800acba:	d0f3      	beq.n	800aca4 <f_gets+0x24>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800acbc:	f3c2 0308 	ubfx	r3, r2, #0, #9
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800acc0:	6820      	ldr	r0, [r4, #0]
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800acc2:	bb6b      	cbnz	r3, 800ad20 <f_gets+0xa0>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800acc4:	7883      	ldrb	r3, [r0, #2]
 800acc6:	3b01      	subs	r3, #1
 800acc8:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 800accc:	f013 09ff 	ands.w	r9, r3, #255	; 0xff
 800acd0:	d137      	bne.n	800ad42 <f_gets+0xc2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800acd2:	bb6a      	cbnz	r2, 800ad30 <f_gets+0xb0>
					clst = fp->sclust;			/* Follow from the origin */
 800acd4:	6922      	ldr	r2, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800acd6:	2a01      	cmp	r2, #1
 800acd8:	d930      	bls.n	800ad3c <f_gets+0xbc>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800acda:	1c53      	adds	r3, r2, #1
 800acdc:	d025      	beq.n	800ad2a <f_gets+0xaa>
 800acde:	6820      	ldr	r0, [r4, #0]
				fp->clust = clst;				/* Update current cluster */
 800ace0:	6162      	str	r2, [r4, #20]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800ace2:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 800ace4:	3a02      	subs	r2, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800ace6:	3b02      	subs	r3, #2
 800ace8:	429a      	cmp	r2, r3
 800acea:	d227      	bcs.n	800ad3c <f_gets+0xbc>
	return clst * fs->csize + fs->database;
 800acec:	7881      	ldrb	r1, [r0, #2]
 800acee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800acf0:	fb02 3101 	mla	r1, r2, r1, r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800acf4:	b311      	cbz	r1, 800ad3c <f_gets+0xbc>
			sect += csect;
 800acf6:	4449      	add	r1, r9
			fp->dsect = sect;
 800acf8:	61a1      	str	r1, [r4, #24]
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
 800acfa:	f7fe fa29 	bl	8009150 <move_window.lto_priv.88>
 800acfe:	b9a0      	cbnz	r0, 800ad2a <f_gets+0xaa>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800ad00:	68a3      	ldr	r3, [r4, #8]
		*d++ = *s++;
 800ad02:	6822      	ldr	r2, [r4, #0]
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800ad04:	f3c3 0108 	ubfx	r1, r3, #0, #9
		*d++ = *s++;
 800ad08:	440a      	add	r2, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ad0a:	3301      	adds	r3, #1
		*d++ = *s++;
 800ad0c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ad10:	60a3      	str	r3, [r4, #8]
		if (c == '\n') break;		/* Break on EOL */
 800ad12:	2a0a      	cmp	r2, #10
		n++;
 800ad14:	f105 0501 	add.w	r5, r5, #1
		*p++ = c;
 800ad18:	f806 2b01 	strb.w	r2, [r6], #1
		if (c == '\n') break;		/* Break on EOL */
 800ad1c:	d1b7      	bne.n	800ac8e <f_gets+0xe>
 800ad1e:	e7c1      	b.n	800aca4 <f_gets+0x24>
 800ad20:	69a1      	ldr	r1, [r4, #24]
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
 800ad22:	f7fe fa15 	bl	8009150 <move_window.lto_priv.88>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	d0ea      	beq.n	800ad00 <f_gets+0x80>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	71e3      	strb	r3, [r4, #7]
 800ad2e:	e7b9      	b.n	800aca4 <f_gets+0x24>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800ad30:	6961      	ldr	r1, [r4, #20]
	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 800ad32:	2901      	cmp	r1, #1
 800ad34:	d902      	bls.n	800ad3c <f_gets+0xbc>
 800ad36:	6943      	ldr	r3, [r0, #20]
 800ad38:	4299      	cmp	r1, r3
 800ad3a:	d304      	bcc.n	800ad46 <f_gets+0xc6>
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	71e3      	strb	r3, [r4, #7]
 800ad40:	e7b0      	b.n	800aca4 <f_gets+0x24>
 800ad42:	6962      	ldr	r2, [r4, #20]
 800ad44:	e7cd      	b.n	800ace2 <f_gets+0x62>
 800ad46:	f7ff ff13 	bl	800ab70 <get_fat.part.6>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	e7c3      	b.n	800acd6 <f_gets+0x56>
 800ad4e:	bf00      	nop

0800ad50 <f_rename>:
{
 800ad50:	b530      	push	{r4, r5, lr}
 800ad52:	b09b      	sub	sp, #108	; 0x6c
	res = find_volume(&djo.fs, &path_old, 1);
 800ad54:	2201      	movs	r2, #1
{
 800ad56:	9001      	str	r0, [sp, #4]
 800ad58:	9100      	str	r1, [sp, #0]
	res = find_volume(&djo.fs, &path_old, 1);
 800ad5a:	a813      	add	r0, sp, #76	; 0x4c
 800ad5c:	a901      	add	r1, sp, #4
 800ad5e:	f002 fe77 	bl	800da50 <find_volume.lto_priv.87>
	if (res == FR_OK) {
 800ad62:	b108      	cbz	r0, 800ad68 <f_rename+0x18>
}
 800ad64:	b01b      	add	sp, #108	; 0x6c
 800ad66:	bd30      	pop	{r4, r5, pc}
		djn.fs = djo.fs;
 800ad68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad6a:	930c      	str	r3, [sp, #48]	; 0x30
		res = follow_path(&djo, path_old);		/* Check old object */
 800ad6c:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(djo);
 800ad6e:	ab03      	add	r3, sp, #12
		res = follow_path(&djo, path_old);		/* Check old object */
 800ad70:	a813      	add	r0, sp, #76	; 0x4c
		INIT_BUF(djo);
 800ad72:	9319      	str	r3, [sp, #100]	; 0x64
		res = follow_path(&djo, path_old);		/* Check old object */
 800ad74:	f002 ffb4 	bl	800dce0 <follow_path.lto_priv.129>
		if (res == FR_OK) {						/* Old object is found */
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d1f3      	bne.n	800ad64 <f_rename+0x14>
			if (!djo.dir) {						/* Is root dir? */
 800ad7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ad7e:	b303      	cbz	r3, 800adc2 <f_rename+0x72>
 800ad80:	f103 0020 	add.w	r0, r3, #32
 800ad84:	f10d 0217 	add.w	r2, sp, #23
	const BYTE *s = (const BYTE*)src;
 800ad88:	330b      	adds	r3, #11
		*d++ = *s++;
 800ad8a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ad8e:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 800ad92:	4298      	cmp	r0, r3
 800ad94:	d1f9      	bne.n	800ad8a <f_rename+0x3a>
 800ad96:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
 800ad9a:	ab13      	add	r3, sp, #76	; 0x4c
		*d++ = *s++;
 800ad9c:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ada0:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 800ada4:	a91a      	add	r1, sp, #104	; 0x68
 800ada6:	428b      	cmp	r3, r1
 800ada8:	d1f8      	bne.n	800ad9c <f_rename+0x4c>
				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
 800adaa:	4668      	mov	r0, sp
 800adac:	f002 fe28 	bl	800da00 <get_ldnumber.lto_priv.89>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	db08      	blt.n	800adc6 <f_rename+0x76>
					res = follow_path(&djn, path_new);	/* and check if new object is exist */
 800adb4:	a80c      	add	r0, sp, #48	; 0x30
 800adb6:	9900      	ldr	r1, [sp, #0]
 800adb8:	f002 ff92 	bl	800dce0 <follow_path.lto_priv.129>
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
 800adbc:	b928      	cbnz	r0, 800adca <f_rename+0x7a>
 800adbe:	2008      	movs	r0, #8
 800adc0:	e7d0      	b.n	800ad64 <f_rename+0x14>
				res = FR_NO_FILE;
 800adc2:	2004      	movs	r0, #4
 800adc4:	e7ce      	b.n	800ad64 <f_rename+0x14>
					res = FR_INVALID_DRIVE;
 800adc6:	200b      	movs	r0, #11
 800adc8:	e7cc      	b.n	800ad64 <f_rename+0x14>
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
 800adca:	2804      	cmp	r0, #4
 800adcc:	d1ca      	bne.n	800ad64 <f_rename+0x14>
					res = dir_register(&djn);			/* Register the new entry */
 800adce:	a80c      	add	r0, sp, #48	; 0x30
 800add0:	f003 f8a6 	bl	800df20 <dir_register.lto_priv.128>
					if (res == FR_OK) {
 800add4:	2800      	cmp	r0, #0
 800add6:	d1c5      	bne.n	800ad64 <f_rename+0x14>
						dir = djn.dir;					/* Copy object information except name */
 800add8:	9c11      	ldr	r4, [sp, #68]	; 0x44
	const BYTE *s = (const BYTE*)src;
 800adda:	f10d 031a 	add.w	r3, sp, #26
 800adde:	f104 020c 	add.w	r2, r4, #12
 800ade2:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
		*d++ = *s++;
 800ade6:	f813 1b01 	ldrb.w	r1, [r3], #1
 800adea:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 800adee:	4283      	cmp	r3, r0
 800adf0:	d1f9      	bne.n	800ade6 <f_rename+0x96>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800adf2:	f89d 3018 	ldrb.w	r3, [sp, #24]
						djo.fs->wflag = 1;
 800adf6:	9813      	ldr	r0, [sp, #76]	; 0x4c
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800adf8:	f043 0320 	orr.w	r3, r3, #32
						djo.fs->wflag = 1;
 800adfc:	2201      	movs	r2, #1
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800adfe:	72e3      	strb	r3, [r4, #11]
						djo.fs->wflag = 1;
 800ae00:	7102      	strb	r2, [r0, #4]
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
 800ae02:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ae04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d01c      	beq.n	800ae44 <f_rename+0xf4>
 800ae0a:	7ae3      	ldrb	r3, [r4, #11]
 800ae0c:	06db      	lsls	r3, r3, #27
 800ae0e:	d519      	bpl.n	800ae44 <f_rename+0xf4>
	if (fs->fs_type == FS_FAT32)
 800ae10:	7802      	ldrb	r2, [r0, #0]
	cl = LD_WORD(dir+DIR_FstClusLO);
 800ae12:	7ee1      	ldrb	r1, [r4, #27]
 800ae14:	7ea3      	ldrb	r3, [r4, #26]
	if (fs->fs_type == FS_FAT32)
 800ae16:	2a03      	cmp	r2, #3
	cl = LD_WORD(dir+DIR_FstClusLO);
 800ae18:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (fs->fs_type == FS_FAT32)
 800ae1c:	d01d      	beq.n	800ae5a <f_rename+0x10a>
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800ae1e:	6942      	ldr	r2, [r0, #20]
	clst -= 2;
 800ae20:	3b02      	subs	r3, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800ae22:	3a02      	subs	r2, #2
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d216      	bcs.n	800ae56 <f_rename+0x106>
	return clst * fs->csize + fs->database;
 800ae28:	7882      	ldrb	r2, [r0, #2]
 800ae2a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ae2c:	fb03 1102 	mla	r1, r3, r2, r1
							if (!dw) {
 800ae30:	b189      	cbz	r1, 800ae56 <f_rename+0x106>
								res = move_window(djo.fs, dw);
 800ae32:	f7fe f98d 	bl	8009150 <move_window.lto_priv.88>
								if (res == FR_OK && dir[1] == '.') {
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d194      	bne.n	800ad64 <f_rename+0x14>
								dir = djo.fs->win+SZ_DIR;	/* .. entry */
 800ae3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
								if (res == FR_OK && dir[1] == '.') {
 800ae3c:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ae40:	2a2e      	cmp	r2, #46	; 0x2e
 800ae42:	d011      	beq.n	800ae68 <f_rename+0x118>
							res = dir_remove(&djo);		/* Remove old entry */
 800ae44:	a813      	add	r0, sp, #76	; 0x4c
 800ae46:	f003 f84b 	bl	800dee0 <dir_remove.lto_priv.127>
							if (res == FR_OK)
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	d18a      	bne.n	800ad64 <f_rename+0x14>
								res = sync_fs(djo.fs);
 800ae4e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ae50:	f7fe f8e6 	bl	8009020 <sync_fs.lto_priv.126>
 800ae54:	e786      	b.n	800ad64 <f_rename+0x14>
								res = FR_INT_ERR;
 800ae56:	2002      	movs	r0, #2
 800ae58:	e784      	b.n	800ad64 <f_rename+0x14>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 800ae5a:	7d61      	ldrb	r1, [r4, #21]
 800ae5c:	7d22      	ldrb	r2, [r4, #20]
 800ae5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ae62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae66:	e7da      	b.n	800ae1e <f_rename+0xce>
									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
 800ae68:	781a      	ldrb	r2, [r3, #0]
 800ae6a:	2a03      	cmp	r2, #3
 800ae6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae6e:	d00f      	beq.n	800ae90 <f_rename+0x140>
 800ae70:	4610      	mov	r0, r2
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 800ae72:	0c02      	lsrs	r2, r0, #16
 800ae74:	0a15      	lsrs	r5, r2, #8
	ST_WORD(dir+DIR_FstClusLO, cl);
 800ae76:	f3c0 2407 	ubfx	r4, r0, #8, #8
									djo.fs->wflag = 1;
 800ae7a:	2101      	movs	r1, #1
	ST_WORD(dir+DIR_FstClusLO, cl);
 800ae7c:	f883 006a 	strb.w	r0, [r3, #106]	; 0x6a
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 800ae80:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800ae84:	f883 5065 	strb.w	r5, [r3, #101]	; 0x65
	ST_WORD(dir+DIR_FstClusLO, cl);
 800ae88:	f883 406b 	strb.w	r4, [r3, #107]	; 0x6b
									djo.fs->wflag = 1;
 800ae8c:	7119      	strb	r1, [r3, #4]
 800ae8e:	e7d9      	b.n	800ae44 <f_rename+0xf4>
									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
 800ae90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ae92:	428a      	cmp	r2, r1
 800ae94:	d1ec      	bne.n	800ae70 <f_rename+0x120>
 800ae96:	e7ec      	b.n	800ae72 <f_rename+0x122>
	...

0800aea0 <f_unlink>:
{
 800aea0:	b530      	push	{r4, r5, lr}
 800aea2:	b095      	sub	sp, #84	; 0x54
 800aea4:	a914      	add	r1, sp, #80	; 0x50
	res = find_volume(&dj.fs, &path, 1);
 800aea6:	2201      	movs	r2, #1
{
 800aea8:	f841 0d4c 	str.w	r0, [r1, #-76]!
	res = find_volume(&dj.fs, &path, 1);
 800aeac:	a80d      	add	r0, sp, #52	; 0x34
 800aeae:	f002 fdcf 	bl	800da50 <find_volume.lto_priv.87>
	if (res == FR_OK) {
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	b110      	cbz	r0, 800aebc <f_unlink+0x1c>
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	b015      	add	sp, #84	; 0x54
 800aeba:	bd30      	pop	{r4, r5, pc}
		INIT_BUF(dj);
 800aebc:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);		/* Follow the file path */
 800aebe:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800aec0:	9313      	str	r3, [sp, #76]	; 0x4c
		res = follow_path(&dj, path);		/* Follow the file path */
 800aec2:	a80d      	add	r0, sp, #52	; 0x34
 800aec4:	f002 ff0c 	bl	800dce0 <follow_path.lto_priv.129>
		if (res == FR_OK) {					/* The object is accessible */
 800aec8:	4603      	mov	r3, r0
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d1f3      	bne.n	800aeb6 <f_unlink+0x16>
			dir = dj.dir;
 800aece:	9a12      	ldr	r2, [sp, #72]	; 0x48
			if (!dir) {
 800aed0:	2a00      	cmp	r2, #0
 800aed2:	d06c      	beq.n	800afae <f_unlink+0x10e>
				if (dir[DIR_Attr] & AM_RDO)
 800aed4:	7ad1      	ldrb	r1, [r2, #11]
					res = FR_DENIED;		/* Cannot remove R/O object */
 800aed6:	f011 0f01 	tst.w	r1, #1
 800aeda:	bf18      	it	ne
 800aedc:	2307      	movne	r3, #7
	if (fs->fs_type == FS_FAT32)
 800aede:	990d      	ldr	r1, [sp, #52]	; 0x34
	cl = LD_WORD(dir+DIR_FstClusLO);
 800aee0:	7ed0      	ldrb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32)
 800aee2:	7809      	ldrb	r1, [r1, #0]
	cl = LD_WORD(dir+DIR_FstClusLO);
 800aee4:	7e94      	ldrb	r4, [r2, #26]
	if (fs->fs_type == FS_FAT32)
 800aee6:	2903      	cmp	r1, #3
	cl = LD_WORD(dir+DIR_FstClusLO);
 800aee8:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	if (fs->fs_type == FS_FAT32)
 800aeec:	d03b      	beq.n	800af66 <f_unlink+0xc6>
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1e1      	bne.n	800aeb6 <f_unlink+0x16>
 800aef2:	7ad3      	ldrb	r3, [r2, #11]
 800aef4:	06db      	lsls	r3, r3, #27
 800aef6:	d540      	bpl.n	800af7a <f_unlink+0xda>
				if (dclst < 2) {
 800aef8:	2c01      	cmp	r4, #1
 800aefa:	d94b      	bls.n	800af94 <f_unlink+0xf4>
 800aefc:	f10d 0217 	add.w	r2, sp, #23
 800af00:	ab0d      	add	r3, sp, #52	; 0x34
		*d++ = *s++;
 800af02:	f813 1b01 	ldrb.w	r1, [r3], #1
 800af06:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 800af0a:	a914      	add	r1, sp, #80	; 0x50
 800af0c:	428b      	cmp	r3, r1
 800af0e:	d1f8      	bne.n	800af02 <f_unlink+0x62>
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
 800af10:	a806      	add	r0, sp, #24
 800af12:	2102      	movs	r1, #2
					sdj.sclust = dclst;
 800af14:	9408      	str	r4, [sp, #32]
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
 800af16:	f7fd fee3 	bl	8008ce0 <dir_sdi.lto_priv.131>
					if (res == FR_OK) {
 800af1a:	4603      	mov	r3, r0
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d1ca      	bne.n	800aeb6 <f_unlink+0x16>
 800af20:	2304      	movs	r3, #4
 800af22:	e019      	b.n	800af58 <f_unlink+0xb8>
		res = move_window(dp->fs, dp->sect);
 800af24:	9806      	ldr	r0, [sp, #24]
 800af26:	f7fe f913 	bl	8009150 <move_window.lto_priv.88>
		res = dir_next(dp, 0);				/* Next entry */
 800af2a:	2100      	movs	r1, #0
		if (res != FR_OK) break;
 800af2c:	4603      	mov	r3, r0
 800af2e:	2800      	cmp	r0, #0
 800af30:	d13f      	bne.n	800afb2 <f_unlink+0x112>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800af32:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
		c = dir[DIR_Name];
 800af34:	782a      	ldrb	r2, [r5, #0]
		res = dir_next(dp, 0);				/* Next entry */
 800af36:	a806      	add	r0, sp, #24
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800af38:	b1f2      	cbz	r2, 800af78 <f_unlink+0xd8>
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a valid entry? */
 800af3a:	2ae5      	cmp	r2, #229	; 0xe5
 800af3c:	d008      	beq.n	800af50 <f_unlink+0xb0>
 800af3e:	2a2e      	cmp	r2, #46	; 0x2e
 800af40:	d006      	beq.n	800af50 <f_unlink+0xb0>
		a = dir[DIR_Attr] & AM_MASK;
 800af42:	7aeb      	ldrb	r3, [r5, #11]
 800af44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a valid entry? */
 800af48:	2b0f      	cmp	r3, #15
 800af4a:	d001      	beq.n	800af50 <f_unlink+0xb0>
 800af4c:	2b08      	cmp	r3, #8
 800af4e:	d108      	bne.n	800af62 <f_unlink+0xc2>
		res = dir_next(dp, 0);				/* Next entry */
 800af50:	f7fd ff7e 	bl	8008e50 <dir_next.lto_priv.132>
		if (res != FR_OK) break;
 800af54:	4603      	mov	r3, r0
 800af56:	bb60      	cbnz	r0, 800afb2 <f_unlink+0x112>
	while (dp->sect) {
 800af58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		res = move_window(dp->fs, dp->sect);
 800af5a:	4611      	mov	r1, r2
	while (dp->sect) {
 800af5c:	2a00      	cmp	r2, #0
 800af5e:	d1e1      	bne.n	800af24 <f_unlink+0x84>
	if (res != FR_OK) dp->sect = 0;
 800af60:	bb3b      	cbnz	r3, 800afb2 <f_unlink+0x112>
						) res = FR_DENIED;
 800af62:	2307      	movs	r3, #7
 800af64:	e7a7      	b.n	800aeb6 <f_unlink+0x16>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 800af66:	7d50      	ldrb	r0, [r2, #21]
 800af68:	7d11      	ldrb	r1, [r2, #20]
 800af6a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800af6e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
 800af72:	2b00      	cmp	r3, #0
 800af74:	d19f      	bne.n	800aeb6 <f_unlink+0x16>
 800af76:	e7bc      	b.n	800aef2 <f_unlink+0x52>
	if (res != FR_OK) dp->sect = 0;
 800af78:	930a      	str	r3, [sp, #40]	; 0x28
				res = dir_remove(&dj);		/* Remove the directory entry */
 800af7a:	a80d      	add	r0, sp, #52	; 0x34
 800af7c:	f002 ffb0 	bl	800dee0 <dir_remove.lto_priv.127>
				if (res == FR_OK) {
 800af80:	4603      	mov	r3, r0
 800af82:	2800      	cmp	r0, #0
 800af84:	d197      	bne.n	800aeb6 <f_unlink+0x16>
					if (dclst)				/* Remove the cluster chain if exist */
 800af86:	b16c      	cbz	r4, 800afa4 <f_unlink+0x104>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800af88:	2c01      	cmp	r4, #1
 800af8a:	d003      	beq.n	800af94 <f_unlink+0xf4>
						res = remove_chain(dj.fs, dclst);
 800af8c:	980d      	ldr	r0, [sp, #52]	; 0x34
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800af8e:	6943      	ldr	r3, [r0, #20]
 800af90:	429c      	cmp	r4, r3
 800af92:	d301      	bcc.n	800af98 <f_unlink+0xf8>
					res = FR_INT_ERR;
 800af94:	2302      	movs	r3, #2
 800af96:	e78e      	b.n	800aeb6 <f_unlink+0x16>
 800af98:	4621      	mov	r1, r4
 800af9a:	f000 fed9 	bl	800bd50 <remove_chain.part.10.lto_priv.130>
					if (res == FR_OK) res = sync_fs(dj.fs);
 800af9e:	4603      	mov	r3, r0
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d188      	bne.n	800aeb6 <f_unlink+0x16>
 800afa4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800afa6:	f7fe f83b 	bl	8009020 <sync_fs.lto_priv.126>
 800afaa:	4603      	mov	r3, r0
 800afac:	e783      	b.n	800aeb6 <f_unlink+0x16>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
 800afae:	2306      	movs	r3, #6
 800afb0:	e795      	b.n	800aede <f_unlink+0x3e>
	if (res != FR_OK) dp->sect = 0;
 800afb2:	2200      	movs	r2, #0
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
 800afb4:	2b04      	cmp	r3, #4
	if (res != FR_OK) dp->sect = 0;
 800afb6:	920a      	str	r2, [sp, #40]	; 0x28
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
 800afb8:	f47f af7d 	bne.w	800aeb6 <f_unlink+0x16>
 800afbc:	e7dd      	b.n	800af7a <f_unlink+0xda>
 800afbe:	bf00      	nop

0800afc0 <f_stat>:
{
 800afc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afc2:	b08d      	sub	sp, #52	; 0x34
 800afc4:	ab0c      	add	r3, sp, #48	; 0x30
 800afc6:	460d      	mov	r5, r1
 800afc8:	f843 0d2c 	str.w	r0, [r3, #-44]!
	res = find_volume(&dj.fs, &path, 0);
 800afcc:	2200      	movs	r2, #0
 800afce:	a805      	add	r0, sp, #20
 800afd0:	4619      	mov	r1, r3
 800afd2:	f002 fd3d 	bl	800da50 <find_volume.lto_priv.87>
	if (res == FR_OK) {
 800afd6:	b108      	cbz	r0, 800afdc <f_stat+0x1c>
}
 800afd8:	b00d      	add	sp, #52	; 0x34
 800afda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		INIT_BUF(dj);
 800afdc:	ab02      	add	r3, sp, #8
		res = follow_path(&dj, path);	/* Follow the file path */
 800afde:	a805      	add	r0, sp, #20
 800afe0:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800afe2:	930b      	str	r3, [sp, #44]	; 0x2c
		res = follow_path(&dj, path);	/* Follow the file path */
 800afe4:	f002 fe7c 	bl	800dce0 <follow_path.lto_priv.129>
		if (res == FR_OK) {				/* Follow completed */
 800afe8:	2800      	cmp	r0, #0
 800afea:	d1f5      	bne.n	800afd8 <f_stat+0x18>
			if (dj.dir) {		/* Found an object */
 800afec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800afee:	b366      	cbz	r6, 800b04a <f_stat+0x8a>
				if (fno) get_fileinfo(&dj, fno);
 800aff0:	2d00      	cmp	r5, #0
 800aff2:	d0f1      	beq.n	800afd8 <f_stat+0x18>
	if (dp->sect) {		/* Get SFN */
 800aff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
	p = fno->fname;
 800aff6:	f105 0109 	add.w	r1, r5, #9
	if (dp->sect) {		/* Get SFN */
 800affa:	b313      	cbz	r3, 800b042 <f_stat+0x82>
 800affc:	1e74      	subs	r4, r6, #1
 800affe:	4602      	mov	r2, r0
			if (i == 9) *p++ = '.';			/* Insert a . if extension is exist */
 800b000:	272e      	movs	r7, #46	; 0x2e
			c = (TCHAR)dir[i++];
 800b002:	f814 3f01 	ldrb.w	r3, [r4, #1]!
			if (c == ' ') continue;			/* Skip padding spaces */
 800b006:	2b20      	cmp	r3, #32
			c = (TCHAR)dir[i++];
 800b008:	f102 0201 	add.w	r2, r2, #1
			if (c == ' ') continue;			/* Skip padding spaces */
 800b00c:	d009      	beq.n	800b022 <f_stat+0x62>
			if (c == NDDE) c = (TCHAR)DDE;	/* Restore replaced DDE character */
 800b00e:	2b05      	cmp	r3, #5
 800b010:	bf08      	it	eq
 800b012:	23e5      	moveq	r3, #229	; 0xe5
			if (i == 9) *p++ = '.';			/* Insert a . if extension is exist */
 800b014:	2a09      	cmp	r2, #9
 800b016:	bf04      	itt	eq
 800b018:	700f      	strbeq	r7, [r1, #0]
 800b01a:	3101      	addeq	r1, #1
			*p++ = c;
 800b01c:	3101      	adds	r1, #1
 800b01e:	f801 3c01 	strb.w	r3, [r1, #-1]
		while (i < 11) {		/* Copy name body and extension */
 800b022:	2a0b      	cmp	r2, #11
 800b024:	d1ed      	bne.n	800b002 <f_stat+0x42>
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800b026:	7af3      	ldrb	r3, [r6, #11]
 800b028:	722b      	strb	r3, [r5, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 800b02a:	69f3      	ldr	r3, [r6, #28]
 800b02c:	602b      	str	r3, [r5, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 800b02e:	7e72      	ldrb	r2, [r6, #25]
 800b030:	7e33      	ldrb	r3, [r6, #24]
 800b032:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b036:	80ab      	strh	r3, [r5, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 800b038:	7df2      	ldrb	r2, [r6, #23]
 800b03a:	7db3      	ldrb	r3, [r6, #22]
 800b03c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b040:	80eb      	strh	r3, [r5, #6]
	*p = 0;		/* Terminate SFN string by a \0 */
 800b042:	2300      	movs	r3, #0
 800b044:	700b      	strb	r3, [r1, #0]
}
 800b046:	b00d      	add	sp, #52	; 0x34
 800b048:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_INVALID_NAME;
 800b04a:	2006      	movs	r0, #6
 800b04c:	e7c4      	b.n	800afd8 <f_stat+0x18>
 800b04e:	bf00      	nop

0800b050 <f_lseek>:
{
 800b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b052:	460d      	mov	r5, r1
 800b054:	4604      	mov	r4, r0
	res = validate(fp);					/* Check validity of the object */
 800b056:	f002 fcbb 	bl	800d9d0 <validate.lto_priv.125>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b05a:	4607      	mov	r7, r0
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d130      	bne.n	800b0c2 <f_lseek+0x72>
	if (fp->err)						/* Check error */
 800b060:	79e3      	ldrb	r3, [r4, #7]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d12f      	bne.n	800b0c6 <f_lseek+0x76>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800b066:	68e3      	ldr	r3, [r4, #12]
 800b068:	42ab      	cmp	r3, r5
 800b06a:	d204      	bcs.n	800b076 <f_lseek+0x26>
			 && !(fp->flag & FA_WRITE)
 800b06c:	79a2      	ldrb	r2, [r4, #6]
 800b06e:	f012 0f02 	tst.w	r2, #2
 800b072:	bf08      	it	eq
 800b074:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 800b076:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800b078:	68a3      	ldr	r3, [r4, #8]
		fp->fptr = nsect = 0;
 800b07a:	60a2      	str	r2, [r4, #8]
		if (ofs) {
 800b07c:	b30d      	cbz	r5, 800b0c2 <f_lseek+0x72>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800b07e:	6820      	ldr	r0, [r4, #0]
 800b080:	7886      	ldrb	r6, [r0, #2]
 800b082:	0276      	lsls	r6, r6, #9
			if (ifptr > 0 &&
 800b084:	b13b      	cbz	r3, 800b096 <f_lseek+0x46>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b086:	3b01      	subs	r3, #1
 800b088:	1e6a      	subs	r2, r5, #1
 800b08a:	fbb3 f1f6 	udiv	r1, r3, r6
 800b08e:	fbb2 f2f6 	udiv	r2, r2, r6
			if (ifptr > 0 &&
 800b092:	428a      	cmp	r2, r1
 800b094:	d255      	bcs.n	800b142 <f_lseek+0xf2>
				clst = fp->sclust;						/* start from the first cluster */
 800b096:	6921      	ldr	r1, [r4, #16]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b098:	2900      	cmp	r1, #0
 800b09a:	d058      	beq.n	800b14e <f_lseek+0xfe>
				fp->clust = clst;
 800b09c:	6161      	str	r1, [r4, #20]
			if (clst != 0) {
 800b09e:	b9a9      	cbnz	r1, 800b0cc <f_lseek+0x7c>
 800b0a0:	68a3      	ldr	r3, [r4, #8]
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800b0a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0a6:	2a00      	cmp	r2, #0
 800b0a8:	d062      	beq.n	800b170 <f_lseek+0x120>
 800b0aa:	69a2      	ldr	r2, [r4, #24]
 800b0ac:	4291      	cmp	r1, r2
 800b0ae:	68e2      	ldr	r2, [r4, #12]
			fp->dsect = nsect;
 800b0b0:	bf18      	it	ne
 800b0b2:	61a1      	strne	r1, [r4, #24]
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d204      	bcs.n	800b0c2 <f_lseek+0x72>
			fp->flag |= FA__WRITTEN;
 800b0b8:	79a2      	ldrb	r2, [r4, #6]
			fp->fsize = fp->fptr;
 800b0ba:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
 800b0bc:	f042 0320 	orr.w	r3, r2, #32
 800b0c0:	71a3      	strb	r3, [r4, #6]
}
 800b0c2:	4638      	mov	r0, r7
 800b0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fp->err)						/* Check error */
 800b0c6:	461f      	mov	r7, r3
}
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while (ofs > bcs) {						/* Cluster following loop */
 800b0cc:	42b5      	cmp	r5, r6
 800b0ce:	d94d      	bls.n	800b16c <f_lseek+0x11c>
 800b0d0:	6820      	ldr	r0, [r4, #0]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b0d2:	79a3      	ldrb	r3, [r4, #6]
 800b0d4:	079a      	lsls	r2, r3, #30
					ofs -= bcs;
 800b0d6:	eba5 0506 	sub.w	r5, r5, r6
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b0da:	d407      	bmi.n	800b0ec <f_lseek+0x9c>
	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 800b0dc:	2901      	cmp	r1, #1
 800b0de:	d902      	bls.n	800b0e6 <f_lseek+0x96>
 800b0e0:	6943      	ldr	r3, [r0, #20]
 800b0e2:	428b      	cmp	r3, r1
 800b0e4:	d829      	bhi.n	800b13a <f_lseek+0xea>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b0e6:	2702      	movs	r7, #2
 800b0e8:	71e7      	strb	r7, [r4, #7]
 800b0ea:	e7ea      	b.n	800b0c2 <f_lseek+0x72>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800b0ec:	f7fd fe48 	bl	8008d80 <create_chain.lto_priv.133>
						if (clst == 0) {				/* When disk gets full, clip file size */
 800b0f0:	4601      	mov	r1, r0
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d039      	beq.n	800b16a <f_lseek+0x11a>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b0f6:	1c4b      	adds	r3, r1, #1
 800b0f8:	d032      	beq.n	800b160 <f_lseek+0x110>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800b0fa:	2901      	cmp	r1, #1
 800b0fc:	d9f3      	bls.n	800b0e6 <f_lseek+0x96>
 800b0fe:	6820      	ldr	r0, [r4, #0]
 800b100:	6943      	ldr	r3, [r0, #20]
 800b102:	4299      	cmp	r1, r3
 800b104:	d2ef      	bcs.n	800b0e6 <f_lseek+0x96>
					fp->fptr += bcs;
 800b106:	68a3      	ldr	r3, [r4, #8]
					fp->clust = clst;
 800b108:	6161      	str	r1, [r4, #20]
					fp->fptr += bcs;
 800b10a:	4433      	add	r3, r6
				while (ofs > bcs) {						/* Cluster following loop */
 800b10c:	42ae      	cmp	r6, r5
					fp->fptr += bcs;
 800b10e:	60a3      	str	r3, [r4, #8]
				while (ofs > bcs) {						/* Cluster following loop */
 800b110:	d3df      	bcc.n	800b0d2 <f_lseek+0x82>
				fp->fptr += ofs;
 800b112:	442b      	add	r3, r5
				if (ofs % SS(fp->fs)) {
 800b114:	f3c5 0208 	ubfx	r2, r5, #0, #9
				fp->fptr += ofs;
 800b118:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
 800b11a:	b322      	cbz	r2, 800b166 <f_lseek+0x116>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800b11c:	6820      	ldr	r0, [r4, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800b11e:	6942      	ldr	r2, [r0, #20]
	clst -= 2;
 800b120:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800b122:	3a02      	subs	r2, #2
 800b124:	4291      	cmp	r1, r2
 800b126:	d2de      	bcs.n	800b0e6 <f_lseek+0x96>
	return clst * fs->csize + fs->database;
 800b128:	7882      	ldrb	r2, [r0, #2]
 800b12a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800b12c:	fb01 0102 	mla	r1, r1, r2, r0
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800b130:	2900      	cmp	r1, #0
 800b132:	d0d8      	beq.n	800b0e6 <f_lseek+0x96>
					nsect += ofs / SS(fp->fs);
 800b134:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 800b138:	e7b3      	b.n	800b0a2 <f_lseek+0x52>
 800b13a:	f7ff fd19 	bl	800ab70 <get_fat.part.6>
 800b13e:	4601      	mov	r1, r0
 800b140:	e7d9      	b.n	800b0f6 <f_lseek+0xa6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800b142:	4272      	negs	r2, r6
 800b144:	4013      	ands	r3, r2
 800b146:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
 800b148:	1aed      	subs	r5, r5, r3
				clst = fp->clust;
 800b14a:	6961      	ldr	r1, [r4, #20]
 800b14c:	e7a7      	b.n	800b09e <f_lseek+0x4e>
					clst = create_chain(fp->fs, 0);
 800b14e:	f7fd fe17 	bl	8008d80 <create_chain.lto_priv.133>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b152:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 800b154:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b156:	d0c6      	beq.n	800b0e6 <f_lseek+0x96>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b158:	3001      	adds	r0, #1
 800b15a:	d001      	beq.n	800b160 <f_lseek+0x110>
					fp->sclust = clst;
 800b15c:	6121      	str	r1, [r4, #16]
 800b15e:	e79d      	b.n	800b09c <f_lseek+0x4c>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b160:	2701      	movs	r7, #1
 800b162:	71e7      	strb	r7, [r4, #7]
 800b164:	e7ad      	b.n	800b0c2 <f_lseek+0x72>
		fp->fptr = nsect = 0;
 800b166:	4611      	mov	r1, r2
 800b168:	e79b      	b.n	800b0a2 <f_lseek+0x52>
						if (clst == 0) {				/* When disk gets full, clip file size */
 800b16a:	4635      	mov	r5, r6
 800b16c:	68a3      	ldr	r3, [r4, #8]
 800b16e:	e7d0      	b.n	800b112 <f_lseek+0xc2>
 800b170:	68e2      	ldr	r2, [r4, #12]
 800b172:	e79f      	b.n	800b0b4 <f_lseek+0x64>
	...

0800b180 <f_close>:
{
 800b180:	b570      	push	{r4, r5, r6, lr}
 800b182:	4605      	mov	r5, r0
	res = validate(fp);					/* Check validity of the object */
 800b184:	f002 fc24 	bl	800d9d0 <validate.lto_priv.125>
	if (res == FR_OK) {
 800b188:	4604      	mov	r4, r0
 800b18a:	b920      	cbnz	r0, 800b196 <f_close+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800b18c:	79ab      	ldrb	r3, [r5, #6]
 800b18e:	069b      	lsls	r3, r3, #26
 800b190:	d403      	bmi.n	800b19a <f_close+0x1a>
				fp->fs = 0;				/* Invalidate file object */
 800b192:	2300      	movs	r3, #0
 800b194:	602b      	str	r3, [r5, #0]
}
 800b196:	4620      	mov	r0, r4
 800b198:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
 800b19a:	69e9      	ldr	r1, [r5, #28]
 800b19c:	6828      	ldr	r0, [r5, #0]
 800b19e:	f7fd ffd7 	bl	8009150 <move_window.lto_priv.88>
			if (res == FR_OK) {
 800b1a2:	b110      	cbz	r0, 800b1aa <f_close+0x2a>
	if (res == FR_OK)
 800b1a4:	4604      	mov	r4, r0
}
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	bd70      	pop	{r4, r5, r6, pc}
				dir = fp->dir_ptr;
 800b1aa:	6a2b      	ldr	r3, [r5, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800b1ac:	7ada      	ldrb	r2, [r3, #11]
 800b1ae:	f042 0220 	orr.w	r2, r2, #32
 800b1b2:	72da      	strb	r2, [r3, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 800b1b4:	68ea      	ldr	r2, [r5, #12]
 800b1b6:	771a      	strb	r2, [r3, #28]
 800b1b8:	89aa      	ldrh	r2, [r5, #12]
 800b1ba:	0a12      	lsrs	r2, r2, #8
 800b1bc:	775a      	strb	r2, [r3, #29]
 800b1be:	89ea      	ldrh	r2, [r5, #14]
 800b1c0:	779a      	strb	r2, [r3, #30]
 800b1c2:	7bea      	ldrb	r2, [r5, #15]
 800b1c4:	77da      	strb	r2, [r3, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800b1c6:	692a      	ldr	r2, [r5, #16]
	ST_WORD(dir+DIR_FstClusLO, cl);
 800b1c8:	769a      	strb	r2, [r3, #26]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 800b1ca:	0c11      	lsrs	r1, r2, #16
 800b1cc:	0a0e      	lsrs	r6, r1, #8
	ST_WORD(dir+DIR_FstClusLO, cl);
 800b1ce:	f3c2 2207 	ubfx	r2, r2, #8, #8
				ST_DWORD(dir+DIR_WrtTime, tm);
 800b1d2:	2021      	movs	r0, #33	; 0x21
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 800b1d4:	7519      	strb	r1, [r3, #20]
				ST_DWORD(dir+DIR_WrtTime, tm);
 800b1d6:	7618      	strb	r0, [r3, #24]
 800b1d8:	759c      	strb	r4, [r3, #22]
 800b1da:	75dc      	strb	r4, [r3, #23]
 800b1dc:	765c      	strb	r4, [r3, #25]
				ST_WORD(dir+DIR_LstAccDate, 0);
 800b1de:	749c      	strb	r4, [r3, #18]
 800b1e0:	74dc      	strb	r4, [r3, #19]
	ST_WORD(dir+DIR_FstClusLO, cl);
 800b1e2:	76da      	strb	r2, [r3, #27]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 800b1e4:	755e      	strb	r6, [r3, #21]
				fp->flag &= ~FA__WRITTEN;
 800b1e6:	79ab      	ldrb	r3, [r5, #6]
				fp->fs->wflag = 1;
 800b1e8:	682a      	ldr	r2, [r5, #0]
				fp->flag &= ~FA__WRITTEN;
 800b1ea:	f023 0320 	bic.w	r3, r3, #32
				fp->fs->wflag = 1;
 800b1ee:	2101      	movs	r1, #1
				fp->flag &= ~FA__WRITTEN;
 800b1f0:	71ab      	strb	r3, [r5, #6]
				res = sync_fs(fp->fs);
 800b1f2:	4610      	mov	r0, r2
				fp->fs->wflag = 1;
 800b1f4:	7111      	strb	r1, [r2, #4]
				res = sync_fs(fp->fs);
 800b1f6:	f7fd ff13 	bl	8009020 <sync_fs.lto_priv.126>
	if (res == FR_OK)
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	d1d2      	bne.n	800b1a4 <f_close+0x24>
		res = validate(fp);				/* Lock volume */
 800b1fe:	4628      	mov	r0, r5
 800b200:	f002 fbe6 	bl	800d9d0 <validate.lto_priv.125>
		if (res == FR_OK) {
 800b204:	2800      	cmp	r0, #0
 800b206:	d0c4      	beq.n	800b192 <f_close+0x12>
	if (res == FR_OK)
 800b208:	4604      	mov	r4, r0
 800b20a:	e7cc      	b.n	800b1a6 <f_close+0x26>
 800b20c:	0000      	movs	r0, r0
	...

0800b210 <f_write>:
{
 800b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	469a      	mov	sl, r3
	*bw = 0;	/* Clear write byte counter */
 800b216:	2300      	movs	r3, #0
{
 800b218:	b083      	sub	sp, #12
	*bw = 0;	/* Clear write byte counter */
 800b21a:	f8ca 3000 	str.w	r3, [sl]
{
 800b21e:	460d      	mov	r5, r1
 800b220:	4690      	mov	r8, r2
 800b222:	4606      	mov	r6, r0
	res = validate(fp);						/* Check validity */
 800b224:	f002 fbd4 	bl	800d9d0 <validate.lto_priv.125>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b228:	4681      	mov	r9, r0
 800b22a:	b930      	cbnz	r0, 800b23a <f_write+0x2a>
	if (fp->err)							/* Check error */
 800b22c:	79f3      	ldrb	r3, [r6, #7]
 800b22e:	b943      	cbnz	r3, 800b242 <f_write+0x32>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800b230:	79b3      	ldrb	r3, [r6, #6]
 800b232:	079a      	lsls	r2, r3, #30
 800b234:	d40a      	bmi.n	800b24c <f_write+0x3c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800b236:	f04f 0907 	mov.w	r9, #7
}
 800b23a:	4648      	mov	r0, r9
 800b23c:	b003      	add	sp, #12
 800b23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fp->err)							/* Check error */
 800b242:	4699      	mov	r9, r3
}
 800b244:	4648      	mov	r0, r9
 800b246:	b003      	add	sp, #12
 800b248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800b24c:	68b2      	ldr	r2, [r6, #8]
 800b24e:	eb18 0f02 	cmn.w	r8, r2
 800b252:	d307      	bcc.n	800b264 <f_write+0x54>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800b254:	68f1      	ldr	r1, [r6, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800b256:	f043 0320 	orr.w	r3, r3, #32
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800b25a:	4291      	cmp	r1, r2
 800b25c:	bf38      	it	cc
 800b25e:	60f2      	strcc	r2, [r6, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800b260:	71b3      	strb	r3, [r6, #6]
 800b262:	e7ea      	b.n	800b23a <f_write+0x2a>
	for ( ;  btw;							/* Repeat until all data written */
 800b264:	f1b8 0f00 	cmp.w	r8, #0
 800b268:	d0f4      	beq.n	800b254 <f_write+0x44>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800b26a:	f3c2 0408 	ubfx	r4, r2, #0, #9
		fp->fs->wflag = 1;
 800b26e:	f04f 0b01 	mov.w	fp, #1
					fp->fs->wflag = 0;
 800b272:	9001      	str	r0, [sp, #4]
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800b274:	b374      	cbz	r4, 800b2d4 <f_write+0xc4>
 800b276:	69b7      	ldr	r7, [r6, #24]
 800b278:	6830      	ldr	r0, [r6, #0]
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800b27a:	f5c4 7400 	rsb	r4, r4, #512	; 0x200
 800b27e:	4544      	cmp	r4, r8
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
 800b280:	4639      	mov	r1, r7
 800b282:	bf28      	it	cs
 800b284:	4644      	movcs	r4, r8
 800b286:	f7fd ff63 	bl	8009150 <move_window.lto_priv.88>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	f040 8084 	bne.w	800b398 <f_write+0x188>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800b290:	68b2      	ldr	r2, [r6, #8]
 800b292:	6833      	ldr	r3, [r6, #0]
 800b294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b298:	322f      	adds	r2, #47	; 0x2f
 800b29a:	4413      	add	r3, r2
 800b29c:	1928      	adds	r0, r5, r4
 800b29e:	4629      	mov	r1, r5
		*d++ = *s++;
 800b2a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2a4:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (cnt--)
 800b2a8:	4281      	cmp	r1, r0
 800b2aa:	d1f9      	bne.n	800b2a0 <f_write+0x90>
		fp->fs->wflag = 1;
 800b2ac:	6832      	ldr	r2, [r6, #0]
 800b2ae:	68b3      	ldr	r3, [r6, #8]
 800b2b0:	f882 b004 	strb.w	fp, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800b2b4:	4423      	add	r3, r4
 800b2b6:	60b3      	str	r3, [r6, #8]
 800b2b8:	f8da 3000 	ldr.w	r3, [sl]
	for ( ;  btw;							/* Repeat until all data written */
 800b2bc:	ebb8 0804 	subs.w	r8, r8, r4
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800b2c0:	4423      	add	r3, r4
 800b2c2:	4605      	mov	r5, r0
 800b2c4:	f8ca 3000 	str.w	r3, [sl]
	for ( ;  btw;							/* Repeat until all data written */
 800b2c8:	d071      	beq.n	800b3ae <f_write+0x19e>
 800b2ca:	68b2      	ldr	r2, [r6, #8]
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800b2cc:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800b2d0:	2c00      	cmp	r4, #0
 800b2d2:	d1d0      	bne.n	800b276 <f_write+0x66>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800b2d4:	6830      	ldr	r0, [r6, #0]
 800b2d6:	7883      	ldrb	r3, [r0, #2]
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 800b2de:	f013 09ff 	ands.w	r9, r3, #255	; 0xff
 800b2e2:	d10d      	bne.n	800b300 <f_write+0xf0>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b2e4:	2a00      	cmp	r2, #0
 800b2e6:	d15c      	bne.n	800b3a2 <f_write+0x192>
					clst = fp->sclust;		/* Follow from the origin */
 800b2e8:	6932      	ldr	r2, [r6, #16]
					if (clst == 0)			/* When no cluster is allocated, */
 800b2ea:	2a00      	cmp	r2, #0
 800b2ec:	d064      	beq.n	800b3b8 <f_write+0x1a8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b2ee:	2a01      	cmp	r2, #1
 800b2f0:	d070      	beq.n	800b3d4 <f_write+0x1c4>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b2f2:	1c53      	adds	r3, r2, #1
 800b2f4:	d050      	beq.n	800b398 <f_write+0x188>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800b2f6:	6931      	ldr	r1, [r6, #16]
				fp->clust = clst;			/* Update current cluster */
 800b2f8:	6172      	str	r2, [r6, #20]
 800b2fa:	6830      	ldr	r0, [r6, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800b2fc:	b901      	cbnz	r1, 800b300 <f_write+0xf0>
 800b2fe:	6132      	str	r2, [r6, #16]
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 800b300:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b302:	69b2      	ldr	r2, [r6, #24]
 800b304:	4291      	cmp	r1, r2
 800b306:	d03f      	beq.n	800b388 <f_write+0x178>
	clst -= 2;
 800b308:	6972      	ldr	r2, [r6, #20]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800b30a:	6941      	ldr	r1, [r0, #20]
	clst -= 2;
 800b30c:	3a02      	subs	r2, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 800b30e:	3902      	subs	r1, #2
 800b310:	428a      	cmp	r2, r1
 800b312:	d25f      	bcs.n	800b3d4 <f_write+0x1c4>
	return clst * fs->csize + fs->database;
 800b314:	7881      	ldrb	r1, [r0, #2]
 800b316:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800b318:	fb02 7701 	mla	r7, r2, r1, r7
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800b31c:	2f00      	cmp	r7, #0
 800b31e:	d059      	beq.n	800b3d4 <f_write+0x1c4>
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b320:	ea5f 2458 	movs.w	r4, r8, lsr #9
			sect += csect;
 800b324:	444f      	add	r7, r9
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b326:	d024      	beq.n	800b372 <f_write+0x162>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800b328:	eb09 0204 	add.w	r2, r9, r4
 800b32c:	4291      	cmp	r1, r2
					cc = fp->fs->csize - csect;
 800b32e:	bf38      	it	cc
 800b330:	eba1 0409 	subcc.w	r4, r1, r9
				if (disk_write(fp->fs->drv, wbuff, sect, cc))
 800b334:	7840      	ldrb	r0, [r0, #1]
 800b336:	4623      	mov	r3, r4
 800b338:	463a      	mov	r2, r7
 800b33a:	4629      	mov	r1, r5
 800b33c:	f7fd fe20 	bl	8008f80 <disk_write>
 800b340:	bb50      	cbnz	r0, 800b398 <f_write+0x188>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 800b342:	6832      	ldr	r2, [r6, #0]
 800b344:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b346:	1bdb      	subs	r3, r3, r7
 800b348:	429c      	cmp	r4, r3
 800b34a:	d90e      	bls.n	800b36a <f_write+0x15a>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 800b34c:	eb05 2343 	add.w	r3, r5, r3, lsl #9
 800b350:	322f      	adds	r2, #47	; 0x2f
 800b352:	f503 7000 	add.w	r0, r3, #512	; 0x200
		*d++ = *s++;
 800b356:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b35a:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 800b35e:	4283      	cmp	r3, r0
 800b360:	d1f9      	bne.n	800b356 <f_write+0x146>
					fp->fs->wflag = 0;
 800b362:	6833      	ldr	r3, [r6, #0]
 800b364:	f04f 0200 	mov.w	r2, #0
 800b368:	711a      	strb	r2, [r3, #4]
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800b36a:	0264      	lsls	r4, r4, #9
 800b36c:	1928      	adds	r0, r5, r4
 800b36e:	68b3      	ldr	r3, [r6, #8]
 800b370:	e7a0      	b.n	800b2b4 <f_write+0xa4>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 800b372:	68b4      	ldr	r4, [r6, #8]
 800b374:	68f3      	ldr	r3, [r6, #12]
 800b376:	429c      	cmp	r4, r3
 800b378:	d302      	bcc.n	800b380 <f_write+0x170>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b37a:	7903      	ldrb	r3, [r0, #4]
 800b37c:	bb1b      	cbnz	r3, 800b3c6 <f_write+0x1b6>
				fp->fs->winsect = sect;
 800b37e:	62c7      	str	r7, [r0, #44]	; 0x2c
			fp->dsect = sect;
 800b380:	61b7      	str	r7, [r6, #24]
 800b382:	f3c4 0408 	ubfx	r4, r4, #0, #9
 800b386:	e778      	b.n	800b27a <f_write+0x6a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b388:	7902      	ldrb	r2, [r0, #4]
 800b38a:	2a00      	cmp	r2, #0
 800b38c:	d0bc      	beq.n	800b308 <f_write+0xf8>
 800b38e:	f7ff fc4f 	bl	800ac30 <sync_window.part.3.lto_priv.135>
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 800b392:	b908      	cbnz	r0, 800b398 <f_write+0x188>
 800b394:	6830      	ldr	r0, [r6, #0]
 800b396:	e7b7      	b.n	800b308 <f_write+0xf8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b398:	f04f 0901 	mov.w	r9, #1
 800b39c:	f886 9007 	strb.w	r9, [r6, #7]
 800b3a0:	e74b      	b.n	800b23a <f_write+0x2a>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b3a2:	6971      	ldr	r1, [r6, #20]
 800b3a4:	f7fd fcec 	bl	8008d80 <create_chain.lto_priv.133>
 800b3a8:	4602      	mov	r2, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b3aa:	2a00      	cmp	r2, #0
 800b3ac:	d19f      	bne.n	800b2ee <f_write+0xde>
 800b3ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b3b2:	68b2      	ldr	r2, [r6, #8]
 800b3b4:	79b3      	ldrb	r3, [r6, #6]
 800b3b6:	e74d      	b.n	800b254 <f_write+0x44>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800b3b8:	4649      	mov	r1, r9
 800b3ba:	f7fd fce1 	bl	8008d80 <create_chain.lto_priv.133>
 800b3be:	4602      	mov	r2, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b3c0:	2a00      	cmp	r2, #0
 800b3c2:	d194      	bne.n	800b2ee <f_write+0xde>
 800b3c4:	e7f3      	b.n	800b3ae <f_write+0x19e>
 800b3c6:	f7ff fc33 	bl	800ac30 <sync_window.part.3.lto_priv.135>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	d1e4      	bne.n	800b398 <f_write+0x188>
 800b3ce:	68b4      	ldr	r4, [r6, #8]
 800b3d0:	6830      	ldr	r0, [r6, #0]
 800b3d2:	e7d4      	b.n	800b37e <f_write+0x16e>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b3d4:	f04f 0902 	mov.w	r9, #2
 800b3d8:	f886 9007 	strb.w	r9, [r6, #7]
 800b3dc:	e72d      	b.n	800b23a <f_write+0x2a>
 800b3de:	bf00      	nop

0800b3e0 <sd_venta>:
    return;
}

void sd_venta(uint8_t pos)
{
    if(pos == 1)
 800b3e0:	2801      	cmp	r0, #1
{
 800b3e2:	b538      	push	{r3, r4, r5, lr}
    if(pos == 1)
 800b3e4:	d00a      	beq.n	800b3fc <sd_venta+0x1c>
        }

        return;
    }

    else if(pos == 2)
 800b3e6:	2802      	cmp	r0, #2
 800b3e8:	d000      	beq.n	800b3ec <sd_venta+0xc>
 800b3ea:	bd38      	pop	{r3, r4, r5, pc}
 800b3ec:	4c87      	ldr	r4, [pc, #540]	; (800b60c <sd_venta+0x22c>)
    {
        switch(read_eeprom(pppu))
 800b3ee:	7923      	ldrb	r3, [r4, #4]
 800b3f0:	2b03      	cmp	r3, #3
 800b3f2:	d8fa      	bhi.n	800b3ea <sd_venta+0xa>
 800b3f4:	e8df f003 	tbb	[pc, r3]
 800b3f8:	0a2c4668 	.word	0x0a2c4668
 800b3fc:	4c83      	ldr	r4, [pc, #524]	; (800b60c <sd_venta+0x22c>)
        switch(read_eeprom(pppu))
 800b3fe:	7923      	ldrb	r3, [r4, #4]
 800b400:	2b03      	cmp	r3, #3
 800b402:	d8f2      	bhi.n	800b3ea <sd_venta+0xa>
 800b404:	e8df f003 	tbb	[pc, r3]
 800b408:	82a4bee0 	.word	0x82a4bee0
                
            break;

            case 3: 

                LEVEL2_PPU[0] = ascii((read_eeprom(level_2) & 0x0F));
 800b40c:	f894 0097 	ldrb.w	r0, [r4, #151]	; 0x97
                LEVEL2_PPU[1] = ';';

                PPU_VENTA2[0] = ascii(read_eeprom(ppu1_venta2));
 800b410:	4d7f      	ldr	r5, [pc, #508]	; (800b610 <sd_venta+0x230>)
                LEVEL2_PPU[0] = ascii((read_eeprom(level_2) & 0x0F));
 800b412:	f000 000f 	and.w	r0, r0, #15
 800b416:	f003 ff83 	bl	800f320 <ascii>
 800b41a:	4b7e      	ldr	r3, [pc, #504]	; (800b614 <sd_venta+0x234>)
                LEVEL2_PPU[1] = ';';
 800b41c:	223b      	movs	r2, #59	; 0x3b
                LEVEL2_PPU[0] = ascii((read_eeprom(level_2) & 0x0F));
 800b41e:	7018      	strb	r0, [r3, #0]
                PPU_VENTA2[0] = ascii(read_eeprom(ppu1_venta2));
 800b420:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
                LEVEL2_PPU[1] = ';';
 800b424:	705a      	strb	r2, [r3, #1]
                PPU_VENTA2[0] = ascii(read_eeprom(ppu1_venta2));
 800b426:	f003 ff7b 	bl	800f320 <ascii>
                PPU_VENTA2[1] = '.';
 800b42a:	232e      	movs	r3, #46	; 0x2e
                PPU_VENTA2[0] = ascii(read_eeprom(ppu1_venta2));
 800b42c:	7028      	strb	r0, [r5, #0]
                PPU_VENTA2[2] = ascii(read_eeprom(ppu2_venta2));
 800b42e:	f894 0092 	ldrb.w	r0, [r4, #146]	; 0x92
                PPU_VENTA2[1] = '.';
 800b432:	706b      	strb	r3, [r5, #1]
                PPU_VENTA2[2] = ascii(read_eeprom(ppu2_venta2));
 800b434:	f003 ff74 	bl	800f320 <ascii>
 800b438:	70a8      	strb	r0, [r5, #2]
                PPU_VENTA2[3] = ascii(read_eeprom(ppu3_venta2));
 800b43a:	f894 0093 	ldrb.w	r0, [r4, #147]	; 0x93
 800b43e:	f003 ff6f 	bl	800f320 <ascii>
 800b442:	70e8      	strb	r0, [r5, #3]
                PPU_VENTA2[4] = ascii(read_eeprom(ppu4_venta2));
 800b444:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
 800b448:	f003 ff6a 	bl	800f320 <ascii>
 800b44c:	7128      	strb	r0, [r5, #4]
 800b44e:	e7cc      	b.n	800b3ea <sd_venta+0xa>
                LEVEL2_PPU[0] = ascii((read_eeprom(level_2) & 0x0F));
 800b450:	f894 0097 	ldrb.w	r0, [r4, #151]	; 0x97
                PPU_VENTA2[0] = ascii(read_eeprom(ppu1_venta2));
 800b454:	4d6e      	ldr	r5, [pc, #440]	; (800b610 <sd_venta+0x230>)
                LEVEL2_PPU[0] = ascii((read_eeprom(level_2) & 0x0F));
 800b456:	f000 000f 	and.w	r0, r0, #15
 800b45a:	f003 ff61 	bl	800f320 <ascii>
 800b45e:	4b6d      	ldr	r3, [pc, #436]	; (800b614 <sd_venta+0x234>)
                LEVEL2_PPU[1] = ';';
 800b460:	223b      	movs	r2, #59	; 0x3b
                LEVEL2_PPU[0] = ascii((read_eeprom(level_2) & 0x0F));
 800b462:	7018      	strb	r0, [r3, #0]
                PPU_VENTA2[0] = ascii(read_eeprom(ppu1_venta2));
 800b464:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
                LEVEL2_PPU[1] = ';';
 800b468:	705a      	strb	r2, [r3, #1]
                PPU_VENTA2[0] = ascii(read_eeprom(ppu1_venta2));
 800b46a:	f003 ff59 	bl	800f320 <ascii>
 800b46e:	7028      	strb	r0, [r5, #0]
                PPU_VENTA2[1] = ascii(read_eeprom(ppu2_venta2));
 800b470:	f894 0092 	ldrb.w	r0, [r4, #146]	; 0x92
 800b474:	f003 ff54 	bl	800f320 <ascii>
                PPU_VENTA2[2] = '.';
 800b478:	232e      	movs	r3, #46	; 0x2e
                PPU_VENTA2[1] = ascii(read_eeprom(ppu2_venta2));
 800b47a:	7068      	strb	r0, [r5, #1]
                PPU_VENTA2[2] = '.';
 800b47c:	70ab      	strb	r3, [r5, #2]
                PPU_VENTA2[3] = ascii(read_eeprom(ppu3_venta2));
 800b47e:	f894 0093 	ldrb.w	r0, [r4, #147]	; 0x93
 800b482:	e7dc      	b.n	800b43e <sd_venta+0x5e>
                LEVEL2_PPU[0] = ascii((read_eeprom(level_2) & 0x0F));
 800b484:	f894 0097 	ldrb.w	r0, [r4, #151]	; 0x97
                PPU_VENTA2[0] = ascii(read_eeprom(ppu1_venta2));
 800b488:	4d61      	ldr	r5, [pc, #388]	; (800b610 <sd_venta+0x230>)
                LEVEL2_PPU[0] = ascii((read_eeprom(level_2) & 0x0F));
 800b48a:	f000 000f 	and.w	r0, r0, #15
 800b48e:	f003 ff47 	bl	800f320 <ascii>
 800b492:	4b60      	ldr	r3, [pc, #384]	; (800b614 <sd_venta+0x234>)
                LEVEL2_PPU[1] = ';';
 800b494:	223b      	movs	r2, #59	; 0x3b
                LEVEL2_PPU[0] = ascii((read_eeprom(level_2) & 0x0F));
 800b496:	7018      	strb	r0, [r3, #0]
                PPU_VENTA2[0] = ascii(read_eeprom(ppu1_venta2));
 800b498:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
                LEVEL2_PPU[1] = ';';
 800b49c:	705a      	strb	r2, [r3, #1]
                PPU_VENTA2[0] = ascii(read_eeprom(ppu1_venta2));
 800b49e:	f003 ff3f 	bl	800f320 <ascii>
 800b4a2:	7028      	strb	r0, [r5, #0]
                PPU_VENTA2[1] = ascii(read_eeprom(ppu2_venta2));
 800b4a4:	f894 0092 	ldrb.w	r0, [r4, #146]	; 0x92
 800b4a8:	f003 ff3a 	bl	800f320 <ascii>
 800b4ac:	7068      	strb	r0, [r5, #1]
                PPU_VENTA2[2] = ascii(read_eeprom(ppu3_venta2));
 800b4ae:	f894 0093 	ldrb.w	r0, [r4, #147]	; 0x93
 800b4b2:	f003 ff35 	bl	800f320 <ascii>
                PPU_VENTA2[3] = '.';
 800b4b6:	232e      	movs	r3, #46	; 0x2e
                PPU_VENTA2[2] = ascii(read_eeprom(ppu3_venta2));
 800b4b8:	70a8      	strb	r0, [r5, #2]
                PPU_VENTA2[4] = ascii(read_eeprom(ppu4_venta2));
 800b4ba:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
                PPU_VENTA2[3] = '.';
 800b4be:	70eb      	strb	r3, [r5, #3]
                PPU_VENTA2[4] = ascii(read_eeprom(ppu4_venta2));
 800b4c0:	f003 ff2e 	bl	800f320 <ascii>
 800b4c4:	7128      	strb	r0, [r5, #4]
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}
                LEVEL2_PPU[0] = ascii((read_eeprom(level_2) & 0x0F));
 800b4c8:	f894 0097 	ldrb.w	r0, [r4, #151]	; 0x97
                PPU_VENTA2[0] = ascii(read_eeprom(ppu1_venta2));
 800b4cc:	4d50      	ldr	r5, [pc, #320]	; (800b610 <sd_venta+0x230>)
                LEVEL2_PPU[0] = ascii((read_eeprom(level_2) & 0x0F));
 800b4ce:	f000 000f 	and.w	r0, r0, #15
 800b4d2:	f003 ff25 	bl	800f320 <ascii>
 800b4d6:	4b4f      	ldr	r3, [pc, #316]	; (800b614 <sd_venta+0x234>)
                LEVEL2_PPU[1] = ';';
 800b4d8:	223b      	movs	r2, #59	; 0x3b
                LEVEL2_PPU[0] = ascii((read_eeprom(level_2) & 0x0F));
 800b4da:	7018      	strb	r0, [r3, #0]
                PPU_VENTA2[0] = ascii(read_eeprom(ppu1_venta2));
 800b4dc:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
                LEVEL2_PPU[1] = ';';
 800b4e0:	705a      	strb	r2, [r3, #1]
                PPU_VENTA2[0] = ascii(read_eeprom(ppu1_venta2));
 800b4e2:	f003 ff1d 	bl	800f320 <ascii>
 800b4e6:	7028      	strb	r0, [r5, #0]
                PPU_VENTA2[1] = ascii(read_eeprom(ppu2_venta2));
 800b4e8:	f894 0092 	ldrb.w	r0, [r4, #146]	; 0x92
 800b4ec:	f003 ff18 	bl	800f320 <ascii>
 800b4f0:	7068      	strb	r0, [r5, #1]
                PPU_VENTA2[2] = ascii(read_eeprom(ppu3_venta2));
 800b4f2:	f894 0093 	ldrb.w	r0, [r4, #147]	; 0x93
 800b4f6:	f003 ff13 	bl	800f320 <ascii>
 800b4fa:	70a8      	strb	r0, [r5, #2]
                PPU_VENTA2[3] = ascii(read_eeprom(ppu4_venta2));
 800b4fc:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
 800b500:	f003 ff0e 	bl	800f320 <ascii>
                PPU_VENTA2[4] = '.';
 800b504:	232e      	movs	r3, #46	; 0x2e
                PPU_VENTA2[3] = ascii(read_eeprom(ppu4_venta2));
 800b506:	70e8      	strb	r0, [r5, #3]
                PPU_VENTA2[4] = '.';
 800b508:	712b      	strb	r3, [r5, #4]
 800b50a:	bd38      	pop	{r3, r4, r5, pc}
                LEVEL1_PPU[0] = ascii((read_eeprom(level_1) & 0x0F));
 800b50c:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
                PPU_VENTA1[0] = ascii(read_eeprom(ppu1_venta1));
 800b510:	4d41      	ldr	r5, [pc, #260]	; (800b618 <sd_venta+0x238>)
                LEVEL1_PPU[0] = ascii((read_eeprom(level_1) & 0x0F));
 800b512:	f000 000f 	and.w	r0, r0, #15
 800b516:	f003 ff03 	bl	800f320 <ascii>
 800b51a:	4b40      	ldr	r3, [pc, #256]	; (800b61c <sd_venta+0x23c>)
                LEVEL1_PPU[1] = ';';
 800b51c:	223b      	movs	r2, #59	; 0x3b
                LEVEL1_PPU[0] = ascii((read_eeprom(level_1) & 0x0F));
 800b51e:	7018      	strb	r0, [r3, #0]
                PPU_VENTA1[0] = ascii(read_eeprom(ppu1_venta1));
 800b520:	f894 008d 	ldrb.w	r0, [r4, #141]	; 0x8d
                LEVEL1_PPU[1] = ';';
 800b524:	705a      	strb	r2, [r3, #1]
                PPU_VENTA1[0] = ascii(read_eeprom(ppu1_venta1));
 800b526:	f003 fefb 	bl	800f320 <ascii>
                PPU_VENTA1[1] = '.';
 800b52a:	232e      	movs	r3, #46	; 0x2e
                PPU_VENTA1[0] = ascii(read_eeprom(ppu1_venta1));
 800b52c:	7028      	strb	r0, [r5, #0]
                PPU_VENTA1[2] = ascii(read_eeprom(ppu2_venta1));
 800b52e:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
                PPU_VENTA1[1] = '.';
 800b532:	706b      	strb	r3, [r5, #1]
                PPU_VENTA1[2] = ascii(read_eeprom(ppu2_venta1));
 800b534:	f003 fef4 	bl	800f320 <ascii>
 800b538:	70a8      	strb	r0, [r5, #2]
                PPU_VENTA1[3] = ascii(read_eeprom(ppu3_venta1));
 800b53a:	f894 008f 	ldrb.w	r0, [r4, #143]	; 0x8f
 800b53e:	f003 feef 	bl	800f320 <ascii>
 800b542:	70e8      	strb	r0, [r5, #3]
                PPU_VENTA1[4] = ascii(read_eeprom(ppu4_venta1));
 800b544:	f894 0090 	ldrb.w	r0, [r4, #144]	; 0x90
 800b548:	f003 feea 	bl	800f320 <ascii>
 800b54c:	7128      	strb	r0, [r5, #4]
 800b54e:	bd38      	pop	{r3, r4, r5, pc}
                LEVEL1_PPU[0] = ascii((read_eeprom(level_1) & 0x0F));
 800b550:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
                PPU_VENTA1[0] = ascii(read_eeprom(ppu1_venta1));
 800b554:	4d30      	ldr	r5, [pc, #192]	; (800b618 <sd_venta+0x238>)
                LEVEL1_PPU[0] = ascii((read_eeprom(level_1) & 0x0F));
 800b556:	f000 000f 	and.w	r0, r0, #15
 800b55a:	f003 fee1 	bl	800f320 <ascii>
 800b55e:	4b2f      	ldr	r3, [pc, #188]	; (800b61c <sd_venta+0x23c>)
                LEVEL1_PPU[1] = ';';
 800b560:	223b      	movs	r2, #59	; 0x3b
                LEVEL1_PPU[0] = ascii((read_eeprom(level_1) & 0x0F));
 800b562:	7018      	strb	r0, [r3, #0]
                PPU_VENTA1[0] = ascii(read_eeprom(ppu1_venta1));
 800b564:	f894 008d 	ldrb.w	r0, [r4, #141]	; 0x8d
                LEVEL1_PPU[1] = ';';
 800b568:	705a      	strb	r2, [r3, #1]
                PPU_VENTA1[0] = ascii(read_eeprom(ppu1_venta1));
 800b56a:	f003 fed9 	bl	800f320 <ascii>
 800b56e:	7028      	strb	r0, [r5, #0]
                PPU_VENTA1[1] = ascii(read_eeprom(ppu2_venta1));
 800b570:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
 800b574:	f003 fed4 	bl	800f320 <ascii>
                PPU_VENTA1[2] = '.';
 800b578:	232e      	movs	r3, #46	; 0x2e
                PPU_VENTA1[1] = ascii(read_eeprom(ppu2_venta1));
 800b57a:	7068      	strb	r0, [r5, #1]
                PPU_VENTA1[2] = '.';
 800b57c:	70ab      	strb	r3, [r5, #2]
                PPU_VENTA1[3] = ascii(read_eeprom(ppu3_venta1));
 800b57e:	f894 008f 	ldrb.w	r0, [r4, #143]	; 0x8f
 800b582:	e7dc      	b.n	800b53e <sd_venta+0x15e>
                LEVEL1_PPU[0] = ascii((read_eeprom(level_1) & 0x0F));
 800b584:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
                PPU_VENTA1[0] = ascii(read_eeprom(ppu1_venta1));
 800b588:	4d23      	ldr	r5, [pc, #140]	; (800b618 <sd_venta+0x238>)
                LEVEL1_PPU[0] = ascii((read_eeprom(level_1) & 0x0F));
 800b58a:	f000 000f 	and.w	r0, r0, #15
 800b58e:	f003 fec7 	bl	800f320 <ascii>
 800b592:	4b22      	ldr	r3, [pc, #136]	; (800b61c <sd_venta+0x23c>)
                LEVEL1_PPU[1] = ';';
 800b594:	223b      	movs	r2, #59	; 0x3b
                LEVEL1_PPU[0] = ascii((read_eeprom(level_1) & 0x0F));
 800b596:	7018      	strb	r0, [r3, #0]
                PPU_VENTA1[0] = ascii(read_eeprom(ppu1_venta1));
 800b598:	f894 008d 	ldrb.w	r0, [r4, #141]	; 0x8d
                LEVEL1_PPU[1] = ';';
 800b59c:	705a      	strb	r2, [r3, #1]
                PPU_VENTA1[0] = ascii(read_eeprom(ppu1_venta1));
 800b59e:	f003 febf 	bl	800f320 <ascii>
 800b5a2:	7028      	strb	r0, [r5, #0]
                PPU_VENTA1[1] = ascii(read_eeprom(ppu2_venta1));
 800b5a4:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
 800b5a8:	f003 feba 	bl	800f320 <ascii>
 800b5ac:	7068      	strb	r0, [r5, #1]
                PPU_VENTA1[2] = ascii(read_eeprom(ppu3_venta1));
 800b5ae:	f894 008f 	ldrb.w	r0, [r4, #143]	; 0x8f
 800b5b2:	f003 feb5 	bl	800f320 <ascii>
                PPU_VENTA1[3] = '.';
 800b5b6:	232e      	movs	r3, #46	; 0x2e
                PPU_VENTA1[2] = ascii(read_eeprom(ppu3_venta1));
 800b5b8:	70a8      	strb	r0, [r5, #2]
                PPU_VENTA1[4] = ascii(read_eeprom(ppu4_venta1));
 800b5ba:	f894 0090 	ldrb.w	r0, [r4, #144]	; 0x90
                PPU_VENTA1[3] = '.';
 800b5be:	70eb      	strb	r3, [r5, #3]
                PPU_VENTA1[4] = ascii(read_eeprom(ppu4_venta1));
 800b5c0:	f003 feae 	bl	800f320 <ascii>
 800b5c4:	7128      	strb	r0, [r5, #4]
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}
                LEVEL1_PPU[0] = ascii((read_eeprom(level_1) & 0x0F));
 800b5c8:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
                PPU_VENTA1[0] = ascii(read_eeprom(ppu1_venta1));
 800b5cc:	4d12      	ldr	r5, [pc, #72]	; (800b618 <sd_venta+0x238>)
                LEVEL1_PPU[0] = ascii((read_eeprom(level_1) & 0x0F));
 800b5ce:	f000 000f 	and.w	r0, r0, #15
 800b5d2:	f003 fea5 	bl	800f320 <ascii>
 800b5d6:	4b11      	ldr	r3, [pc, #68]	; (800b61c <sd_venta+0x23c>)
                LEVEL1_PPU[1] = ';';
 800b5d8:	223b      	movs	r2, #59	; 0x3b
                LEVEL1_PPU[0] = ascii((read_eeprom(level_1) & 0x0F));
 800b5da:	7018      	strb	r0, [r3, #0]
                PPU_VENTA1[0] = ascii(read_eeprom(ppu1_venta1));
 800b5dc:	f894 008d 	ldrb.w	r0, [r4, #141]	; 0x8d
                LEVEL1_PPU[1] = ';';
 800b5e0:	705a      	strb	r2, [r3, #1]
                PPU_VENTA1[0] = ascii(read_eeprom(ppu1_venta1));
 800b5e2:	f003 fe9d 	bl	800f320 <ascii>
 800b5e6:	7028      	strb	r0, [r5, #0]
                PPU_VENTA1[1] = ascii(read_eeprom(ppu2_venta1));
 800b5e8:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
 800b5ec:	f003 fe98 	bl	800f320 <ascii>
 800b5f0:	7068      	strb	r0, [r5, #1]
                PPU_VENTA1[2] = ascii(read_eeprom(ppu3_venta1));
 800b5f2:	f894 008f 	ldrb.w	r0, [r4, #143]	; 0x8f
 800b5f6:	f003 fe93 	bl	800f320 <ascii>
 800b5fa:	70a8      	strb	r0, [r5, #2]
                PPU_VENTA1[3] = ascii(read_eeprom(ppu4_venta1));
 800b5fc:	f894 0090 	ldrb.w	r0, [r4, #144]	; 0x90
 800b600:	f003 fe8e 	bl	800f320 <ascii>
                PPU_VENTA1[4] = '.';
 800b604:	232e      	movs	r3, #46	; 0x2e
                PPU_VENTA1[3] = ascii(read_eeprom(ppu4_venta1));
 800b606:	70e8      	strb	r0, [r5, #3]
                PPU_VENTA1[4] = '.';
 800b608:	712b      	strb	r3, [r5, #4]
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
 800b60c:	20001c74 	.word	0x20001c74
 800b610:	20000858 	.word	0x20000858
 800b614:	20000834 	.word	0x20000834
 800b618:	20000850 	.word	0x20000850
 800b61c:	20000830 	.word	0x20000830

0800b620 <sd_ppu>:
    if(niv == 1)
 800b620:	2801      	cmp	r0, #1
{
 800b622:	b538      	push	{r3, r4, r5, lr}
    if(niv == 1)
 800b624:	d151      	bne.n	800b6ca <sd_ppu+0xaa>
 800b626:	4c52      	ldr	r4, [pc, #328]	; (800b770 <sd_ppu+0x150>)
        switch(read_eeprom(pppu))
 800b628:	7923      	ldrb	r3, [r4, #4]
 800b62a:	2b03      	cmp	r3, #3
 800b62c:	f200 809f 	bhi.w	800b76e <sd_ppu+0x14e>
 800b630:	e8df f003 	tbb	[pc, r3]
 800b634:	372a1602 	.word	0x372a1602
                PPU_LEVEL1[0] = ascii(read_eeprom(ppu1_level1));
 800b638:	7960      	ldrb	r0, [r4, #5]
 800b63a:	4d4e      	ldr	r5, [pc, #312]	; (800b774 <sd_ppu+0x154>)
 800b63c:	f003 fe70 	bl	800f320 <ascii>
 800b640:	7028      	strb	r0, [r5, #0]
                PPU_LEVEL1[1] = ascii(read_eeprom(ppu2_level1));
 800b642:	79a0      	ldrb	r0, [r4, #6]
 800b644:	f003 fe6c 	bl	800f320 <ascii>
 800b648:	7068      	strb	r0, [r5, #1]
                PPU_LEVEL1[2] = ascii(read_eeprom(ppu3_level1));
 800b64a:	79e0      	ldrb	r0, [r4, #7]
 800b64c:	f003 fe68 	bl	800f320 <ascii>
 800b650:	70a8      	strb	r0, [r5, #2]
                PPU_LEVEL1[3] = ascii(read_eeprom(ppu4_level1));
 800b652:	7a20      	ldrb	r0, [r4, #8]
 800b654:	f003 fe64 	bl	800f320 <ascii>
                PPU_LEVEL1[4] = '.';
 800b658:	232e      	movs	r3, #46	; 0x2e
                PPU_LEVEL1[3] = ascii(read_eeprom(ppu4_level1));
 800b65a:	70e8      	strb	r0, [r5, #3]
                PPU_LEVEL1[4] = '.';
 800b65c:	712b      	strb	r3, [r5, #4]
 800b65e:	bd38      	pop	{r3, r4, r5, pc}
                PPU_LEVEL1[0] = ascii(read_eeprom(ppu1_level1));
 800b660:	7960      	ldrb	r0, [r4, #5]
 800b662:	4d44      	ldr	r5, [pc, #272]	; (800b774 <sd_ppu+0x154>)
 800b664:	f003 fe5c 	bl	800f320 <ascii>
 800b668:	7028      	strb	r0, [r5, #0]
                PPU_LEVEL1[1] = ascii(read_eeprom(ppu2_level1));
 800b66a:	79a0      	ldrb	r0, [r4, #6]
 800b66c:	f003 fe58 	bl	800f320 <ascii>
 800b670:	7068      	strb	r0, [r5, #1]
                PPU_LEVEL1[2] = ascii(read_eeprom(ppu3_level1));
 800b672:	79e0      	ldrb	r0, [r4, #7]
 800b674:	f003 fe54 	bl	800f320 <ascii>
                PPU_LEVEL1[3] = '.';
 800b678:	232e      	movs	r3, #46	; 0x2e
                PPU_LEVEL1[2] = ascii(read_eeprom(ppu3_level1));
 800b67a:	70a8      	strb	r0, [r5, #2]
                PPU_LEVEL1[4] = ascii(read_eeprom(ppu4_level1));
 800b67c:	7a20      	ldrb	r0, [r4, #8]
                PPU_LEVEL1[3] = '.';
 800b67e:	70eb      	strb	r3, [r5, #3]
                PPU_LEVEL1[4] = ascii(read_eeprom(ppu4_level1));
 800b680:	f003 fe4e 	bl	800f320 <ascii>
 800b684:	7128      	strb	r0, [r5, #4]
 800b686:	bd38      	pop	{r3, r4, r5, pc}
                PPU_LEVEL1[0] = ascii(read_eeprom(ppu1_level1));
 800b688:	7960      	ldrb	r0, [r4, #5]
 800b68a:	4d3a      	ldr	r5, [pc, #232]	; (800b774 <sd_ppu+0x154>)
 800b68c:	f003 fe48 	bl	800f320 <ascii>
 800b690:	7028      	strb	r0, [r5, #0]
                PPU_LEVEL1[1] = ascii(read_eeprom(ppu2_level1));
 800b692:	79a0      	ldrb	r0, [r4, #6]
 800b694:	f003 fe44 	bl	800f320 <ascii>
                PPU_LEVEL1[2] = '.';
 800b698:	232e      	movs	r3, #46	; 0x2e
                PPU_LEVEL1[1] = ascii(read_eeprom(ppu2_level1));
 800b69a:	7068      	strb	r0, [r5, #1]
                PPU_LEVEL1[2] = '.';
 800b69c:	70ab      	strb	r3, [r5, #2]
                PPU_LEVEL1[3] = ascii(read_eeprom(ppu3_level1));
 800b69e:	79e0      	ldrb	r0, [r4, #7]
 800b6a0:	e00b      	b.n	800b6ba <sd_ppu+0x9a>
                PPU_LEVEL1[0] = ascii(read_eeprom(ppu1_level1));
 800b6a2:	7960      	ldrb	r0, [r4, #5]
 800b6a4:	4d33      	ldr	r5, [pc, #204]	; (800b774 <sd_ppu+0x154>)
 800b6a6:	f003 fe3b 	bl	800f320 <ascii>
                PPU_LEVEL1[1] = '.';
 800b6aa:	232e      	movs	r3, #46	; 0x2e
                PPU_LEVEL1[0] = ascii(read_eeprom(ppu1_level1));
 800b6ac:	7028      	strb	r0, [r5, #0]
                PPU_LEVEL1[2] = ascii(read_eeprom(ppu2_level1));
 800b6ae:	79a0      	ldrb	r0, [r4, #6]
                PPU_LEVEL1[1] = '.';
 800b6b0:	706b      	strb	r3, [r5, #1]
                PPU_LEVEL1[2] = ascii(read_eeprom(ppu2_level1));
 800b6b2:	f003 fe35 	bl	800f320 <ascii>
 800b6b6:	70a8      	strb	r0, [r5, #2]
                PPU_LEVEL1[3] = ascii(read_eeprom(ppu3_level1));
 800b6b8:	79e0      	ldrb	r0, [r4, #7]
 800b6ba:	f003 fe31 	bl	800f320 <ascii>
 800b6be:	70e8      	strb	r0, [r5, #3]
                PPU_LEVEL1[4] = ascii(read_eeprom(ppu4_level1));
 800b6c0:	7a20      	ldrb	r0, [r4, #8]
 800b6c2:	f003 fe2d 	bl	800f320 <ascii>
 800b6c6:	7128      	strb	r0, [r5, #4]
 800b6c8:	bd38      	pop	{r3, r4, r5, pc}
    else if(niv == 2)
 800b6ca:	2802      	cmp	r0, #2
 800b6cc:	d14f      	bne.n	800b76e <sd_ppu+0x14e>
 800b6ce:	4c28      	ldr	r4, [pc, #160]	; (800b770 <sd_ppu+0x150>)
        switch(read_eeprom(pppu))
 800b6d0:	7923      	ldrb	r3, [r4, #4]
 800b6d2:	2b03      	cmp	r3, #3
 800b6d4:	d84b      	bhi.n	800b76e <sd_ppu+0x14e>
 800b6d6:	e8df f003 	tbb	[pc, r3]
 800b6da:	1602      	.short	0x1602
 800b6dc:	372a      	.short	0x372a
                PPU_LEVEL2[0] = ascii(read_eeprom(ppu1_level2));
 800b6de:	7a60      	ldrb	r0, [r4, #9]
 800b6e0:	4d25      	ldr	r5, [pc, #148]	; (800b778 <sd_ppu+0x158>)
 800b6e2:	f003 fe1d 	bl	800f320 <ascii>
 800b6e6:	7028      	strb	r0, [r5, #0]
                PPU_LEVEL2[1] = ascii(read_eeprom(ppu2_level2));
 800b6e8:	7aa0      	ldrb	r0, [r4, #10]
 800b6ea:	f003 fe19 	bl	800f320 <ascii>
 800b6ee:	7068      	strb	r0, [r5, #1]
                PPU_LEVEL2[2] = ascii(read_eeprom(ppu3_level2));
 800b6f0:	7ae0      	ldrb	r0, [r4, #11]
 800b6f2:	f003 fe15 	bl	800f320 <ascii>
 800b6f6:	70a8      	strb	r0, [r5, #2]
                PPU_LEVEL2[3] = ascii(read_eeprom(ppu4_level2));
 800b6f8:	7b20      	ldrb	r0, [r4, #12]
 800b6fa:	f003 fe11 	bl	800f320 <ascii>
                PPU_LEVEL2[4] = '.';
 800b6fe:	232e      	movs	r3, #46	; 0x2e
                PPU_LEVEL2[3] = ascii(read_eeprom(ppu4_level2));
 800b700:	70e8      	strb	r0, [r5, #3]
                PPU_LEVEL2[4] = '.';
 800b702:	712b      	strb	r3, [r5, #4]
 800b704:	bd38      	pop	{r3, r4, r5, pc}
                PPU_LEVEL2[0] = ascii(read_eeprom(ppu1_level2));
 800b706:	7a60      	ldrb	r0, [r4, #9]
 800b708:	4d1b      	ldr	r5, [pc, #108]	; (800b778 <sd_ppu+0x158>)
 800b70a:	f003 fe09 	bl	800f320 <ascii>
 800b70e:	7028      	strb	r0, [r5, #0]
                PPU_LEVEL2[1] = ascii(read_eeprom(ppu2_level2));
 800b710:	7aa0      	ldrb	r0, [r4, #10]
 800b712:	f003 fe05 	bl	800f320 <ascii>
 800b716:	7068      	strb	r0, [r5, #1]
                PPU_LEVEL2[2] = ascii(read_eeprom(ppu3_level2));
 800b718:	7ae0      	ldrb	r0, [r4, #11]
 800b71a:	f003 fe01 	bl	800f320 <ascii>
                PPU_LEVEL2[3] = '.';
 800b71e:	232e      	movs	r3, #46	; 0x2e
                PPU_LEVEL2[2] = ascii(read_eeprom(ppu3_level2));
 800b720:	70a8      	strb	r0, [r5, #2]
                PPU_LEVEL2[4] = ascii(read_eeprom(ppu4_level2));
 800b722:	7b20      	ldrb	r0, [r4, #12]
                PPU_LEVEL2[3] = '.';
 800b724:	70eb      	strb	r3, [r5, #3]
                PPU_LEVEL2[4] = ascii(read_eeprom(ppu4_level2));
 800b726:	f003 fdfb 	bl	800f320 <ascii>
 800b72a:	7128      	strb	r0, [r5, #4]
 800b72c:	bd38      	pop	{r3, r4, r5, pc}
                PPU_LEVEL2[0] = ascii(read_eeprom(ppu1_level2));
 800b72e:	7a60      	ldrb	r0, [r4, #9]
 800b730:	4d11      	ldr	r5, [pc, #68]	; (800b778 <sd_ppu+0x158>)
 800b732:	f003 fdf5 	bl	800f320 <ascii>
 800b736:	7028      	strb	r0, [r5, #0]
                PPU_LEVEL2[1] = ascii(read_eeprom(ppu2_level2));
 800b738:	7aa0      	ldrb	r0, [r4, #10]
 800b73a:	f003 fdf1 	bl	800f320 <ascii>
                PPU_LEVEL2[2] = '.';
 800b73e:	232e      	movs	r3, #46	; 0x2e
                PPU_LEVEL2[1] = ascii(read_eeprom(ppu2_level2));
 800b740:	7068      	strb	r0, [r5, #1]
                PPU_LEVEL2[2] = '.';
 800b742:	70ab      	strb	r3, [r5, #2]
                PPU_LEVEL2[3] = ascii(read_eeprom(ppu3_level2));
 800b744:	7ae0      	ldrb	r0, [r4, #11]
 800b746:	e00b      	b.n	800b760 <sd_ppu+0x140>
                PPU_LEVEL2[0] = ascii(read_eeprom(ppu1_level2));
 800b748:	7a60      	ldrb	r0, [r4, #9]
 800b74a:	4d0b      	ldr	r5, [pc, #44]	; (800b778 <sd_ppu+0x158>)
 800b74c:	f003 fde8 	bl	800f320 <ascii>
                PPU_LEVEL2[1] = '.';
 800b750:	232e      	movs	r3, #46	; 0x2e
                PPU_LEVEL2[0] = ascii(read_eeprom(ppu1_level2));
 800b752:	7028      	strb	r0, [r5, #0]
                PPU_LEVEL2[2] = ascii(read_eeprom(ppu2_level2));
 800b754:	7aa0      	ldrb	r0, [r4, #10]
                PPU_LEVEL2[1] = '.';
 800b756:	706b      	strb	r3, [r5, #1]
                PPU_LEVEL2[2] = ascii(read_eeprom(ppu2_level2));
 800b758:	f003 fde2 	bl	800f320 <ascii>
 800b75c:	70a8      	strb	r0, [r5, #2]
                PPU_LEVEL2[3] = ascii(read_eeprom(ppu3_level2));
 800b75e:	7ae0      	ldrb	r0, [r4, #11]
 800b760:	f003 fdde 	bl	800f320 <ascii>
 800b764:	70e8      	strb	r0, [r5, #3]
                PPU_LEVEL2[4] = ascii(read_eeprom(ppu4_level2));
 800b766:	7b20      	ldrb	r0, [r4, #12]
 800b768:	f003 fdda 	bl	800f320 <ascii>
 800b76c:	7128      	strb	r0, [r5, #4]
 800b76e:	bd38      	pop	{r3, r4, r5, pc}
 800b770:	20001c74 	.word	0x20001c74
 800b774:	2000083c 	.word	0x2000083c
 800b778:	20000844 	.word	0x20000844
 800b77c:	00000000 	.word	0x00000000

0800b780 <sd_Tvolumen>:
    if(pos == 1)
 800b780:	2801      	cmp	r0, #1
{
 800b782:	b538      	push	{r3, r4, r5, lr}
    if(pos == 1)
 800b784:	d02f      	beq.n	800b7e6 <sd_Tvolumen+0x66>
    else if(pos == 2)
 800b786:	2802      	cmp	r0, #2
 800b788:	d000      	beq.n	800b78c <sd_Tvolumen+0xc>
 800b78a:	bd38      	pop	{r3, r4, r5, pc}
 800b78c:	4d2c      	ldr	r5, [pc, #176]	; (800b840 <sd_Tvolumen+0xc0>)
        T_VOL2[0] = ascii(read_eeprom(tv2_1));
 800b78e:	4c2d      	ldr	r4, [pc, #180]	; (800b844 <sd_Tvolumen+0xc4>)
 800b790:	f895 003e 	ldrb.w	r0, [r5, #62]	; 0x3e
 800b794:	f003 fdc4 	bl	800f320 <ascii>
 800b798:	7020      	strb	r0, [r4, #0]
        T_VOL2[1] = ascii(read_eeprom(tv2_2));
 800b79a:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
 800b79e:	f003 fdbf 	bl	800f320 <ascii>
 800b7a2:	7060      	strb	r0, [r4, #1]
        T_VOL2[2] = ascii(read_eeprom(tv2_3));
 800b7a4:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800b7a8:	f003 fdba 	bl	800f320 <ascii>
 800b7ac:	70a0      	strb	r0, [r4, #2]
        T_VOL2[3] = ascii(read_eeprom(tv2_4));
 800b7ae:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
 800b7b2:	f003 fdb5 	bl	800f320 <ascii>
 800b7b6:	70e0      	strb	r0, [r4, #3]
        T_VOL2[4] = ascii(read_eeprom(tv2_5));
 800b7b8:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
 800b7bc:	f003 fdb0 	bl	800f320 <ascii>
 800b7c0:	7120      	strb	r0, [r4, #4]
        T_VOL2[5] = ascii(read_eeprom(tv2_6));
 800b7c2:	f895 0043 	ldrb.w	r0, [r5, #67]	; 0x43
 800b7c6:	f003 fdab 	bl	800f320 <ascii>
        T_VOL2[6] = '.';
 800b7ca:	232e      	movs	r3, #46	; 0x2e
        T_VOL2[5] = ascii(read_eeprom(tv2_6));
 800b7cc:	7160      	strb	r0, [r4, #5]
        T_VOL2[7] = ascii(read_eeprom(tv2_7));
 800b7ce:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
        T_VOL2[6] = '.';
 800b7d2:	71a3      	strb	r3, [r4, #6]
        T_VOL2[7] = ascii(read_eeprom(tv2_7));
 800b7d4:	f003 fda4 	bl	800f320 <ascii>
 800b7d8:	71e0      	strb	r0, [r4, #7]
        T_VOL2[8] = ascii(read_eeprom(tv2_8));
 800b7da:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
 800b7de:	f003 fd9f 	bl	800f320 <ascii>
 800b7e2:	7220      	strb	r0, [r4, #8]
 800b7e4:	e7d1      	b.n	800b78a <sd_Tvolumen+0xa>
 800b7e6:	4d16      	ldr	r5, [pc, #88]	; (800b840 <sd_Tvolumen+0xc0>)
		T_VOL1[0] = ascii(read_eeprom(tv1_1));
 800b7e8:	4c17      	ldr	r4, [pc, #92]	; (800b848 <sd_Tvolumen+0xc8>)
 800b7ea:	f895 0036 	ldrb.w	r0, [r5, #54]	; 0x36
 800b7ee:	f003 fd97 	bl	800f320 <ascii>
 800b7f2:	7020      	strb	r0, [r4, #0]
        T_VOL1[1] = ascii(read_eeprom(tv1_2));
 800b7f4:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
 800b7f8:	f003 fd92 	bl	800f320 <ascii>
 800b7fc:	7060      	strb	r0, [r4, #1]
        T_VOL1[2] = ascii(read_eeprom(tv1_3));
 800b7fe:	f895 0038 	ldrb.w	r0, [r5, #56]	; 0x38
 800b802:	f003 fd8d 	bl	800f320 <ascii>
 800b806:	70a0      	strb	r0, [r4, #2]
        T_VOL1[3] = ascii(read_eeprom(tv1_4));
 800b808:	f895 0039 	ldrb.w	r0, [r5, #57]	; 0x39
 800b80c:	f003 fd88 	bl	800f320 <ascii>
 800b810:	70e0      	strb	r0, [r4, #3]
        T_VOL1[4] = ascii(read_eeprom(tv1_5));
 800b812:	f895 003a 	ldrb.w	r0, [r5, #58]	; 0x3a
 800b816:	f003 fd83 	bl	800f320 <ascii>
 800b81a:	7120      	strb	r0, [r4, #4]
        T_VOL1[5] = ascii(read_eeprom(tv1_6));
 800b81c:	f895 003b 	ldrb.w	r0, [r5, #59]	; 0x3b
 800b820:	f003 fd7e 	bl	800f320 <ascii>
        T_VOL1[6] = '.';
 800b824:	232e      	movs	r3, #46	; 0x2e
        T_VOL1[5] = ascii(read_eeprom(tv1_6));
 800b826:	7160      	strb	r0, [r4, #5]
        T_VOL1[7] = ascii(read_eeprom(tv1_7));
 800b828:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
        T_VOL1[6] = '.';
 800b82c:	71a3      	strb	r3, [r4, #6]
        T_VOL1[7] = ascii(read_eeprom(tv1_7));
 800b82e:	f003 fd77 	bl	800f320 <ascii>
 800b832:	71e0      	strb	r0, [r4, #7]
        T_VOL1[8] = ascii(read_eeprom(tv1_8));
 800b834:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
 800b838:	f003 fd72 	bl	800f320 <ascii>
 800b83c:	7220      	strb	r0, [r4, #8]
 800b83e:	bd38      	pop	{r3, r4, r5, pc}
 800b840:	20001c74 	.word	0x20001c74
 800b844:	200008a8 	.word	0x200008a8
 800b848:	2000089c 	.word	0x2000089c
 800b84c:	00000000 	.word	0x00000000

0800b850 <ConfInicial>:
#include "DataSd.h"



void ConfInicial(const char data_inicial[])
{
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4605      	mov	r5, r0
   	
   	
   	LCDPrintRow( 0,"  Read microSD  ");
 800b854:	48cb      	ldr	r0, [pc, #812]	; (800bb84 <ConfInicial+0x334>)
 800b856:	f003 f9fb 	bl	800ec50 <LCDPrintRow.constprop.3>
    LCDPrintRow2( 0,"                ");
 800b85a:	48cb      	ldr	r0, [pc, #812]	; (800bb88 <ConfInicial+0x338>)
 800b85c:	f003 fee0 	bl	800f620 <LCDPrintRow2.constprop.2>

    if(data_inicial[1] == ',' && data_inicial[4] == ',' && data_inicial[7] == ',' && data_inicial[9] == ',' && data_inicial[11] == ',' && data_inicial[13] == ',' && data_inicial[19] == ',' && data_inicial[25] == ',' && data_inicial[35] == ',' && data_inicial[45] == ',' && data_inicial[55] == ',')
 800b860:	786b      	ldrb	r3, [r5, #1]
 800b862:	2b2c      	cmp	r3, #44	; 0x2c
 800b864:	f040 81cb 	bne.w	800bbfe <ConfInicial+0x3ae>
 800b868:	792b      	ldrb	r3, [r5, #4]
 800b86a:	2b2c      	cmp	r3, #44	; 0x2c
 800b86c:	f040 81c7 	bne.w	800bbfe <ConfInicial+0x3ae>
 800b870:	79eb      	ldrb	r3, [r5, #7]
 800b872:	2b2c      	cmp	r3, #44	; 0x2c
 800b874:	f040 81c3 	bne.w	800bbfe <ConfInicial+0x3ae>
 800b878:	7a6b      	ldrb	r3, [r5, #9]
 800b87a:	2b2c      	cmp	r3, #44	; 0x2c
 800b87c:	f040 81bf 	bne.w	800bbfe <ConfInicial+0x3ae>
 800b880:	7aeb      	ldrb	r3, [r5, #11]
 800b882:	2b2c      	cmp	r3, #44	; 0x2c
 800b884:	f040 81bb 	bne.w	800bbfe <ConfInicial+0x3ae>
 800b888:	7b6b      	ldrb	r3, [r5, #13]
 800b88a:	2b2c      	cmp	r3, #44	; 0x2c
 800b88c:	f040 81b7 	bne.w	800bbfe <ConfInicial+0x3ae>
 800b890:	7ceb      	ldrb	r3, [r5, #19]
 800b892:	2b2c      	cmp	r3, #44	; 0x2c
 800b894:	f040 81b3 	bne.w	800bbfe <ConfInicial+0x3ae>
 800b898:	7e6b      	ldrb	r3, [r5, #25]
 800b89a:	2b2c      	cmp	r3, #44	; 0x2c
 800b89c:	f040 81af 	bne.w	800bbfe <ConfInicial+0x3ae>
 800b8a0:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800b8a4:	2b2c      	cmp	r3, #44	; 0x2c
 800b8a6:	f040 81aa 	bne.w	800bbfe <ConfInicial+0x3ae>
 800b8aa:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800b8ae:	2b2c      	cmp	r3, #44	; 0x2c
 800b8b0:	f040 81a5 	bne.w	800bbfe <ConfInicial+0x3ae>
 800b8b4:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 800b8b8:	2b2c      	cmp	r3, #44	; 0x2c
 800b8ba:	f040 81a0 	bne.w	800bbfe <ConfInicial+0x3ae>
    {
        
        
        write_eeprom(consola,(data_inicial[cons] & 0X0F));
 800b8be:	782b      	ldrb	r3, [r5, #0]
	dato_emr3[num] = inf;
 800b8c0:	4cb2      	ldr	r4, [pc, #712]	; (800bb8c <ConfInicial+0x33c>)
 800b8c2:	f003 030f 	and.w	r3, r3, #15
 800b8c6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
        write_eeprom(estado1,(data_inicial[est1] & 0X0F));
 800b8ca:	78ab      	ldrb	r3, [r5, #2]
 800b8cc:	f003 030f 	and.w	r3, r3, #15
 800b8d0:	7023      	strb	r3, [r4, #0]
   
        if(data_inicial[p1] == 'A' || data_inicial[p1] == 'a') write_eeprom(pos1,0X0A);
 800b8d2:	78ea      	ldrb	r2, [r5, #3]
 800b8d4:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 800b8d8:	2b41      	cmp	r3, #65	; 0x41
 800b8da:	d102      	bne.n	800b8e2 <ConfInicial+0x92>
 800b8dc:	230a      	movs	r3, #10
 800b8de:	7063      	strb	r3, [r4, #1]
 800b8e0:	e01a      	b.n	800b918 <ConfInicial+0xc8>
        else if(data_inicial[p1] == 'B' || data_inicial[p1] == 'b')write_eeprom(pos1,0X0B);
 800b8e2:	2b42      	cmp	r3, #66	; 0x42
 800b8e4:	d102      	bne.n	800b8ec <ConfInicial+0x9c>
 800b8e6:	230b      	movs	r3, #11
 800b8e8:	7063      	strb	r3, [r4, #1]
 800b8ea:	e015      	b.n	800b918 <ConfInicial+0xc8>
        else if(data_inicial[p1] == 'C' || data_inicial[p1] == 'c') write_eeprom(pos1,0X0C);
 800b8ec:	2b43      	cmp	r3, #67	; 0x43
 800b8ee:	d102      	bne.n	800b8f6 <ConfInicial+0xa6>
 800b8f0:	230c      	movs	r3, #12
 800b8f2:	7063      	strb	r3, [r4, #1]
 800b8f4:	e010      	b.n	800b918 <ConfInicial+0xc8>
        else if(data_inicial[p1] == 'D' || data_inicial[p1] == 'd') write_eeprom(pos1,0X0D);
 800b8f6:	2b44      	cmp	r3, #68	; 0x44
 800b8f8:	d102      	bne.n	800b900 <ConfInicial+0xb0>
 800b8fa:	230d      	movs	r3, #13
 800b8fc:	7063      	strb	r3, [r4, #1]
 800b8fe:	e00b      	b.n	800b918 <ConfInicial+0xc8>
        else if(data_inicial[p1] == 'E' || data_inicial[p1] == 'e') write_eeprom(pos1,0X0E);
 800b900:	2b45      	cmp	r3, #69	; 0x45
 800b902:	d102      	bne.n	800b90a <ConfInicial+0xba>
 800b904:	230e      	movs	r3, #14
 800b906:	7063      	strb	r3, [r4, #1]
 800b908:	e006      	b.n	800b918 <ConfInicial+0xc8>
        else if(data_inicial[p1] == 'F' || data_inicial[p1] == 'f') write_eeprom(pos1,0X0F);
 800b90a:	2b46      	cmp	r3, #70	; 0x46
 800b90c:	bf0b      	itete	eq
 800b90e:	230f      	moveq	r3, #15
        else write_eeprom(pos1,(data_inicial[p1] & 0X0F));  
 800b910:	f002 020f 	andne.w	r2, r2, #15
 800b914:	7063      	strbeq	r3, [r4, #1]
 800b916:	7062      	strbne	r2, [r4, #1]
       
       
        write_eeprom(estado2,(data_inicial[est2] & 0X0F));
 800b918:	796b      	ldrb	r3, [r5, #5]
 800b91a:	f003 030f 	and.w	r3, r3, #15
 800b91e:	70a3      	strb	r3, [r4, #2]

        if(data_inicial[p2] == 'A' || data_inicial[p2] == 'a') write_eeprom(pos2,0X0A);
 800b920:	79aa      	ldrb	r2, [r5, #6]
 800b922:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 800b926:	2b41      	cmp	r3, #65	; 0x41
 800b928:	d102      	bne.n	800b930 <ConfInicial+0xe0>
 800b92a:	230a      	movs	r3, #10
 800b92c:	70e3      	strb	r3, [r4, #3]
 800b92e:	e01a      	b.n	800b966 <ConfInicial+0x116>
        else if(data_inicial[p2] == 'B' || data_inicial[p2] == 'b') write_eeprom(pos2,0X0B);
 800b930:	2b42      	cmp	r3, #66	; 0x42
 800b932:	d102      	bne.n	800b93a <ConfInicial+0xea>
 800b934:	230b      	movs	r3, #11
 800b936:	70e3      	strb	r3, [r4, #3]
 800b938:	e015      	b.n	800b966 <ConfInicial+0x116>
        else if(data_inicial[p2] == 'C' || data_inicial[p2] == 'c') write_eeprom(pos2,0X0C);
 800b93a:	2b43      	cmp	r3, #67	; 0x43
 800b93c:	d102      	bne.n	800b944 <ConfInicial+0xf4>
 800b93e:	230c      	movs	r3, #12
 800b940:	70e3      	strb	r3, [r4, #3]
 800b942:	e010      	b.n	800b966 <ConfInicial+0x116>
        else if(data_inicial[p2] == 'D' || data_inicial[p2] == 'd') write_eeprom(pos2,0X0D);
 800b944:	2b44      	cmp	r3, #68	; 0x44
 800b946:	d102      	bne.n	800b94e <ConfInicial+0xfe>
 800b948:	230d      	movs	r3, #13
 800b94a:	70e3      	strb	r3, [r4, #3]
 800b94c:	e00b      	b.n	800b966 <ConfInicial+0x116>
        else if(data_inicial[p2] == 'E' || data_inicial[p2] == 'e') write_eeprom(pos2,0X0E);
 800b94e:	2b45      	cmp	r3, #69	; 0x45
 800b950:	d102      	bne.n	800b958 <ConfInicial+0x108>
 800b952:	230e      	movs	r3, #14
 800b954:	70e3      	strb	r3, [r4, #3]
 800b956:	e006      	b.n	800b966 <ConfInicial+0x116>
        else if(data_inicial[p2] == 'F' || data_inicial[p2] == 'f') write_eeprom(pos2,0X0F);
 800b958:	2b46      	cmp	r3, #70	; 0x46
 800b95a:	bf0b      	itete	eq
 800b95c:	230f      	moveq	r3, #15
        else write_eeprom(pos2,(data_inicial[p2] & 0X0F)); 
 800b95e:	f002 020f 	andne.w	r2, r2, #15
 800b962:	70e3      	strbeq	r3, [r4, #3]
 800b964:	70e2      	strbne	r2, [r4, #3]

       

        write_eeprom(pppu,(data_inicial[p_p] & 0X0F));
 800b966:	7a2b      	ldrb	r3, [r5, #8]
 800b968:	f003 030f 	and.w	r3, r3, #15
 800b96c:	7123      	strb	r3, [r4, #4]

       
        write_eeprom(PD,(data_inicial[p_d] & 0X0F));
 800b96e:	7aab      	ldrb	r3, [r5, #10]
 800b970:	f003 030f 	and.w	r3, r3, #15
 800b974:	76e3      	strb	r3, [r4, #27]

       
        write_eeprom(PV,(data_inicial[p_v] & 0X0F)); 
 800b976:	7b2b      	ldrb	r3, [r5, #12]
 800b978:	f003 030f 	and.w	r3, r3, #15
 800b97c:	73a3      	strb	r3, [r4, #14]

       
        write_eeprom(ppu1_level1,(data_inicial[ppu1_1] & 0X0F));
 800b97e:	7bab      	ldrb	r3, [r5, #14]
 800b980:	f003 030f 	and.w	r3, r3, #15
 800b984:	7163      	strb	r3, [r4, #5]

        
        if(data_inicial[ppu2_1] == '.')
 800b986:	7bea      	ldrb	r2, [r5, #15]
 800b988:	7c2b      	ldrb	r3, [r5, #16]
 800b98a:	2a2e      	cmp	r2, #46	; 0x2e
 800b98c:	d103      	bne.n	800b996 <ConfInicial+0x146>
        {
            write_eeprom(ppu2_level1,(data_inicial[ppu3_1] & 0X0F));
 800b98e:	f003 030f 	and.w	r3, r3, #15
 800b992:	71a3      	strb	r3, [r4, #6]
 800b994:	e004      	b.n	800b9a0 <ConfInicial+0x150>
            write_eeprom(ppu3_level1,(data_inicial[ppu4_1] & 0X0F));
            write_eeprom(ppu4_level1,(data_inicial[ppu5_1] & 0X0F));
              
        }

        else if(data_inicial[ppu3_1] == '.')
 800b996:	2b2e      	cmp	r3, #46	; 0x2e
 800b998:	d10b      	bne.n	800b9b2 <ConfInicial+0x162>
        {
            write_eeprom(ppu2_level1,(data_inicial[ppu2_1] & 0X0F));
 800b99a:	f002 020f 	and.w	r2, r2, #15
 800b99e:	71a2      	strb	r2, [r4, #6]
            write_eeprom(ppu3_level1,(data_inicial[ppu4_1] & 0X0F));
 800b9a0:	7c6b      	ldrb	r3, [r5, #17]
 800b9a2:	f003 030f 	and.w	r3, r3, #15
 800b9a6:	71e3      	strb	r3, [r4, #7]
            write_eeprom(ppu4_level1,(data_inicial[ppu5_1] & 0X0F));
 800b9a8:	7cab      	ldrb	r3, [r5, #18]
 800b9aa:	f003 030f 	and.w	r3, r3, #15
 800b9ae:	7223      	strb	r3, [r4, #8]
 800b9b0:	e019      	b.n	800b9e6 <ConfInicial+0x196>

        }

        else if(data_inicial[ppu4_1] == '.')
 800b9b2:	7c69      	ldrb	r1, [r5, #17]
 800b9b4:	292e      	cmp	r1, #46	; 0x2e
 800b9b6:	d10a      	bne.n	800b9ce <ConfInicial+0x17e>
        {
            write_eeprom(ppu2_level1,(data_inicial[ppu2_1] & 0X0F));
            write_eeprom(ppu3_level1,(data_inicial[ppu3_1] & 0X0F));
 800b9b8:	f003 030f 	and.w	r3, r3, #15
            write_eeprom(ppu2_level1,(data_inicial[ppu2_1] & 0X0F));
 800b9bc:	f002 020f 	and.w	r2, r2, #15
 800b9c0:	71a2      	strb	r2, [r4, #6]
 800b9c2:	71e3      	strb	r3, [r4, #7]
            write_eeprom(ppu4_level1,(data_inicial[ppu5_1] & 0X0F));
 800b9c4:	7cab      	ldrb	r3, [r5, #18]
 800b9c6:	f003 030f 	and.w	r3, r3, #15
 800b9ca:	7223      	strb	r3, [r4, #8]
 800b9cc:	e00b      	b.n	800b9e6 <ConfInicial+0x196>

        }

        else if(data_inicial[ppu5_1] == '.')
 800b9ce:	7ca8      	ldrb	r0, [r5, #18]
 800b9d0:	282e      	cmp	r0, #46	; 0x2e
 800b9d2:	d108      	bne.n	800b9e6 <ConfInicial+0x196>
        {
            write_eeprom(ppu2_level1,(data_inicial[ppu2_1] & 0X0F));
 800b9d4:	f002 020f 	and.w	r2, r2, #15
            write_eeprom(ppu3_level1,(data_inicial[ppu3_1] & 0X0F));
 800b9d8:	f003 030f 	and.w	r3, r3, #15
            write_eeprom(ppu4_level1,(data_inicial[ppu4_1] & 0X0F));
 800b9dc:	f001 010f 	and.w	r1, r1, #15
 800b9e0:	71a2      	strb	r2, [r4, #6]
 800b9e2:	71e3      	strb	r3, [r4, #7]
 800b9e4:	7221      	strb	r1, [r4, #8]

        }

        sd_ppu(0x01);
 800b9e6:	2001      	movs	r0, #1
 800b9e8:	f7ff fe1a 	bl	800b620 <sd_ppu>

        write_eeprom(ppu1_level2,(data_inicial[ppu1_2] & 0X0F));
 800b9ec:	7d2b      	ldrb	r3, [r5, #20]
 800b9ee:	f003 030f 	and.w	r3, r3, #15
 800b9f2:	7263      	strb	r3, [r4, #9]

        
        if(data_inicial[ppu2_2] == '.')
 800b9f4:	7d6a      	ldrb	r2, [r5, #21]
 800b9f6:	7dab      	ldrb	r3, [r5, #22]
 800b9f8:	2a2e      	cmp	r2, #46	; 0x2e
 800b9fa:	d103      	bne.n	800ba04 <ConfInicial+0x1b4>
        {
            write_eeprom(ppu2_level2,(data_inicial[ppu3_2] & 0X0F));
 800b9fc:	f003 030f 	and.w	r3, r3, #15
 800ba00:	72a3      	strb	r3, [r4, #10]
 800ba02:	e004      	b.n	800ba0e <ConfInicial+0x1be>
            write_eeprom(ppu3_level2,(data_inicial[ppu4_2] & 0X0F));
            write_eeprom(ppu4_level2,(data_inicial[ppu5_2] & 0X0F));
              
        }

        else if(data_inicial[ppu3_2] == '.')
 800ba04:	2b2e      	cmp	r3, #46	; 0x2e
 800ba06:	d10b      	bne.n	800ba20 <ConfInicial+0x1d0>
        {
            write_eeprom(ppu2_level2,(data_inicial[ppu2_2] & 0X0F));
 800ba08:	f002 020f 	and.w	r2, r2, #15
 800ba0c:	72a2      	strb	r2, [r4, #10]
            write_eeprom(ppu3_level2,(data_inicial[ppu4_2] & 0X0F));
 800ba0e:	7deb      	ldrb	r3, [r5, #23]
 800ba10:	f003 030f 	and.w	r3, r3, #15
 800ba14:	72e3      	strb	r3, [r4, #11]
            write_eeprom(ppu4_level2,(data_inicial[ppu5_2] & 0X0F));
 800ba16:	7e2b      	ldrb	r3, [r5, #24]
 800ba18:	f003 030f 	and.w	r3, r3, #15
 800ba1c:	7323      	strb	r3, [r4, #12]
 800ba1e:	e019      	b.n	800ba54 <ConfInicial+0x204>

        }

        else if(data_inicial[ppu4_2] == '.')
 800ba20:	7de9      	ldrb	r1, [r5, #23]
 800ba22:	292e      	cmp	r1, #46	; 0x2e
 800ba24:	d10a      	bne.n	800ba3c <ConfInicial+0x1ec>
        {
            write_eeprom(ppu2_level2,(data_inicial[ppu2_2] & 0X0F));
            write_eeprom(ppu3_level2,(data_inicial[ppu3_2] & 0X0F));
 800ba26:	f003 030f 	and.w	r3, r3, #15
            write_eeprom(ppu2_level2,(data_inicial[ppu2_2] & 0X0F));
 800ba2a:	f002 020f 	and.w	r2, r2, #15
 800ba2e:	72a2      	strb	r2, [r4, #10]
 800ba30:	72e3      	strb	r3, [r4, #11]
            write_eeprom(ppu4_level2,(data_inicial[ppu5_2] & 0X0F));
 800ba32:	7e2b      	ldrb	r3, [r5, #24]
 800ba34:	f003 030f 	and.w	r3, r3, #15
 800ba38:	7323      	strb	r3, [r4, #12]
 800ba3a:	e00b      	b.n	800ba54 <ConfInicial+0x204>
        }

        else if(data_inicial[ppu5_2] == '.')
 800ba3c:	7e28      	ldrb	r0, [r5, #24]
 800ba3e:	282e      	cmp	r0, #46	; 0x2e
 800ba40:	d108      	bne.n	800ba54 <ConfInicial+0x204>
        {
            write_eeprom(ppu2_level2,(data_inicial[ppu2_2] & 0X0F));
 800ba42:	f002 020f 	and.w	r2, r2, #15
            write_eeprom(ppu3_level2,(data_inicial[ppu3_2] & 0X0F));
 800ba46:	f003 030f 	and.w	r3, r3, #15
            write_eeprom(ppu4_level2,(data_inicial[ppu4_2] & 0X0F));
 800ba4a:	f001 010f 	and.w	r1, r1, #15
 800ba4e:	72a2      	strb	r2, [r4, #10]
 800ba50:	72e3      	strb	r3, [r4, #11]
 800ba52:	7321      	strb	r1, [r4, #12]

        }

        sd_ppu(0x02);
 800ba54:	2002      	movs	r0, #2
 800ba56:	f7ff fde3 	bl	800b620 <sd_ppu>
        


        write_eeprom(td1_1,(data_inicial[dt1_1] & 0X0F));
 800ba5a:	7eab      	ldrb	r3, [r5, #26]
 800ba5c:	f003 030f 	and.w	r3, r3, #15
 800ba60:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
        write_eeprom(td1_2,(data_inicial[dt1_2] & 0X0F));
 800ba64:	7eeb      	ldrb	r3, [r5, #27]
 800ba66:	f003 030f 	and.w	r3, r3, #15
 800ba6a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
        write_eeprom(td1_3,(data_inicial[dt1_3] & 0X0F));
 800ba6e:	7f2b      	ldrb	r3, [r5, #28]
 800ba70:	f003 030f 	and.w	r3, r3, #15
 800ba74:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        write_eeprom(td1_4,(data_inicial[dt1_4] & 0X0F));
 800ba78:	7f6b      	ldrb	r3, [r5, #29]
 800ba7a:	f003 030f 	and.w	r3, r3, #15
 800ba7e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        write_eeprom(td1_5,(data_inicial[dt1_5] & 0X0F));
 800ba82:	7fab      	ldrb	r3, [r5, #30]
 800ba84:	f003 030f 	and.w	r3, r3, #15
 800ba88:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a

        if(data_inicial[dt1_6] == '.')
 800ba8c:	7feb      	ldrb	r3, [r5, #31]
 800ba8e:	f895 2020 	ldrb.w	r2, [r5, #32]
 800ba92:	2b2e      	cmp	r3, #46	; 0x2e
 800ba94:	d104      	bne.n	800baa0 <ConfInicial+0x250>
        {
            write_eeprom(td1_6,(data_inicial[dt1_7] & 0X0F));
 800ba96:	f002 020f 	and.w	r2, r2, #15
 800ba9a:	f884 204b 	strb.w	r2, [r4, #75]	; 0x4b
 800ba9e:	e005      	b.n	800baac <ConfInicial+0x25c>
            write_eeprom(td1_7,(data_inicial[dt1_8] & 0X0F));
            write_eeprom(td1_8,(data_inicial[dt1_9] & 0X0F));
        }

        else if(data_inicial[dt1_7] == '.')
 800baa0:	2a2e      	cmp	r2, #46	; 0x2e
 800baa2:	d110      	bne.n	800bac6 <ConfInicial+0x276>
        {
            write_eeprom(td1_6,(data_inicial[dt1_6] & 0X0F));
 800baa4:	f003 030f 	and.w	r3, r3, #15
 800baa8:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
            write_eeprom(td1_7,(data_inicial[dt1_8] & 0X0F));
 800baac:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800bab0:	f003 030f 	and.w	r3, r3, #15
 800bab4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
            write_eeprom(td1_8,(data_inicial[dt1_9] & 0X0F));
 800bab8:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800babc:	f003 030f 	and.w	r3, r3, #15
 800bac0:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800bac4:	e01e      	b.n	800bb04 <ConfInicial+0x2b4>
        }

        else if(data_inicial[dt1_8] == '.')
 800bac6:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 800baca:	2a2e      	cmp	r2, #46	; 0x2e
 800bacc:	d106      	bne.n	800badc <ConfInicial+0x28c>
        {
            write_eeprom(td1_6,(data_inicial[dt1_6] & 0X0F));
 800bace:	f003 030f 	and.w	r3, r3, #15
 800bad2:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
            write_eeprom(td1_7,(data_inicial[dt1_7] & 0X0F));
 800bad6:	f895 3020 	ldrb.w	r3, [r5, #32]
 800bada:	e7e9      	b.n	800bab0 <ConfInicial+0x260>
            write_eeprom(td1_8,(data_inicial[dt1_9] & 0X0F));
        }

        else if(data_inicial[dt1_9] == '.')
 800badc:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800bae0:	2a2e      	cmp	r2, #46	; 0x2e
 800bae2:	d10f      	bne.n	800bb04 <ConfInicial+0x2b4>
        {
            write_eeprom(td1_6,(data_inicial[dt1_6] & 0X0F));
 800bae4:	f003 030f 	and.w	r3, r3, #15
 800bae8:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
            write_eeprom(td1_7,(data_inicial[dt1_7] & 0X0F));
 800baec:	f895 3020 	ldrb.w	r3, [r5, #32]
 800baf0:	f003 030f 	and.w	r3, r3, #15
 800baf4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
            write_eeprom(td1_8,(data_inicial[dt1_8] & 0X0F));
 800baf8:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800bafc:	f003 030f 	and.w	r3, r3, #15
 800bb00:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        }

        sd_Tdinero(0x01);
 800bb04:	2001      	movs	r0, #1
 800bb06:	f000 f953 	bl	800bdb0 <sd_Tdinero>

        write_eeprom(td2_1,(data_inicial[dt2_1] & 0X0F));
 800bb0a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 800bb0e:	f003 030f 	and.w	r3, r3, #15
 800bb12:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        write_eeprom(td2_2,(data_inicial[dt2_2] & 0X0F));
 800bb16:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800bb1a:	f003 030f 	and.w	r3, r3, #15
 800bb1e:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
        write_eeprom(td2_3,(data_inicial[dt2_3] & 0X0F));
 800bb22:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800bb26:	f003 030f 	and.w	r3, r3, #15
 800bb2a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        write_eeprom(td2_4,(data_inicial[dt2_4] & 0X0F));
 800bb2e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800bb32:	f003 030f 	and.w	r3, r3, #15
 800bb36:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        write_eeprom(td2_5,(data_inicial[dt2_5] & 0X0F));
 800bb3a:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 800bb3e:	f003 030f 	and.w	r3, r3, #15
 800bb42:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52

        if(data_inicial[dt2_6] == '.')
 800bb46:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 800bb4a:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 800bb4e:	2b2e      	cmp	r3, #46	; 0x2e
 800bb50:	d104      	bne.n	800bb5c <ConfInicial+0x30c>
        {
            write_eeprom(td2_6,(data_inicial[dt2_7] & 0X0F));
 800bb52:	f002 020f 	and.w	r2, r2, #15
 800bb56:	f884 2053 	strb.w	r2, [r4, #83]	; 0x53
 800bb5a:	e005      	b.n	800bb68 <ConfInicial+0x318>
            write_eeprom(td2_7,(data_inicial[dt2_8] & 0X0F));
            write_eeprom(td2_8,(data_inicial[dt2_9] & 0X0F));
        }

        else if(data_inicial[dt2_7] == '.')
 800bb5c:	2a2e      	cmp	r2, #46	; 0x2e
 800bb5e:	d117      	bne.n	800bb90 <ConfInicial+0x340>
        {
            write_eeprom(td2_6,(data_inicial[dt2_6] & 0X0F));
 800bb60:	f003 030f 	and.w	r3, r3, #15
 800bb64:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
            write_eeprom(td2_7,(data_inicial[dt2_8] & 0X0F));
 800bb68:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800bb6c:	f003 030f 	and.w	r3, r3, #15
 800bb70:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
            write_eeprom(td2_8,(data_inicial[dt2_9] & 0X0F));
 800bb74:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800bb78:	f003 030f 	and.w	r3, r3, #15
 800bb7c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800bb80:	e025      	b.n	800bbce <ConfInicial+0x37e>
 800bb82:	bf00      	nop
 800bb84:	0800ff60 	.word	0x0800ff60
 800bb88:	0800f9b4 	.word	0x0800f9b4
 800bb8c:	20001c74 	.word	0x20001c74
        }

        else if(data_inicial[dt2_8] == '.')
 800bb90:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
 800bb94:	2a2e      	cmp	r2, #46	; 0x2e
 800bb96:	d106      	bne.n	800bba6 <ConfInicial+0x356>
        {
            write_eeprom(td2_6,(data_inicial[dt2_6] & 0X0F));
 800bb98:	f003 030f 	and.w	r3, r3, #15
 800bb9c:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
            write_eeprom(td2_7,(data_inicial[dt2_7] & 0X0F));
 800bba0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800bba4:	e7e2      	b.n	800bb6c <ConfInicial+0x31c>
            write_eeprom(td2_8,(data_inicial[dt2_9] & 0X0F));
        }

        else if(data_inicial[dt2_9] == '.')
 800bba6:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
 800bbaa:	2a2e      	cmp	r2, #46	; 0x2e
 800bbac:	d10f      	bne.n	800bbce <ConfInicial+0x37e>
        {
            write_eeprom(td2_6,(data_inicial[dt2_6] & 0X0F));
 800bbae:	f003 030f 	and.w	r3, r3, #15
 800bbb2:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
            write_eeprom(td2_7,(data_inicial[dt2_7] & 0X0F));
 800bbb6:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800bbba:	f003 030f 	and.w	r3, r3, #15
 800bbbe:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
            write_eeprom(td2_8,(data_inicial[dt2_8] & 0X0F));
 800bbc2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800bbc6:	f003 030f 	and.w	r3, r3, #15
 800bbca:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
        }

        sd_Tdinero(0x02);
 800bbce:	2002      	movs	r0, #2
 800bbd0:	f000 f8ee 	bl	800bdb0 <sd_Tdinero>
 800bbd4:	2301      	movs	r3, #1
        write_eeprom(lado1,0x01);
        write_eeprom(lado2,0x01);

        

        Status_1(read_eeprom(estado1));
 800bbd6:	7820      	ldrb	r0, [r4, #0]
 800bbd8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 800bbdc:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
 800bbe0:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
 800bbe4:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 800bbe8:	f001 fe0a 	bl	800d800 <Status_1>
        
        Status_2(read_eeprom(estado2));
 800bbec:	78a0      	ldrb	r0, [r4, #2]
 800bbee:	f001 fdf7 	bl	800d7e0 <Status_2>
            chThdSleepMilliseconds(5000);
        }
    }
   	

    chThdSleepMilliseconds(2000);
 800bbf2:	f644 6020 	movw	r0, #20000	; 0x4e20
    
    return;
    
}
 800bbf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    chThdSleepMilliseconds(2000);
 800bbfa:	f000 bf21 	b.w	800ca40 <chThdSleep>
        LCDPrintRow2(0,"   Error=0006   ");
 800bbfe:	4804      	ldr	r0, [pc, #16]	; (800bc10 <ConfInicial+0x3c0>)
 800bc00:	f003 fd0e 	bl	800f620 <LCDPrintRow2.constprop.2>
            chThdSleepMilliseconds(5000);
 800bc04:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bc08:	f000 ff1a 	bl	800ca40 <chThdSleep>
 800bc0c:	e7fa      	b.n	800bc04 <ConfInicial+0x3b4>
 800bc0e:	bf00      	nop
 800bc10:	0800ff74 	.word	0x0800ff74
	...

0800bc20 <LCDWrite4bits>:
   palWritePad(GPIOD, EP, LOW);
   chThdSleepMicroseconds(100);
}

void LCDWrite4bits(uint8_t value)
{
 800bc20:	b570      	push	{r4, r5, r6, lr}
      //palSetPadMode(GPIOD, _data_pins[i] , PAL_MODE_OUTPUT_PUSHPULL);
      palWritePad(GPIOD, _data_pins[0], (value >> 0) & 0x01);
 800bc22:	4a23      	ldr	r2, [pc, #140]	; (800bcb0 <LCDWrite4bits+0x90>)
 800bc24:	4c23      	ldr	r4, [pc, #140]	; (800bcb4 <LCDWrite4bits+0x94>)
 800bc26:	7815      	ldrb	r5, [r2, #0]
 800bc28:	43c3      	mvns	r3, r0
 800bc2a:	f105 0610 	add.w	r6, r5, #16
 800bc2e:	f000 0101 	and.w	r1, r0, #1
 800bc32:	f003 0301 	and.w	r3, r3, #1
 800bc36:	40a9      	lsls	r1, r5
 800bc38:	40b3      	lsls	r3, r6
 800bc3a:	430b      	orrs	r3, r1
 800bc3c:	61a3      	str	r3, [r4, #24]
      palWritePad(GPIOD, _data_pins[1], (value >> 1) & 0x01);
 800bc3e:	7855      	ldrb	r5, [r2, #1]
 800bc40:	0841      	lsrs	r1, r0, #1
 800bc42:	43cb      	mvns	r3, r1
 800bc44:	f105 0610 	add.w	r6, r5, #16
 800bc48:	f003 0301 	and.w	r3, r3, #1
 800bc4c:	f001 0101 	and.w	r1, r1, #1
 800bc50:	40a9      	lsls	r1, r5
 800bc52:	40b3      	lsls	r3, r6
 800bc54:	430b      	orrs	r3, r1
 800bc56:	61a3      	str	r3, [r4, #24]
      palWritePad(GPIOD, _data_pins[2], (value >> 2) & 0x01);
 800bc58:	7895      	ldrb	r5, [r2, #2]
 800bc5a:	0881      	lsrs	r1, r0, #2
 800bc5c:	43cb      	mvns	r3, r1
 800bc5e:	f105 0610 	add.w	r6, r5, #16
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	f001 0101 	and.w	r1, r1, #1
 800bc6a:	40a9      	lsls	r1, r5
 800bc6c:	40b3      	lsls	r3, r6
 800bc6e:	430b      	orrs	r3, r1
 800bc70:	61a3      	str	r3, [r4, #24]
      palWritePad(GPIOD, _data_pins[3], (value >> 3) & 0x01);
 800bc72:	78d2      	ldrb	r2, [r2, #3]
 800bc74:	08c0      	lsrs	r0, r0, #3
 800bc76:	43c3      	mvns	r3, r0
 800bc78:	f102 0110 	add.w	r1, r2, #16
 800bc7c:	f003 0301 	and.w	r3, r3, #1
 800bc80:	f000 0001 	and.w	r0, r0, #1
 800bc84:	408b      	lsls	r3, r1
 800bc86:	4090      	lsls	r0, r2
 800bc88:	4318      	orrs	r0, r3
   palWritePad(GPIOD, EP, LOW);
 800bc8a:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
      palWritePad(GPIOD, _data_pins[3], (value >> 3) & 0x01);
 800bc8e:	61a0      	str	r0, [r4, #24]
   chThdSleepMicroseconds(100);
 800bc90:	2001      	movs	r0, #1
   palWritePad(GPIOD, EP, LOW);
 800bc92:	61a5      	str	r5, [r4, #24]
   chThdSleepMicroseconds(100);
 800bc94:	f000 fed4 	bl	800ca40 <chThdSleep>
   palWritePad(GPIOD, EP, HIGH);
 800bc98:	2310      	movs	r3, #16
 800bc9a:	61a3      	str	r3, [r4, #24]
   chThdSleepMicroseconds(100);
 800bc9c:	2001      	movs	r0, #1
 800bc9e:	f000 fecf 	bl	800ca40 <chThdSleep>
   palWritePad(GPIOD, EP, LOW);
 800bca2:	61a5      	str	r5, [r4, #24]
   chThdSleepMicroseconds(100);
 800bca4:	2001      	movs	r0, #1
      LCDPulseEnable();
}
 800bca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   chThdSleepMicroseconds(100);
 800bcaa:	f000 bec9 	b.w	800ca40 <chThdSleep>
 800bcae:	bf00      	nop
 800bcb0:	200015f4 	.word	0x200015f4
 800bcb4:	40020c00 	.word	0x40020c00
	...

0800bcc0 <LCDInit>:
void LCDInit(void){
 800bcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
palSetPadMode(GPIOD, RW , PAL_MODE_OUTPUT_PUSHPULL); //RS
 800bcc2:	4e1e      	ldr	r6, [pc, #120]	; (800bd3c <LCDInit+0x7c>)
     _data_pins[0] = D4;
 800bcc4:	4d1e      	ldr	r5, [pc, #120]	; (800bd40 <LCDInit+0x80>)
     _data_pins[2] = D6;
 800bcc6:	2401      	movs	r4, #1
     _data_pins[0] = D4;
 800bcc8:	f04f 0e03 	mov.w	lr, #3
     _data_pins[3] = D7;
 800bccc:	2300      	movs	r3, #0
palSetPadMode(GPIOD, RW , PAL_MODE_OUTPUT_PUSHPULL); //RS
 800bcce:	4630      	mov	r0, r6
 800bcd0:	4622      	mov	r2, r4
     _data_pins[1] = D5;
 800bcd2:	2702      	movs	r7, #2
palSetPadMode(GPIOD, RW , PAL_MODE_OUTPUT_PUSHPULL); //RS
 800bcd4:	2120      	movs	r1, #32
     _data_pins[0] = D4;
 800bcd6:	f885 e000 	strb.w	lr, [r5]
     _data_pins[3] = D7;
 800bcda:	70eb      	strb	r3, [r5, #3]
     _data_pins[1] = D5;
 800bcdc:	706f      	strb	r7, [r5, #1]
     _data_pins[2] = D6;
 800bcde:	70ac      	strb	r4, [r5, #2]
palSetPadMode(GPIOD, RW , PAL_MODE_OUTPUT_PUSHPULL); //RS
 800bce0:	f7fd fac6 	bl	8009270 <_pal_lld_setgroupmode>
palSetPadMode(GPIOD, RS , PAL_MODE_OUTPUT_PUSHPULL); //RS
 800bce4:	4622      	mov	r2, r4
 800bce6:	4630      	mov	r0, r6
 800bce8:	2140      	movs	r1, #64	; 0x40
 800bcea:	f7fd fac1 	bl	8009270 <_pal_lld_setgroupmode>
palSetPadMode(GPIOD, EP , PAL_MODE_OUTPUT_PUSHPULL); //EP
 800bcee:	4622      	mov	r2, r4
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	2110      	movs	r1, #16
 800bcf4:	f7fd fabc 	bl	8009270 <_pal_lld_setgroupmode>
palSetPadMode(GPIOD, _data_pins[0] , PAL_MODE_OUTPUT_PUSHPULL);
 800bcf8:	7829      	ldrb	r1, [r5, #0]
_displayfunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 800bcfa:	4b12      	ldr	r3, [pc, #72]	; (800bd44 <LCDInit+0x84>)
palSetPadMode(GPIOD, _data_pins[0] , PAL_MODE_OUTPUT_PUSHPULL);
 800bcfc:	fa04 f101 	lsl.w	r1, r4, r1
 800bd00:	4622      	mov	r2, r4
 800bd02:	4630      	mov	r0, r6
_displayfunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 800bd04:	2780      	movs	r7, #128	; 0x80
 800bd06:	701f      	strb	r7, [r3, #0]
palSetPadMode(GPIOD, _data_pins[0] , PAL_MODE_OUTPUT_PUSHPULL);
 800bd08:	f7fd fab2 	bl	8009270 <_pal_lld_setgroupmode>
palSetPadMode(GPIOD, _data_pins[1] , PAL_MODE_OUTPUT_PUSHPULL);
 800bd0c:	7869      	ldrb	r1, [r5, #1]
 800bd0e:	4622      	mov	r2, r4
 800bd10:	fa04 f101 	lsl.w	r1, r4, r1
 800bd14:	4630      	mov	r0, r6
 800bd16:	f7fd faab 	bl	8009270 <_pal_lld_setgroupmode>
palSetPadMode(GPIOD, _data_pins[2] , PAL_MODE_OUTPUT_PUSHPULL);
 800bd1a:	78a9      	ldrb	r1, [r5, #2]
 800bd1c:	4622      	mov	r2, r4
 800bd1e:	fa04 f101 	lsl.w	r1, r4, r1
 800bd22:	4630      	mov	r0, r6
 800bd24:	f7fd faa4 	bl	8009270 <_pal_lld_setgroupmode>
palSetPadMode(GPIOD, _data_pins[3] , PAL_MODE_OUTPUT_PUSHPULL);
 800bd28:	78e9      	ldrb	r1, [r5, #3]
 800bd2a:	4622      	mov	r2, r4
 800bd2c:	fa04 f101 	lsl.w	r1, r4, r1
 800bd30:	4630      	mov	r0, r6
}
 800bd32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
palSetPadMode(GPIOD, _data_pins[3] , PAL_MODE_OUTPUT_PUSHPULL);
 800bd36:	f7fd ba9b 	b.w	8009270 <_pal_lld_setgroupmode>
 800bd3a:	bf00      	nop
 800bd3c:	40020c00 	.word	0x40020c00
 800bd40:	200015f4 	.word	0x200015f4
 800bd44:	20001690 	.word	0x20001690
	...

0800bd50 <remove_chain.part.10.lto_priv.130>:
FRESULT remove_chain (
 800bd50:	b570      	push	{r4, r5, r6, lr}
 800bd52:	4604      	mov	r4, r0
 800bd54:	460d      	mov	r5, r1
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800bd56:	6963      	ldr	r3, [r4, #20]
 800bd58:	429d      	cmp	r5, r3
 800bd5a:	4629      	mov	r1, r5
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	d223      	bcs.n	800bda8 <remove_chain.part.10.lto_priv.130+0x58>
	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 800bd60:	2d01      	cmp	r5, #1
 800bd62:	d90a      	bls.n	800bd7a <remove_chain.part.10.lto_priv.130+0x2a>
 800bd64:	f7fe ff04 	bl	800ab70 <get_fat.part.6>
			if (nxt == 0) break;				/* Empty cluster? */
 800bd68:	4606      	mov	r6, r0
 800bd6a:	b1e8      	cbz	r0, 800bda8 <remove_chain.part.10.lto_priv.130+0x58>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800bd6c:	2801      	cmp	r0, #1
 800bd6e:	d004      	beq.n	800bd7a <remove_chain.part.10.lto_priv.130+0x2a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800bd70:	1c41      	adds	r1, r0, #1
 800bd72:	d01b      	beq.n	800bdac <remove_chain.part.10.lto_priv.130+0x5c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800bd74:	6963      	ldr	r3, [r4, #20]
 800bd76:	429d      	cmp	r5, r3
 800bd78:	d301      	bcc.n	800bd7e <remove_chain.part.10.lto_priv.130+0x2e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800bd7a:	2002      	movs	r0, #2
 800bd7c:	bd70      	pop	{r4, r5, r6, pc}
 800bd7e:	4629      	mov	r1, r5
 800bd80:	2200      	movs	r2, #0
 800bd82:	4620      	mov	r0, r4
 800bd84:	f7fe fe5c 	bl	800aa40 <put_fat.part.8>
			if (res != FR_OK) break;
 800bd88:	b988      	cbnz	r0, 800bdae <remove_chain.part.10.lto_priv.130+0x5e>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800bd8a:	6923      	ldr	r3, [r4, #16]
 800bd8c:	1c5a      	adds	r2, r3, #1
 800bd8e:	d005      	beq.n	800bd9c <remove_chain.part.10.lto_priv.130+0x4c>
				fs->fsi_flag |= 1;
 800bd90:	7962      	ldrb	r2, [r4, #5]
				fs->free_clust++;
 800bd92:	3301      	adds	r3, #1
				fs->fsi_flag |= 1;
 800bd94:	f042 0201 	orr.w	r2, r2, #1
				fs->free_clust++;
 800bd98:	6123      	str	r3, [r4, #16]
				fs->fsi_flag |= 1;
 800bd9a:	7162      	strb	r2, [r4, #5]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800bd9c:	6963      	ldr	r3, [r4, #20]
FRESULT remove_chain (
 800bd9e:	4635      	mov	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800bda0:	429d      	cmp	r5, r3
 800bda2:	4629      	mov	r1, r5
 800bda4:	4620      	mov	r0, r4
 800bda6:	d3db      	bcc.n	800bd60 <remove_chain.part.10.lto_priv.130+0x10>
FRESULT remove_chain (
 800bda8:	2000      	movs	r0, #0
 800bdaa:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800bdac:	2001      	movs	r0, #1
}
 800bdae:	bd70      	pop	{r4, r5, r6, pc}

0800bdb0 <sd_Tdinero>:
    if(pos == 1)
 800bdb0:	2801      	cmp	r0, #1
{
 800bdb2:	b538      	push	{r3, r4, r5, lr}
    if(pos == 1)
 800bdb4:	d162      	bne.n	800be7c <sd_Tdinero+0xcc>
	return (dato_emr3[num]);
 800bdb6:	4d63      	ldr	r5, [pc, #396]	; (800bf44 <sd_Tdinero+0x194>)
        T_DINERO1[0] = ascii(read_eeprom(td1_1));
 800bdb8:	4c63      	ldr	r4, [pc, #396]	; (800bf48 <sd_Tdinero+0x198>)
 800bdba:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
 800bdbe:	f003 faaf 	bl	800f320 <ascii>
 800bdc2:	7020      	strb	r0, [r4, #0]
        T_DINERO1[1] = ascii(read_eeprom(td1_2));
 800bdc4:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
 800bdc8:	f003 faaa 	bl	800f320 <ascii>
 800bdcc:	7060      	strb	r0, [r4, #1]
        T_DINERO1[2] = ascii(read_eeprom(td1_3));
 800bdce:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800bdd2:	f003 faa5 	bl	800f320 <ascii>
 800bdd6:	70a0      	strb	r0, [r4, #2]
        T_DINERO1[3] = ascii(read_eeprom(td1_4));
 800bdd8:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
 800bddc:	f003 faa0 	bl	800f320 <ascii>
 800bde0:	70e0      	strb	r0, [r4, #3]
        T_DINERO1[4] = ascii(read_eeprom(td1_5));
 800bde2:	f895 004a 	ldrb.w	r0, [r5, #74]	; 0x4a
 800bde6:	f003 fa9b 	bl	800f320 <ascii>
        switch(read_eeprom(PD))
 800bdea:	7eeb      	ldrb	r3, [r5, #27]
        T_DINERO1[4] = ascii(read_eeprom(td1_5));
 800bdec:	7120      	strb	r0, [r4, #4]
        switch(read_eeprom(PD))
 800bdee:	2b03      	cmp	r3, #3
 800bdf0:	f200 80a7 	bhi.w	800bf42 <sd_Tdinero+0x192>
 800bdf4:	e8df f003 	tbb	[pc, r3]
 800bdf8:	30261402 	.word	0x30261402
                T_DINERO1[5] = ascii(read_eeprom(td1_6));
 800bdfc:	f895 004b 	ldrb.w	r0, [r5, #75]	; 0x4b
 800be00:	f003 fa8e 	bl	800f320 <ascii>
 800be04:	7160      	strb	r0, [r4, #5]
                T_DINERO1[6] = ascii(read_eeprom(td1_7));
 800be06:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
 800be0a:	f003 fa89 	bl	800f320 <ascii>
 800be0e:	71a0      	strb	r0, [r4, #6]
                T_DINERO1[7] = ascii(read_eeprom(td1_8));
 800be10:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
 800be14:	f003 fa84 	bl	800f320 <ascii>
                T_DINERO1[8] = '.';
 800be18:	232e      	movs	r3, #46	; 0x2e
                T_DINERO1[7] = ascii(read_eeprom(td1_8));
 800be1a:	71e0      	strb	r0, [r4, #7]
                T_DINERO1[8] = '.';
 800be1c:	7223      	strb	r3, [r4, #8]
 800be1e:	bd38      	pop	{r3, r4, r5, pc}
                T_DINERO1[5] = ascii(read_eeprom(td1_6));
 800be20:	f895 004b 	ldrb.w	r0, [r5, #75]	; 0x4b
 800be24:	f003 fa7c 	bl	800f320 <ascii>
 800be28:	7160      	strb	r0, [r4, #5]
                T_DINERO1[6] = ascii(read_eeprom(td1_7));
 800be2a:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
 800be2e:	f003 fa77 	bl	800f320 <ascii>
                T_DINERO1[7] = '.';
 800be32:	232e      	movs	r3, #46	; 0x2e
                T_DINERO1[6] = ascii(read_eeprom(td1_7));
 800be34:	71a0      	strb	r0, [r4, #6]
                T_DINERO1[8] = ascii(read_eeprom(td1_8));
 800be36:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
                T_DINERO1[7] = '.';
 800be3a:	71e3      	strb	r3, [r4, #7]
                T_DINERO1[8] = ascii(read_eeprom(td1_8));
 800be3c:	f003 fa70 	bl	800f320 <ascii>
 800be40:	7220      	strb	r0, [r4, #8]
 800be42:	bd38      	pop	{r3, r4, r5, pc}
                T_DINERO1[5] = ascii(read_eeprom(td1_6));
 800be44:	f895 004b 	ldrb.w	r0, [r5, #75]	; 0x4b
 800be48:	f003 fa6a 	bl	800f320 <ascii>
                T_DINERO1[6] = '.';
 800be4c:	232e      	movs	r3, #46	; 0x2e
                T_DINERO1[5] = ascii(read_eeprom(td1_6));
 800be4e:	7160      	strb	r0, [r4, #5]
                T_DINERO1[6] = '.';
 800be50:	71a3      	strb	r3, [r4, #6]
                T_DINERO1[7] = ascii(read_eeprom(td1_7));
 800be52:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
 800be56:	e008      	b.n	800be6a <sd_Tdinero+0xba>
                T_DINERO1[5] = '.';
 800be58:	232e      	movs	r3, #46	; 0x2e
                T_DINERO1[6] = ascii(read_eeprom(td1_6));
 800be5a:	f895 004b 	ldrb.w	r0, [r5, #75]	; 0x4b
                T_DINERO1[5] = '.';
 800be5e:	7163      	strb	r3, [r4, #5]
                T_DINERO1[6] = ascii(read_eeprom(td1_6));
 800be60:	f003 fa5e 	bl	800f320 <ascii>
 800be64:	71a0      	strb	r0, [r4, #6]
                T_DINERO1[7] = ascii(read_eeprom(td1_7));
 800be66:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
 800be6a:	f003 fa59 	bl	800f320 <ascii>
 800be6e:	71e0      	strb	r0, [r4, #7]
                T_DINERO1[8] = ascii(read_eeprom(td1_8));
 800be70:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
 800be74:	f003 fa54 	bl	800f320 <ascii>
 800be78:	7220      	strb	r0, [r4, #8]
 800be7a:	bd38      	pop	{r3, r4, r5, pc}
    else if(pos == 2)
 800be7c:	2802      	cmp	r0, #2
 800be7e:	d160      	bne.n	800bf42 <sd_Tdinero+0x192>
 800be80:	4d30      	ldr	r5, [pc, #192]	; (800bf44 <sd_Tdinero+0x194>)
        T_DINERO2[0] = ascii(read_eeprom(td2_1));
 800be82:	4c32      	ldr	r4, [pc, #200]	; (800bf4c <sd_Tdinero+0x19c>)
 800be84:	f895 004e 	ldrb.w	r0, [r5, #78]	; 0x4e
 800be88:	f003 fa4a 	bl	800f320 <ascii>
 800be8c:	7020      	strb	r0, [r4, #0]
        T_DINERO2[1] = ascii(read_eeprom(td2_2));
 800be8e:	f895 004f 	ldrb.w	r0, [r5, #79]	; 0x4f
 800be92:	f003 fa45 	bl	800f320 <ascii>
 800be96:	7060      	strb	r0, [r4, #1]
        T_DINERO2[2] = ascii(read_eeprom(td2_3));
 800be98:	f895 0050 	ldrb.w	r0, [r5, #80]	; 0x50
 800be9c:	f003 fa40 	bl	800f320 <ascii>
 800bea0:	70a0      	strb	r0, [r4, #2]
        T_DINERO2[3] = ascii(read_eeprom(td2_4));
 800bea2:	f895 0051 	ldrb.w	r0, [r5, #81]	; 0x51
 800bea6:	f003 fa3b 	bl	800f320 <ascii>
 800beaa:	70e0      	strb	r0, [r4, #3]
        T_DINERO2[4] = ascii(read_eeprom(td2_5));
 800beac:	f895 0052 	ldrb.w	r0, [r5, #82]	; 0x52
 800beb0:	f003 fa36 	bl	800f320 <ascii>
        switch(read_eeprom(PD))
 800beb4:	7eeb      	ldrb	r3, [r5, #27]
        T_DINERO2[4] = ascii(read_eeprom(td2_5));
 800beb6:	7120      	strb	r0, [r4, #4]
        switch(read_eeprom(PD))
 800beb8:	2b03      	cmp	r3, #3
 800beba:	d842      	bhi.n	800bf42 <sd_Tdinero+0x192>
 800bebc:	e8df f003 	tbb	[pc, r3]
 800bec0:	30261402 	.word	0x30261402
                T_DINERO2[5] = ascii(read_eeprom(td2_6));
 800bec4:	f895 0053 	ldrb.w	r0, [r5, #83]	; 0x53
 800bec8:	f003 fa2a 	bl	800f320 <ascii>
 800becc:	7160      	strb	r0, [r4, #5]
                T_DINERO2[6] = ascii(read_eeprom(td2_7));
 800bece:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
 800bed2:	f003 fa25 	bl	800f320 <ascii>
 800bed6:	71a0      	strb	r0, [r4, #6]
                T_DINERO2[7] = ascii(read_eeprom(td2_8));
 800bed8:	f895 0055 	ldrb.w	r0, [r5, #85]	; 0x55
 800bedc:	f003 fa20 	bl	800f320 <ascii>
                T_DINERO2[8] = '.';
 800bee0:	232e      	movs	r3, #46	; 0x2e
                T_DINERO2[7] = ascii(read_eeprom(td2_8));
 800bee2:	71e0      	strb	r0, [r4, #7]
                T_DINERO2[8] = '.';
 800bee4:	7223      	strb	r3, [r4, #8]
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
                T_DINERO2[5] = ascii(read_eeprom(td2_6));
 800bee8:	f895 0053 	ldrb.w	r0, [r5, #83]	; 0x53
 800beec:	f003 fa18 	bl	800f320 <ascii>
 800bef0:	7160      	strb	r0, [r4, #5]
                T_DINERO2[6] = ascii(read_eeprom(td2_7));
 800bef2:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
 800bef6:	f003 fa13 	bl	800f320 <ascii>
                T_DINERO2[7] = '.';
 800befa:	232e      	movs	r3, #46	; 0x2e
                T_DINERO2[6] = ascii(read_eeprom(td2_7));
 800befc:	71a0      	strb	r0, [r4, #6]
                T_DINERO2[8] = ascii(read_eeprom(td2_8));
 800befe:	f895 0055 	ldrb.w	r0, [r5, #85]	; 0x55
                T_DINERO2[7] = '.';
 800bf02:	71e3      	strb	r3, [r4, #7]
                T_DINERO2[8] = ascii(read_eeprom(td2_8));
 800bf04:	f003 fa0c 	bl	800f320 <ascii>
 800bf08:	7220      	strb	r0, [r4, #8]
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
                T_DINERO2[5] = ascii(read_eeprom(td2_6));
 800bf0c:	f895 0053 	ldrb.w	r0, [r5, #83]	; 0x53
 800bf10:	f003 fa06 	bl	800f320 <ascii>
                T_DINERO2[6] = '.';
 800bf14:	232e      	movs	r3, #46	; 0x2e
                T_DINERO2[5] = ascii(read_eeprom(td2_6));
 800bf16:	7160      	strb	r0, [r4, #5]
                T_DINERO2[6] = '.';
 800bf18:	71a3      	strb	r3, [r4, #6]
                T_DINERO2[7] = ascii(read_eeprom(td2_7));
 800bf1a:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
 800bf1e:	e008      	b.n	800bf32 <sd_Tdinero+0x182>
                T_DINERO2[5] = '.';
 800bf20:	232e      	movs	r3, #46	; 0x2e
                T_DINERO2[6] = ascii(read_eeprom(td2_6));
 800bf22:	f895 0053 	ldrb.w	r0, [r5, #83]	; 0x53
                T_DINERO2[5] = '.';
 800bf26:	7163      	strb	r3, [r4, #5]
                T_DINERO2[6] = ascii(read_eeprom(td2_6));
 800bf28:	f003 f9fa 	bl	800f320 <ascii>
 800bf2c:	71a0      	strb	r0, [r4, #6]
                T_DINERO2[7] = ascii(read_eeprom(td2_7));
 800bf2e:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
 800bf32:	f003 f9f5 	bl	800f320 <ascii>
 800bf36:	71e0      	strb	r0, [r4, #7]
                T_DINERO2[8] = ascii(read_eeprom(td2_8));
 800bf38:	f895 0055 	ldrb.w	r0, [r5, #85]	; 0x55
 800bf3c:	f003 f9f0 	bl	800f320 <ascii>
 800bf40:	7220      	strb	r0, [r4, #8]
 800bf42:	bd38      	pop	{r3, r4, r5, pc}
 800bf44:	20001c74 	.word	0x20001c74
 800bf48:	20000884 	.word	0x20000884
 800bf4c:	20000890 	.word	0x20000890

0800bf50 <sd_dinero>:
    if(pos == 1)
 800bf50:	2801      	cmp	r0, #1
{
 800bf52:	b538      	push	{r3, r4, r5, lr}
    if(pos == 1)
 800bf54:	d178      	bne.n	800c048 <sd_dinero+0xf8>
 800bf56:	4c82      	ldr	r4, [pc, #520]	; (800c160 <sd_dinero+0x210>)
        switch(read_eeprom(PD))  
 800bf58:	7ee3      	ldrb	r3, [r4, #27]
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	f200 80ff 	bhi.w	800c15e <sd_dinero+0x20e>
 800bf60:	e8df f003 	tbb	[pc, r3]
 800bf64:	543e2002 	.word	0x543e2002
                DINERO1[0] = ascii(read_eeprom(d1_1));
 800bf68:	7f20      	ldrb	r0, [r4, #28]
 800bf6a:	4d7e      	ldr	r5, [pc, #504]	; (800c164 <sd_dinero+0x214>)
 800bf6c:	f003 f9d8 	bl	800f320 <ascii>
 800bf70:	7028      	strb	r0, [r5, #0]
                DINERO1[1] = ascii(read_eeprom(d2_1));
 800bf72:	7f60      	ldrb	r0, [r4, #29]
 800bf74:	f003 f9d4 	bl	800f320 <ascii>
 800bf78:	7068      	strb	r0, [r5, #1]
                DINERO1[2] = ascii(read_eeprom(d3_1));
 800bf7a:	7fa0      	ldrb	r0, [r4, #30]
 800bf7c:	f003 f9d0 	bl	800f320 <ascii>
 800bf80:	70a8      	strb	r0, [r5, #2]
                DINERO1[3] = ascii(read_eeprom(d4_1));   
 800bf82:	7fe0      	ldrb	r0, [r4, #31]
 800bf84:	f003 f9cc 	bl	800f320 <ascii>
 800bf88:	70e8      	strb	r0, [r5, #3]
                DINERO1[4] = ascii(read_eeprom(d5_1));
 800bf8a:	f894 0020 	ldrb.w	r0, [r4, #32]
 800bf8e:	f003 f9c7 	bl	800f320 <ascii>
 800bf92:	7128      	strb	r0, [r5, #4]
                DINERO1[5] = ascii(read_eeprom(d6_1)); 
 800bf94:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 800bf98:	f003 f9c2 	bl	800f320 <ascii>
                DINERO1[6] = '.';
 800bf9c:	232e      	movs	r3, #46	; 0x2e
                DINERO1[5] = ascii(read_eeprom(d6_1)); 
 800bf9e:	7168      	strb	r0, [r5, #5]
                DINERO1[6] = '.';
 800bfa0:	71ab      	strb	r3, [r5, #6]
 800bfa2:	bd38      	pop	{r3, r4, r5, pc}
                DINERO1[0] = ascii(read_eeprom(d1_1));
 800bfa4:	7f20      	ldrb	r0, [r4, #28]
 800bfa6:	4d6f      	ldr	r5, [pc, #444]	; (800c164 <sd_dinero+0x214>)
 800bfa8:	f003 f9ba 	bl	800f320 <ascii>
 800bfac:	7028      	strb	r0, [r5, #0]
                DINERO1[1] = ascii(read_eeprom(d2_1));
 800bfae:	7f60      	ldrb	r0, [r4, #29]
 800bfb0:	f003 f9b6 	bl	800f320 <ascii>
 800bfb4:	7068      	strb	r0, [r5, #1]
                DINERO1[2] = ascii(read_eeprom(d3_1));
 800bfb6:	7fa0      	ldrb	r0, [r4, #30]
 800bfb8:	f003 f9b2 	bl	800f320 <ascii>
 800bfbc:	70a8      	strb	r0, [r5, #2]
                DINERO1[3] = ascii(read_eeprom(d4_1));   
 800bfbe:	7fe0      	ldrb	r0, [r4, #31]
 800bfc0:	f003 f9ae 	bl	800f320 <ascii>
 800bfc4:	70e8      	strb	r0, [r5, #3]
                DINERO1[4] = ascii(read_eeprom(d5_1));
 800bfc6:	f894 0020 	ldrb.w	r0, [r4, #32]
 800bfca:	f003 f9a9 	bl	800f320 <ascii>
                DINERO1[5] = '.'; 
 800bfce:	232e      	movs	r3, #46	; 0x2e
                DINERO1[4] = ascii(read_eeprom(d5_1));
 800bfd0:	7128      	strb	r0, [r5, #4]
                DINERO1[6] = ascii(read_eeprom(d6_1)); 
 800bfd2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
                DINERO1[5] = '.'; 
 800bfd6:	716b      	strb	r3, [r5, #5]
                DINERO1[6] = ascii(read_eeprom(d6_1)); 
 800bfd8:	f003 f9a2 	bl	800f320 <ascii>
 800bfdc:	71a8      	strb	r0, [r5, #6]
 800bfde:	bd38      	pop	{r3, r4, r5, pc}
                DINERO1[0] = ascii(read_eeprom(d1_1));
 800bfe0:	7f20      	ldrb	r0, [r4, #28]
 800bfe2:	4d60      	ldr	r5, [pc, #384]	; (800c164 <sd_dinero+0x214>)
 800bfe4:	f003 f99c 	bl	800f320 <ascii>
 800bfe8:	7028      	strb	r0, [r5, #0]
                DINERO1[1] = ascii(read_eeprom(d2_1));
 800bfea:	7f60      	ldrb	r0, [r4, #29]
 800bfec:	f003 f998 	bl	800f320 <ascii>
 800bff0:	7068      	strb	r0, [r5, #1]
                DINERO1[2] = ascii(read_eeprom(d3_1));
 800bff2:	7fa0      	ldrb	r0, [r4, #30]
 800bff4:	f003 f994 	bl	800f320 <ascii>
 800bff8:	70a8      	strb	r0, [r5, #2]
                DINERO1[3] = ascii(read_eeprom(d4_1));   
 800bffa:	7fe0      	ldrb	r0, [r4, #31]
 800bffc:	f003 f990 	bl	800f320 <ascii>
                DINERO1[4] = '.';
 800c000:	232e      	movs	r3, #46	; 0x2e
                DINERO1[3] = ascii(read_eeprom(d4_1));   
 800c002:	70e8      	strb	r0, [r5, #3]
                DINERO1[4] = '.';
 800c004:	712b      	strb	r3, [r5, #4]
                DINERO1[5] = ascii(read_eeprom(d5_1));
 800c006:	f894 0020 	ldrb.w	r0, [r4, #32]
 800c00a:	e014      	b.n	800c036 <sd_dinero+0xe6>
                DINERO1[0] = ascii(read_eeprom(d1_1));
 800c00c:	7f20      	ldrb	r0, [r4, #28]
 800c00e:	4d55      	ldr	r5, [pc, #340]	; (800c164 <sd_dinero+0x214>)
 800c010:	f003 f986 	bl	800f320 <ascii>
 800c014:	7028      	strb	r0, [r5, #0]
                DINERO1[1] = ascii(read_eeprom(d2_1));
 800c016:	7f60      	ldrb	r0, [r4, #29]
 800c018:	f003 f982 	bl	800f320 <ascii>
 800c01c:	7068      	strb	r0, [r5, #1]
                DINERO1[2] = ascii(read_eeprom(d3_1));
 800c01e:	7fa0      	ldrb	r0, [r4, #30]
 800c020:	f003 f97e 	bl	800f320 <ascii>
                DINERO1[3] = '.';  
 800c024:	232e      	movs	r3, #46	; 0x2e
                DINERO1[2] = ascii(read_eeprom(d3_1));
 800c026:	70a8      	strb	r0, [r5, #2]
                DINERO1[4] = ascii(read_eeprom(d4_1)); 
 800c028:	7fe0      	ldrb	r0, [r4, #31]
                DINERO1[3] = '.';  
 800c02a:	70eb      	strb	r3, [r5, #3]
                DINERO1[4] = ascii(read_eeprom(d4_1)); 
 800c02c:	f003 f978 	bl	800f320 <ascii>
 800c030:	7128      	strb	r0, [r5, #4]
                DINERO1[5] = ascii(read_eeprom(d5_1));
 800c032:	f894 0020 	ldrb.w	r0, [r4, #32]
 800c036:	f003 f973 	bl	800f320 <ascii>
 800c03a:	7168      	strb	r0, [r5, #5]
                DINERO1[6] = ascii(read_eeprom(d6_1));   
 800c03c:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 800c040:	f003 f96e 	bl	800f320 <ascii>
 800c044:	71a8      	strb	r0, [r5, #6]
 800c046:	bd38      	pop	{r3, r4, r5, pc}
    else if(pos == 2)
 800c048:	2802      	cmp	r0, #2
 800c04a:	f040 8088 	bne.w	800c15e <sd_dinero+0x20e>
 800c04e:	4c44      	ldr	r4, [pc, #272]	; (800c160 <sd_dinero+0x210>)
        switch(read_eeprom(PD))  
 800c050:	7ee3      	ldrb	r3, [r4, #27]
 800c052:	2b03      	cmp	r3, #3
 800c054:	f200 8083 	bhi.w	800c15e <sd_dinero+0x20e>
 800c058:	e8df f003 	tbb	[pc, r3]
 800c05c:	60462402 	.word	0x60462402
                DINERO2[0] = ascii(read_eeprom(d1_2));
 800c060:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
 800c064:	4d40      	ldr	r5, [pc, #256]	; (800c168 <sd_dinero+0x218>)
 800c066:	f003 f95b 	bl	800f320 <ascii>
 800c06a:	7028      	strb	r0, [r5, #0]
                DINERO2[1] = ascii(read_eeprom(d2_2));
 800c06c:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 800c070:	f003 f956 	bl	800f320 <ascii>
 800c074:	7068      	strb	r0, [r5, #1]
                DINERO2[2] = ascii(read_eeprom(d3_2));
 800c076:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800c07a:	f003 f951 	bl	800f320 <ascii>
 800c07e:	70a8      	strb	r0, [r5, #2]
                DINERO2[3] = ascii(read_eeprom(d4_2));   
 800c080:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800c084:	f003 f94c 	bl	800f320 <ascii>
 800c088:	70e8      	strb	r0, [r5, #3]
                DINERO2[4] = ascii(read_eeprom(d5_2));
 800c08a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 800c08e:	f003 f947 	bl	800f320 <ascii>
 800c092:	7128      	strb	r0, [r5, #4]
                DINERO2[5] = ascii(read_eeprom(d6_2)); 
 800c094:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
 800c098:	f003 f942 	bl	800f320 <ascii>
                DINERO2[6] = '.';
 800c09c:	232e      	movs	r3, #46	; 0x2e
                DINERO2[5] = ascii(read_eeprom(d6_2)); 
 800c09e:	7168      	strb	r0, [r5, #5]
                DINERO2[6] = '.';
 800c0a0:	71ab      	strb	r3, [r5, #6]
 800c0a2:	bd38      	pop	{r3, r4, r5, pc}
                DINERO2[0] = ascii(read_eeprom(d1_2));
 800c0a4:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
 800c0a8:	4d2f      	ldr	r5, [pc, #188]	; (800c168 <sd_dinero+0x218>)
 800c0aa:	f003 f939 	bl	800f320 <ascii>
 800c0ae:	7028      	strb	r0, [r5, #0]
                DINERO2[1] = ascii(read_eeprom(d2_2));
 800c0b0:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 800c0b4:	f003 f934 	bl	800f320 <ascii>
 800c0b8:	7068      	strb	r0, [r5, #1]
                DINERO2[2] = ascii(read_eeprom(d3_2));
 800c0ba:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800c0be:	f003 f92f 	bl	800f320 <ascii>
 800c0c2:	70a8      	strb	r0, [r5, #2]
                DINERO2[3] = ascii(read_eeprom(d4_2));   
 800c0c4:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800c0c8:	f003 f92a 	bl	800f320 <ascii>
 800c0cc:	70e8      	strb	r0, [r5, #3]
                DINERO2[4] = ascii(read_eeprom(d5_2));
 800c0ce:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 800c0d2:	f003 f925 	bl	800f320 <ascii>
                DINERO2[5] = '.'; 
 800c0d6:	232e      	movs	r3, #46	; 0x2e
                DINERO2[4] = ascii(read_eeprom(d5_2));
 800c0d8:	7128      	strb	r0, [r5, #4]
                DINERO2[6] = ascii(read_eeprom(d6_2)); 
 800c0da:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
                DINERO2[5] = '.'; 
 800c0de:	716b      	strb	r3, [r5, #5]
                DINERO2[6] = ascii(read_eeprom(d6_2)); 
 800c0e0:	f003 f91e 	bl	800f320 <ascii>
 800c0e4:	71a8      	strb	r0, [r5, #6]
 800c0e6:	bd38      	pop	{r3, r4, r5, pc}
                DINERO2[0] = ascii(read_eeprom(d1_2));
 800c0e8:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
 800c0ec:	4d1e      	ldr	r5, [pc, #120]	; (800c168 <sd_dinero+0x218>)
 800c0ee:	f003 f917 	bl	800f320 <ascii>
 800c0f2:	7028      	strb	r0, [r5, #0]
                DINERO2[1] = ascii(read_eeprom(d2_2));
 800c0f4:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 800c0f8:	f003 f912 	bl	800f320 <ascii>
 800c0fc:	7068      	strb	r0, [r5, #1]
                DINERO2[2] = ascii(read_eeprom(d3_2));
 800c0fe:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800c102:	f003 f90d 	bl	800f320 <ascii>
 800c106:	70a8      	strb	r0, [r5, #2]
                DINERO2[3] = ascii(read_eeprom(d4_2));   
 800c108:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800c10c:	f003 f908 	bl	800f320 <ascii>
                DINERO2[4] = '.';
 800c110:	232e      	movs	r3, #46	; 0x2e
                DINERO2[3] = ascii(read_eeprom(d4_2));   
 800c112:	70e8      	strb	r0, [r5, #3]
                DINERO2[4] = '.';
 800c114:	712b      	strb	r3, [r5, #4]
                DINERO2[5] = ascii(read_eeprom(d5_2));
 800c116:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 800c11a:	e018      	b.n	800c14e <sd_dinero+0x1fe>
                DINERO2[0] = ascii(read_eeprom(d1_2));
 800c11c:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
 800c120:	4d11      	ldr	r5, [pc, #68]	; (800c168 <sd_dinero+0x218>)
 800c122:	f003 f8fd 	bl	800f320 <ascii>
 800c126:	7028      	strb	r0, [r5, #0]
                DINERO2[1] = ascii(read_eeprom(d2_2));
 800c128:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 800c12c:	f003 f8f8 	bl	800f320 <ascii>
 800c130:	7068      	strb	r0, [r5, #1]
                DINERO2[2] = ascii(read_eeprom(d3_2));
 800c132:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800c136:	f003 f8f3 	bl	800f320 <ascii>
                DINERO2[3] = '.';  
 800c13a:	232e      	movs	r3, #46	; 0x2e
                DINERO2[2] = ascii(read_eeprom(d3_2));
 800c13c:	70a8      	strb	r0, [r5, #2]
                DINERO2[4] = ascii(read_eeprom(d4_2)); 
 800c13e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
                DINERO2[3] = '.';  
 800c142:	70eb      	strb	r3, [r5, #3]
                DINERO2[4] = ascii(read_eeprom(d4_2)); 
 800c144:	f003 f8ec 	bl	800f320 <ascii>
 800c148:	7128      	strb	r0, [r5, #4]
                DINERO2[5] = ascii(read_eeprom(d5_2));
 800c14a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 800c14e:	f003 f8e7 	bl	800f320 <ascii>
 800c152:	7168      	strb	r0, [r5, #5]
                DINERO2[6] = ascii(read_eeprom(d6_2));   
 800c154:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
 800c158:	f003 f8e2 	bl	800f320 <ascii>
 800c15c:	71a8      	strb	r0, [r5, #6]
 800c15e:	bd38      	pop	{r3, r4, r5, pc}
 800c160:	20001c74 	.word	0x20001c74
 800c164:	20000804 	.word	0x20000804
 800c168:	2000080c 	.word	0x2000080c
 800c16c:	00000000 	.word	0x00000000

0800c170 <_idle_thread.lto_priv.74>:
static void _idle_thread(void *p) {
 800c170:	e7fe      	b.n	800c170 <_idle_thread.lto_priv.74>
 800c172:	bf00      	nop
	...

0800c180 <_stats_increase_irq>:
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800c180:	2320      	movs	r3, #32
 800c182:	f383 8811 	msr	BASEPRI, r3
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {

  port_lock_from_isr();
  ch.kernel_stats.n_irq++;
 800c186:	4a05      	ldr	r2, [pc, #20]	; (800c19c <_stats_increase_irq+0x1c>)
 800c188:	f8d2 34a8 	ldr.w	r3, [r2, #1192]	; 0x4a8
 800c18c:	3301      	adds	r3, #1
 800c18e:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
 800c192:	2300      	movs	r3, #0
 800c194:	f383 8811 	msr	BASEPRI, r3
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	20001698 	.word	0x20001698

0800c1a0 <chTMChainMeasurementToX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 800c1a0:	4b0d      	ldr	r3, [pc, #52]	; (800c1d8 <chTMChainMeasurementToX+0x38>)
  if (tmp->last > tmp->worst) {
 800c1a2:	6842      	ldr	r2, [r0, #4]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 800c1a6:	b470      	push	{r4, r5, r6}

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 800c1a8:	608b      	str	r3, [r1, #8]
  tmp->last = (now - tmp->last) - offset;
 800c1aa:	6886      	ldr	r6, [r0, #8]
  tmp->n++;
 800c1ac:	68c1      	ldr	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 800c1ae:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 800c1b2:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 800c1b4:	18e4      	adds	r4, r4, r3
 800c1b6:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 800c1ba:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 800c1bc:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 800c1be:	bf88      	it	hi
 800c1c0:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 800c1c2:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 800c1c4:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 800c1c6:	e9c0 4504 	strd	r4, r5, [r0, #16]
  tmp->n++;
 800c1ca:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 800c1cc:	6083      	str	r3, [r0, #8]
    tmp->best = tmp->last;
 800c1ce:	bf38      	it	cc
 800c1d0:	6003      	strcc	r3, [r0, #0]

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 800c1d2:	bc70      	pop	{r4, r5, r6}
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	e0001000 	.word	0xe0001000
 800c1dc:	00000000 	.word	0x00000000

0800c1e0 <chTMStopMeasurementX>:
 800c1e0:	4b0e      	ldr	r3, [pc, #56]	; (800c21c <chTMStopMeasurementX+0x3c>)
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800c1e2:	4a0f      	ldr	r2, [pc, #60]	; (800c220 <chTMStopMeasurementX+0x40>)
 800c1e4:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 800c1e6:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800c1e8:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 800c1ea:	6887      	ldr	r7, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800c1ec:	f8d2 64a0 	ldr.w	r6, [r2, #1184]	; 0x4a0
  if (tmp->last > tmp->worst) {
 800c1f0:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 800c1f2:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 800c1f6:	1bdb      	subs	r3, r3, r7
 800c1f8:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 800c1fa:	18e4      	adds	r4, r4, r3
 800c1fc:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 800c200:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 800c202:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 800c204:	bf88      	it	hi
 800c206:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 800c208:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 800c20a:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 800c20c:	e9c0 4504 	strd	r4, r5, [r0, #16]
  tmp->n++;
 800c210:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 800c212:	6083      	str	r3, [r0, #8]
    tmp->best = tmp->last;
 800c214:	bf38      	it	cc
 800c216:	6003      	strcc	r3, [r0, #0]
}
 800c218:	bcf0      	pop	{r4, r5, r6, r7}
 800c21a:	4770      	bx	lr
 800c21c:	e0001000 	.word	0xe0001000
 800c220:	20001698 	.word	0x20001698
	...

0800c230 <_stats_stop_measure_crit_isr>:
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 800c230:	4801      	ldr	r0, [pc, #4]	; (800c238 <_stats_stop_measure_crit_isr+0x8>)
 800c232:	f7ff bfd5 	b.w	800c1e0 <chTMStopMeasurementX>
 800c236:	bf00      	nop
 800c238:	20001b60 	.word	0x20001b60
 800c23c:	00000000 	.word	0x00000000

0800c240 <_stats_stop_measure_crit_thd>:
  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 800c240:	4801      	ldr	r0, [pc, #4]	; (800c248 <_stats_stop_measure_crit_thd+0x8>)
 800c242:	f7ff bfcd 	b.w	800c1e0 <chTMStopMeasurementX>
 800c246:	bf00      	nop
 800c248:	20001b48 	.word	0x20001b48
 800c24c:	00000000 	.word	0x00000000

0800c250 <chTMStartMeasurementX>:
 800c250:	4b01      	ldr	r3, [pc, #4]	; (800c258 <chTMStartMeasurementX+0x8>)
 800c252:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 800c254:	6083      	str	r3, [r0, #8]
 800c256:	4770      	bx	lr
 800c258:	e0001000 	.word	0xe0001000
 800c25c:	00000000 	.word	0x00000000

0800c260 <_stats_start_measure_crit_isr>:
  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 800c260:	4801      	ldr	r0, [pc, #4]	; (800c268 <_stats_start_measure_crit_isr+0x8>)
 800c262:	f7ff bff5 	b.w	800c250 <chTMStartMeasurementX>
 800c266:	bf00      	nop
 800c268:	20001b60 	.word	0x20001b60
 800c26c:	00000000 	.word	0x00000000

0800c270 <_stats_start_measure_crit_thd>:
  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 800c270:	4801      	ldr	r0, [pc, #4]	; (800c278 <_stats_start_measure_crit_thd+0x8>)
 800c272:	f7ff bfed 	b.w	800c250 <chTMStartMeasurementX>
 800c276:	bf00      	nop
 800c278:	20001b48 	.word	0x20001b48
 800c27c:	00000000 	.word	0x00000000

0800c280 <_dbg_trace>:
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 800c280:	4a0b      	ldr	r2, [pc, #44]	; (800c2b0 <_dbg_trace+0x30>)
 800c282:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c286:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
void _dbg_trace(thread_t *otp) {
 800c288:	b410      	push	{r4}
 800c28a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
 800c28c:	6991      	ldr	r1, [r2, #24]
 800c28e:	6059      	str	r1, [r3, #4]
  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 800c290:	601c      	str	r4, [r3, #0]
  ch.dbg.trace_buffer.tb_ptr->se_wtobjp = otp->p_u.wtobjp;
 800c292:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800c294:	6099      	str	r1, [r3, #8]
  ch.dbg.trace_buffer.tb_ptr->se_state  = (uint8_t)otp->p_state;
 800c296:	f890 1020 	ldrb.w	r1, [r0, #32]
 800c29a:	7319      	strb	r1, [r3, #12]
  if (++ch.dbg.trace_buffer.tb_ptr >=
 800c29c:	3310      	adds	r3, #16
 800c29e:	f502 6188 	add.w	r1, r2, #1088	; 0x440
 800c2a2:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.tb_buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 800c2a4:	bf28      	it	cs
 800c2a6:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
 800c2aa:	63d3      	str	r3, [r2, #60]	; 0x3c
  }
}
 800c2ac:	bc10      	pop	{r4}
 800c2ae:	4770      	bx	lr
 800c2b0:	20001698 	.word	0x20001698
	...

0800c2c0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 800c2c0:	b570      	push	{r4, r5, r6, lr}
  otp = currp;
 800c2c2:	4c1b      	ldr	r4, [pc, #108]	; (800c330 <chSchDoReschedule+0x70>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800c2c4:	6822      	ldr	r2, [r4, #0]
 800c2c6:	69a5      	ldr	r5, [r4, #24]

  tqp->p_next = tp->p_next;
 800c2c8:	6813      	ldr	r3, [r2, #0]
  if (otp->p_prio == IDLEPRIO) {
 800c2ca:	68a9      	ldr	r1, [r5, #8]
 800c2cc:	6023      	str	r3, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
 800c2ce:	2601      	movs	r6, #1
  otp->p_state = CH_STATE_READY;
 800c2d0:	2000      	movs	r0, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 800c2d2:	605c      	str	r4, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
 800c2d4:	f882 6020 	strb.w	r6, [r2, #32]
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800c2d8:	61a2      	str	r2, [r4, #24]
  otp->p_state = CH_STATE_READY;
 800c2da:	f885 0020 	strb.w	r0, [r5, #32]
 800c2de:	e000      	b.n	800c2e2 <chSchDoReschedule+0x22>
 800c2e0:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio > otp->p_prio);
 800c2e2:	689a      	ldr	r2, [r3, #8]
 800c2e4:	4291      	cmp	r1, r2
 800c2e6:	d3fb      	bcc.n	800c2e0 <chSchDoReschedule+0x20>
  otp->p_prev = cp->p_prev;
 800c2e8:	685a      	ldr	r2, [r3, #4]
 800c2ea:	606a      	str	r2, [r5, #4]
  otp->p_next = cp;
 800c2ec:	602b      	str	r3, [r5, #0]
  chSysSwitch(currp, otp);
 800c2ee:	4628      	mov	r0, r5
  otp->p_prev->p_next = otp;
 800c2f0:	6015      	str	r5, [r2, #0]
  cp->p_prev = otp;
 800c2f2:	605d      	str	r5, [r3, #4]
  chSysSwitch(currp, otp);
 800c2f4:	f7ff ffc4 	bl	800c280 <_dbg_trace>
  ch.kernel_stats.n_ctxswc++;
 800c2f8:	f8d4 34ac 	ldr.w	r3, [r4, #1196]	; 0x4ac
 800c2fc:	69a1      	ldr	r1, [r4, #24]
 800c2fe:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 800c300:	3148      	adds	r1, #72	; 0x48
 800c302:	f105 0048 	add.w	r0, r5, #72	; 0x48
  ch.kernel_stats.n_ctxswc++;
 800c306:	f8c4 34ac 	str.w	r3, [r4, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 800c30a:	f7ff ff49 	bl	800c1a0 <chTMChainMeasurementToX>
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800c30e:	f3ef 8309 	mrs	r3, PSP
 800c312:	69ea      	ldr	r2, [r5, #28]
 800c314:	3b24      	subs	r3, #36	; 0x24
 800c316:	429a      	cmp	r2, r3
 800c318:	d805      	bhi.n	800c326 <chSchDoReschedule+0x66>
 800c31a:	4629      	mov	r1, r5
 800c31c:	69a0      	ldr	r0, [r4, #24]
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 800c31e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chSysSwitch(currp, otp);
 800c322:	f7f3 bfb5 	b.w	8000290 <_port_switch>
  __ASM volatile ("cpsid i" : : : "memory");
 800c326:	b672      	cpsid	i
  ch.dbg.panic_msg = reason;
 800c328:	4b02      	ldr	r3, [pc, #8]	; (800c334 <chSchDoReschedule+0x74>)
 800c32a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c32c:	e7fe      	b.n	800c32c <chSchDoReschedule+0x6c>
 800c32e:	bf00      	nop
 800c330:	20001698 	.word	0x20001698
 800c334:	08010080 	.word	0x08010080
	...

0800c340 <chDbgCheckClassS>:
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800c340:	4b05      	ldr	r3, [pc, #20]	; (800c358 <chDbgCheckClassS+0x18>)
 800c342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c344:	b91a      	cbnz	r2, 800c34e <chDbgCheckClassS+0xe>
 800c346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c348:	2a00      	cmp	r2, #0
 800c34a:	dd00      	ble.n	800c34e <chDbgCheckClassS+0xe>
 800c34c:	4770      	bx	lr
 800c34e:	b672      	cpsid	i
 800c350:	4a02      	ldr	r2, [pc, #8]	; (800c35c <chDbgCheckClassS+0x1c>)
 800c352:	62da      	str	r2, [r3, #44]	; 0x2c
 800c354:	e7fe      	b.n	800c354 <chDbgCheckClassS+0x14>
 800c356:	bf00      	nop
 800c358:	20001698 	.word	0x20001698
 800c35c:	08010070 	.word	0x08010070

0800c360 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 800c360:	b538      	push	{r3, r4, r5, lr}
  otp = currp;
 800c362:	4c16      	ldr	r4, [pc, #88]	; (800c3bc <chSchGoSleepS+0x5c>)
  chDbgCheckClassS();
 800c364:	f7ff ffec 	bl	800c340 <chDbgCheckClassS>
  otp = currp;
 800c368:	69a5      	ldr	r5, [r4, #24]
  thread_t *tp = tqp->p_next;
 800c36a:	6823      	ldr	r3, [r4, #0]
  otp->p_state = newstate;
 800c36c:	f885 0020 	strb.w	r0, [r5, #32]
  tqp->p_next = tp->p_next;
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	6022      	str	r2, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
 800c374:	2101      	movs	r1, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 800c376:	6054      	str	r4, [r2, #4]
  chSysSwitch(currp, otp);
 800c378:	4628      	mov	r0, r5
  currp->p_state = CH_STATE_CURRENT;
 800c37a:	f883 1020 	strb.w	r1, [r3, #32]
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800c37e:	61a3      	str	r3, [r4, #24]
  chSysSwitch(currp, otp);
 800c380:	f7ff ff7e 	bl	800c280 <_dbg_trace>
  ch.kernel_stats.n_ctxswc++;
 800c384:	f8d4 34ac 	ldr.w	r3, [r4, #1196]	; 0x4ac
 800c388:	69a1      	ldr	r1, [r4, #24]
 800c38a:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 800c38c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800c390:	3148      	adds	r1, #72	; 0x48
  ch.kernel_stats.n_ctxswc++;
 800c392:	f8c4 34ac 	str.w	r3, [r4, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 800c396:	f7ff ff03 	bl	800c1a0 <chTMChainMeasurementToX>
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800c39a:	f3ef 8309 	mrs	r3, PSP
 800c39e:	69ea      	ldr	r2, [r5, #28]
 800c3a0:	3b24      	subs	r3, #36	; 0x24
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d805      	bhi.n	800c3b2 <chSchGoSleepS+0x52>
 800c3a6:	4629      	mov	r1, r5
 800c3a8:	69a0      	ldr	r0, [r4, #24]
}
 800c3aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 800c3ae:	f7f3 bf6f 	b.w	8000290 <_port_switch>
  __ASM volatile ("cpsid i" : : : "memory");
 800c3b2:	b672      	cpsid	i
 800c3b4:	4b02      	ldr	r3, [pc, #8]	; (800c3c0 <chSchGoSleepS+0x60>)
 800c3b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3b8:	e7fe      	b.n	800c3b8 <chSchGoSleepS+0x58>
 800c3ba:	bf00      	nop
 800c3bc:	20001698 	.word	0x20001698
 800c3c0:	08010080 	.word	0x08010080
	...

0800c3d0 <chThdSuspendS>:
  chDbgAssert(*trp == NULL, "not NULL");
 800c3d0:	6803      	ldr	r3, [r0, #0]
 800c3d2:	b123      	cbz	r3, 800c3de <chThdSuspendS+0xe>
 800c3d4:	b672      	cpsid	i
 800c3d6:	4b08      	ldr	r3, [pc, #32]	; (800c3f8 <chThdSuspendS+0x28>)
 800c3d8:	4a08      	ldr	r2, [pc, #32]	; (800c3fc <chThdSuspendS+0x2c>)
 800c3da:	62da      	str	r2, [r3, #44]	; 0x2c
 800c3dc:	e7fe      	b.n	800c3dc <chThdSuspendS+0xc>
msg_t chThdSuspendS(thread_reference_t *trp) {
 800c3de:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800c3e0:	4c05      	ldr	r4, [pc, #20]	; (800c3f8 <chThdSuspendS+0x28>)
 800c3e2:	69a2      	ldr	r2, [r4, #24]
  *trp = tp;
 800c3e4:	6002      	str	r2, [r0, #0]
 800c3e6:	4603      	mov	r3, r0
  tp->p_u.wttrp = trp;
 800c3e8:	6253      	str	r3, [r2, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800c3ea:	2003      	movs	r0, #3
 800c3ec:	f7ff ffb8 	bl	800c360 <chSchGoSleepS>
  return chThdGetSelfX()->p_u.rdymsg;
 800c3f0:	69a3      	ldr	r3, [r4, #24]
}
 800c3f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c3f4:	bd10      	pop	{r4, pc}
 800c3f6:	bf00      	nop
 800c3f8:	20001698 	.word	0x20001698
 800c3fc:	0800ffe0 	.word	0x0800ffe0

0800c400 <chDbgCheckClassI>:
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800c400:	4b05      	ldr	r3, [pc, #20]	; (800c418 <chDbgCheckClassI+0x18>)
 800c402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c404:	2a00      	cmp	r2, #0
 800c406:	db03      	blt.n	800c410 <chDbgCheckClassI+0x10>
 800c408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c40a:	2a00      	cmp	r2, #0
 800c40c:	dd00      	ble.n	800c410 <chDbgCheckClassI+0x10>
 800c40e:	4770      	bx	lr
 800c410:	b672      	cpsid	i
 800c412:	4a02      	ldr	r2, [pc, #8]	; (800c41c <chDbgCheckClassI+0x1c>)
 800c414:	62da      	str	r2, [r3, #44]	; 0x2c
 800c416:	e7fe      	b.n	800c416 <chDbgCheckClassI+0x16>
 800c418:	20001698 	.word	0x20001698
 800c41c:	08010060 	.word	0x08010060

0800c420 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800c420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c424:	b087      	sub	sp, #28
 800c426:	4607      	mov	r7, r0
  chDbgCheckClassS();
 800c428:	f7ff ff8a 	bl	800c340 <chDbgCheckClassS>
  if (TIME_INFINITE != time) {
 800c42c:	1c4b      	adds	r3, r1, #1
 800c42e:	d054      	beq.n	800c4da <chSchGoSleepTimeoutS+0xba>
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  systime_t delta;

  chDbgCheckClassI();
 800c430:	f7ff ffe6 	bl	800c400 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 800c434:	b921      	cbnz	r1, 800c440 <chSchGoSleepTimeoutS+0x20>
 800c436:	b672      	cpsid	i
 800c438:	4b4f      	ldr	r3, [pc, #316]	; (800c578 <chSchGoSleepTimeoutS+0x158>)
 800c43a:	4a50      	ldr	r2, [pc, #320]	; (800c57c <chSchGoSleepTimeoutS+0x15c>)
 800c43c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c43e:	e7fe      	b.n	800c43e <chSchGoSleepTimeoutS+0x1e>
    chVTDoSetI(&vt, time, wakeup, currp);
 800c440:	4e4d      	ldr	r6, [pc, #308]	; (800c578 <chSchGoSleepTimeoutS+0x158>)

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 800c442:	484f      	ldr	r0, [pc, #316]	; (800c580 <chSchGoSleepTimeoutS+0x160>)
  vtp->vt_par = par;
 800c444:	69b3      	ldr	r3, [r6, #24]
 800c446:	9305      	str	r3, [sp, #20]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800c448:	46b0      	mov	r8, r6
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 800c44a:	2901      	cmp	r1, #1
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800c44c:	f858 5f1c 	ldr.w	r5, [r8, #28]!
 800c450:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 800c454:	bf08      	it	eq
 800c456:	2102      	moveq	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800c458:	4545      	cmp	r5, r8
 800c45a:	6a53      	ldr	r3, [r2, #36]	; 0x24
  vtp->vt_func = vtfunc;
 800c45c:	9004      	str	r0, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800c45e:	d044      	beq.n	800c4ea <chSchGoSleepTimeoutS+0xca>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.vt_next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;
 800c460:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800c462:	1a1b      	subs	r3, r3, r0

    if (delta < now - ch.vtlist.vt_lasttime) {
 800c464:	18cc      	adds	r4, r1, r3
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 800c466:	68ab      	ldr	r3, [r5, #8]
    if (delta < now - ch.vtlist.vt_lasttime) {
 800c468:	d353      	bcc.n	800c512 <chSchGoSleepTimeoutS+0xf2>
      p = p->vt_next;
 800c46a:	682d      	ldr	r5, [r5, #0]
      delta -= p->vt_delta;
 800c46c:	1ae4      	subs	r4, r4, r3
 800c46e:	68ab      	ldr	r3, [r5, #8]
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 800c470:	429c      	cmp	r4, r3
 800c472:	d904      	bls.n	800c47e <chSchGoSleepTimeoutS+0x5e>
    delta -= p->vt_delta;
    p = p->vt_next;
 800c474:	682d      	ldr	r5, [r5, #0]
    delta -= p->vt_delta;
 800c476:	1ae4      	subs	r4, r4, r3
  while (p->vt_delta < delta) {
 800c478:	68ab      	ldr	r3, [r5, #8]
 800c47a:	42a3      	cmp	r3, r4
 800c47c:	d3fa      	bcc.n	800c474 <chSchGoSleepTimeoutS+0x54>
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800c47e:	686b      	ldr	r3, [r5, #4]
 800c480:	9302      	str	r3, [sp, #8]
  vtp->vt_prev->vt_next = vtp;
 800c482:	f10d 0904 	add.w	r9, sp, #4
  vtp->vt_next = p;
 800c486:	9501      	str	r5, [sp, #4]
  vtp->vt_prev->vt_next = vtp;
 800c488:	f8c3 9000 	str.w	r9, [r3]
  p->vt_prev = vtp;
 800c48c:	f8c5 9004 	str.w	r9, [r5, #4]
  vtp->vt_delta = delta
 800c490:	9403      	str	r4, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800c492:	68ab      	ldr	r3, [r5, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800c494:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->vt_delta -= delta;
 800c498:	1b1b      	subs	r3, r3, r4
 800c49a:	60ab      	str	r3, [r5, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800c49c:	6272      	str	r2, [r6, #36]	; 0x24
    chSchGoSleepS(newstate);
 800c49e:	4638      	mov	r0, r7
 800c4a0:	f7ff ff5e 	bl	800c360 <chSchGoSleepS>
  chDbgCheckClassI();
 800c4a4:	f7ff ffac 	bl	800c400 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 800c4a8:	9b04      	ldr	r3, [sp, #16]
 800c4aa:	b1cb      	cbz	r3, 800c4e0 <chSchGoSleepTimeoutS+0xc0>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 800c4ac:	f7ff ffa8 	bl	800c400 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 800c4b0:	69f3      	ldr	r3, [r6, #28]
 800c4b2:	454b      	cmp	r3, r9
 800c4b4:	d034      	beq.n	800c520 <chSchGoSleepTimeoutS+0x100>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800c4b6:	9a02      	ldr	r2, [sp, #8]
 800c4b8:	9b01      	ldr	r3, [sp, #4]
 800c4ba:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 800c4bc:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;
 800c4be:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800c4c0:	4543      	cmp	r3, r8
    vtp->vt_next->vt_prev = vtp->vt_prev;
 800c4c2:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 800c4c4:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800c4c6:	d00b      	beq.n	800c4e0 <chSchGoSleepTimeoutS+0xc0>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800c4c8:	689a      	ldr	r2, [r3, #8]
 800c4ca:	9903      	ldr	r1, [sp, #12]
 800c4cc:	440a      	add	r2, r1
 800c4ce:	609a      	str	r2, [r3, #8]
  return currp->p_u.rdymsg;
 800c4d0:	69b3      	ldr	r3, [r6, #24]
}
 800c4d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c4d4:	b007      	add	sp, #28
 800c4d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    chSchGoSleepS(newstate);
 800c4da:	f7ff ff41 	bl	800c360 <chSchGoSleepS>
 800c4de:	4e26      	ldr	r6, [pc, #152]	; (800c578 <chSchGoSleepTimeoutS+0x158>)
  return currp->p_u.rdymsg;
 800c4e0:	69b3      	ldr	r3, [r6, #24]
}
 800c4e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c4e4:	b007      	add	sp, #28
 800c4e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ch.vtlist.vt_lasttime = now;
 800c4ea:	62b3      	str	r3, [r6, #40]	; 0x28
      vtp->vt_delta = delay;
 800c4ec:	9103      	str	r1, [sp, #12]
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 800c4ee:	68d0      	ldr	r0, [r2, #12]
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 800c4f0:	9501      	str	r5, [sp, #4]
      ch.vtlist.vt_next = vtp;
 800c4f2:	f10d 0904 	add.w	r9, sp, #4
  osalDbgAssert(stIsAlarmActive() == false, "already active");
 800c4f6:	f010 0002 	ands.w	r0, r0, #2
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800c4fa:	9502      	str	r5, [sp, #8]
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 800c4fc:	440b      	add	r3, r1
      ch.vtlist.vt_next = vtp;
 800c4fe:	f8c6 901c 	str.w	r9, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 800c502:	f8c6 9020 	str.w	r9, [r6, #32]
 800c506:	d12a      	bne.n	800c55e <chSchGoSleepTimeoutS+0x13e>
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800c508:	2102      	movs	r1, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800c50a:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800c50c:	6110      	str	r0, [r2, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800c50e:	60d1      	str	r1, [r2, #12]
 800c510:	e7c5      	b.n	800c49e <chSchGoSleepTimeoutS+0x7e>
    else if (delta < p->vt_delta) {
 800c512:	429c      	cmp	r4, r3
 800c514:	d2ac      	bcs.n	800c470 <chSchGoSleepTimeoutS+0x50>
 800c516:	4420      	add	r0, r4
 800c518:	f7fd fb52 	bl	8009bc0 <stSetAlarm>
 800c51c:	68ab      	ldr	r3, [r5, #8]
 800c51e:	e7a7      	b.n	800c470 <chSchGoSleepTimeoutS+0x50>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 800c520:	9a01      	ldr	r2, [sp, #4]
 800c522:	61f2      	str	r2, [r6, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 800c524:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800c526:	4542      	cmp	r2, r8
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800c528:	f8c2 8004 	str.w	r8, [r2, #4]
  vtp->vt_func = NULL;
 800c52c:	9304      	str	r3, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800c52e:	d01a      	beq.n	800c566 <chSchGoSleepTimeoutS+0x146>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800c530:	6893      	ldr	r3, [r2, #8]
 800c532:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 800c534:	6ab1      	ldr	r1, [r6, #40]	; 0x28
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800c536:	4403      	add	r3, r0
  return (systime_t)STM32_ST_TIM->CNT;
 800c538:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c53c:	6093      	str	r3, [r2, #8]
 800c53e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 800c540:	1a42      	subs	r2, r0, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 800c542:	4293      	cmp	r3, r2
 800c544:	d9cc      	bls.n	800c4e0 <chSchGoSleepTimeoutS+0xc0>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 800c546:	1a9b      	subs	r3, r3, r2
 800c548:	2b02      	cmp	r3, #2
 800c54a:	bf2c      	ite	cs
 800c54c:	18c0      	addcs	r0, r0, r3
 800c54e:	3002      	addcc	r0, #2
 800c550:	f7fd fb36 	bl	8009bc0 <stSetAlarm>
  return currp->p_u.rdymsg;
 800c554:	69b3      	ldr	r3, [r6, #24]
}
 800c556:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c558:	b007      	add	sp, #28
 800c55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c55e:	b672      	cpsid	i
 800c560:	4b08      	ldr	r3, [pc, #32]	; (800c584 <chSchGoSleepTimeoutS+0x164>)
 800c562:	62f3      	str	r3, [r6, #44]	; 0x2c
 800c564:	e7fe      	b.n	800c564 <chSchGoSleepTimeoutS+0x144>
  STM32_ST_TIM->DIER = 0;
 800c566:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c56a:	60d3      	str	r3, [r2, #12]
  return currp->p_u.rdymsg;
 800c56c:	69b3      	ldr	r3, [r6, #24]
}
 800c56e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c570:	b007      	add	sp, #28
 800c572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c576:	bf00      	nop
 800c578:	20001698 	.word	0x20001698
 800c57c:	0800ffb0 	.word	0x0800ffb0
 800c580:	0800c6d1 	.word	0x0800c6d1
 800c584:	0800fff0 	.word	0x0800fff0
	...

0800c590 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 800c590:	b161      	cbz	r1, 800c5ac <chThdEnqueueTimeoutS+0x1c>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800c592:	4b08      	ldr	r3, [pc, #32]	; (800c5b4 <chThdEnqueueTimeoutS+0x24>)
 800c594:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 800c596:	b410      	push	{r4}
  tp->p_next = (thread_t *)tqp;
 800c598:	6018      	str	r0, [r3, #0]
  tp->p_prev = tqp->p_prev;
 800c59a:	6844      	ldr	r4, [r0, #4]
 800c59c:	605c      	str	r4, [r3, #4]
 800c59e:	4602      	mov	r2, r0
  tp->p_prev->p_next = tp;
 800c5a0:	6023      	str	r3, [r4, #0]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800c5a2:	2004      	movs	r0, #4
  tqp->p_prev = tp;
 800c5a4:	6053      	str	r3, [r2, #4]
}
 800c5a6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800c5a8:	f7ff bf3a 	b.w	800c420 <chSchGoSleepTimeoutS>
}
 800c5ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	20001698 	.word	0x20001698
	...

0800c5c0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 800c5c0:	b508      	push	{r3, lr}
  chDbgCheckClassI();
 800c5c2:	f7ff ff1d 	bl	800c400 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 800c5c6:	b1d0      	cbz	r0, 800c5fe <chSchReadyI+0x3e>
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
 800c5c8:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c5cc:	4601      	mov	r1, r0
 800c5ce:	b18b      	cbz	r3, 800c5f4 <chSchReadyI+0x34>
 800c5d0:	2b0f      	cmp	r3, #15
 800c5d2:	d00f      	beq.n	800c5f4 <chSchReadyI+0x34>
  tp->p_state = CH_STATE_READY;
 800c5d4:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.r_queue;
 800c5d6:	4b0c      	ldr	r3, [pc, #48]	; (800c608 <chSchReadyI+0x48>)
 800c5d8:	6880      	ldr	r0, [r0, #8]
  tp->p_state = CH_STATE_READY;
 800c5da:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->p_next;
 800c5de:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800c5e0:	689a      	ldr	r2, [r3, #8]
 800c5e2:	4282      	cmp	r2, r0
 800c5e4:	d2fb      	bcs.n	800c5de <chSchReadyI+0x1e>
  tp->p_prev = cp->p_prev;
 800c5e6:	685a      	ldr	r2, [r3, #4]
 800c5e8:	604a      	str	r2, [r1, #4]
  tp->p_next = cp;
 800c5ea:	600b      	str	r3, [r1, #0]
}
 800c5ec:	4608      	mov	r0, r1
  tp->p_prev->p_next = tp;
 800c5ee:	6011      	str	r1, [r2, #0]
  cp->p_prev = tp;
 800c5f0:	6059      	str	r1, [r3, #4]
}
 800c5f2:	bd08      	pop	{r3, pc}
 800c5f4:	b672      	cpsid	i
 800c5f6:	4b04      	ldr	r3, [pc, #16]	; (800c608 <chSchReadyI+0x48>)
 800c5f8:	4a04      	ldr	r2, [pc, #16]	; (800c60c <chSchReadyI+0x4c>)
 800c5fa:	62da      	str	r2, [r3, #44]	; 0x2c
 800c5fc:	e7fe      	b.n	800c5fc <chSchReadyI+0x3c>
 800c5fe:	b672      	cpsid	i
 800c600:	4b01      	ldr	r3, [pc, #4]	; (800c608 <chSchReadyI+0x48>)
 800c602:	4a02      	ldr	r2, [pc, #8]	; (800c60c <chSchReadyI+0x4c>)
 800c604:	62da      	str	r2, [r3, #44]	; 0x2c
 800c606:	e7fe      	b.n	800c606 <chSchReadyI+0x46>
 800c608:	20001698 	.word	0x20001698
 800c60c:	0800ffa0 	.word	0x0800ffa0

0800c610 <_dbg_check_leave_isr>:
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800c610:	2320      	movs	r3, #32
 800c612:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800c616:	4b07      	ldr	r3, [pc, #28]	; (800c634 <_dbg_check_leave_isr+0x24>)
 800c618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c61a:	2a00      	cmp	r2, #0
 800c61c:	dd01      	ble.n	800c622 <_dbg_check_leave_isr+0x12>
 800c61e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c620:	b119      	cbz	r1, 800c62a <_dbg_check_leave_isr+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800c622:	b672      	cpsid	i
 800c624:	4a04      	ldr	r2, [pc, #16]	; (800c638 <_dbg_check_leave_isr+0x28>)
 800c626:	62da      	str	r2, [r3, #44]	; 0x2c
 800c628:	e7fe      	b.n	800c628 <_dbg_check_leave_isr+0x18>
  ch.dbg.isr_cnt--;
 800c62a:	3a01      	subs	r2, #1
 800c62c:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800c62e:	f381 8811 	msr	BASEPRI, r1
 800c632:	4770      	bx	lr
 800c634:	20001698 	.word	0x20001698
 800c638:	08010010 	.word	0x08010010
 800c63c:	00000000 	.word	0x00000000

0800c640 <_dbg_check_enter_isr>:
 800c640:	2320      	movs	r3, #32
 800c642:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800c646:	4b07      	ldr	r3, [pc, #28]	; (800c664 <_dbg_check_enter_isr+0x24>)
 800c648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c64a:	2a00      	cmp	r2, #0
 800c64c:	db01      	blt.n	800c652 <_dbg_check_enter_isr+0x12>
 800c64e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c650:	b119      	cbz	r1, 800c65a <_dbg_check_enter_isr+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800c652:	b672      	cpsid	i
 800c654:	4a04      	ldr	r2, [pc, #16]	; (800c668 <_dbg_check_enter_isr+0x28>)
 800c656:	62da      	str	r2, [r3, #44]	; 0x2c
 800c658:	e7fe      	b.n	800c658 <_dbg_check_enter_isr+0x18>
  ch.dbg.isr_cnt++;
 800c65a:	3201      	adds	r2, #1
 800c65c:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800c65e:	f381 8811 	msr	BASEPRI, r1
 800c662:	4770      	bx	lr
 800c664:	20001698 	.word	0x20001698
 800c668:	08010000 	.word	0x08010000
 800c66c:	00000000 	.word	0x00000000

0800c670 <_dbg_check_unlock_from_isr>:
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800c670:	4b06      	ldr	r3, [pc, #24]	; (800c68c <_dbg_check_unlock_from_isr+0x1c>)
 800c672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c674:	2a00      	cmp	r2, #0
 800c676:	dd05      	ble.n	800c684 <_dbg_check_unlock_from_isr+0x14>
 800c678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c67a:	2a00      	cmp	r2, #0
 800c67c:	dd02      	ble.n	800c684 <_dbg_check_unlock_from_isr+0x14>
  _dbg_leave_lock();
 800c67e:	2200      	movs	r2, #0
 800c680:	635a      	str	r2, [r3, #52]	; 0x34
 800c682:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 800c684:	b672      	cpsid	i
 800c686:	4a02      	ldr	r2, [pc, #8]	; (800c690 <_dbg_check_unlock_from_isr+0x20>)
 800c688:	62da      	str	r2, [r3, #44]	; 0x2c
 800c68a:	e7fe      	b.n	800c68a <_dbg_check_unlock_from_isr+0x1a>
 800c68c:	20001698 	.word	0x20001698
 800c690:	08010050 	.word	0x08010050
	...

0800c6a0 <_dbg_check_lock_from_isr>:
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800c6a0:	4b06      	ldr	r3, [pc, #24]	; (800c6bc <_dbg_check_lock_from_isr+0x1c>)
 800c6a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6a4:	2a00      	cmp	r2, #0
 800c6a6:	dd01      	ble.n	800c6ac <_dbg_check_lock_from_isr+0xc>
 800c6a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6aa:	b11a      	cbz	r2, 800c6b4 <_dbg_check_lock_from_isr+0x14>
 800c6ac:	b672      	cpsid	i
 800c6ae:	4a04      	ldr	r2, [pc, #16]	; (800c6c0 <_dbg_check_lock_from_isr+0x20>)
 800c6b0:	62da      	str	r2, [r3, #44]	; 0x2c
 800c6b2:	e7fe      	b.n	800c6b2 <_dbg_check_lock_from_isr+0x12>
  _dbg_enter_lock();
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	635a      	str	r2, [r3, #52]	; 0x34
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	20001698 	.word	0x20001698
 800c6c0:	08010030 	.word	0x08010030
	...

0800c6d0 <wakeup>:
static void wakeup(void *p) {
 800c6d0:	b508      	push	{r3, lr}
 800c6d2:	4601      	mov	r1, r0
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800c6d4:	2320      	movs	r3, #32
 800c6d6:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_isr();
 800c6da:	f7ff fdc1 	bl	800c260 <_stats_start_measure_crit_isr>
  _dbg_check_lock_from_isr();
 800c6de:	f7ff ffdf 	bl	800c6a0 <_dbg_check_lock_from_isr>
  switch (tp->p_state) {
 800c6e2:	f891 3020 	ldrb.w	r3, [r1, #32]
 800c6e6:	2b07      	cmp	r3, #7
 800c6e8:	d810      	bhi.n	800c70c <wakeup+0x3c>
 800c6ea:	e8df f003 	tbb	[pc, r3]
 800c6ee:	0f15      	.short	0x0f15
 800c6f0:	040a1d0f 	.word	0x040a1d0f
 800c6f4:	0a0f      	.short	0x0a0f
    chSemFastSignalI(tp->p_u.wtsemp);
 800c6f6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 800c6f8:	f7ff fe82 	bl	800c400 <chDbgCheckClassI>

  sp->s_cnt++;
 800c6fc:	6883      	ldr	r3, [r0, #8]
 800c6fe:	3301      	adds	r3, #1
 800c700:	6083      	str	r3, [r0, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800c702:	e891 000c 	ldmia.w	r1, {r2, r3}
 800c706:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800c708:	680a      	ldr	r2, [r1, #0]
 800c70a:	6053      	str	r3, [r2, #4]
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800c70c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c710:	624b      	str	r3, [r1, #36]	; 0x24
  (void) chSchReadyI(tp);
 800c712:	4608      	mov	r0, r1
 800c714:	f7ff ff54 	bl	800c5c0 <chSchReadyI>
  _dbg_check_unlock_from_isr();
 800c718:	f7ff ffaa 	bl	800c670 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
 800c71c:	f7ff fd88 	bl	800c230 <_stats_stop_measure_crit_isr>
 800c720:	2300      	movs	r3, #0
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	bd08      	pop	{r3, pc}
    *tp->p_u.wttrp = NULL;
 800c728:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800c72a:	2200      	movs	r2, #0
 800c72c:	601a      	str	r2, [r3, #0]
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800c72e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c732:	624b      	str	r3, [r1, #36]	; 0x24
  (void) chSchReadyI(tp);
 800c734:	4608      	mov	r0, r1
 800c736:	f7ff ff43 	bl	800c5c0 <chSchReadyI>
 800c73a:	e7ed      	b.n	800c718 <wakeup+0x48>
 800c73c:	0000      	movs	r0, r0
	...

0800c740 <_dbg_check_unlock>:
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800c740:	4b05      	ldr	r3, [pc, #20]	; (800c758 <_dbg_check_unlock+0x18>)
 800c742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c744:	b922      	cbnz	r2, 800c750 <_dbg_check_unlock+0x10>
 800c746:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c748:	2900      	cmp	r1, #0
 800c74a:	dd01      	ble.n	800c750 <_dbg_check_unlock+0x10>
  _dbg_leave_lock();
 800c74c:	635a      	str	r2, [r3, #52]	; 0x34
 800c74e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 800c750:	b672      	cpsid	i
 800c752:	4a02      	ldr	r2, [pc, #8]	; (800c75c <_dbg_check_unlock+0x1c>)
 800c754:	62da      	str	r2, [r3, #44]	; 0x2c
 800c756:	e7fe      	b.n	800c756 <_dbg_check_unlock+0x16>
 800c758:	20001698 	.word	0x20001698
 800c75c:	08010040 	.word	0x08010040

0800c760 <_dbg_check_lock>:
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800c760:	4b05      	ldr	r3, [pc, #20]	; (800c778 <_dbg_check_lock+0x18>)
 800c762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c764:	b90a      	cbnz	r2, 800c76a <_dbg_check_lock+0xa>
 800c766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c768:	b11a      	cbz	r2, 800c772 <_dbg_check_lock+0x12>
 800c76a:	b672      	cpsid	i
 800c76c:	4a03      	ldr	r2, [pc, #12]	; (800c77c <_dbg_check_lock+0x1c>)
 800c76e:	62da      	str	r2, [r3, #44]	; 0x2c
 800c770:	e7fe      	b.n	800c770 <_dbg_check_lock+0x10>
  _dbg_enter_lock();
 800c772:	2201      	movs	r2, #1
 800c774:	635a      	str	r2, [r3, #52]	; 0x34
 800c776:	4770      	bx	lr
 800c778:	20001698 	.word	0x20001698
 800c77c:	08010020 	.word	0x08010020

0800c780 <chOQPutTimeout>:
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 800c780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c782:	4604      	mov	r4, r0
 800c784:	460f      	mov	r7, r1
 800c786:	4616      	mov	r6, r2
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800c788:	2320      	movs	r3, #32
 800c78a:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800c78e:	f7ff fd6f 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800c792:	f7ff ffe5 	bl	800c760 <_dbg_check_lock>
 800c796:	e003      	b.n	800c7a0 <chOQPutTimeout+0x20>
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800c798:	f7ff fefa 	bl	800c590 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800c79c:	1e05      	subs	r5, r0, #0
 800c79e:	db29      	blt.n	800c7f4 <chOQPutTimeout+0x74>
  chDbgCheckClassI();
 800c7a0:	f7ff fe2e 	bl	800c400 <chDbgCheckClassI>
  return (bool)(chQSpaceI(oqp) == 0U);
 800c7a4:	68a3      	ldr	r3, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800c7a6:	4631      	mov	r1, r6
 800c7a8:	4620      	mov	r0, r4
  while (chOQIsFullI(oqp)) {
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d0f4      	beq.n	800c798 <chOQPutTimeout+0x18>
  *oqp->q_wrptr++ = b;
 800c7ae:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 800c7b0:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800c7b2:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 800c7b4:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800c7b6:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800c7b8:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800c7ba:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800c7bc:	6923      	ldr	r3, [r4, #16]
 800c7be:	6962      	ldr	r2, [r4, #20]
 800c7c0:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800c7c2:	bf24      	itt	cs
 800c7c4:	68e3      	ldrcs	r3, [r4, #12]
 800c7c6:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 800c7c8:	69e3      	ldr	r3, [r4, #28]
 800c7ca:	b10b      	cbz	r3, 800c7d0 <chOQPutTimeout+0x50>
    oqp->q_notify(oqp);
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	4798      	blx	r3
  _dbg_check_unlock();
 800c7d0:	f7ff ffb6 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800c7d4:	f7ff fd34 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800c7d8:	4b13      	ldr	r3, [pc, #76]	; (800c828 <chOQPutTimeout+0xa8>)
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d004      	beq.n	800c7ea <chOQPutTimeout+0x6a>
 800c7e0:	6999      	ldr	r1, [r3, #24]
 800c7e2:	6892      	ldr	r2, [r2, #8]
 800c7e4:	6889      	ldr	r1, [r1, #8]
 800c7e6:	4291      	cmp	r1, r2
 800c7e8:	d31a      	bcc.n	800c820 <chOQPutTimeout+0xa0>
 800c7ea:	2500      	movs	r5, #0
 800c7ec:	f385 8811 	msr	BASEPRI, r5
}
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  _dbg_check_unlock();
 800c7f4:	f7ff ffa4 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800c7f8:	f7ff fd22 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800c7fc:	4b0a      	ldr	r3, [pc, #40]	; (800c828 <chOQPutTimeout+0xa8>)
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	429a      	cmp	r2, r3
 800c802:	d004      	beq.n	800c80e <chOQPutTimeout+0x8e>
 800c804:	6999      	ldr	r1, [r3, #24]
 800c806:	6892      	ldr	r2, [r2, #8]
 800c808:	6889      	ldr	r1, [r1, #8]
 800c80a:	4291      	cmp	r1, r2
 800c80c:	d304      	bcc.n	800c818 <chOQPutTimeout+0x98>
 800c80e:	2300      	movs	r3, #0
 800c810:	f383 8811 	msr	BASEPRI, r3
 800c814:	4628      	mov	r0, r5
 800c816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800c818:	b672      	cpsid	i
 800c81a:	4a04      	ldr	r2, [pc, #16]	; (800c82c <chOQPutTimeout+0xac>)
 800c81c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c81e:	e7fe      	b.n	800c81e <chOQPutTimeout+0x9e>
 800c820:	b672      	cpsid	i
 800c822:	4a02      	ldr	r2, [pc, #8]	; (800c82c <chOQPutTimeout+0xac>)
 800c824:	62da      	str	r2, [r3, #44]	; 0x2c
 800c826:	e7fe      	b.n	800c826 <chOQPutTimeout+0xa6>
 800c828:	20001698 	.word	0x20001698
 800c82c:	0800fc40 	.word	0x0800fc40

0800c830 <chIQReadTimeout>:
  chDbgCheck(n > 0U);
 800c830:	2a00      	cmp	r2, #0
 800c832:	d068      	beq.n	800c906 <chIQReadTimeout+0xd6>
                       size_t n, systime_t timeout) {
 800c834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c838:	b083      	sub	sp, #12
 800c83a:	461e      	mov	r6, r3
 800c83c:	9201      	str	r2, [sp, #4]
 800c83e:	4681      	mov	r9, r0
  qnotify_t nfy = iqp->q_notify;
 800c840:	f8d0 a01c 	ldr.w	sl, [r0, #28]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800c844:	f04f 0820 	mov.w	r8, #32
 800c848:	f388 8811 	msr	BASEPRI, r8
  _stats_start_measure_crit_thd();
 800c84c:	f7ff fd10 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800c850:	f7ff ff86 	bl	800c760 <_dbg_check_lock>
  size_t r = 0;
 800c854:	2700      	movs	r7, #0
 800c856:	4c32      	ldr	r4, [pc, #200]	; (800c920 <chIQReadTimeout+0xf0>)
 800c858:	1e4d      	subs	r5, r1, #1
 800c85a:	46bb      	mov	fp, r7
    if (nfy != NULL) {
 800c85c:	f1ba 0f00 	cmp.w	sl, #0
 800c860:	d006      	beq.n	800c870 <chIQReadTimeout+0x40>
      nfy(iqp);
 800c862:	4648      	mov	r0, r9
 800c864:	47d0      	blx	sl
 800c866:	e003      	b.n	800c870 <chIQReadTimeout+0x40>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800c868:	f7ff fe92 	bl	800c590 <chThdEnqueueTimeoutS>
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d137      	bne.n	800c8e0 <chIQReadTimeout+0xb0>
  chDbgCheckClassI();
 800c870:	f7ff fdc6 	bl	800c400 <chDbgCheckClassI>
  return (bool)(chQSpaceI(iqp) == 0U);
 800c874:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800c878:	4631      	mov	r1, r6
 800c87a:	4648      	mov	r0, r9
    while (chIQIsEmptyI(iqp)) {
 800c87c:	2a00      	cmp	r2, #0
 800c87e:	d0f3      	beq.n	800c868 <chIQReadTimeout+0x38>
    *bp++ = *iqp->q_rdptr++;
 800c880:	f8d9 1018 	ldr.w	r1, [r9, #24]
    iqp->q_counter--;
 800c884:	f8d9 2008 	ldr.w	r2, [r9, #8]
    *bp++ = *iqp->q_rdptr++;
 800c888:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
 800c88a:	3a01      	subs	r2, #1
    *bp++ = *iqp->q_rdptr++;
 800c88c:	f8c9 0018 	str.w	r0, [r9, #24]
    iqp->q_counter--;
 800c890:	f8c9 2008 	str.w	r2, [r9, #8]
    *bp++ = *iqp->q_rdptr++;
 800c894:	780a      	ldrb	r2, [r1, #0]
 800c896:	f805 2f01 	strb.w	r2, [r5, #1]!
    if (iqp->q_rdptr >= iqp->q_top) {
 800c89a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c89e:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800c8a2:	4291      	cmp	r1, r2
      iqp->q_rdptr = iqp->q_buffer;
 800c8a4:	bf24      	itt	cs
 800c8a6:	f8d9 200c 	ldrcs.w	r2, [r9, #12]
 800c8aa:	f8c9 2018 	strcs.w	r2, [r9, #24]
  _dbg_check_unlock();
 800c8ae:	f7ff ff47 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800c8b2:	f7ff fcc5 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800c8b6:	6822      	ldr	r2, [r4, #0]
 800c8b8:	42a2      	cmp	r2, r4
 800c8ba:	d004      	beq.n	800c8c6 <chIQReadTimeout+0x96>
 800c8bc:	69a1      	ldr	r1, [r4, #24]
 800c8be:	6892      	ldr	r2, [r2, #8]
 800c8c0:	6889      	ldr	r1, [r1, #8]
 800c8c2:	4291      	cmp	r1, r2
 800c8c4:	d324      	bcc.n	800c910 <chIQReadTimeout+0xe0>
 800c8c6:	f38b 8811 	msr	BASEPRI, fp
    if (--n == 0U) {
 800c8ca:	9b01      	ldr	r3, [sp, #4]
    r++;
 800c8cc:	3701      	adds	r7, #1
    if (--n == 0U) {
 800c8ce:	42bb      	cmp	r3, r7
 800c8d0:	d015      	beq.n	800c8fe <chIQReadTimeout+0xce>
 800c8d2:	f388 8811 	msr	BASEPRI, r8
  _stats_start_measure_crit_thd();
 800c8d6:	f7ff fccb 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800c8da:	f7ff ff41 	bl	800c760 <_dbg_check_lock>
 800c8de:	e7bd      	b.n	800c85c <chIQReadTimeout+0x2c>
  _dbg_check_unlock();
 800c8e0:	f7ff ff2e 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800c8e4:	f7ff fcac 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800c8e8:	6823      	ldr	r3, [r4, #0]
 800c8ea:	42a3      	cmp	r3, r4
 800c8ec:	d004      	beq.n	800c8f8 <chIQReadTimeout+0xc8>
 800c8ee:	69a2      	ldr	r2, [r4, #24]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	6892      	ldr	r2, [r2, #8]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d30f      	bcc.n	800c918 <chIQReadTimeout+0xe8>
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	f383 8811 	msr	BASEPRI, r3
}
 800c8fe:	4638      	mov	r0, r7
 800c900:	b003      	add	sp, #12
 800c902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800c906:	b672      	cpsid	i
 800c908:	4b05      	ldr	r3, [pc, #20]	; (800c920 <chIQReadTimeout+0xf0>)
 800c90a:	4a06      	ldr	r2, [pc, #24]	; (800c924 <chIQReadTimeout+0xf4>)
 800c90c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c90e:	e7fe      	b.n	800c90e <chIQReadTimeout+0xde>
 800c910:	b672      	cpsid	i
 800c912:	4b05      	ldr	r3, [pc, #20]	; (800c928 <chIQReadTimeout+0xf8>)
 800c914:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c916:	e7fe      	b.n	800c916 <chIQReadTimeout+0xe6>
 800c918:	b672      	cpsid	i
 800c91a:	4b03      	ldr	r3, [pc, #12]	; (800c928 <chIQReadTimeout+0xf8>)
 800c91c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c91e:	e7fe      	b.n	800c91e <chIQReadTimeout+0xee>
 800c920:	20001698 	.word	0x20001698
 800c924:	0800ffc0 	.word	0x0800ffc0
 800c928:	0800fc40 	.word	0x0800fc40
 800c92c:	00000000 	.word	0x00000000

0800c930 <chIQGetTimeout>:
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 800c930:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800c932:	2320      	movs	r3, #32
 800c934:	4604      	mov	r4, r0
 800c936:	460e      	mov	r6, r1
 800c938:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800c93c:	f7ff fc98 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800c940:	f7ff ff0e 	bl	800c760 <_dbg_check_lock>
  if (iqp->q_notify != NULL) {
 800c944:	69e3      	ldr	r3, [r4, #28]
 800c946:	b133      	cbz	r3, 800c956 <chIQGetTimeout+0x26>
    iqp->q_notify(iqp);
 800c948:	4620      	mov	r0, r4
 800c94a:	4798      	blx	r3
 800c94c:	e003      	b.n	800c956 <chIQGetTimeout+0x26>
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800c94e:	f7ff fe1f 	bl	800c590 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800c952:	1e05      	subs	r5, r0, #0
 800c954:	db25      	blt.n	800c9a2 <chIQGetTimeout+0x72>
  chDbgCheckClassI();
 800c956:	f7ff fd53 	bl	800c400 <chDbgCheckClassI>
  return (bool)(chQSpaceI(iqp) == 0U);
 800c95a:	68a3      	ldr	r3, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800c95c:	4631      	mov	r1, r6
 800c95e:	4620      	mov	r0, r4
  while (chIQIsEmptyI(iqp)) {
 800c960:	2b00      	cmp	r3, #0
 800c962:	d0f4      	beq.n	800c94e <chIQGetTimeout+0x1e>
  b = *iqp->q_rdptr++;
 800c964:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 800c966:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 800c968:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 800c96a:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 800c96c:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800c96e:	4282      	cmp	r2, r0
  iqp->q_counter--;
 800c970:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800c972:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 800c974:	bf28      	it	cs
 800c976:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 800c978:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 800c97a:	bf28      	it	cs
 800c97c:	61a3      	strcs	r3, [r4, #24]
  _dbg_check_unlock();
 800c97e:	f7ff fedf 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800c982:	f7ff fc5d 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800c986:	4b11      	ldr	r3, [pc, #68]	; (800c9cc <chIQGetTimeout+0x9c>)
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d004      	beq.n	800c998 <chIQGetTimeout+0x68>
 800c98e:	6999      	ldr	r1, [r3, #24]
 800c990:	6892      	ldr	r2, [r2, #8]
 800c992:	6889      	ldr	r1, [r1, #8]
 800c994:	4291      	cmp	r1, r2
 800c996:	d315      	bcc.n	800c9c4 <chIQGetTimeout+0x94>
 800c998:	2300      	movs	r3, #0
 800c99a:	f383 8811 	msr	BASEPRI, r3
}
 800c99e:	4628      	mov	r0, r5
 800c9a0:	bd70      	pop	{r4, r5, r6, pc}
  _dbg_check_unlock();
 800c9a2:	f7ff fecd 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800c9a6:	f7ff fc4b 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800c9aa:	4b08      	ldr	r3, [pc, #32]	; (800c9cc <chIQGetTimeout+0x9c>)
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d0f2      	beq.n	800c998 <chIQGetTimeout+0x68>
 800c9b2:	6999      	ldr	r1, [r3, #24]
 800c9b4:	6892      	ldr	r2, [r2, #8]
 800c9b6:	6889      	ldr	r1, [r1, #8]
 800c9b8:	4291      	cmp	r1, r2
 800c9ba:	d2ed      	bcs.n	800c998 <chIQGetTimeout+0x68>
  __ASM volatile ("cpsid i" : : : "memory");
 800c9bc:	b672      	cpsid	i
 800c9be:	4a04      	ldr	r2, [pc, #16]	; (800c9d0 <chIQGetTimeout+0xa0>)
 800c9c0:	62da      	str	r2, [r3, #44]	; 0x2c
 800c9c2:	e7fe      	b.n	800c9c2 <chIQGetTimeout+0x92>
 800c9c4:	b672      	cpsid	i
 800c9c6:	4a02      	ldr	r2, [pc, #8]	; (800c9d0 <chIQGetTimeout+0xa0>)
 800c9c8:	62da      	str	r2, [r3, #44]	; 0x2c
 800c9ca:	e7fe      	b.n	800c9ca <chIQGetTimeout+0x9a>
 800c9cc:	20001698 	.word	0x20001698
 800c9d0:	0800fc40 	.word	0x0800fc40
	...

0800c9e0 <chThdExit>:
void chThdExit(msg_t msg) {
 800c9e0:	b508      	push	{r3, lr}
 800c9e2:	4601      	mov	r1, r0
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800c9e4:	2320      	movs	r3, #32
 800c9e6:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = currp;
 800c9ea:	4d11      	ldr	r5, [pc, #68]	; (800ca30 <chThdExit+0x50>)
  _stats_start_measure_crit_thd();
 800c9ec:	f7ff fc40 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800c9f0:	f7ff feb6 	bl	800c760 <_dbg_check_lock>
 800c9f4:	69ac      	ldr	r4, [r5, #24]
  return (bool)(tlp->p_next != (thread_t *)tlp);
 800c9f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
 800c9f8:	6261      	str	r1, [r4, #36]	; 0x24
  while (list_notempty(&tp->p_waiting)) {
 800c9fa:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800c9fe:	4286      	cmp	r6, r0
 800ca00:	d006      	beq.n	800ca10 <chThdExit+0x30>
  tlp->p_next = tp->p_next;
 800ca02:	6802      	ldr	r2, [r0, #0]
 800ca04:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800ca06:	f7ff fddb 	bl	800c5c0 <chSchReadyI>
  return (bool)(tlp->p_next != (thread_t *)tlp);
 800ca0a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->p_waiting)) {
 800ca0c:	42b0      	cmp	r0, r6
 800ca0e:	d1f8      	bne.n	800ca02 <chThdExit+0x22>
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 800ca10:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800ca14:	079b      	lsls	r3, r3, #30
 800ca16:	d104      	bne.n	800ca22 <chThdExit+0x42>
    REG_REMOVE(tp);
 800ca18:	6963      	ldr	r3, [r4, #20]
 800ca1a:	6922      	ldr	r2, [r4, #16]
 800ca1c:	611a      	str	r2, [r3, #16]
 800ca1e:	6922      	ldr	r2, [r4, #16]
 800ca20:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 800ca22:	200f      	movs	r0, #15
 800ca24:	f7ff fc9c 	bl	800c360 <chSchGoSleepS>
  __ASM volatile ("cpsid i" : : : "memory");
 800ca28:	b672      	cpsid	i
 800ca2a:	4b02      	ldr	r3, [pc, #8]	; (800ca34 <chThdExit+0x54>)
 800ca2c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800ca2e:	e7fe      	b.n	800ca2e <chThdExit+0x4e>
 800ca30:	20001698 	.word	0x20001698
 800ca34:	0800ffd0 	.word	0x0800ffd0
	...

0800ca40 <chThdSleep>:
void chThdSleep(systime_t time) {
 800ca40:	b508      	push	{r3, lr}
 800ca42:	4601      	mov	r1, r0
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800ca44:	2320      	movs	r3, #32
 800ca46:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800ca4a:	f7ff fc11 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800ca4e:	f7ff fe87 	bl	800c760 <_dbg_check_lock>
 *
 * @sclass
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);
 800ca52:	b199      	cbz	r1, 800ca7c <chThdSleep+0x3c>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800ca54:	2008      	movs	r0, #8
 800ca56:	f7ff fce3 	bl	800c420 <chSchGoSleepTimeoutS>
  _dbg_check_unlock();
 800ca5a:	f7ff fe71 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800ca5e:	f7ff fbef 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800ca62:	4b0b      	ldr	r3, [pc, #44]	; (800ca90 <chThdSleep+0x50>)
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d004      	beq.n	800ca74 <chThdSleep+0x34>
 800ca6a:	6999      	ldr	r1, [r3, #24]
 800ca6c:	6892      	ldr	r2, [r2, #8]
 800ca6e:	6889      	ldr	r1, [r1, #8]
 800ca70:	4291      	cmp	r1, r2
 800ca72:	d308      	bcc.n	800ca86 <chThdSleep+0x46>
 800ca74:	2300      	movs	r3, #0
 800ca76:	f383 8811 	msr	BASEPRI, r3
 800ca7a:	bd08      	pop	{r3, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800ca7c:	b672      	cpsid	i
 800ca7e:	4b04      	ldr	r3, [pc, #16]	; (800ca90 <chThdSleep+0x50>)
 800ca80:	4a04      	ldr	r2, [pc, #16]	; (800ca94 <chThdSleep+0x54>)
 800ca82:	62da      	str	r2, [r3, #44]	; 0x2c
 800ca84:	e7fe      	b.n	800ca84 <chThdSleep+0x44>
 800ca86:	b672      	cpsid	i
 800ca88:	4a03      	ldr	r2, [pc, #12]	; (800ca98 <chThdSleep+0x58>)
 800ca8a:	62da      	str	r2, [r3, #44]	; 0x2c
 800ca8c:	e7fe      	b.n	800ca8c <chThdSleep+0x4c>
 800ca8e:	bf00      	nop
 800ca90:	20001698 	.word	0x20001698
 800ca94:	0800ff90 	.word	0x0800ff90
 800ca98:	08010200 	.word	0x08010200
 800ca9c:	00000000 	.word	0x00000000

0800caa0 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 800caa0:	e7fe      	b.n	800caa0 <BusFault_Handler>
 800caa2:	bf00      	nop
	...

0800cab0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 800cab0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 800cab2:	4f12      	ldr	r7, [pc, #72]	; (800cafc <__init_ram_areas+0x4c>)
void __init_ram_areas(void) {
 800cab4:	4d12      	ldr	r5, [pc, #72]	; (800cb00 <__init_ram_areas+0x50>)
 800cab6:	4c13      	ldr	r4, [pc, #76]	; (800cb04 <__init_ram_areas+0x54>)
 800cab8:	4b13      	ldr	r3, [pc, #76]	; (800cb08 <__init_ram_areas+0x58>)
 800caba:	4914      	ldr	r1, [pc, #80]	; (800cb0c <__init_ram_areas+0x5c>)
 800cabc:	f107 0e80 	add.w	lr, r7, #128	; 0x80
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 800cac0:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 800cac2:	429c      	cmp	r4, r3
 800cac4:	d911      	bls.n	800caea <__init_ram_areas+0x3a>
 800cac6:	3904      	subs	r1, #4
 800cac8:	461a      	mov	r2, r3
      *p = *tp;
 800caca:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800cace:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 800cad2:	4294      	cmp	r4, r2
 800cad4:	d8f9      	bhi.n	800caca <__init_ram_areas+0x1a>
 800cad6:	43da      	mvns	r2, r3
 800cad8:	4414      	add	r4, r2
 800cada:	f024 0403 	bic.w	r4, r4, #3
 800cade:	3404      	adds	r4, #4
 800cae0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 800cae2:	429d      	cmp	r5, r3
 800cae4:	d903      	bls.n	800caee <__init_ram_areas+0x3e>
      *p = 0;
 800cae6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 800caea:	429d      	cmp	r5, r3
 800caec:	d8fb      	bhi.n	800cae6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
 800caee:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800caf0:	4577      	cmp	r7, lr
 800caf2:	d202      	bcs.n	800cafa <__init_ram_areas+0x4a>
 800caf4:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
 800caf8:	e7e3      	b.n	800cac2 <__init_ram_areas+0x12>
 800cafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cafc:	08010090 	.word	0x08010090
 800cb00:	20001d10 	.word	0x20001d10
 800cb04:	20001d10 	.word	0x20001d10
 800cb08:	20001d10 	.word	0x20001d10
 800cb0c:	08010418 	.word	0x08010418

0800cb10 <__default_exit>:
void __default_exit(void) {
 800cb10:	e7fe      	b.n	800cb10 <__default_exit>
 800cb12:	bf00      	nop
	...

0800cb20 <__late_init>:
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
	...

0800cb30 <__core_init>:
void __core_init(void) {
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
	...

0800cb40 <ButtonEmr>:

    return valor_envio;
}

void ButtonEmr(uint8_t data, uint8_t pos)
{
 800cb40:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t P;
	uint8_t ENVIO[20];
	uint8_t ENVIO_aux[20];

	//MODO 7E 01 FF 53 75 02 36 7E
	if(data == TECLADO_MODO)
 800cb42:	2801      	cmp	r0, #1
{
 800cb44:	b08d      	sub	sp, #52	; 0x34
	if(data == TECLADO_MODO)
 800cb46:	d077      	beq.n	800cc38 <ButtonEmr+0xf8>
		ENVIO[7] = 0X7E;
		P=8;
	}

	//FIN 7E 01 FF 53 75 01 37 7E
	else if(data == TECLADO_FIN)
 800cb48:	2802      	cmp	r0, #2
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	f000 809d 	beq.w	800cc8a <ButtonEmr+0x14a>
		ENVIO[7] = 0X7E;
		P=8;
	}

	//ESTADO DISPLAY 7E 01 FF 54 08 A4 7E
	else if(data == ESTADO_DISPLAY)
 800cb50:	2803      	cmp	r0, #3
 800cb52:	f000 80a2 	beq.w	800cc9a <ButtonEmr+0x15a>
		ENVIO[6] = 0X7E;
		P=7;
	}

	//LEER DINERO, VOLUMEN 7E 01 FF 47 6B 00 4E 7E
	else if(data == LEER_DISPLAY)
 800cb56:	2804      	cmp	r0, #4
 800cb58:	f000 80d8 	beq.w	800cd0c <ButtonEmr+0x1cc>
		if (pos == 0x01) emr3_sale1(ENVIO,P,1);
		else emr3_sale2(ENVIO,P,1);
	}

	//AUTORIZACION 7E 01 FF 4F 06 01 AA 7E
	else if(data == AUTORIZAR)
 800cb5c:	2805      	cmp	r0, #5
 800cb5e:	f000 80b4 	beq.w	800ccca <ButtonEmr+0x18a>
		ENVIO[7] = 0X7E;
		P=8;
	}

	//ESTADO SURTIDOR
	else if(data == ESTADO_SURTIDOR)
 800cb62:	2806      	cmp	r0, #6
 800cb64:	f000 80f0 	beq.w	800cd48 <ButtonEmr+0x208>
		ENVIO[6] = 0X7E;
		P=7;
	}

	//INICIO 7E 01 FF 53 75 00 38 7E
	else if (data == TECLADO_INICIO)
 800cb68:	2807      	cmp	r0, #7
 800cb6a:	f000 80fd 	beq.w	800cd68 <ButtonEmr+0x228>
		ENVIO[7] = 0X7E;
		P=8;
	}

	/// INICIO
	else if(data == INICIO)
 800cb6e:	2808      	cmp	r0, #8
 800cb70:	f000 8125 	beq.w	800cdbe <ButtonEmr+0x27e>
		ENVIO[7] = 0X7E;
		P=8;
	}

	//FINALIZAR 7E 01 FF 4F 03 AE 7E
	else if(data == FIN)
 800cb74:	2809      	cmp	r0, #9
 800cb76:	f000 813c 	beq.w	800cdf2 <ButtonEmr+0x2b2>
		ENVIO[6] = 0X7E;
		P=7;
	}

	//SIGUIENTE 7E 01 FF 53 75 04 34 7E
	else if(data == TECLADO_SIGUIENTE)
 800cb7a:	280a      	cmp	r0, #10
 800cb7c:	f000 80ec 	beq.w	800cd58 <ButtonEmr+0x218>
		ENVIO[7] = 0X7E;
		P=8;
	}

	//ENTRADA 7E 01 FF 53 75 08 30 7E
	else if(data == TECLADO_ENTRADA)
 800cb80:	280b      	cmp	r0, #11
 800cb82:	f000 813d 	beq.w	800ce00 <ButtonEmr+0x2c0>
		ENVIO[7] = 0X7E;
		P=8;
	}

	// 0 7E 01 FF 53 75 09 2F 7E
	else if(data == TECLADO_0)
 800cb86:	2810      	cmp	r0, #16
 800cb88:	f000 8154 	beq.w	800ce34 <ButtonEmr+0x2f4>
		ENVIO[7] = 0X7E;
		P=8;
	}

	// 1 7E 01 FF 53 75 0A 2E 7E
	else if(data == TECLADO_1)
 800cb8c:	2811      	cmp	r0, #17
 800cb8e:	f000 816b 	beq.w	800ce68 <ButtonEmr+0x328>
		ENVIO[7] = 0X7E;
		P=8;
	}

	// 2 7E 01 FF 53 75 0B 2D 7E
	else if(data == TECLADO_2)
 800cb92:	2812      	cmp	r0, #18
 800cb94:	f000 8170 	beq.w	800ce78 <ButtonEmr+0x338>
		ENVIO[7] = 0X7E;
		P=8;
	}

	// 3 7E 01 FF 53 75 0C 2C 7E
	else if(data == TECLADO_3)
 800cb98:	2813      	cmp	r0, #19
 800cb9a:	f000 8175 	beq.w	800ce88 <ButtonEmr+0x348>
		ENVIO[7] = 0X7E;
		P=8;
	}

	// 4 7E 01 FF 53 75 0D 2B 7E
	else if(data == TECLADO_4)
 800cb9e:	2814      	cmp	r0, #20
 800cba0:	f000 817a 	beq.w	800ce98 <ButtonEmr+0x358>
		ENVIO[7]=0X7E;
		P=8;
	}

	// 5 7E 01 FF 53 75 0E 2A 7E
	else if(data == TECLADO_5)
 800cba4:	2815      	cmp	r0, #21
 800cba6:	f000 817f 	beq.w	800cea8 <ButtonEmr+0x368>
		ENVIO[7] = 0X7E;
		P=8;
	}

	// 6 7E 01 FF 53 75 0F 29 7E
	else if(data == TECLADO_6)
 800cbaa:	2816      	cmp	r0, #22
 800cbac:	f000 8184 	beq.w	800ceb8 <ButtonEmr+0x378>
		ENVIO[7] = 0X7E;
		P=8;
	}

	// 7 7E 01 FF 53 75 10 28 7E
	else if(data == TECLADO_7)
 800cbb0:	2817      	cmp	r0, #23
 800cbb2:	f000 8189 	beq.w	800cec8 <ButtonEmr+0x388>
		ENVIO[7] = 0X7E;
		P=8;
	}

	// 8 7E 01 FF 53 75 11 27 7E
	else if(data == TECLADO_8)
 800cbb6:	2818      	cmp	r0, #24
 800cbb8:	f000 818e 	beq.w	800ced8 <ButtonEmr+0x398>
		ENVIO[7] = 0X7E;
		P=8;
	}

	// 9 7E 01 FF 53 75 12 26 7E
	else if(data == TECLADO_9)
 800cbbc:	2819      	cmp	r0, #25
 800cbbe:	f000 8193 	beq.w	800cee8 <ButtonEmr+0x3a8>
		ENVIO[7] = 0X7E;
		P = 8;
	}

	//PRESET 7E 01 FF 53 75 03 35 7E
	else if(data == TECLADO_PRESET)
 800cbc2:	281a      	cmp	r0, #26
 800cbc4:	f000 8198 	beq.w	800cef8 <ButtonEmr+0x3b8>
		ENVIO[7] = 0X7E;
		P = 8;
	}

	//Total de volumen 7E 01 FF 47 6A 4F 7E
	else if (data == TOTAL_VOLUMEN)
 800cbc8:	281b      	cmp	r0, #27
 800cbca:	f000 819d 	beq.w	800cf08 <ButtonEmr+0x3c8>
		ENVIO[6] = 0X7E;
		P=7;
	}

	//ENVIAR PPU 7E 01 FF 4F 08 XX XX XX XX 8B 7E
	else if (data == ENVIAR_PPU)
 800cbce:	281c      	cmp	r0, #28
 800cbd0:	f000 82a7 	beq.w	800d122 <ButtonEmr+0x5e2>
		ENVIO[P] = 0X7E;
		P++;
	}

	//ENVIAR VOLUMEN 7E 01 FF 53 6E XX XX XX XX 7F 7E
	else if (data == ENVIAR_VOLUMEN)
 800cbd4:	281d      	cmp	r0, #29
 800cbd6:	f000 820b 	beq.w	800cff0 <ButtonEmr+0x4b0>
		ENVIO[P] = 0X7E;
		P++;		
	}

	//Hora 7E 01 FF 47 69 50 7E
	else if (data == HORAS)
 800cbda:	2820      	cmp	r0, #32
 800cbdc:	f000 81ab 	beq.w	800cf36 <ButtonEmr+0x3f6>
		ENVIO[6] = 0X7E;
		P = 7;
	}

	//FECHA 7E 01 FF 47 64 55 7E
	else if (data == FECHAS)
 800cbe0:	2821      	cmp	r0, #33	; 0x21
 800cbe2:	f000 81b9 	beq.w	800cf58 <ButtonEmr+0x418>
		ENVIO[6] = 0X7E;
		P=7;
	}

	//LEER EL PPU 7E 01 FF 54 07 A5 7E
   	else if (data == LEER_PPU)
 800cbe6:	2822      	cmp	r0, #34	; 0x22
 800cbe8:	f000 81c4 	beq.w	800cf74 <ButtonEmr+0x434>
      	ENVIO[6] = 0X7E;
      	P=7;
   	}

   	//LEER EL PRESET VOLUMNE 7E 01 FF 47 6E 4B 7E
   	else if (data == LEER_PRES_VOL)
 800cbec:	2823      	cmp	r0, #35	; 0x23
 800cbee:	f000 81ba 	beq.w	800cf66 <ButtonEmr+0x426>
      	ENVIO[6] = 0X7E;
      	P=7;
   	}

    //pedir volumen ieee venta;
   	else if (data == PEDIR_VENTA)
 800cbf2:	2824      	cmp	r0, #36	; 0x24
 800cbf4:	f000 80c0 	beq.w	800cd78 <ButtonEmr+0x238>
      	if(pos == 0x01) emr3_sale1(ENVIO,P,1);
      	else emr3_sale2(ENVIO,P,1);
      	
   	}

   	else if(data == TEST_PUNTO)
 800cbf8:	2825      	cmp	r0, #37	; 0x25
 800cbfa:	f000 81d2 	beq.w	800cfa2 <ButtonEmr+0x462>
		ENVIO[6] = 0X7E;

		P=7;
   	}

   	else if(data == SALIR_CONSALA)
 800cbfe:	2826      	cmp	r0, #38	; 0x26
 800cc00:	f000 81a0 	beq.w	800cf44 <ButtonEmr+0x404>
        ENVIO[7] = 0X7E;

        P=8;
   	}

   	else if(data == TECLADO_PAUSA)
 800cc04:	2827      	cmp	r0, #39	; 0x27
 800cc06:	d115      	bne.n	800cc34 <ButtonEmr+0xf4>
		valor = Data[i] + valor;
 800cc08:	f501 73a8 	add.w	r3, r1, #336	; 0x150
	{
		ENVIO[0] = 0X7E;
 800cc0c:	227e      	movs	r2, #126	; 0x7e
	valor = (0xFF + 0x01) - valor;
 800cc0e:	425b      	negs	r3, r3
		ENVIO[1] = pos;
		ENVIO[2] = 0XFF;
 800cc10:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X4F;
 800cc12:	254f      	movs	r5, #79	; 0x4f
		ENVIO[4] = 0X02;
 800cc14:	2002      	movs	r0, #2
		ENVIO[5] = che_emr3(ENVIO, 5);
		ENVIO[6] = 0X7E;
 800cc16:	2407      	movs	r4, #7
		ENVIO[1] = pos;
 800cc18:	f88d 101d 	strb.w	r1, [sp, #29]
	valor_envio = (valor & 0xFF);
 800cc1c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		ENVIO[0] = 0X7E;
 800cc20:	f88d 201c 	strb.w	r2, [sp, #28]
		ENVIO[6] = 0X7E;
 800cc24:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		ENVIO[2] = 0XFF;
 800cc28:	f88d 601e 	strb.w	r6, [sp, #30]
		ENVIO[3] = 0X4F;
 800cc2c:	f88d 501f 	strb.w	r5, [sp, #31]
		ENVIO[4] = 0X02;
 800cc30:	f88d 0020 	strb.w	r0, [sp, #32]
		P=7;
 800cc34:	4620      	mov	r0, r4
 800cc36:	e018      	b.n	800cc6a <ButtonEmr+0x12a>
	valor = (0xFF + 0x01) - valor;
 800cc38:	f1c1 0737 	rsb	r7, r1, #55	; 0x37
		ENVIO[0] = 0X7E;
 800cc3c:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cc3e:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X53;
 800cc40:	2553      	movs	r5, #83	; 0x53
		ENVIO[4] = 0X75;
 800cc42:	2475      	movs	r4, #117	; 0x75
		ENVIO[5] = 0X02;
 800cc44:	2202      	movs	r2, #2
		ENVIO[7] = 0X7E;
 800cc46:	2008      	movs	r0, #8
		ENVIO[4] = 0X75;
 800cc48:	f88d 4020 	strb.w	r4, [sp, #32]
		ENVIO[1] = pos;
 800cc4c:	f88d 101d 	strb.w	r1, [sp, #29]
	valor_envio = (valor & 0xFF);
 800cc50:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
		ENVIO[0] = 0X7E;
 800cc54:	f88d 301c 	strb.w	r3, [sp, #28]
		ENVIO[7] = 0X7E;
 800cc58:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		ENVIO[2] = 0XFF;
 800cc5c:	f88d 601e 	strb.w	r6, [sp, #30]
		ENVIO[3] = 0X53;
 800cc60:	f88d 501f 	strb.w	r5, [sp, #31]
		ENVIO[5] = 0X01;
 800cc64:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
		P=8;
 800cc68:	4604      	mov	r4, r0
	uartStartSend(&UARTD1, P, Data);
 800cc6a:	a907      	add	r1, sp, #28
 800cc6c:	f002 f908 	bl	800ee80 <uartStartSend.constprop.27>
    chThdSleepMilliseconds(50);
 800cc70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800cc74:	f7ff fee4 	bl	800ca40 <chThdSleep>
    uartStopSend(&UARTD1);
 800cc78:	f002 f95a 	bl	800ef30 <uartStopSend.constprop.25>
 800cc7c:	4bdb      	ldr	r3, [pc, #876]	; (800cfec <ButtonEmr+0x4ac>)
	}

	Imprimir_EMR3(ENVIO, P);

	if(read_eeprom(log) == 1) emr3_log(&ENVIO,P,1);
 800cc7e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800cc82:	2a01      	cmp	r2, #1
 800cc84:	d03c      	beq.n	800cd00 <ButtonEmr+0x1c0>


	return;
}
 800cc86:	b00d      	add	sp, #52	; 0x34
 800cc88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	valor = (0xFF + 0x01) - valor;
 800cc8a:	f1c1 0738 	rsb	r7, r1, #56	; 0x38
		ENVIO[0] = 0X7E;
 800cc8e:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cc90:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X53;
 800cc92:	2553      	movs	r5, #83	; 0x53
		ENVIO[4] = 0X75;
 800cc94:	2475      	movs	r4, #117	; 0x75
		ENVIO[5] = 0X01;
 800cc96:	2201      	movs	r2, #1
 800cc98:	e7d5      	b.n	800cc46 <ButtonEmr+0x106>
		valor = Data[i] + valor;
 800cc9a:	f201 135b 	addw	r3, r1, #347	; 0x15b
	valor = (0xFF + 0x01) - valor;
 800cc9e:	425b      	negs	r3, r3
		ENVIO[0] = 0X7E;
 800cca0:	227e      	movs	r2, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cca2:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X54;
 800cca4:	2554      	movs	r5, #84	; 0x54
		ENVIO[4] = 0X08;
 800cca6:	2408      	movs	r4, #8
		ENVIO[6] = 0X7E;
 800cca8:	2007      	movs	r0, #7
		ENVIO[4] = 0X03;
 800ccaa:	f88d 4020 	strb.w	r4, [sp, #32]
		ENVIO[1] = pos;
 800ccae:	f88d 101d 	strb.w	r1, [sp, #29]
	valor_envio = (valor & 0xFF);
 800ccb2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		ENVIO[0] = 0X7E;
 800ccb6:	f88d 201c 	strb.w	r2, [sp, #28]
		ENVIO[6] = 0X7E;
 800ccba:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		ENVIO[2] = 0XFF;
 800ccbe:	f88d 601e 	strb.w	r6, [sp, #30]
		ENVIO[3] = 0X54;
 800ccc2:	f88d 501f 	strb.w	r5, [sp, #31]
		P=7;
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	e7cf      	b.n	800cc6a <ButtonEmr+0x12a>
		valor = Data[i] + valor;
 800ccca:	f201 1355 	addw	r3, r1, #341	; 0x155
		ENVIO[0] = 0X7E;
 800ccce:	227e      	movs	r2, #126	; 0x7e
		ENVIO[5] = 0X01;
 800ccd0:	2401      	movs	r4, #1
	valor = (0xFF + 0x01) - valor;
 800ccd2:	425b      	negs	r3, r3
		ENVIO[2] = 0XFF;
 800ccd4:	27ff      	movs	r7, #255	; 0xff
		ENVIO[3] = 0X4F;
 800ccd6:	264f      	movs	r6, #79	; 0x4f
		ENVIO[4] = 0X06;
 800ccd8:	2506      	movs	r5, #6
		ENVIO[7] = 0X7E;
 800ccda:	2008      	movs	r0, #8
		ENVIO[5] = 0X01;
 800ccdc:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
		ENVIO[1] = pos;
 800cce0:	f88d 101d 	strb.w	r1, [sp, #29]
	valor_envio = (valor & 0xFF);
 800cce4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		ENVIO[0] = 0X7E;
 800cce8:	f88d 201c 	strb.w	r2, [sp, #28]
		ENVIO[7] = 0X7E;
 800ccec:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
		ENVIO[2] = 0XFF;
 800ccf0:	f88d 701e 	strb.w	r7, [sp, #30]
		ENVIO[3] = 0X4F;
 800ccf4:	f88d 601f 	strb.w	r6, [sp, #31]
		ENVIO[4] = 0X06;
 800ccf8:	f88d 5020 	strb.w	r5, [sp, #32]
		P=8;
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	e7b4      	b.n	800cc6a <ButtonEmr+0x12a>
	if(read_eeprom(log) == 1) emr3_log(&ENVIO,P,1);
 800cd00:	4621      	mov	r1, r4
 800cd02:	a807      	add	r0, sp, #28
 800cd04:	f001 fa0c 	bl	800e120 <emr3_log>
}
 800cd08:	b00d      	add	sp, #52	; 0x34
 800cd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ENVIO[0] = 0X7E;
 800cd0c:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cd0e:	25ff      	movs	r5, #255	; 0xff
		ENVIO[3] = 0X47;
 800cd10:	2447      	movs	r4, #71	; 0x47
		ENVIO[4] = 0X6B;
 800cd12:	206b      	movs	r0, #107	; 0x6b
	valor = (0xFF + 0x01) - valor;
 800cd14:	f1c1 024f 	rsb	r2, r1, #79	; 0x4f
		if (pos == 0x01) emr3_sale1(ENVIO,P,1);
 800cd18:	2901      	cmp	r1, #1
		ENVIO[1] = pos;
 800cd1a:	f88d 101d 	strb.w	r1, [sp, #29]
		ENVIO[0] = 0X7E;
 800cd1e:	f88d 301c 	strb.w	r3, [sp, #28]
		ENVIO[6] = 0X7E;
 800cd22:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		ENVIO[2] = 0XFF;
 800cd26:	f88d 501e 	strb.w	r5, [sp, #30]
		ENVIO[3] = 0X47;
 800cd2a:	f88d 401f 	strb.w	r4, [sp, #31]
		ENVIO[4] = 0X6B;
 800cd2e:	f88d 0020 	strb.w	r0, [sp, #32]
	valor_envio = (valor & 0xFF);
 800cd32:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
		if (pos == 0x01) emr3_sale1(ENVIO,P,1);
 800cd36:	d03a      	beq.n	800cdae <ButtonEmr+0x26e>
		else emr3_sale2(ENVIO,P,1);
 800cd38:	a807      	add	r0, sp, #28
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	2107      	movs	r1, #7
 800cd3e:	f001 fa6f 	bl	800e220 <emr3_sale2>
 800cd42:	2007      	movs	r0, #7
		P=7;
 800cd44:	4604      	mov	r4, r0
 800cd46:	e790      	b.n	800cc6a <ButtonEmr+0x12a>
		valor = Data[i] + valor;
 800cd48:	f501 73ab 	add.w	r3, r1, #342	; 0x156
	valor = (0xFF + 0x01) - valor;
 800cd4c:	425b      	negs	r3, r3
		ENVIO[0] = 0X7E;
 800cd4e:	227e      	movs	r2, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cd50:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X54;
 800cd52:	2554      	movs	r5, #84	; 0x54
		ENVIO[4] = 0X03;
 800cd54:	2403      	movs	r4, #3
 800cd56:	e7a7      	b.n	800cca8 <ButtonEmr+0x168>
	valor = (0xFF + 0x01) - valor;
 800cd58:	f1c1 0735 	rsb	r7, r1, #53	; 0x35
		ENVIO[0] = 0X7E;
 800cd5c:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cd5e:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X53;
 800cd60:	2553      	movs	r5, #83	; 0x53
		ENVIO[4] = 0X75;
 800cd62:	2475      	movs	r4, #117	; 0x75
		ENVIO[5] = 0X04;
 800cd64:	2204      	movs	r2, #4
 800cd66:	e76e      	b.n	800cc46 <ButtonEmr+0x106>
	valor = (0xFF + 0x01) - valor;
 800cd68:	f1c1 0739 	rsb	r7, r1, #57	; 0x39
		ENVIO[0] = 0X7E;
 800cd6c:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cd6e:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X53;
 800cd70:	2553      	movs	r5, #83	; 0x53
		ENVIO[4] = 0X75;
 800cd72:	2475      	movs	r4, #117	; 0x75
		ENVIO[5] = 0X00;
 800cd74:	2200      	movs	r2, #0
 800cd76:	e766      	b.n	800cc46 <ButtonEmr+0x106>
      	ENVIO[0] = 0X7E;
 800cd78:	237e      	movs	r3, #126	; 0x7e
	valor = (0xFF + 0x01) - valor;
 800cd7a:	f1c1 0253 	rsb	r2, r1, #83	; 0x53
      	ENVIO[2] = 0XFF;
 800cd7e:	26ff      	movs	r6, #255	; 0xff
      	ENVIO[3] = 0X47;
 800cd80:	2547      	movs	r5, #71	; 0x47
      	ENVIO[4] = 0X67;
 800cd82:	2467      	movs	r4, #103	; 0x67
      	chThdSleepMilliseconds(1);
 800cd84:	200a      	movs	r0, #10
      	ENVIO[1] = pos;
 800cd86:	f88d 101d 	strb.w	r1, [sp, #29]
 800cd8a:	9101      	str	r1, [sp, #4]
      	ENVIO[0] = 0X7E;
 800cd8c:	f88d 301c 	strb.w	r3, [sp, #28]
      	ENVIO[6] = 0X7E;
 800cd90:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
      	ENVIO[2] = 0XFF;
 800cd94:	f88d 601e 	strb.w	r6, [sp, #30]
      	ENVIO[3] = 0X47;
 800cd98:	f88d 501f 	strb.w	r5, [sp, #31]
      	ENVIO[4] = 0X67;
 800cd9c:	f88d 4020 	strb.w	r4, [sp, #32]
	valor_envio = (valor & 0xFF);
 800cda0:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
      	chThdSleepMilliseconds(1);
 800cda4:	f7ff fe4c 	bl	800ca40 <chThdSleep>
      	if(pos == 0x01) emr3_sale1(ENVIO,P,1);
 800cda8:	9901      	ldr	r1, [sp, #4]
 800cdaa:	2901      	cmp	r1, #1
 800cdac:	d1c4      	bne.n	800cd38 <ButtonEmr+0x1f8>
		if (pos == 0x01) emr3_sale1(ENVIO,P,1);
 800cdae:	a807      	add	r0, sp, #28
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	2107      	movs	r1, #7
 800cdb4:	f001 fab4 	bl	800e320 <emr3_sale1>
 800cdb8:	2007      	movs	r0, #7
		P=7;
 800cdba:	4604      	mov	r4, r0
 800cdbc:	e755      	b.n	800cc6a <ButtonEmr+0x12a>
		valor = Data[i] + valor;
 800cdbe:	f201 134f 	addw	r3, r1, #335	; 0x14f
	valor = (0xFF + 0x01) - valor;
 800cdc2:	425b      	negs	r3, r3
		ENVIO[0] = 0X7E;
 800cdc4:	227e      	movs	r2, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cdc6:	27ff      	movs	r7, #255	; 0xff
		ENVIO[3] = 0X4F;
 800cdc8:	264f      	movs	r6, #79	; 0x4f
		ENVIO[4] = 0X01;
 800cdca:	2501      	movs	r5, #1
		ENVIO[5] = 0X00;
 800cdcc:	2000      	movs	r0, #0
        ENVIO[5] = 0X00;
 800cdce:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        ENVIO[1] = pos;
 800cdd2:	f88d 101d 	strb.w	r1, [sp, #29]
	valor_envio = (valor & 0xFF);
 800cdd6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   		ENVIO[0] = 0X7E;
 800cdda:	f88d 201c 	strb.w	r2, [sp, #28]
        ENVIO[7] = 0X7E;
 800cdde:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
        ENVIO[2] = 0XFF;
 800cde2:	f88d 701e 	strb.w	r7, [sp, #30]
        ENVIO[3] = 0X44;
 800cde6:	f88d 601f 	strb.w	r6, [sp, #31]
        ENVIO[4] = 0X25;
 800cdea:	f88d 5020 	strb.w	r5, [sp, #32]
        P=8;
 800cdee:	4620      	mov	r0, r4
 800cdf0:	e73b      	b.n	800cc6a <ButtonEmr+0x12a>
		valor = Data[i] + valor;
 800cdf2:	f201 1351 	addw	r3, r1, #337	; 0x151
	valor = (0xFF + 0x01) - valor;
 800cdf6:	425b      	negs	r3, r3
		ENVIO[0] = 0X7E;
 800cdf8:	227e      	movs	r2, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cdfa:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X4F;
 800cdfc:	254f      	movs	r5, #79	; 0x4f
 800cdfe:	e7a9      	b.n	800cd54 <ButtonEmr+0x214>
		ENVIO[5] = 0X08;
 800ce00:	2208      	movs	r2, #8
	valor = (0xFF + 0x01) - valor;
 800ce02:	f1c1 0031 	rsb	r0, r1, #49	; 0x31
		ENVIO[0] = 0X7E;
 800ce06:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800ce08:	27ff      	movs	r7, #255	; 0xff
		ENVIO[3] = 0X53;
 800ce0a:	2653      	movs	r6, #83	; 0x53
		ENVIO[4] = 0X75;
 800ce0c:	2575      	movs	r5, #117	; 0x75
	valor_envio = (valor & 0xFF);
 800ce0e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
		ENVIO[7] = 0X7E;
 800ce12:	4614      	mov	r4, r2
		ENVIO[1] = pos;
 800ce14:	f88d 101d 	strb.w	r1, [sp, #29]
		ENVIO[5] = 0X08;
 800ce18:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
		P=8;
 800ce1c:	4610      	mov	r0, r2
		ENVIO[0] = 0X7E;
 800ce1e:	f88d 301c 	strb.w	r3, [sp, #28]
		ENVIO[7] = 0X7E;
 800ce22:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		ENVIO[2] = 0XFF;
 800ce26:	f88d 701e 	strb.w	r7, [sp, #30]
		ENVIO[3] = 0X53;
 800ce2a:	f88d 601f 	strb.w	r6, [sp, #31]
		ENVIO[4] = 0X75;
 800ce2e:	f88d 5020 	strb.w	r5, [sp, #32]
 800ce32:	e71a      	b.n	800cc6a <ButtonEmr+0x12a>
	valor = (0xFF + 0x01) - valor;
 800ce34:	f1c1 0730 	rsb	r7, r1, #48	; 0x30
		ENVIO[0] = 0X7E;
 800ce38:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800ce3a:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X53;
 800ce3c:	2553      	movs	r5, #83	; 0x53
		ENVIO[4] = 0X75;
 800ce3e:	2075      	movs	r0, #117	; 0x75
		ENVIO[5] = 0X09;
 800ce40:	2209      	movs	r2, #9
		ENVIO[7] = 0X7E;
 800ce42:	2408      	movs	r4, #8
		ENVIO[4] = 0X75;
 800ce44:	f88d 0020 	strb.w	r0, [sp, #32]
		ENVIO[1] = pos;
 800ce48:	f88d 101d 	strb.w	r1, [sp, #29]
	valor_envio = (valor & 0xFF);
 800ce4c:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
		ENVIO[0] = 0X7E;
 800ce50:	f88d 301c 	strb.w	r3, [sp, #28]
		ENVIO[7] = 0X7E;
 800ce54:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		ENVIO[2] = 0XFF;
 800ce58:	f88d 601e 	strb.w	r6, [sp, #30]
		ENVIO[3] = 0X53;
 800ce5c:	f88d 501f 	strb.w	r5, [sp, #31]
		ENVIO[5] = 0X03;
 800ce60:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
		P = 8;
 800ce64:	4620      	mov	r0, r4
 800ce66:	e700      	b.n	800cc6a <ButtonEmr+0x12a>
	valor = (0xFF + 0x01) - valor;
 800ce68:	f1c1 072f 	rsb	r7, r1, #47	; 0x2f
		ENVIO[0] = 0X7E;
 800ce6c:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800ce6e:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X53;
 800ce70:	2553      	movs	r5, #83	; 0x53
		ENVIO[4] = 0X75;
 800ce72:	2075      	movs	r0, #117	; 0x75
		ENVIO[5] = 0X0A;
 800ce74:	220a      	movs	r2, #10
 800ce76:	e7e4      	b.n	800ce42 <ButtonEmr+0x302>
	valor = (0xFF + 0x01) - valor;
 800ce78:	f1c1 072e 	rsb	r7, r1, #46	; 0x2e
		ENVIO[0] = 0X7E;
 800ce7c:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800ce7e:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X53;
 800ce80:	2553      	movs	r5, #83	; 0x53
		ENVIO[4] = 0X75;
 800ce82:	2075      	movs	r0, #117	; 0x75
		ENVIO[5] = 0X0B;
 800ce84:	220b      	movs	r2, #11
 800ce86:	e7dc      	b.n	800ce42 <ButtonEmr+0x302>
	valor = (0xFF + 0x01) - valor;
 800ce88:	f1c1 072d 	rsb	r7, r1, #45	; 0x2d
		ENVIO[0] = 0X7E;
 800ce8c:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800ce8e:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X53;
 800ce90:	2553      	movs	r5, #83	; 0x53
		ENVIO[4] = 0X75;
 800ce92:	2075      	movs	r0, #117	; 0x75
		ENVIO[5] = 0X0C;
 800ce94:	220c      	movs	r2, #12
 800ce96:	e7d4      	b.n	800ce42 <ButtonEmr+0x302>
	valor = (0xFF + 0x01) - valor;
 800ce98:	f1c1 072c 	rsb	r7, r1, #44	; 0x2c
		ENVIO[0]=0X7E;
 800ce9c:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2]=0XFF;
 800ce9e:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3]=0X53;
 800cea0:	2553      	movs	r5, #83	; 0x53
		ENVIO[4]=0X75;
 800cea2:	2075      	movs	r0, #117	; 0x75
		ENVIO[5]=0X0D;
 800cea4:	220d      	movs	r2, #13
 800cea6:	e7cc      	b.n	800ce42 <ButtonEmr+0x302>
	valor = (0xFF + 0x01) - valor;
 800cea8:	f1c1 072b 	rsb	r7, r1, #43	; 0x2b
		ENVIO[0] = 0X7E;
 800ceac:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800ceae:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X53;
 800ceb0:	2553      	movs	r5, #83	; 0x53
		ENVIO[4] = 0X75;
 800ceb2:	2075      	movs	r0, #117	; 0x75
		ENVIO[5] = 0X0E;
 800ceb4:	220e      	movs	r2, #14
 800ceb6:	e7c4      	b.n	800ce42 <ButtonEmr+0x302>
	valor = (0xFF + 0x01) - valor;
 800ceb8:	f1c1 072a 	rsb	r7, r1, #42	; 0x2a
		ENVIO[0] = 0X7E;
 800cebc:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cebe:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X53;
 800cec0:	2553      	movs	r5, #83	; 0x53
		ENVIO[4] = 0X75;
 800cec2:	2075      	movs	r0, #117	; 0x75
		ENVIO[5] = 0X0F;
 800cec4:	220f      	movs	r2, #15
 800cec6:	e7bc      	b.n	800ce42 <ButtonEmr+0x302>
	valor = (0xFF + 0x01) - valor;
 800cec8:	f1c1 0729 	rsb	r7, r1, #41	; 0x29
		ENVIO[0] = 0X7E;
 800cecc:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cece:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X53;
 800ced0:	2553      	movs	r5, #83	; 0x53
		ENVIO[4] = 0X75;
 800ced2:	2075      	movs	r0, #117	; 0x75
		ENVIO[5] = 0X10;
 800ced4:	2210      	movs	r2, #16
 800ced6:	e7b4      	b.n	800ce42 <ButtonEmr+0x302>
	valor = (0xFF + 0x01) - valor;
 800ced8:	f1c1 0728 	rsb	r7, r1, #40	; 0x28
		ENVIO[0] = 0X7E;
 800cedc:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cede:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X53;
 800cee0:	2553      	movs	r5, #83	; 0x53
		ENVIO[4] = 0X75;
 800cee2:	2475      	movs	r4, #117	; 0x75
		ENVIO[5] = 0X11;
 800cee4:	2211      	movs	r2, #17
 800cee6:	e6ae      	b.n	800cc46 <ButtonEmr+0x106>
	valor = (0xFF + 0x01) - valor;
 800cee8:	f1c1 0727 	rsb	r7, r1, #39	; 0x27
		ENVIO[0] = 0X7E;
 800ceec:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800ceee:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X53;
 800cef0:	2553      	movs	r5, #83	; 0x53
		ENVIO[4] = 0X75;
 800cef2:	2075      	movs	r0, #117	; 0x75
		ENVIO[5] = 0X12;
 800cef4:	2212      	movs	r2, #18
 800cef6:	e7a4      	b.n	800ce42 <ButtonEmr+0x302>
	valor = (0xFF + 0x01) - valor;
 800cef8:	f1c1 0736 	rsb	r7, r1, #54	; 0x36
		ENVIO[0] = 0X7E;
 800cefc:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cefe:	26ff      	movs	r6, #255	; 0xff
		ENVIO[3] = 0X53;
 800cf00:	2553      	movs	r5, #83	; 0x53
		ENVIO[4] = 0X75;
 800cf02:	2075      	movs	r0, #117	; 0x75
		ENVIO[5] = 0X03;
 800cf04:	2203      	movs	r2, #3
 800cf06:	e79c      	b.n	800ce42 <ButtonEmr+0x302>
	valor = (0xFF + 0x01) - valor;
 800cf08:	f1c1 064e 	rsb	r6, r1, #78	; 0x4e
		ENVIO[0] = 0X7E;
 800cf0c:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cf0e:	25ff      	movs	r5, #255	; 0xff
		ENVIO[3] = 0X47;
 800cf10:	2047      	movs	r0, #71	; 0x47
		ENVIO[4] = 0X6C;
 800cf12:	226c      	movs	r2, #108	; 0x6c
      	ENVIO[6] = 0X7E;
 800cf14:	2407      	movs	r4, #7
      	ENVIO[3] = 0X47;
 800cf16:	f88d 001f 	strb.w	r0, [sp, #31]
      	ENVIO[1] = pos;
 800cf1a:	f88d 101d 	strb.w	r1, [sp, #29]
	valor_envio = (valor & 0xFF);
 800cf1e:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
      	ENVIO[0] = 0X7E;
 800cf22:	f88d 301c 	strb.w	r3, [sp, #28]
      	ENVIO[6] = 0X7E;
 800cf26:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
      	ENVIO[2] = 0XFF;
 800cf2a:	f88d 501e 	strb.w	r5, [sp, #30]
      	ENVIO[4] = 0X6E;
 800cf2e:	f88d 2020 	strb.w	r2, [sp, #32]
      	P=7;
 800cf32:	4620      	mov	r0, r4
 800cf34:	e699      	b.n	800cc6a <ButtonEmr+0x12a>
	valor = (0xFF + 0x01) - valor;
 800cf36:	f1c1 0651 	rsb	r6, r1, #81	; 0x51
		ENVIO[0] = 0X7E;
 800cf3a:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cf3c:	25ff      	movs	r5, #255	; 0xff
		ENVIO[3] = 0X47;
 800cf3e:	2047      	movs	r0, #71	; 0x47
		ENVIO[4] = 0X69;
 800cf40:	2269      	movs	r2, #105	; 0x69
 800cf42:	e7e7      	b.n	800cf14 <ButtonEmr+0x3d4>
		valor = Data[i] + valor;
 800cf44:	f501 73b4 	add.w	r3, r1, #360	; 0x168
	valor = (0xFF + 0x01) - valor;
 800cf48:	425b      	negs	r3, r3
   		ENVIO[0] = 0X7E;
 800cf4a:	227e      	movs	r2, #126	; 0x7e
        ENVIO[2] = 0XFF;
 800cf4c:	27ff      	movs	r7, #255	; 0xff
        ENVIO[3] = 0X44;
 800cf4e:	2644      	movs	r6, #68	; 0x44
        ENVIO[4] = 0X25;
 800cf50:	2525      	movs	r5, #37	; 0x25
        ENVIO[5] = 0X00;
 800cf52:	2000      	movs	r0, #0
        ENVIO[7] = 0X7E;
 800cf54:	2408      	movs	r4, #8
 800cf56:	e73a      	b.n	800cdce <ButtonEmr+0x28e>
	valor = (0xFF + 0x01) - valor;
 800cf58:	f1c1 0656 	rsb	r6, r1, #86	; 0x56
		ENVIO[0] = 0X7E;
 800cf5c:	237e      	movs	r3, #126	; 0x7e
		ENVIO[2] = 0XFF;
 800cf5e:	25ff      	movs	r5, #255	; 0xff
		ENVIO[3] = 0X47;
 800cf60:	2047      	movs	r0, #71	; 0x47
		ENVIO[4] = 0X64;
 800cf62:	2264      	movs	r2, #100	; 0x64
 800cf64:	e7d6      	b.n	800cf14 <ButtonEmr+0x3d4>
	valor = (0xFF + 0x01) - valor;
 800cf66:	f1c1 064c 	rsb	r6, r1, #76	; 0x4c
      	ENVIO[0] = 0X7E;
 800cf6a:	237e      	movs	r3, #126	; 0x7e
      	ENVIO[2] = 0XFF;
 800cf6c:	25ff      	movs	r5, #255	; 0xff
      	ENVIO[3] = 0X47;
 800cf6e:	2047      	movs	r0, #71	; 0x47
      	ENVIO[4] = 0X6E;
 800cf70:	226e      	movs	r2, #110	; 0x6e
 800cf72:	e7cf      	b.n	800cf14 <ButtonEmr+0x3d4>
		valor = Data[i] + valor;
 800cf74:	f501 73ad 	add.w	r3, r1, #346	; 0x15a
      	ENVIO[4] = 0X07;
 800cf78:	2007      	movs	r0, #7
      	ENVIO[0] = 0X7E;
 800cf7a:	227e      	movs	r2, #126	; 0x7e
	valor = (0xFF + 0x01) - valor;
 800cf7c:	425b      	negs	r3, r3
      	ENVIO[2] = 0XFF;
 800cf7e:	26ff      	movs	r6, #255	; 0xff
      	ENVIO[3] = 0X54;
 800cf80:	2554      	movs	r5, #84	; 0x54
      	ENVIO[6] = 0X7E;
 800cf82:	4604      	mov	r4, r0
      	ENVIO[1] = pos;
 800cf84:	f88d 101d 	strb.w	r1, [sp, #29]
	valor_envio = (valor & 0xFF);
 800cf88:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
      	ENVIO[4] = 0X07;
 800cf8c:	f88d 0020 	strb.w	r0, [sp, #32]
      	ENVIO[0] = 0X7E;
 800cf90:	f88d 201c 	strb.w	r2, [sp, #28]
      	ENVIO[6] = 0X7E;
 800cf94:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
      	ENVIO[2] = 0XFF;
 800cf98:	f88d 601e 	strb.w	r6, [sp, #30]
      	ENVIO[3] = 0X54;
 800cf9c:	f88d 501f 	strb.w	r5, [sp, #31]
 800cfa0:	e663      	b.n	800cc6a <ButtonEmr+0x12a>
		ENVIO[0] = 0X7E;
 800cfa2:	247e      	movs	r4, #126	; 0x7e
		ENVIO[3] = 'E';
 800cfa4:	2245      	movs	r2, #69	; 0x45
		ENVIO[4] = 16;
 800cfa6:	2310      	movs	r3, #16
		chThdSleepMilliseconds(1);
 800cfa8:	200a      	movs	r0, #10
		ENVIO[2] = 0XFF;
 800cfaa:	25ff      	movs	r5, #255	; 0xff
		ENVIO[1] = pos;
 800cfac:	f88d 101d 	strb.w	r1, [sp, #29]
		ENVIO[0] = 0X7E;
 800cfb0:	f88d 401c 	strb.w	r4, [sp, #28]
		ENVIO[3] = 'E';
 800cfb4:	f88d 201f 	strb.w	r2, [sp, #31]
		ENVIO[4] = 16;
 800cfb8:	f88d 3020 	strb.w	r3, [sp, #32]
		ENVIO[2] = 0XFF;
 800cfbc:	f88d 501e 	strb.w	r5, [sp, #30]
		chThdSleepMilliseconds(1);
 800cfc0:	f7ff fd3e 	bl	800ca40 <chThdSleep>
		valor = Data[i] + valor;
 800cfc4:	f89d 001e 	ldrb.w	r0, [sp, #30]
 800cfc8:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800cfcc:	f89d 101f 	ldrb.w	r1, [sp, #31]
 800cfd0:	f89d 2020 	ldrb.w	r2, [sp, #32]
		ENVIO[6] = 0X7E;
 800cfd4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
		valor = Data[i] + valor;
 800cfd8:	4403      	add	r3, r0
 800cfda:	440b      	add	r3, r1
 800cfdc:	4413      	add	r3, r2
	valor = (0xFF + 0x01) - valor;
 800cfde:	425b      	negs	r3, r3
		ENVIO[6] = 0X7E;
 800cfe0:	2407      	movs	r4, #7
	valor_envio = (valor & 0xFF);
 800cfe2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		P=7;
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	e63f      	b.n	800cc6a <ButtonEmr+0x12a>
 800cfea:	bf00      	nop
 800cfec:	20001c74 	.word	0x20001c74
 800cff0:	4bb4      	ldr	r3, [pc, #720]	; (800d2c4 <ButtonEmr+0x784>)
		ENVIO_aux[1] = pos;
 800cff2:	f88d 1009 	strb.w	r1, [sp, #9]
 800cff6:	f893 0079 	ldrb.w	r0, [r3, #121]	; 0x79
 800cffa:	f893 407a 	ldrb.w	r4, [r3, #122]	; 0x7a
 800cffe:	f893 507b 	ldrb.w	r5, [r3, #123]	; 0x7b
 800d002:	f893 607c 	ldrb.w	r6, [r3, #124]	; 0x7c
		ENVIO[1] = pos;
 800d006:	f88d 101d 	strb.w	r1, [sp, #29]
		ENVIO_aux[0] = 0X7E;
 800d00a:	277e      	movs	r7, #126	; 0x7e
		ENVIO_aux[2] = 0XFF;
 800d00c:	21ff      	movs	r1, #255	; 0xff
		ENVIO_aux[3] = 0X53;
 800d00e:	2253      	movs	r2, #83	; 0x53
		ENVIO_aux[4] = 0X6E;
 800d010:	236e      	movs	r3, #110	; 0x6e
		if(read_eeprom(ieee_1) == 0x7E)
 800d012:	42b8      	cmp	r0, r7
		ENVIO_aux[5] = read_eeprom(ieee_1);
 800d014:	f88d 000d 	strb.w	r0, [sp, #13]
		ENVIO[P] = read_eeprom(ieee_1);
 800d018:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
		ENVIO_aux[6] = read_eeprom(ieee_2);
 800d01c:	f88d 400e 	strb.w	r4, [sp, #14]
		ENVIO_aux[7] = read_eeprom(ieee_3);
 800d020:	f88d 500f 	strb.w	r5, [sp, #15]
		ENVIO_aux[8] = read_eeprom(ieee_4);
 800d024:	f88d 6010 	strb.w	r6, [sp, #16]
		ENVIO_aux[0] = 0X7E;
 800d028:	f88d 7008 	strb.w	r7, [sp, #8]
		ENVIO[0] = 0X7E;
 800d02c:	f88d 701c 	strb.w	r7, [sp, #28]
		ENVIO_aux[2] = 0XFF;
 800d030:	f88d 100a 	strb.w	r1, [sp, #10]
		ENVIO[2] = 0XFF;
 800d034:	f88d 101e 	strb.w	r1, [sp, #30]
		ENVIO_aux[3] = 0X53;
 800d038:	f88d 200b 	strb.w	r2, [sp, #11]
		ENVIO[3] = 0X53;
 800d03c:	f88d 201f 	strb.w	r2, [sp, #31]
		ENVIO_aux[4] = 0X6E;
 800d040:	f88d 300c 	strb.w	r3, [sp, #12]
		ENVIO[4] = 0X6E;
 800d044:	f88d 3020 	strb.w	r3, [sp, #32]
		if(read_eeprom(ieee_1) == 0x7E)
 800d048:	f040 8133 	bne.w	800d2b2 <ButtonEmr+0x772>
			ENVIO[P] = 0X7D;
 800d04c:	227d      	movs	r2, #125	; 0x7d
			ENVIO[P] = 0x5E;
 800d04e:	235e      	movs	r3, #94	; 0x5e
			ENVIO[P] = 0X7D;
 800d050:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
			ENVIO[P] = 0x5E;
 800d054:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			P++;
 800d058:	2206      	movs	r2, #6
		P++;
 800d05a:	1c51      	adds	r1, r2, #1
		ENVIO[P] = read_eeprom(ieee_2);
 800d05c:	ab0c      	add	r3, sp, #48	; 0x30
 800d05e:	440b      	add	r3, r1
		if(read_eeprom(ieee_2) == 0x7E)
 800d060:	2c7e      	cmp	r4, #126	; 0x7e
		ENVIO[P] = read_eeprom(ieee_2);
 800d062:	f803 4c14 	strb.w	r4, [r3, #-20]
		if(read_eeprom(ieee_2) == 0x7E)
 800d066:	f040 811a 	bne.w	800d29e <ButtonEmr+0x75e>
			P++;
 800d06a:	1c91      	adds	r1, r2, #2
			ENVIO[P] = 0x5E;
 800d06c:	aa0c      	add	r2, sp, #48	; 0x30
 800d06e:	440a      	add	r2, r1
			ENVIO[P] = 0X7D;
 800d070:	277d      	movs	r7, #125	; 0x7d
			ENVIO[P] = 0x5E;
 800d072:	245e      	movs	r4, #94	; 0x5e
			ENVIO[P] = 0X7D;
 800d074:	f803 7c14 	strb.w	r7, [r3, #-20]
			ENVIO[P] = 0x5E;
 800d078:	f802 4c14 	strb.w	r4, [r2, #-20]
		P++;
 800d07c:	1c4b      	adds	r3, r1, #1
 800d07e:	b2db      	uxtb	r3, r3
		ENVIO[P] = read_eeprom(ieee_3);
 800d080:	aa0c      	add	r2, sp, #48	; 0x30
 800d082:	441a      	add	r2, r3
		if(read_eeprom(ieee_1) == 0x7E)
 800d084:	287e      	cmp	r0, #126	; 0x7e
		ENVIO[P] = read_eeprom(ieee_3);
 800d086:	f802 5c14 	strb.w	r5, [r2, #-20]
		if(read_eeprom(ieee_1) == 0x7E)
 800d08a:	f040 80fd 	bne.w	800d288 <ButtonEmr+0x748>
			P++;
 800d08e:	1c8b      	adds	r3, r1, #2
 800d090:	b2db      	uxtb	r3, r3
			ENVIO[P] = 0x5E;
 800d092:	a90c      	add	r1, sp, #48	; 0x30
 800d094:	4419      	add	r1, r3
			ENVIO[P] = 0X7D;
 800d096:	247d      	movs	r4, #125	; 0x7d
			ENVIO[P] = 0x5E;
 800d098:	205e      	movs	r0, #94	; 0x5e
			ENVIO[P] = 0X7D;
 800d09a:	f802 4c14 	strb.w	r4, [r2, #-20]
			ENVIO[P] = 0x5E;
 800d09e:	f801 0c14 	strb.w	r0, [r1, #-20]
		P++;
 800d0a2:	1c5c      	adds	r4, r3, #1
 800d0a4:	b2e5      	uxtb	r5, r4
		ENVIO[P] = read_eeprom(ieee_4);
 800d0a6:	aa0c      	add	r2, sp, #48	; 0x30
 800d0a8:	442a      	add	r2, r5
		if(read_eeprom(ieee_4) == 0x7E)
 800d0aa:	2e7e      	cmp	r6, #126	; 0x7e
		ENVIO[P] = read_eeprom(ieee_4);
 800d0ac:	f802 6c14 	strb.w	r6, [r2, #-20]
		if(read_eeprom(ieee_4) == 0x7E)
 800d0b0:	f040 80df 	bne.w	800d272 <ButtonEmr+0x732>
			P++;
 800d0b4:	3302      	adds	r3, #2
 800d0b6:	b2dd      	uxtb	r5, r3
			ENVIO[P] = 0x5E;
 800d0b8:	ab0c      	add	r3, sp, #48	; 0x30
 800d0ba:	442b      	add	r3, r5
			ENVIO[P] = 0X7D;
 800d0bc:	207d      	movs	r0, #125	; 0x7d
			ENVIO[P] = 0x5E;
 800d0be:	215e      	movs	r1, #94	; 0x5e
			ENVIO[P] = 0X7D;
 800d0c0:	f802 0c14 	strb.w	r0, [r2, #-20]
			ENVIO[P] = 0x5E;
 800d0c4:	f803 1c14 	strb.w	r1, [r3, #-20]
		P++;
 800d0c8:	1c6b      	adds	r3, r5, #1
		chThdSleepMilliseconds(1);
 800d0ca:	200a      	movs	r0, #10
		P++;
 800d0cc:	b2dc      	uxtb	r4, r3
		chThdSleepMilliseconds(1);
 800d0ce:	f7ff fcb7 	bl	800ca40 <chThdSleep>
		ENVIO[P] = che_emr3(ENVIO_aux,9);
 800d0d2:	2200      	movs	r2, #0
	uint16_t valor=0;
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	a902      	add	r1, sp, #8
		valor = Data[i] + valor;
 800d0d8:	1888      	adds	r0, r1, r2
 800d0da:	3201      	adds	r2, #1
 800d0dc:	7840      	ldrb	r0, [r0, #1]
	for(i=1; i<P; i++)
 800d0de:	2a08      	cmp	r2, #8
		valor = Data[i] + valor;
 800d0e0:	4403      	add	r3, r0
 800d0e2:	b29b      	uxth	r3, r3
	for(i=1; i<P; i++)
 800d0e4:	d1f8      	bne.n	800d0d8 <ButtonEmr+0x598>
	valor = (0xFF + 0x01) - valor;
 800d0e6:	425b      	negs	r3, r3
		ENVIO[P] = che_emr3(ENVIO_aux,9);
 800d0e8:	aa0c      	add	r2, sp, #48	; 0x30
	valor_envio = (valor & 0xFF);
 800d0ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
		ENVIO[P] = che_emr3(ENVIO_aux,9);
 800d0ee:	4422      	add	r2, r4
		if(ENVIO[P] == 0x7E)
 800d0f0:	2b7e      	cmp	r3, #126	; 0x7e
		ENVIO[P] = che_emr3(ENVIO_aux,9);
 800d0f2:	f802 3c14 	strb.w	r3, [r2, #-20]
		if(ENVIO[P] == 0x7E)
 800d0f6:	f000 808c 	beq.w	800d212 <ButtonEmr+0x6d2>
		else if (ENVIO[P] == 0x7D)
 800d0fa:	2b7d      	cmp	r3, #125	; 0x7d
 800d0fc:	d106      	bne.n	800d10c <ButtonEmr+0x5cc>
			P++;
 800d0fe:	1cac      	adds	r4, r5, #2
 800d100:	b2e4      	uxtb	r4, r4
			ENVIO[P] = 0x5D;
 800d102:	ab0c      	add	r3, sp, #48	; 0x30
 800d104:	4423      	add	r3, r4
 800d106:	225d      	movs	r2, #93	; 0x5d
 800d108:	f803 2c14 	strb.w	r2, [r3, #-20]
		P++;
 800d10c:	1c63      	adds	r3, r4, #1
		ENVIO[P] = 0X7E;
 800d10e:	aa0c      	add	r2, sp, #48	; 0x30
 800d110:	fa52 f383 	uxtab	r3, r2, r3
		P++;		
 800d114:	3402      	adds	r4, #2
 800d116:	b2e4      	uxtb	r4, r4
		ENVIO[P] = 0X7E;
 800d118:	227e      	movs	r2, #126	; 0x7e
 800d11a:	f803 2c14 	strb.w	r2, [r3, #-20]
 800d11e:	4620      	mov	r0, r4
 800d120:	e5a3      	b.n	800cc6a <ButtonEmr+0x12a>
 800d122:	4b68      	ldr	r3, [pc, #416]	; (800d2c4 <ButtonEmr+0x784>)
		ENVIO_aux[1] = pos;
 800d124:	f88d 1009 	strb.w	r1, [sp, #9]
 800d128:	f893 4079 	ldrb.w	r4, [r3, #121]	; 0x79
 800d12c:	f893 007a 	ldrb.w	r0, [r3, #122]	; 0x7a
 800d130:	f893 507b 	ldrb.w	r5, [r3, #123]	; 0x7b
 800d134:	f893 607c 	ldrb.w	r6, [r3, #124]	; 0x7c
		ENVIO[1] = pos;
 800d138:	f88d 101d 	strb.w	r1, [sp, #29]
		ENVIO_aux[0] = 0X7E;
 800d13c:	277e      	movs	r7, #126	; 0x7e
		ENVIO_aux[2] = 0XFF;
 800d13e:	21ff      	movs	r1, #255	; 0xff
		ENVIO_aux[3] = 0X4F;
 800d140:	224f      	movs	r2, #79	; 0x4f
		ENVIO_aux[4] = 0X08;
 800d142:	2308      	movs	r3, #8
		if(read_eeprom(ieee_1) == 0x7E)
 800d144:	42bc      	cmp	r4, r7
		ENVIO_aux[5] = read_eeprom(ieee_1);
 800d146:	f88d 400d 	strb.w	r4, [sp, #13]
		ENVIO[P] = read_eeprom(ieee_1);
 800d14a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
		ENVIO_aux[6] = read_eeprom(ieee_2);
 800d14e:	f88d 000e 	strb.w	r0, [sp, #14]
		ENVIO_aux[7] = read_eeprom(ieee_3);
 800d152:	f88d 500f 	strb.w	r5, [sp, #15]
		ENVIO_aux[8] = read_eeprom(ieee_4);
 800d156:	f88d 6010 	strb.w	r6, [sp, #16]
		ENVIO_aux[0] = 0X7E;
 800d15a:	f88d 7008 	strb.w	r7, [sp, #8]
		ENVIO[0] = 0X7E;
 800d15e:	f88d 701c 	strb.w	r7, [sp, #28]
		ENVIO_aux[2] = 0XFF;
 800d162:	f88d 100a 	strb.w	r1, [sp, #10]
		ENVIO[2] = 0XFF;
 800d166:	f88d 101e 	strb.w	r1, [sp, #30]
		ENVIO_aux[3] = 0X4F;
 800d16a:	f88d 200b 	strb.w	r2, [sp, #11]
		ENVIO[3] = 0X4F;
 800d16e:	f88d 201f 	strb.w	r2, [sp, #31]
		ENVIO_aux[4] = 0X08;
 800d172:	f88d 300c 	strb.w	r3, [sp, #12]
		ENVIO[4] = 0X08;
 800d176:	f88d 3020 	strb.w	r3, [sp, #32]
		if(read_eeprom(ieee_1) == 0x7E)
 800d17a:	d172      	bne.n	800d262 <ButtonEmr+0x722>
			ENVIO[P] = 0x5E;
 800d17c:	235e      	movs	r3, #94	; 0x5e
			ENVIO[P] = 0X7D;
 800d17e:	227d      	movs	r2, #125	; 0x7d
			ENVIO[P] = 0x5E;
 800d180:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			ENVIO[P] = 0X7D;
 800d184:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
			P++;
 800d188:	2306      	movs	r3, #6
		P++;
 800d18a:	1c5a      	adds	r2, r3, #1
		ENVIO[P] = read_eeprom(ieee_2);
 800d18c:	a90c      	add	r1, sp, #48	; 0x30
 800d18e:	4411      	add	r1, r2
		if(read_eeprom(ieee_2) == 0x7E)
 800d190:	287e      	cmp	r0, #126	; 0x7e
		ENVIO[P] = read_eeprom(ieee_2);
 800d192:	f801 0c14 	strb.w	r0, [r1, #-20]
		if(read_eeprom(ieee_2) == 0x7E)
 800d196:	d15b      	bne.n	800d250 <ButtonEmr+0x710>
			P++;
 800d198:	1c9a      	adds	r2, r3, #2
			ENVIO[P] = 0x5E;
 800d19a:	ab0c      	add	r3, sp, #48	; 0x30
 800d19c:	4413      	add	r3, r2
			ENVIO[P] = 0X7D;
 800d19e:	277d      	movs	r7, #125	; 0x7d
			ENVIO[P] = 0x5E;
 800d1a0:	205e      	movs	r0, #94	; 0x5e
			ENVIO[P] = 0X7D;
 800d1a2:	f801 7c14 	strb.w	r7, [r1, #-20]
			ENVIO[P] = 0x5E;
 800d1a6:	f803 0c14 	strb.w	r0, [r3, #-20]
		P++;
 800d1aa:	1c53      	adds	r3, r2, #1
 800d1ac:	b2db      	uxtb	r3, r3
		ENVIO[P] = read_eeprom(ieee_3);
 800d1ae:	a90c      	add	r1, sp, #48	; 0x30
 800d1b0:	4419      	add	r1, r3
		if(read_eeprom(ieee_1) == 0x7E)
 800d1b2:	2c7e      	cmp	r4, #126	; 0x7e
		ENVIO[P] = read_eeprom(ieee_3);
 800d1b4:	f801 5c14 	strb.w	r5, [r1, #-20]
		if(read_eeprom(ieee_1) == 0x7E)
 800d1b8:	d140      	bne.n	800d23c <ButtonEmr+0x6fc>
			P++;
 800d1ba:	1c93      	adds	r3, r2, #2
 800d1bc:	b2db      	uxtb	r3, r3
			ENVIO[P] = 0x5E;
 800d1be:	aa0c      	add	r2, sp, #48	; 0x30
 800d1c0:	441a      	add	r2, r3
			ENVIO[P] = 0X7D;
 800d1c2:	247d      	movs	r4, #125	; 0x7d
			ENVIO[P] = 0x5E;
 800d1c4:	205e      	movs	r0, #94	; 0x5e
			ENVIO[P] = 0X7D;
 800d1c6:	f801 4c14 	strb.w	r4, [r1, #-20]
			ENVIO[P] = 0x5E;
 800d1ca:	f802 0c14 	strb.w	r0, [r2, #-20]
		P++;
 800d1ce:	1c5c      	adds	r4, r3, #1
 800d1d0:	b2e5      	uxtb	r5, r4
		ENVIO[P] = read_eeprom(ieee_4);
 800d1d2:	aa0c      	add	r2, sp, #48	; 0x30
 800d1d4:	442a      	add	r2, r5
		if(read_eeprom(ieee_4) == 0x7E)
 800d1d6:	2e7e      	cmp	r6, #126	; 0x7e
		ENVIO[P] = read_eeprom(ieee_4);
 800d1d8:	f802 6c14 	strb.w	r6, [r2, #-20]
		if(read_eeprom(ieee_4) == 0x7E)
 800d1dc:	d124      	bne.n	800d228 <ButtonEmr+0x6e8>
			P++;
 800d1de:	3302      	adds	r3, #2
 800d1e0:	b2dd      	uxtb	r5, r3
			ENVIO[P] = 0x5E;
 800d1e2:	ab0c      	add	r3, sp, #48	; 0x30
 800d1e4:	442b      	add	r3, r5
			ENVIO[P] = 0X7D;
 800d1e6:	207d      	movs	r0, #125	; 0x7d
			ENVIO[P] = 0x5E;
 800d1e8:	215e      	movs	r1, #94	; 0x5e
			ENVIO[P] = 0X7D;
 800d1ea:	f802 0c14 	strb.w	r0, [r2, #-20]
			ENVIO[P] = 0x5E;
 800d1ee:	f803 1c14 	strb.w	r1, [r3, #-20]
		P++;
 800d1f2:	1c6b      	adds	r3, r5, #1
		chThdSleepMilliseconds(1);
 800d1f4:	200a      	movs	r0, #10
		P++;
 800d1f6:	b2dc      	uxtb	r4, r3
		chThdSleepMilliseconds(1);
 800d1f8:	f7ff fc22 	bl	800ca40 <chThdSleep>
		ENVIO[P] = che_emr3(ENVIO_aux,9);
 800d1fc:	2200      	movs	r2, #0
	uint16_t valor=0;
 800d1fe:	4613      	mov	r3, r2
 800d200:	a902      	add	r1, sp, #8
		valor = Data[i] + valor;
 800d202:	1888      	adds	r0, r1, r2
 800d204:	3201      	adds	r2, #1
 800d206:	7840      	ldrb	r0, [r0, #1]
	for(i=1; i<P; i++)
 800d208:	2a08      	cmp	r2, #8
		valor = Data[i] + valor;
 800d20a:	4403      	add	r3, r0
 800d20c:	b29b      	uxth	r3, r3
	for(i=1; i<P; i++)
 800d20e:	d1f8      	bne.n	800d202 <ButtonEmr+0x6c2>
 800d210:	e769      	b.n	800d0e6 <ButtonEmr+0x5a6>
			P++;
 800d212:	1cab      	adds	r3, r5, #2
 800d214:	b2dc      	uxtb	r4, r3
			ENVIO[P] = 0x5E;
 800d216:	ab0c      	add	r3, sp, #48	; 0x30
 800d218:	4423      	add	r3, r4
			ENVIO[P] = 0X7D;
 800d21a:	207d      	movs	r0, #125	; 0x7d
			ENVIO[P] = 0x5E;
 800d21c:	215e      	movs	r1, #94	; 0x5e
			ENVIO[P] = 0X7D;
 800d21e:	f802 0c14 	strb.w	r0, [r2, #-20]
			ENVIO[P] = 0x5E;
 800d222:	f803 1c14 	strb.w	r1, [r3, #-20]
 800d226:	e771      	b.n	800d10c <ButtonEmr+0x5cc>
		else if (read_eeprom(ieee_4) == 0x7D)
 800d228:	2e7d      	cmp	r6, #125	; 0x7d
 800d22a:	d1e2      	bne.n	800d1f2 <ButtonEmr+0x6b2>
			P++;
 800d22c:	3302      	adds	r3, #2
 800d22e:	b2dd      	uxtb	r5, r3
			ENVIO[P] = 0x5D;
 800d230:	ab0c      	add	r3, sp, #48	; 0x30
 800d232:	442b      	add	r3, r5
 800d234:	225d      	movs	r2, #93	; 0x5d
 800d236:	f803 2c14 	strb.w	r2, [r3, #-20]
 800d23a:	e7da      	b.n	800d1f2 <ButtonEmr+0x6b2>
		else if (read_eeprom(ieee_3) == 0x7D)
 800d23c:	2d7d      	cmp	r5, #125	; 0x7d
 800d23e:	d1c6      	bne.n	800d1ce <ButtonEmr+0x68e>
			P++;
 800d240:	1c93      	adds	r3, r2, #2
 800d242:	b2db      	uxtb	r3, r3
			ENVIO[P] = 0x5D;
 800d244:	aa0c      	add	r2, sp, #48	; 0x30
 800d246:	441a      	add	r2, r3
 800d248:	215d      	movs	r1, #93	; 0x5d
 800d24a:	f802 1c14 	strb.w	r1, [r2, #-20]
 800d24e:	e7be      	b.n	800d1ce <ButtonEmr+0x68e>
		else if (read_eeprom(ieee_2) == 0x7D)
 800d250:	287d      	cmp	r0, #125	; 0x7d
 800d252:	d1aa      	bne.n	800d1aa <ButtonEmr+0x66a>
			P++;
 800d254:	1c9a      	adds	r2, r3, #2
			ENVIO[P] = 0x5D;
 800d256:	ab0c      	add	r3, sp, #48	; 0x30
 800d258:	4413      	add	r3, r2
 800d25a:	215d      	movs	r1, #93	; 0x5d
 800d25c:	f803 1c14 	strb.w	r1, [r3, #-20]
 800d260:	e7a3      	b.n	800d1aa <ButtonEmr+0x66a>
		else if (read_eeprom(ieee_1) == 0x7D)
 800d262:	2c7d      	cmp	r4, #125	; 0x7d
			ENVIO[P] = 0x5D;
 800d264:	bf05      	ittet	eq
 800d266:	235d      	moveq	r3, #93	; 0x5d
 800d268:	f88d 3022 	strbeq.w	r3, [sp, #34]	; 0x22
		P=5;
 800d26c:	2305      	movne	r3, #5
			P++;
 800d26e:	2306      	moveq	r3, #6
 800d270:	e78b      	b.n	800d18a <ButtonEmr+0x64a>
		else if (read_eeprom(ieee_4) == 0x7D)
 800d272:	2e7d      	cmp	r6, #125	; 0x7d
 800d274:	f47f af28 	bne.w	800d0c8 <ButtonEmr+0x588>
			P++;
 800d278:	3302      	adds	r3, #2
 800d27a:	b2dd      	uxtb	r5, r3
			ENVIO[P] = 0x5D;
 800d27c:	ab0c      	add	r3, sp, #48	; 0x30
 800d27e:	442b      	add	r3, r5
 800d280:	225d      	movs	r2, #93	; 0x5d
 800d282:	f803 2c14 	strb.w	r2, [r3, #-20]
 800d286:	e71f      	b.n	800d0c8 <ButtonEmr+0x588>
		else if (read_eeprom(ieee_3) == 0x7D)
 800d288:	2d7d      	cmp	r5, #125	; 0x7d
 800d28a:	f47f af0a 	bne.w	800d0a2 <ButtonEmr+0x562>
			P++;
 800d28e:	1c8b      	adds	r3, r1, #2
 800d290:	b2db      	uxtb	r3, r3
			ENVIO[P] = 0x5D;
 800d292:	aa0c      	add	r2, sp, #48	; 0x30
 800d294:	441a      	add	r2, r3
 800d296:	215d      	movs	r1, #93	; 0x5d
 800d298:	f802 1c14 	strb.w	r1, [r2, #-20]
 800d29c:	e701      	b.n	800d0a2 <ButtonEmr+0x562>
		else if (read_eeprom(ieee_2) == 0x7D)
 800d29e:	2c7d      	cmp	r4, #125	; 0x7d
 800d2a0:	f47f aeec 	bne.w	800d07c <ButtonEmr+0x53c>
			P++;
 800d2a4:	1c91      	adds	r1, r2, #2
			ENVIO[P] = 0x5D;
 800d2a6:	ab0c      	add	r3, sp, #48	; 0x30
 800d2a8:	440b      	add	r3, r1
 800d2aa:	225d      	movs	r2, #93	; 0x5d
 800d2ac:	f803 2c14 	strb.w	r2, [r3, #-20]
 800d2b0:	e6e4      	b.n	800d07c <ButtonEmr+0x53c>
		else if (read_eeprom(ieee_1) == 0x7D)
 800d2b2:	287d      	cmp	r0, #125	; 0x7d
			ENVIO[P] = 0x5D;
 800d2b4:	bf03      	ittte	eq
 800d2b6:	235d      	moveq	r3, #93	; 0x5d
 800d2b8:	f88d 3022 	strbeq.w	r3, [sp, #34]	; 0x22
			P++;
 800d2bc:	2206      	moveq	r2, #6
		P=5;
 800d2be:	2205      	movne	r2, #5
 800d2c0:	e6cb      	b.n	800d05a <ButtonEmr+0x51a>
 800d2c2:	bf00      	nop
 800d2c4:	20001c74 	.word	0x20001c74
	...

0800d2d0 <rxend.lto_priv.76>:
	dato_emr3[num] = inf;
 800d2d0:	4b02      	ldr	r3, [pc, #8]	; (800d2dc <rxend.lto_priv.76+0xc>)
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800d2d8:	4770      	bx	lr
 800d2da:	bf00      	nop
 800d2dc:	20001c74 	.word	0x20001c74

0800d2e0 <espe_wire>:
    for(i=1; i<tamano; i++)
 800d2e0:	2901      	cmp	r1, #1
 800d2e2:	d952      	bls.n	800d38a <espe_wire+0xaa>
{
 800d2e4:	b4f0      	push	{r4, r5, r6, r7}
 800d2e6:	1e8e      	subs	r6, r1, #2
 800d2e8:	f026 0601 	bic.w	r6, r6, #1
 800d2ec:	3604      	adds	r6, #4
 800d2ee:	b2f6      	uxtb	r6, r6
 800d2f0:	4605      	mov	r5, r0
    for(i=1; i<tamano; i++)
 800d2f2:	2102      	movs	r1, #2
 800d2f4:	2700      	movs	r7, #0
        if(vec[i] >= 0xC0)
 800d2f6:	786b      	ldrb	r3, [r5, #1]
        if(vec[i] >= 0xC0)
 800d2f8:	5c44      	ldrb	r4, [r0, r1]
            aux_ch = (vec[i] & 0X0F);
 800d2fa:	f003 020f 	and.w	r2, r3, #15
            aux_ch = ((aux_ch + 0x09) << 4);
 800d2fe:	3209      	adds	r2, #9
        if(vec[i] >= 0xC0)
 800d300:	2bbf      	cmp	r3, #191	; 0xbf
            aux_ch = ((aux_ch + 0x09) << 4);
 800d302:	ea4f 1202 	mov.w	r2, r2, lsl #4
           aux_ch = ((vec[i] & 0X0F) << 4); 
 800d306:	bf94      	ite	ls
 800d308:	011b      	lslls	r3, r3, #4
            aux_ch = ((aux_ch + 0x09) << 4);
 800d30a:	b2d3      	uxtbhi	r3, r2
            valor_sum = valor_sum + (aux_ch | ((vec[i] & 0X0F) + 0x09)); 
 800d30c:	f004 020f 	and.w	r2, r4, #15
           aux_ch = ((vec[i] & 0X0F) << 4); 
 800d310:	bf98      	it	ls
 800d312:	b2db      	uxtbls	r3, r3
            valor_sum = valor_sum + (aux_ch | ((vec[i] & 0X0F) + 0x09)); 
 800d314:	3209      	adds	r2, #9
        if(vec[i] >= 0xC0)
 800d316:	2cbf      	cmp	r4, #191	; 0xbf
            valor_sum = valor_sum + (aux_ch | (vec[i] & 0X0F)); 
 800d318:	f004 040f 	and.w	r4, r4, #15
            valor_sum = valor_sum + (aux_ch | ((vec[i] & 0X0F) + 0x09)); 
 800d31c:	ea42 0203 	orr.w	r2, r2, r3
 800d320:	f101 0102 	add.w	r1, r1, #2
            valor_sum = valor_sum + (aux_ch | (vec[i] & 0X0F)); 
 800d324:	bf98      	it	ls
 800d326:	4323      	orrls	r3, r4
            valor_sum = valor_sum + (aux_ch | ((vec[i] & 0X0F) + 0x09)); 
 800d328:	443a      	add	r2, r7
            valor_sum = valor_sum + (aux_ch | (vec[i] & 0X0F)); 
 800d32a:	bf98      	it	ls
 800d32c:	19db      	addls	r3, r3, r7
 800d32e:	b2c9      	uxtb	r1, r1
            valor_sum = valor_sum + (aux_ch | ((vec[i] & 0X0F) + 0x09)); 
 800d330:	bf8c      	ite	hi
 800d332:	b297      	uxthhi	r7, r2
            valor_sum = valor_sum + (aux_ch | (vec[i] & 0X0F)); 
 800d334:	b29f      	uxthls	r7, r3
    for(i=1; i<tamano; i++)
 800d336:	428e      	cmp	r6, r1
 800d338:	f105 0502 	add.w	r5, r5, #2
 800d33c:	d1db      	bne.n	800d2f6 <espe_wire+0x16>
    valor_sum = valor_sum & 0XFF;
 800d33e:	b2fb      	uxtb	r3, r7
    valor_sum = (0xFF + 0x01) - valor_sum;
 800d340:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800d344:	b29b      	uxth	r3, r3
    valor_aux = ((valor_sum >> 4) & 0X0F);
 800d346:	f3c3 1203 	ubfx	r2, r3, #4, #4
    if(valor_aux >= 0x0A)
 800d34a:	2a09      	cmp	r2, #9
 800d34c:	d90e      	bls.n	800d36c <espe_wire+0x8c>
       chec1 = (0XC0 | (valor_aux - 0X09));             
 800d34e:	3a09      	subs	r2, #9
 800d350:	4916      	ldr	r1, [pc, #88]	; (800d3ac <espe_wire+0xcc>)
 800d352:	f003 030f 	and.w	r3, r3, #15
 800d356:	f062 023f 	orn	r2, r2, #63	; 0x3f
    if(valor_aux >= 0x0A)
 800d35a:	2b09      	cmp	r3, #9
       chec1 = (0XC0 | (valor_aux - 0X09));             
 800d35c:	700a      	strb	r2, [r1, #0]
    if(valor_aux >= 0x0A)
 800d35e:	d80d      	bhi.n	800d37c <espe_wire+0x9c>
    else chec2 = (0XB0 | valor_aux);
 800d360:	4a13      	ldr	r2, [pc, #76]	; (800d3b0 <espe_wire+0xd0>)
 800d362:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800d366:	7013      	strb	r3, [r2, #0]
}
 800d368:	bcf0      	pop	{r4, r5, r6, r7}
 800d36a:	4770      	bx	lr
 800d36c:	f003 030f 	and.w	r3, r3, #15
    else chec1 = (0XB0 | valor_aux); 
 800d370:	490e      	ldr	r1, [pc, #56]	; (800d3ac <espe_wire+0xcc>)
 800d372:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
    if(valor_aux >= 0x0A)
 800d376:	2b09      	cmp	r3, #9
    else chec1 = (0XB0 | valor_aux); 
 800d378:	700a      	strb	r2, [r1, #0]
    if(valor_aux >= 0x0A)
 800d37a:	d9f1      	bls.n	800d360 <espe_wire+0x80>
        chec2 =  (0XC0 | (valor_aux - 0X09));             
 800d37c:	3b09      	subs	r3, #9
 800d37e:	4a0c      	ldr	r2, [pc, #48]	; (800d3b0 <espe_wire+0xd0>)
 800d380:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800d384:	7013      	strb	r3, [r2, #0]
}
 800d386:	bcf0      	pop	{r4, r5, r6, r7}
 800d388:	4770      	bx	lr
    for(i=1; i<tamano; i++)
 800d38a:	2300      	movs	r3, #0
    else chec1 = (0XB0 | valor_aux); 
 800d38c:	4907      	ldr	r1, [pc, #28]	; (800d3ac <espe_wire+0xcc>)
    for(i=1; i<tamano; i++)
 800d38e:	22b0      	movs	r2, #176	; 0xb0
    if(valor_aux >= 0x0A)
 800d390:	2b09      	cmp	r3, #9
    else chec1 = (0XB0 | valor_aux); 
 800d392:	700a      	strb	r2, [r1, #0]
    if(valor_aux >= 0x0A)
 800d394:	d804      	bhi.n	800d3a0 <espe_wire+0xc0>
    else chec2 = (0XB0 | valor_aux);
 800d396:	4a06      	ldr	r2, [pc, #24]	; (800d3b0 <espe_wire+0xd0>)
 800d398:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800d39c:	7013      	strb	r3, [r2, #0]
 800d39e:	4770      	bx	lr
        chec2 =  (0XC0 | (valor_aux - 0X09));             
 800d3a0:	3b09      	subs	r3, #9
 800d3a2:	4a03      	ldr	r2, [pc, #12]	; (800d3b0 <espe_wire+0xd0>)
 800d3a4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800d3a8:	7013      	strb	r3, [r2, #0]
 800d3aa:	4770      	bx	lr
 800d3ac:	200015f8 	.word	0x200015f8
 800d3b0:	200015f9 	.word	0x200015f9
	...

0800d3c0 <venta_ppu>:
    if(niv == 0XF4)
 800d3c0:	28f4      	cmp	r0, #244	; 0xf4
{
 800d3c2:	b470      	push	{r4, r5, r6}
 800d3c4:	4603      	mov	r3, r0
    if(niv == 0XF4)
 800d3c6:	d021      	beq.n	800d40c <venta_ppu+0x4c>
    else if(niv == 0XF5)
 800d3c8:	28f5      	cmp	r0, #245	; 0xf5
 800d3ca:	d001      	beq.n	800d3d0 <venta_ppu+0x10>
}
 800d3cc:	bc70      	pop	{r4, r5, r6}
 800d3ce:	4770      	bx	lr
	return (dato_emr3[num]);
 800d3d0:	4a24      	ldr	r2, [pc, #144]	; (800d464 <venta_ppu+0xa4>)
        if(read_eeprom(estado1) != 0x09 && pos == 0x01)
 800d3d2:	7810      	ldrb	r0, [r2, #0]
 800d3d4:	2809      	cmp	r0, #9
 800d3d6:	d001      	beq.n	800d3dc <venta_ppu+0x1c>
 800d3d8:	2901      	cmp	r1, #1
 800d3da:	d02b      	beq.n	800d434 <venta_ppu+0x74>
        else if(read_eeprom(estado2) != 0x09 && pos == 0x02)
 800d3dc:	7893      	ldrb	r3, [r2, #2]
 800d3de:	2b09      	cmp	r3, #9
 800d3e0:	d0f4      	beq.n	800d3cc <venta_ppu+0xc>
 800d3e2:	2902      	cmp	r1, #2
 800d3e4:	d1f2      	bne.n	800d3cc <venta_ppu+0xc>
	dato_emr3[num] = inf;
 800d3e6:	7b13      	ldrb	r3, [r2, #12]
 800d3e8:	7ad5      	ldrb	r5, [r2, #11]
 800d3ea:	7a94      	ldrb	r4, [r2, #10]
 800d3ec:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            sd_venta(pos);
 800d3f0:	4608      	mov	r0, r1
 800d3f2:	7a51      	ldrb	r1, [r2, #9]
 800d3f4:	23f5      	movs	r3, #245	; 0xf5
 800d3f6:	f882 5093 	strb.w	r5, [r2, #147]	; 0x93
 800d3fa:	f882 4092 	strb.w	r4, [r2, #146]	; 0x92
 800d3fe:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
 800d402:	f882 3097 	strb.w	r3, [r2, #151]	; 0x97
}
 800d406:	bc70      	pop	{r4, r5, r6}
            sd_venta(pos);
 800d408:	f7fd bfea 	b.w	800b3e0 <sd_venta>
	return (dato_emr3[num]);
 800d40c:	4a15      	ldr	r2, [pc, #84]	; (800d464 <venta_ppu+0xa4>)
        if(read_eeprom(estado1) != 0x09 && pos == 0x01)
 800d40e:	7810      	ldrb	r0, [r2, #0]
 800d410:	2809      	cmp	r0, #9
 800d412:	d001      	beq.n	800d418 <venta_ppu+0x58>
 800d414:	2901      	cmp	r1, #1
 800d416:	d01f      	beq.n	800d458 <venta_ppu+0x98>
        else if(read_eeprom(estado2) != 0x09 && pos == 0x02)
 800d418:	7893      	ldrb	r3, [r2, #2]
 800d41a:	2b09      	cmp	r3, #9
 800d41c:	d0d6      	beq.n	800d3cc <venta_ppu+0xc>
 800d41e:	2902      	cmp	r1, #2
 800d420:	d1d4      	bne.n	800d3cc <venta_ppu+0xc>
	dato_emr3[num] = inf;
 800d422:	7a13      	ldrb	r3, [r2, #8]
 800d424:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            sd_venta(pos);
 800d428:	4608      	mov	r0, r1
 800d42a:	79d5      	ldrb	r5, [r2, #7]
 800d42c:	7994      	ldrb	r4, [r2, #6]
 800d42e:	7951      	ldrb	r1, [r2, #5]
 800d430:	23f4      	movs	r3, #244	; 0xf4
 800d432:	e7e0      	b.n	800d3f6 <venta_ppu+0x36>
            sd_venta(pos);
 800d434:	4608      	mov	r0, r1
 800d436:	7b16      	ldrb	r6, [r2, #12]
 800d438:	7ad5      	ldrb	r5, [r2, #11]
 800d43a:	7a94      	ldrb	r4, [r2, #10]
 800d43c:	7a51      	ldrb	r1, [r2, #9]
 800d43e:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
 800d442:	f882 6090 	strb.w	r6, [r2, #144]	; 0x90
 800d446:	f882 508f 	strb.w	r5, [r2, #143]	; 0x8f
 800d44a:	f882 408e 	strb.w	r4, [r2, #142]	; 0x8e
 800d44e:	f882 108d 	strb.w	r1, [r2, #141]	; 0x8d
}
 800d452:	bc70      	pop	{r4, r5, r6}
            sd_venta(pos);
 800d454:	f7fd bfc4 	b.w	800b3e0 <sd_venta>
            sd_venta(pos);
 800d458:	4608      	mov	r0, r1
 800d45a:	7a16      	ldrb	r6, [r2, #8]
 800d45c:	79d5      	ldrb	r5, [r2, #7]
 800d45e:	7994      	ldrb	r4, [r2, #6]
 800d460:	7951      	ldrb	r1, [r2, #5]
 800d462:	e7ec      	b.n	800d43e <venta_ppu+0x7e>
 800d464:	20001c74 	.word	0x20001c74
	...

0800d470 <rx_ppu>:
{
 800d470:	b430      	push	{r4, r5}
    if(niv == 0XF4)
 800d472:	28f4      	cmp	r0, #244	; 0xf4
{
 800d474:	f89d 4008 	ldrb.w	r4, [sp, #8]
    if(niv == 0XF4)
 800d478:	d110      	bne.n	800d49c <rx_ppu+0x2c>
 800d47a:	4d13      	ldr	r5, [pc, #76]	; (800d4c8 <rx_ppu+0x58>)
        write_eeprom(ppu4_level1,(A4 & 0X0F));
 800d47c:	f004 040f 	and.w	r4, r4, #15
        write_eeprom(ppu3_level1,(A3 & 0X0F));
 800d480:	f003 030f 	and.w	r3, r3, #15
        write_eeprom(ppu2_level1,(A2 & 0X0F));
 800d484:	f002 020f 	and.w	r2, r2, #15
        write_eeprom(ppu1_level1,(A1 & 0X0F));
 800d488:	f001 010f 	and.w	r1, r1, #15
 800d48c:	722c      	strb	r4, [r5, #8]
 800d48e:	71eb      	strb	r3, [r5, #7]
 800d490:	71aa      	strb	r2, [r5, #6]
 800d492:	7169      	strb	r1, [r5, #5]
        sd_ppu(0x01);
 800d494:	2001      	movs	r0, #1
}
 800d496:	bc30      	pop	{r4, r5}
        sd_ppu(0x01);
 800d498:	f7fe b8c2 	b.w	800b620 <sd_ppu>
    else if(niv == 0XF5)
 800d49c:	28f5      	cmp	r0, #245	; 0xf5
 800d49e:	d110      	bne.n	800d4c2 <rx_ppu+0x52>
 800d4a0:	4d09      	ldr	r5, [pc, #36]	; (800d4c8 <rx_ppu+0x58>)
        write_eeprom(ppu4_level2,(A4 & 0X0F));
 800d4a2:	f004 040f 	and.w	r4, r4, #15
        write_eeprom(ppu3_level2,(A3 & 0X0F));
 800d4a6:	f003 030f 	and.w	r3, r3, #15
        write_eeprom(ppu2_level2,(A2 & 0X0F));
 800d4aa:	f002 020f 	and.w	r2, r2, #15
        write_eeprom(ppu1_level2,(A1 & 0X0F));
 800d4ae:	f001 010f 	and.w	r1, r1, #15
 800d4b2:	732c      	strb	r4, [r5, #12]
 800d4b4:	72eb      	strb	r3, [r5, #11]
 800d4b6:	72aa      	strb	r2, [r5, #10]
 800d4b8:	7269      	strb	r1, [r5, #9]
        sd_ppu(0x02);
 800d4ba:	2002      	movs	r0, #2
}
 800d4bc:	bc30      	pop	{r4, r5}
        sd_ppu(0x02);
 800d4be:	f7fe b8af 	b.w	800b620 <sd_ppu>
}
 800d4c2:	bc30      	pop	{r4, r5}
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop
 800d4c8:	20001c74 	.word	0x20001c74
 800d4cc:	00000000 	.word	0x00000000

0800d4d0 <Imprimir>:
{
 800d4d0:	b570      	push	{r4, r5, r6, lr}
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	460d      	mov	r5, r1
    chThdSleepMilliseconds(5);    
 800d4d6:	2032      	movs	r0, #50	; 0x32
 800d4d8:	f7ff fab2 	bl	800ca40 <chThdSleep>
    for(i=0;i<P;i++)
 800d4dc:	b16d      	cbz	r5, 800d4fa <Imprimir+0x2a>
 800d4de:	3d01      	subs	r5, #1
  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 800d4e0:	4e06      	ldr	r6, [pc, #24]	; (800d4fc <Imprimir+0x2c>)
 800d4e2:	fa54 f585 	uxtab	r5, r4, r5
 800d4e6:	3c01      	subs	r4, #1
 800d4e8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800d4ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	f7ff f945 	bl	800c780 <chOQPutTimeout>
 800d4f6:	42ac      	cmp	r4, r5
 800d4f8:	d1f6      	bne.n	800d4e8 <Imprimir+0x18>
 800d4fa:	bd70      	pop	{r4, r5, r6, pc}
 800d4fc:	2000162c 	.word	0x2000162c

0800d500 <rx_especial>:
{
 800d500:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(pos == 0x01)
 800d502:	2b01      	cmp	r3, #1
{
 800d504:	b08f      	sub	sp, #60	; 0x3c
    if(pos == 0x01)
 800d506:	d04d      	beq.n	800d5a4 <rx_especial+0xa4>
    else if (pos == 0x02)
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d001      	beq.n	800d510 <rx_especial+0x10>
}
 800d50c:	b00f      	add	sp, #60	; 0x3c
 800d50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (dato_emr3[num]);
 800d510:	4bae      	ldr	r3, [pc, #696]	; (800d7cc <rx_especial+0x2cc>)
 800d512:	78dd      	ldrb	r5, [r3, #3]
        if (read_eeprom(pos2) >= 0X0A) DATO=0XC0 | (read_eeprom(pos2) - 0X09);
 800d514:	2d09      	cmp	r5, #9
 800d516:	d949      	bls.n	800d5ac <rx_especial+0xac>
 800d518:	3d09      	subs	r5, #9
 800d51a:	f065 053f 	orn	r5, r5, #63	; 0x3f
 800d51e:	b2ed      	uxtb	r5, r5
    if(A1 == 0XEE && A2 == 0XE0 && A3 == 0XE0) //puntos
 800d520:	28ee      	cmp	r0, #238	; 0xee
 800d522:	d046      	beq.n	800d5b2 <rx_especial+0xb2>
    else if (A1 == 0XE1 && A2 == 0XE0 && A3 == 0XE0) // version
 800d524:	28e1      	cmp	r0, #225	; 0xe1
 800d526:	f000 80ab 	beq.w	800d680 <rx_especial+0x180>
    else if (A1 == 0XE0 && A2 == 0XE1 && A3 == 0XE0)// manija arriba
 800d52a:	28e0      	cmp	r0, #224	; 0xe0
 800d52c:	d102      	bne.n	800d534 <rx_especial+0x34>
 800d52e:	29e1      	cmp	r1, #225	; 0xe1
 800d530:	f000 8110 	beq.w	800d754 <rx_especial+0x254>
        envio_wire[4] = 0XB0 | (A3 & 0x0F) ;
 800d534:	f002 020f 	and.w	r2, r2, #15
        envio_wire[5] = 0XB0 | (A2 & 0x0F) ;
 800d538:	f001 010f 	and.w	r1, r1, #15
        envio_wire[6] = 0XB0 | (A1 & 0x0F) ;
 800d53c:	f000 000f 	and.w	r0, r0, #15
        envio_wire[1]=0XB0;
 800d540:	26b0      	movs	r6, #176	; 0xb0
        envio_wire[6] = 0XB0 | (A1 & 0x0F) ;
 800d542:	f060 034f 	orn	r3, r0, #79	; 0x4f
        envio_wire[4] = 0XB0 | (A3 & 0x0F) ;
 800d546:	f062 044f 	orn	r4, r2, #79	; 0x4f
        espe_wire(envio_wire,9);
 800d54a:	a801      	add	r0, sp, #4
        envio_wire[5] = 0XB0 | (A2 & 0x0F) ;
 800d54c:	f061 024f 	orn	r2, r1, #79	; 0x4f
        envio_wire[0]=0XBA;
 800d550:	27ba      	movs	r7, #186	; 0xba
        espe_wire(envio_wire,9);
 800d552:	2109      	movs	r1, #9
        envio_wire[4] = 0XB0 | (A3 & 0x0F) ;
 800d554:	f88d 4008 	strb.w	r4, [sp, #8]
        envio_wire[5] = 0XB0 | (A2 & 0x0F) ;
 800d558:	f88d 2009 	strb.w	r2, [sp, #9]
        envio_wire[6] = 0XB0 | (A1 & 0x0F) ;
 800d55c:	f88d 300a 	strb.w	r3, [sp, #10]
        envio_wire[3]=DATO;
 800d560:	f88d 5007 	strb.w	r5, [sp, #7]
        envio_wire[0]=0XBA;
 800d564:	f88d 7004 	strb.w	r7, [sp, #4]
        envio_wire[1]=0XB0;
 800d568:	f88d 6005 	strb.w	r6, [sp, #5]
        envio_wire[2]=0XB0;
 800d56c:	f88d 6006 	strb.w	r6, [sp, #6]
        envio_wire[7]=0XB0;
 800d570:	f88d 600b 	strb.w	r6, [sp, #11]
        envio_wire[8]=0XB0;
 800d574:	f88d 600c 	strb.w	r6, [sp, #12]
        espe_wire(envio_wire,9);
 800d578:	f7ff feb2 	bl	800d2e0 <espe_wire>
        envio_wire[9] = chec1;
 800d57c:	4b94      	ldr	r3, [pc, #592]	; (800d7d0 <rx_especial+0x2d0>)
        envio_wire[10] = chec2;
 800d57e:	4a95      	ldr	r2, [pc, #596]	; (800d7d4 <rx_especial+0x2d4>)
        envio_wire[9] = chec1;
 800d580:	781b      	ldrb	r3, [r3, #0]
        envio_wire[10] = chec2;
 800d582:	7814      	ldrb	r4, [r2, #0]
        envio_wire[9] = chec1;
 800d584:	f88d 300d 	strb.w	r3, [sp, #13]
        envio_wire[11]=0X8D;
 800d588:	228d      	movs	r2, #141	; 0x8d
        envio_wire[12]=0X8A;
 800d58a:	238a      	movs	r3, #138	; 0x8a
        Imprimir(&envio_wire,P);
 800d58c:	a801      	add	r0, sp, #4
 800d58e:	210d      	movs	r1, #13
        envio_wire[10] = chec2;
 800d590:	f88d 400e 	strb.w	r4, [sp, #14]
        envio_wire[11]=0X8D;
 800d594:	f88d 200f 	strb.w	r2, [sp, #15]
        envio_wire[12]=0X8A;
 800d598:	f88d 3010 	strb.w	r3, [sp, #16]
        Imprimir(&envio_wire,P);
 800d59c:	f7ff ff98 	bl	800d4d0 <Imprimir>
}
 800d5a0:	b00f      	add	sp, #60	; 0x3c
 800d5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5a4:	4b89      	ldr	r3, [pc, #548]	; (800d7cc <rx_especial+0x2cc>)
 800d5a6:	785d      	ldrb	r5, [r3, #1]
        if (read_eeprom(pos1) >= 0X0A) DATO=0XC0 | (read_eeprom(pos1) - 0X09);
 800d5a8:	2d09      	cmp	r5, #9
 800d5aa:	d8b5      	bhi.n	800d518 <rx_especial+0x18>
        else DATO=0XB0 | read_eeprom(pos2);
 800d5ac:	f045 05b0 	orr.w	r5, r5, #176	; 0xb0
 800d5b0:	e7b6      	b.n	800d520 <rx_especial+0x20>
    if(A1 == 0XEE && A2 == 0XE0 && A3 == 0XE0) //puntos
 800d5b2:	29e0      	cmp	r1, #224	; 0xe0
 800d5b4:	d1be      	bne.n	800d534 <rx_especial+0x34>
 800d5b6:	2ae0      	cmp	r2, #224	; 0xe0
 800d5b8:	d1bc      	bne.n	800d534 <rx_especial+0x34>
        envio_wire[14]=0XB0 | (read_eeprom(PD) + 0X01);
 800d5ba:	7ed8      	ldrb	r0, [r3, #27]
        if(read_eeprom(consola) == 0x04)
 800d5bc:	f893 4059 	ldrb.w	r4, [r3, #89]	; 0x59
        envio_wire[16]=0XB0 | (read_eeprom(PV) + 0X01);
 800d5c0:	7b99      	ldrb	r1, [r3, #14]
        envio_wire[18]=0XB0 | (read_eeprom(pppu) + 0X01);
 800d5c2:	791a      	ldrb	r2, [r3, #4]
        envio_wire[3]=DATO;
 800d5c4:	f88d 5007 	strb.w	r5, [sp, #7]
        envio_wire[14]=0XB0 | (read_eeprom(PD) + 0X01);
 800d5c8:	3001      	adds	r0, #1
 800d5ca:	f060 004f 	orn	r0, r0, #79	; 0x4f
        envio_wire[1]=0XB0;
 800d5ce:	23b0      	movs	r3, #176	; 0xb0
        if(read_eeprom(consola) == 0x04)
 800d5d0:	2c04      	cmp	r4, #4
        envio_wire[14]=0XB0 | (read_eeprom(PD) + 0X01);
 800d5d2:	f88d 0012 	strb.w	r0, [sp, #18]
        envio_wire[16]=0XB0 | (read_eeprom(PV) + 0X01);
 800d5d6:	f101 0101 	add.w	r1, r1, #1
        envio_wire[9]=0XB1;
 800d5da:	f04f 00b1 	mov.w	r0, #177	; 0xb1
        envio_wire[18]=0XB0 | (read_eeprom(pppu) + 0X01);
 800d5de:	f102 0201 	add.w	r2, r2, #1
 800d5e2:	f062 024f 	orn	r2, r2, #79	; 0x4f
            envio_wire[20]=0XB0;
 800d5e6:	bf0c      	ite	eq
 800d5e8:	f88d 3018 	strbeq.w	r3, [sp, #24]
            envio_wire[20]=0XB1;
 800d5ec:	f88d 0018 	strbne.w	r0, [sp, #24]
        envio_wire[16]=0XB0 | (read_eeprom(PV) + 0X01);
 800d5f0:	f061 014f 	orn	r1, r1, #79	; 0x4f
        envio_wire[1]=0XB0;
 800d5f4:	f88d 3005 	strb.w	r3, [sp, #5]
        envio_wire[4]=0XB0;
 800d5f8:	f88d 3008 	strb.w	r3, [sp, #8]
        envio_wire[5]=0XB0;
 800d5fc:	f88d 3009 	strb.w	r3, [sp, #9]
        envio_wire[7]=0XB0;
 800d600:	f88d 300b 	strb.w	r3, [sp, #11]
        envio_wire[8]=0XB0;
 800d604:	f88d 300c 	strb.w	r3, [sp, #12]
        envio_wire[10]=0XB0;
 800d608:	f88d 300e 	strb.w	r3, [sp, #14]
        envio_wire[11]=0XB0;
 800d60c:	f88d 300f 	strb.w	r3, [sp, #15]
        envio_wire[13]=0XB0;
 800d610:	f88d 3011 	strb.w	r3, [sp, #17]
        envio_wire[15]=0XB0;
 800d614:	f88d 3013 	strb.w	r3, [sp, #19]
        envio_wire[17]=0XB0;
 800d618:	f88d 3015 	strb.w	r3, [sp, #21]
        envio_wire[9]=0XB1;
 800d61c:	f88d 000d 	strb.w	r0, [sp, #13]
        envio_wire[12]=0XB1;
 800d620:	f88d 0010 	strb.w	r0, [sp, #16]
            envio_wire[19]=0XB0;
 800d624:	f88d 3017 	strb.w	r3, [sp, #23]
        envio_wire[0]=0XBA;
 800d628:	27ba      	movs	r7, #186	; 0xba
        envio_wire[21]=0XB0;
 800d62a:	23b0      	movs	r3, #176	; 0xb0
        envio_wire[2]=0XB7;
 800d62c:	26b7      	movs	r6, #183	; 0xb7
        envio_wire[6]=0XC5;
 800d62e:	25c5      	movs	r5, #197	; 0xc5
        chThdSleepMilliseconds(1);   
 800d630:	200a      	movs	r0, #10
        envio_wire[18]=0XB0 | (read_eeprom(pppu) + 0X01);
 800d632:	f88d 2016 	strb.w	r2, [sp, #22]
        envio_wire[21]=0XB0;
 800d636:	f88d 3019 	strb.w	r3, [sp, #25]
        envio_wire[22]=0XB0;
 800d63a:	f88d 301a 	strb.w	r3, [sp, #26]
        envio_wire[16]=0XB0 | (read_eeprom(PV) + 0X01);
 800d63e:	f88d 1014 	strb.w	r1, [sp, #20]
        envio_wire[0]=0XBA;
 800d642:	f88d 7004 	strb.w	r7, [sp, #4]
        envio_wire[2]=0XB7;
 800d646:	f88d 6006 	strb.w	r6, [sp, #6]
        envio_wire[6]=0XC5;
 800d64a:	f88d 500a 	strb.w	r5, [sp, #10]
        chThdSleepMilliseconds(1);   
 800d64e:	f7ff f9f7 	bl	800ca40 <chThdSleep>
        espe_wire(envio_wire,23);
 800d652:	a801      	add	r0, sp, #4
 800d654:	2117      	movs	r1, #23
 800d656:	f7ff fe43 	bl	800d2e0 <espe_wire>
        envio_wire[23] = chec1;
 800d65a:	4b5d      	ldr	r3, [pc, #372]	; (800d7d0 <rx_especial+0x2d0>)
        envio_wire[24] = chec2;
 800d65c:	4a5d      	ldr	r2, [pc, #372]	; (800d7d4 <rx_especial+0x2d4>)
        envio_wire[23] = chec1;
 800d65e:	781b      	ldrb	r3, [r3, #0]
        envio_wire[24] = chec2;
 800d660:	7814      	ldrb	r4, [r2, #0]
        envio_wire[23] = chec1;
 800d662:	f88d 301b 	strb.w	r3, [sp, #27]
        envio_wire[25]=0X8D;
 800d666:	228d      	movs	r2, #141	; 0x8d
        envio_wire[26]=0X8A;
 800d668:	238a      	movs	r3, #138	; 0x8a
        Imprimir(&envio_wire,P);
 800d66a:	a801      	add	r0, sp, #4
 800d66c:	211b      	movs	r1, #27
        envio_wire[24] = chec2;
 800d66e:	f88d 401c 	strb.w	r4, [sp, #28]
        envio_wire[25]=0X8D;
 800d672:	f88d 201d 	strb.w	r2, [sp, #29]
        envio_wire[26]=0X8A;
 800d676:	f88d 301e 	strb.w	r3, [sp, #30]
        Imprimir(&envio_wire,P);
 800d67a:	f7ff ff29 	bl	800d4d0 <Imprimir>
 800d67e:	e745      	b.n	800d50c <rx_especial+0xc>
    else if (A1 == 0XE1 && A2 == 0XE0 && A3 == 0XE0) // version
 800d680:	29e0      	cmp	r1, #224	; 0xe0
 800d682:	f47f af57 	bne.w	800d534 <rx_especial+0x34>
 800d686:	2ae0      	cmp	r2, #224	; 0xe0
 800d688:	f47f af54 	bne.w	800d534 <rx_especial+0x34>
        envio_wire[1]=0XB0;
 800d68c:	23b0      	movs	r3, #176	; 0xb0
        envio_wire[6]=0XB1;
 800d68e:	20b1      	movs	r0, #177	; 0xb1
        envio_wire[0]=0XBA;
 800d690:	26ba      	movs	r6, #186	; 0xba
        envio_wire[14]=0XB2;
 800d692:	22b2      	movs	r2, #178	; 0xb2
        envio_wire[2]=0XC2;
 800d694:	f04f 0ec2 	mov.w	lr, #194	; 0xc2
        envio_wire[11]=0XB9;
 800d698:	21b9      	movs	r1, #185	; 0xb9
        envio_wire[9]=0XB7;
 800d69a:	24b7      	movs	r4, #183	; 0xb7
        envio_wire[3]=DATO;
 800d69c:	f88d 5007 	strb.w	r5, [sp, #7]
        envio_wire[0]=0XBA;
 800d6a0:	f88d 6004 	strb.w	r6, [sp, #4]
        envio_wire[1]=0XB0;
 800d6a4:	f88d 3005 	strb.w	r3, [sp, #5]
        envio_wire[4]=0XB0;
 800d6a8:	f88d 3008 	strb.w	r3, [sp, #8]
        envio_wire[5]=0XB0;
 800d6ac:	f88d 3009 	strb.w	r3, [sp, #9]
        envio_wire[7]=0XB0;
 800d6b0:	f88d 300b 	strb.w	r3, [sp, #11]
        envio_wire[8]=0XB0;
 800d6b4:	f88d 300c 	strb.w	r3, [sp, #12]
        envio_wire[10]=0XB0;
 800d6b8:	f88d 300e 	strb.w	r3, [sp, #14]
        envio_wire[15]=0XB0;
 800d6bc:	f88d 3013 	strb.w	r3, [sp, #19]
        envio_wire[17]=0XB0;
 800d6c0:	f88d 3015 	strb.w	r3, [sp, #21]
        envio_wire[19]=0XB0;
 800d6c4:	f88d 3017 	strb.w	r3, [sp, #23]
        envio_wire[20]=0XB0;
 800d6c8:	f88d 3018 	strb.w	r3, [sp, #24]
        envio_wire[21]=0XB0;
 800d6cc:	f88d 3019 	strb.w	r3, [sp, #25]
        envio_wire[22]=0XB0;
 800d6d0:	f88d 301a 	strb.w	r3, [sp, #26]
        envio_wire[27]=0XB0;
 800d6d4:	f88d 301f 	strb.w	r3, [sp, #31]
        envio_wire[28]=0XB0;
 800d6d8:	f88d 3020 	strb.w	r3, [sp, #32]
        envio_wire[29]=0XB0;
 800d6dc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        envio_wire[6]=0XB1;
 800d6e0:	f88d 000a 	strb.w	r0, [sp, #10]
        envio_wire[23]=0XB4;
 800d6e4:	23b4      	movs	r3, #180	; 0xb4
        envio_wire[13]=0XB1;
 800d6e6:	f88d 0011 	strb.w	r0, [sp, #17]
        envio_wire[16]=0XB5;
 800d6ea:	27b5      	movs	r7, #181	; 0xb5
        envio_wire[18]=0XB8;
 800d6ec:	26b8      	movs	r6, #184	; 0xb8
        envio_wire[26]=0XB6;
 800d6ee:	25b6      	movs	r5, #182	; 0xb6
        chThdSleepMilliseconds(1);
 800d6f0:	200a      	movs	r0, #10
        envio_wire[14]=0XB2;
 800d6f2:	f88d 2012 	strb.w	r2, [sp, #18]
        envio_wire[24]=0XB2;
 800d6f6:	f88d 201c 	strb.w	r2, [sp, #28]
        envio_wire[23]=0XB4;
 800d6fa:	f88d 301b 	strb.w	r3, [sp, #27]
        envio_wire[25]=0XB4;
 800d6fe:	f88d 301d 	strb.w	r3, [sp, #29]
        envio_wire[2]=0XC2;
 800d702:	f88d e006 	strb.w	lr, [sp, #6]
        envio_wire[9]=0XB7;
 800d706:	f88d 400d 	strb.w	r4, [sp, #13]
        envio_wire[30]=0XB7;
 800d70a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
        envio_wire[11]=0XB9;
 800d70e:	f88d 100f 	strb.w	r1, [sp, #15]
        envio_wire[12]=0XB9;
 800d712:	f88d 1010 	strb.w	r1, [sp, #16]
        envio_wire[16]=0XB5;
 800d716:	f88d 7014 	strb.w	r7, [sp, #20]
        envio_wire[18]=0XB8;
 800d71a:	f88d 6016 	strb.w	r6, [sp, #22]
        envio_wire[26]=0XB6;
 800d71e:	f88d 501e 	strb.w	r5, [sp, #30]
        chThdSleepMilliseconds(1);
 800d722:	f7ff f98d 	bl	800ca40 <chThdSleep>
        espe_wire(envio_wire,31);
 800d726:	a801      	add	r0, sp, #4
 800d728:	211f      	movs	r1, #31
 800d72a:	f7ff fdd9 	bl	800d2e0 <espe_wire>
        envio_wire[31] = chec1;
 800d72e:	4b28      	ldr	r3, [pc, #160]	; (800d7d0 <rx_especial+0x2d0>)
        envio_wire[32] = chec2;
 800d730:	4a28      	ldr	r2, [pc, #160]	; (800d7d4 <rx_especial+0x2d4>)
        envio_wire[31] = chec1;
 800d732:	781b      	ldrb	r3, [r3, #0]
        envio_wire[32] = chec2;
 800d734:	7814      	ldrb	r4, [r2, #0]
        envio_wire[31] = chec1;
 800d736:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        envio_wire[33]=0X8D;
 800d73a:	228d      	movs	r2, #141	; 0x8d
        envio_wire[34]=0X8A;
 800d73c:	238a      	movs	r3, #138	; 0x8a
        Imprimir(&envio_wire,P);
 800d73e:	a801      	add	r0, sp, #4
 800d740:	2123      	movs	r1, #35	; 0x23
        envio_wire[32] = chec2;
 800d742:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
        envio_wire[33]=0X8D;
 800d746:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
        envio_wire[34]=0X8A;
 800d74a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        Imprimir(&envio_wire,P);
 800d74e:	f7ff febf 	bl	800d4d0 <Imprimir>
 800d752:	e6db      	b.n	800d50c <rx_especial+0xc>
    else if (A1 == 0XE0 && A2 == 0XE1 && A3 == 0XE0)// manija arriba
 800d754:	2ae0      	cmp	r2, #224	; 0xe0
 800d756:	f47f aeed 	bne.w	800d534 <rx_especial+0x34>
        envio_wire[5]=0XB1;
 800d75a:	23b1      	movs	r3, #177	; 0xb1
        envio_wire[1]=0XB0;
 800d75c:	22b0      	movs	r2, #176	; 0xb0
        espe_wire(envio_wire,15);
 800d75e:	a801      	add	r0, sp, #4
        envio_wire[0]=0XBA;
 800d760:	26ba      	movs	r6, #186	; 0xba
        envio_wire[2]=0XB3;
 800d762:	24b3      	movs	r4, #179	; 0xb3
        espe_wire(envio_wire,15);
 800d764:	210f      	movs	r1, #15
        envio_wire[1]=0XB0;
 800d766:	f88d 2005 	strb.w	r2, [sp, #5]
        envio_wire[4]=0XB0;
 800d76a:	f88d 2008 	strb.w	r2, [sp, #8]
        envio_wire[6]=0XB0;
 800d76e:	f88d 200a 	strb.w	r2, [sp, #10]
        envio_wire[7]=0XB0;
 800d772:	f88d 200b 	strb.w	r2, [sp, #11]
        envio_wire[8]=0XB0;
 800d776:	f88d 200c 	strb.w	r2, [sp, #12]
        envio_wire[2]=0XB3;
 800d77a:	f88d 4006 	strb.w	r4, [sp, #6]
        envio_wire[5]=0XB1;
 800d77e:	f88d 3009 	strb.w	r3, [sp, #9]
        envio_wire[9]=0XB1;
 800d782:	f88d 300d 	strb.w	r3, [sp, #13]
        envio_wire[10]=0XB1;
 800d786:	f88d 300e 	strb.w	r3, [sp, #14]
        envio_wire[11]=0XB1;
 800d78a:	f88d 300f 	strb.w	r3, [sp, #15]
        envio_wire[12]=0XB1;
 800d78e:	f88d 3010 	strb.w	r3, [sp, #16]
        envio_wire[13]=0XB1;
 800d792:	f88d 3011 	strb.w	r3, [sp, #17]
        envio_wire[14]=0XB1;
 800d796:	f88d 3012 	strb.w	r3, [sp, #18]
        envio_wire[3]=DATO;
 800d79a:	f88d 5007 	strb.w	r5, [sp, #7]
        envio_wire[0]=0XBA;
 800d79e:	f88d 6004 	strb.w	r6, [sp, #4]
        espe_wire(envio_wire,15);
 800d7a2:	f7ff fd9d 	bl	800d2e0 <espe_wire>
        envio_wire[15] = chec1;
 800d7a6:	4b0a      	ldr	r3, [pc, #40]	; (800d7d0 <rx_especial+0x2d0>)
        envio_wire[16] = chec2;
 800d7a8:	4a0a      	ldr	r2, [pc, #40]	; (800d7d4 <rx_especial+0x2d4>)
        envio_wire[15] = chec1;
 800d7aa:	781b      	ldrb	r3, [r3, #0]
        envio_wire[16] = chec2;
 800d7ac:	7814      	ldrb	r4, [r2, #0]
        envio_wire[15] = chec1;
 800d7ae:	f88d 3013 	strb.w	r3, [sp, #19]
        envio_wire[17]=0X8D;
 800d7b2:	228d      	movs	r2, #141	; 0x8d
        envio_wire[18]=0X8A;
 800d7b4:	238a      	movs	r3, #138	; 0x8a
        Imprimir(&envio_wire,P);
 800d7b6:	a801      	add	r0, sp, #4
 800d7b8:	2113      	movs	r1, #19
        envio_wire[16] = chec2;
 800d7ba:	f88d 4014 	strb.w	r4, [sp, #20]
        envio_wire[17]=0X8D;
 800d7be:	f88d 2015 	strb.w	r2, [sp, #21]
        envio_wire[18]=0X8A;
 800d7c2:	f88d 3016 	strb.w	r3, [sp, #22]
        Imprimir(&envio_wire,P);
 800d7c6:	f7ff fe83 	bl	800d4d0 <Imprimir>
 800d7ca:	e69f      	b.n	800d50c <rx_especial+0xc>
 800d7cc:	20001c74 	.word	0x20001c74
 800d7d0:	200015f8 	.word	0x200015f8
 800d7d4:	200015f9 	.word	0x200015f9
	...

0800d7e0 <Status_2>:
    Status1[3]=ascii(read_eeprom(pos1));
    return;
}

void Status_2(uint8_t est)
{
 800d7e0:	b510      	push	{r4, lr}
    Status2[0]=ascii(est);
 800d7e2:	f001 fd9d 	bl	800f320 <ascii>
 800d7e6:	4c04      	ldr	r4, [pc, #16]	; (800d7f8 <Status_2+0x18>)
 800d7e8:	4b04      	ldr	r3, [pc, #16]	; (800d7fc <Status_2+0x1c>)
 800d7ea:	7020      	strb	r0, [r4, #0]
    Status2[1]=ascii(read_eeprom(pos2));
 800d7ec:	78d8      	ldrb	r0, [r3, #3]
 800d7ee:	f001 fd97 	bl	800f320 <ascii>
 800d7f2:	7060      	strb	r0, [r4, #1]
 800d7f4:	bd10      	pop	{r4, pc}
 800d7f6:	bf00      	nop
 800d7f8:	20000880 	.word	0x20000880
 800d7fc:	20001c74 	.word	0x20001c74

0800d800 <Status_1>:
{
 800d800:	b570      	push	{r4, r5, r6, lr}
 800d802:	4d08      	ldr	r5, [pc, #32]	; (800d824 <Status_1+0x24>)
    Status1[0]=ascii(read_eeprom(consola));
 800d804:	4c08      	ldr	r4, [pc, #32]	; (800d828 <Status_1+0x28>)
{
 800d806:	4606      	mov	r6, r0
    Status1[0]=ascii(read_eeprom(consola));
 800d808:	f895 0059 	ldrb.w	r0, [r5, #89]	; 0x59
 800d80c:	f001 fd88 	bl	800f320 <ascii>
 800d810:	7020      	strb	r0, [r4, #0]
    Status1[2]=ascii(est);
 800d812:	4630      	mov	r0, r6
 800d814:	f001 fd84 	bl	800f320 <ascii>
 800d818:	70a0      	strb	r0, [r4, #2]
    Status1[3]=ascii(read_eeprom(pos1));
 800d81a:	7868      	ldrb	r0, [r5, #1]
 800d81c:	f001 fd80 	bl	800f320 <ascii>
 800d820:	70e0      	strb	r0, [r4, #3]
 800d822:	bd70      	pop	{r4, r5, r6, pc}
 800d824:	20001c74 	.word	0x20001c74
 800d828:	20000878 	.word	0x20000878
 800d82c:	00000000 	.word	0x00000000

0800d830 <sd_punto>:
{
 800d830:	b510      	push	{r4, lr}
 800d832:	4c08      	ldr	r4, [pc, #32]	; (800d854 <sd_punto+0x24>)
    PPU_POINT[0]=ascii(read_eeprom(pppu));
 800d834:	7920      	ldrb	r0, [r4, #4]
 800d836:	f001 fd73 	bl	800f320 <ascii>
 800d83a:	4b07      	ldr	r3, [pc, #28]	; (800d858 <sd_punto+0x28>)
 800d83c:	7018      	strb	r0, [r3, #0]
    MON_POINT[0]=ascii(read_eeprom(PD));
 800d83e:	7ee0      	ldrb	r0, [r4, #27]
 800d840:	f001 fd6e 	bl	800f320 <ascii>
 800d844:	4b05      	ldr	r3, [pc, #20]	; (800d85c <sd_punto+0x2c>)
 800d846:	7018      	strb	r0, [r3, #0]
    VOL_POINT[0]=ascii(read_eeprom(PV));
 800d848:	7ba0      	ldrb	r0, [r4, #14]
 800d84a:	f001 fd69 	bl	800f320 <ascii>
 800d84e:	4b04      	ldr	r3, [pc, #16]	; (800d860 <sd_punto+0x30>)
 800d850:	7018      	strb	r0, [r3, #0]
 800d852:	bd10      	pop	{r4, pc}
 800d854:	20001c74 	.word	0x20001c74
 800d858:	2000084c 	.word	0x2000084c
 800d85c:	20000838 	.word	0x20000838
 800d860:	200008c4 	.word	0x200008c4
	...

0800d870 <sd_dia>:
{
 800d870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    FECHA[0] = ascii(recibo[8] / 10);
 800d874:	4c1c      	ldr	r4, [pc, #112]	; (800d8e8 <sd_dia+0x78>)
 800d876:	f890 8008 	ldrb.w	r8, [r0, #8]
 800d87a:	4e1c      	ldr	r6, [pc, #112]	; (800d8ec <sd_dia+0x7c>)
 800d87c:	fba4 3508 	umull	r3, r5, r4, r8
 800d880:	08ed      	lsrs	r5, r5, #3
{
 800d882:	4607      	mov	r7, r0
    FECHA[0] = ascii(recibo[8] / 10);
 800d884:	4628      	mov	r0, r5
 800d886:	f001 fd4b 	bl	800f320 <ascii>
    FECHA[1] = ascii(recibo[8] % 10);
 800d88a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d88e:	eba8 0545 	sub.w	r5, r8, r5, lsl #1
    FECHA[0] = ascii(recibo[8] / 10);
 800d892:	7030      	strb	r0, [r6, #0]
    FECHA[1] = ascii(recibo[8] % 10);
 800d894:	b2e8      	uxtb	r0, r5
 800d896:	f001 fd43 	bl	800f320 <ascii>
 800d89a:	7070      	strb	r0, [r6, #1]
    FECHA[3] = ascii(recibo[7] / 10);
 800d89c:	f897 8007 	ldrb.w	r8, [r7, #7]
 800d8a0:	fba4 3508 	umull	r3, r5, r4, r8
 800d8a4:	08ed      	lsrs	r5, r5, #3
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	f001 fd3a 	bl	800f320 <ascii>
    FECHA[4] = ascii(recibo[7] % 10);
 800d8ac:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d8b0:	eba8 0545 	sub.w	r5, r8, r5, lsl #1
    FECHA[3] = ascii(recibo[7] / 10);
 800d8b4:	70f0      	strb	r0, [r6, #3]
    FECHA[4] = ascii(recibo[7] % 10);
 800d8b6:	b2e8      	uxtb	r0, r5
 800d8b8:	f001 fd32 	bl	800f320 <ascii>
 800d8bc:	7130      	strb	r0, [r6, #4]
    FECHA[8] = ascii(recibo[6] / 10);
 800d8be:	79b8      	ldrb	r0, [r7, #6]
 800d8c0:	fba4 3000 	umull	r3, r0, r4, r0
 800d8c4:	08c0      	lsrs	r0, r0, #3
 800d8c6:	f001 fd2b 	bl	800f320 <ascii>
 800d8ca:	7230      	strb	r0, [r6, #8]
    FECHA[9] = ascii(recibo[6] % 10);
 800d8cc:	79b8      	ldrb	r0, [r7, #6]
 800d8ce:	fba4 3400 	umull	r3, r4, r4, r0
 800d8d2:	08e4      	lsrs	r4, r4, #3
 800d8d4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800d8d8:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 800d8dc:	b2c0      	uxtb	r0, r0
 800d8de:	f001 fd1f 	bl	800f320 <ascii>
 800d8e2:	7270      	strb	r0, [r6, #9]
 800d8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e8:	cccccccd 	.word	0xcccccccd
 800d8ec:	20000818 	.word	0x20000818

0800d8f0 <sd_hora>:
{
 800d8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HORA[0] = ascii(recibo[5] / 10);
 800d8f4:	4c1b      	ldr	r4, [pc, #108]	; (800d964 <sd_hora+0x74>)
 800d8f6:	7947      	ldrb	r7, [r0, #5]
 800d8f8:	4e1b      	ldr	r6, [pc, #108]	; (800d968 <sd_hora+0x78>)
 800d8fa:	fba4 3507 	umull	r3, r5, r4, r7
 800d8fe:	08ed      	lsrs	r5, r5, #3
{
 800d900:	4680      	mov	r8, r0
    HORA[0] = ascii(recibo[5] / 10);
 800d902:	4628      	mov	r0, r5
 800d904:	f001 fd0c 	bl	800f320 <ascii>
    HORA[1] = ascii(recibo[5] % 10);
 800d908:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d90c:	eba7 0545 	sub.w	r5, r7, r5, lsl #1
    HORA[0] = ascii(recibo[5] / 10);
 800d910:	7030      	strb	r0, [r6, #0]
    HORA[1] = ascii(recibo[5] % 10);
 800d912:	b2e8      	uxtb	r0, r5
 800d914:	f001 fd04 	bl	800f320 <ascii>
 800d918:	7070      	strb	r0, [r6, #1]
    HORA[3] = ascii(recibo[6] / 10);
 800d91a:	f898 7006 	ldrb.w	r7, [r8, #6]
 800d91e:	fba4 3507 	umull	r3, r5, r4, r7
 800d922:	08ed      	lsrs	r5, r5, #3
 800d924:	4628      	mov	r0, r5
 800d926:	f001 fcfb 	bl	800f320 <ascii>
    HORA[4] = ascii(recibo[6] % 10);
 800d92a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d92e:	eba7 0545 	sub.w	r5, r7, r5, lsl #1
    HORA[3] = ascii(recibo[6] / 10);
 800d932:	70f0      	strb	r0, [r6, #3]
    HORA[4] = ascii(recibo[6] % 10);
 800d934:	b2e8      	uxtb	r0, r5
 800d936:	f001 fcf3 	bl	800f320 <ascii>
 800d93a:	7130      	strb	r0, [r6, #4]
    HORA[6] = ascii(recibo[7] / 10);
 800d93c:	f898 5007 	ldrb.w	r5, [r8, #7]
 800d940:	fba4 3405 	umull	r3, r4, r4, r5
 800d944:	08e4      	lsrs	r4, r4, #3
 800d946:	4620      	mov	r0, r4
 800d948:	f001 fcea 	bl	800f320 <ascii>
    HORA[7] = ascii(recibo[7] % 10);
 800d94c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800d950:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    HORA[6] = ascii(recibo[7] / 10);
 800d954:	71b0      	strb	r0, [r6, #6]
    HORA[7] = ascii(recibo[7] % 10);
 800d956:	b2e0      	uxtb	r0, r4
 800d958:	f001 fce2 	bl	800f320 <ascii>
 800d95c:	71f0      	strb	r0, [r6, #7]
 800d95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d962:	bf00      	nop
 800d964:	cccccccd 	.word	0xcccccccd
 800d968:	20000824 	.word	0x20000824
 800d96c:	00000000 	.word	0x00000000

0800d970 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800d970:	2200      	movs	r2, #0
 800d972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 800d976:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800d978:	7102      	strb	r2, [r0, #4]
 800d97a:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 800d97c:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800d97e:	f7fb fbe7 	bl	8009150 <move_window.lto_priv.88>
 800d982:	b108      	cbz	r0, 800d988 <check_fs+0x18>
		return 3;
 800d984:	2003      	movs	r0, #3
 800d986:	bd10      	pop	{r4, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800d988:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
 800d98c:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 800d990:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800d994:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d998:	4293      	cmp	r3, r2
 800d99a:	d001      	beq.n	800d9a0 <check_fs+0x30>
		return 2;
 800d99c:	2002      	movs	r0, #2
}
 800d99e:	bd10      	pop	{r4, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800d9a0:	f8d4 3066 	ldr.w	r3, [r4, #102]	; 0x66
 800d9a4:	4a06      	ldr	r2, [pc, #24]	; (800d9c0 <check_fs+0x50>)
 800d9a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d0f7      	beq.n	800d99e <check_fs+0x2e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800d9ae:	f8d4 0082 	ldr.w	r0, [r4, #130]	; 0x82
 800d9b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 800d9b6:	1a80      	subs	r0, r0, r2
 800d9b8:	bf18      	it	ne
 800d9ba:	2001      	movne	r0, #1
 800d9bc:	bd10      	pop	{r4, pc}
 800d9be:	bf00      	nop
 800d9c0:	00544146 	.word	0x00544146
	...

0800d9d0 <validate.lto_priv.125>:
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 800d9d0:	b130      	cbz	r0, 800d9e0 <validate.lto_priv.125+0x10>
{
 800d9d2:	b508      	push	{r3, lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 800d9d4:	6803      	ldr	r3, [r0, #0]
 800d9d6:	b10b      	cbz	r3, 800d9dc <validate.lto_priv.125+0xc>
 800d9d8:	781a      	ldrb	r2, [r3, #0]
 800d9da:	b91a      	cbnz	r2, 800d9e4 <validate.lto_priv.125+0x14>
		return FR_INVALID_OBJECT;
 800d9dc:	2009      	movs	r0, #9
}
 800d9de:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
 800d9e0:	2009      	movs	r0, #9
 800d9e2:	4770      	bx	lr
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 800d9e4:	8882      	ldrh	r2, [r0, #4]
 800d9e6:	88d9      	ldrh	r1, [r3, #6]
 800d9e8:	4291      	cmp	r1, r2
 800d9ea:	d1f7      	bne.n	800d9dc <validate.lto_priv.125+0xc>
	if (disk_status(fil->fs->drv) & STA_NOINIT)
 800d9ec:	7858      	ldrb	r0, [r3, #1]
 800d9ee:	f7fb fbcf 	bl	8009190 <disk_initialize>
 800d9f2:	f010 0f01 	tst.w	r0, #1
	return FR_OK;
 800d9f6:	bf14      	ite	ne
 800d9f8:	2003      	movne	r0, #3
 800d9fa:	2000      	moveq	r0, #0
 800d9fc:	bd08      	pop	{r3, pc}
 800d9fe:	bf00      	nop

0800da00 <get_ldnumber.lto_priv.89>:
{
 800da00:	b430      	push	{r4, r5}
	if (*path) {	/* If the pointer is not a null */
 800da02:	6804      	ldr	r4, [r0, #0]
 800da04:	b1dc      	cbz	r4, 800da3e <get_ldnumber.lto_priv.89+0x3e>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800da06:	7825      	ldrb	r5, [r4, #0]
 800da08:	2d20      	cmp	r5, #32
 800da0a:	d90b      	bls.n	800da24 <get_ldnumber.lto_priv.89+0x24>
 800da0c:	2d3a      	cmp	r5, #58	; 0x3a
 800da0e:	d016      	beq.n	800da3e <get_ldnumber.lto_priv.89+0x3e>
 800da10:	4623      	mov	r3, r4
 800da12:	e002      	b.n	800da1a <get_ldnumber.lto_priv.89+0x1a>
 800da14:	2a3a      	cmp	r2, #58	; 0x3a
 800da16:	d008      	beq.n	800da2a <get_ldnumber.lto_priv.89+0x2a>
 800da18:	460b      	mov	r3, r1
 800da1a:	785a      	ldrb	r2, [r3, #1]
 800da1c:	2a20      	cmp	r2, #32
 800da1e:	f103 0101 	add.w	r1, r3, #1
 800da22:	d8f7      	bhi.n	800da14 <get_ldnumber.lto_priv.89+0x14>
		vol = 0;		/* Drive 0 */
 800da24:	2000      	movs	r0, #0
}
 800da26:	bc30      	pop	{r4, r5}
 800da28:	4770      	bx	lr
			i = *tp++ - '0'; 
 800da2a:	3401      	adds	r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800da2c:	42a1      	cmp	r1, r4
 800da2e:	d106      	bne.n	800da3e <get_ldnumber.lto_priv.89+0x3e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800da30:	2d30      	cmp	r5, #48	; 0x30
 800da32:	d104      	bne.n	800da3e <get_ldnumber.lto_priv.89+0x3e>
					*path = ++tt;
 800da34:	3302      	adds	r3, #2
 800da36:	6003      	str	r3, [r0, #0]
}
 800da38:	bc30      	pop	{r4, r5}
			i = *tp++ - '0'; 
 800da3a:	2000      	movs	r0, #0
}
 800da3c:	4770      	bx	lr
	int vol = -1;
 800da3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800da42:	bc30      	pop	{r4, r5}
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
	...

0800da50 <find_volume.lto_priv.87>:
{
 800da50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da52:	4607      	mov	r7, r0
	*rfs = 0;
 800da54:	2300      	movs	r3, #0
{
 800da56:	b085      	sub	sp, #20
	vol = get_ldnumber(path);
 800da58:	4608      	mov	r0, r1
	*rfs = 0;
 800da5a:	603b      	str	r3, [r7, #0]
{
 800da5c:	4614      	mov	r4, r2
	vol = get_ldnumber(path);
 800da5e:	f7ff ffcf 	bl	800da00 <get_ldnumber.lto_priv.89>
	if (vol < 0) return FR_INVALID_DRIVE;
 800da62:	1e06      	subs	r6, r0, #0
 800da64:	db16      	blt.n	800da94 <find_volume.lto_priv.87+0x44>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800da66:	4b98      	ldr	r3, [pc, #608]	; (800dcc8 <find_volume.lto_priv.87+0x278>)
 800da68:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800da6c:	b1ad      	cbz	r5, 800da9a <find_volume.lto_priv.87+0x4a>
	*rfs = fs;							/* Return pointer to the file system object */
 800da6e:	603d      	str	r5, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800da70:	782b      	ldrb	r3, [r5, #0]
 800da72:	b123      	cbz	r3, 800da7e <find_volume.lto_priv.87+0x2e>
		stat = disk_status(fs->drv);
 800da74:	7868      	ldrb	r0, [r5, #1]
 800da76:	f7fb fb8b 	bl	8009190 <disk_initialize>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800da7a:	07c7      	lsls	r7, r0, #31
 800da7c:	d510      	bpl.n	800daa0 <find_volume.lto_priv.87+0x50>
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800da7e:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800da80:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800da82:	7068      	strb	r0, [r5, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 800da84:	702b      	strb	r3, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800da86:	f7fb fb83 	bl	8009190 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800da8a:	07c1      	lsls	r1, r0, #31
 800da8c:	d510      	bpl.n	800dab0 <find_volume.lto_priv.87+0x60>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800da8e:	2003      	movs	r0, #3
}
 800da90:	b005      	add	sp, #20
 800da92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800da94:	200b      	movs	r0, #11
}
 800da96:	b005      	add	sp, #20
 800da98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800da9a:	200c      	movs	r0, #12
}
 800da9c:	b005      	add	sp, #20
 800da9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800daa0:	2c00      	cmp	r4, #0
 800daa2:	f000 80ad 	beq.w	800dc00 <find_volume.lto_priv.87+0x1b0>
 800daa6:	f010 0004 	ands.w	r0, r0, #4
 800daaa:	d0f1      	beq.n	800da90 <find_volume.lto_priv.87+0x40>
				return FR_WRITE_PROTECTED;
 800daac:	200a      	movs	r0, #10
 800daae:	e7ef      	b.n	800da90 <find_volume.lto_priv.87+0x40>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800dab0:	b10c      	cbz	r4, 800dab6 <find_volume.lto_priv.87+0x66>
 800dab2:	0742      	lsls	r2, r0, #29
 800dab4:	d4fa      	bmi.n	800daac <find_volume.lto_priv.87+0x5c>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800dab6:	2100      	movs	r1, #0
 800dab8:	4628      	mov	r0, r5
 800daba:	f7ff ff59 	bl	800d970 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800dabe:	2801      	cmp	r0, #1
 800dac0:	d006      	beq.n	800dad0 <find_volume.lto_priv.87+0x80>
	bsect = 0;
 800dac2:	2600      	movs	r6, #0
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dac4:	2803      	cmp	r0, #3
 800dac6:	f000 809d 	beq.w	800dc04 <find_volume.lto_priv.87+0x1b4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800daca:	b1f0      	cbz	r0, 800db0a <find_volume.lto_priv.87+0xba>
 800dacc:	200d      	movs	r0, #13
 800dace:	e7df      	b.n	800da90 <find_volume.lto_priv.87+0x40>
 800dad0:	466c      	mov	r4, sp
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800dad2:	4669      	mov	r1, sp
 800dad4:	f505 73fb 	add.w	r3, r5, #502	; 0x1f6
 800dad8:	f205 2036 	addw	r0, r5, #566	; 0x236
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800dadc:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800dae0:	b102      	cbz	r2, 800dae4 <find_volume.lto_priv.87+0x94>
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	f841 2b04 	str.w	r2, [r1], #4
 800dae8:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800daea:	4298      	cmp	r0, r3
 800daec:	d1f6      	bne.n	800dadc <find_volume.lto_priv.87+0x8c>
 800daee:	af04      	add	r7, sp, #16
			bsect = br[i];
 800daf0:	f854 6b04 	ldr.w	r6, [r4], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800daf4:	b91e      	cbnz	r6, 800dafe <find_volume.lto_priv.87+0xae>
 800daf6:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800daf8:	42bc      	cmp	r4, r7
 800dafa:	d1f9      	bne.n	800daf0 <find_volume.lto_priv.87+0xa0>
 800dafc:	e7e2      	b.n	800dac4 <find_volume.lto_priv.87+0x74>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800dafe:	4631      	mov	r1, r6
 800db00:	4628      	mov	r0, r5
 800db02:	f7ff ff35 	bl	800d970 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800db06:	2800      	cmp	r0, #0
 800db08:	d1f6      	bne.n	800daf8 <find_volume.lto_priv.87+0xa8>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800db0a:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 800db0e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
 800db12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800db16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db1a:	d1d7      	bne.n	800dacc <find_volume.lto_priv.87+0x7c>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 800db1c:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
 800db20:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 800db24:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800db28:	70e8      	strb	r0, [r5, #3]
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 800db2a:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 800db2e:	bf18      	it	ne
 800db30:	461a      	movne	r2, r3
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800db32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 800db36:	bf08      	it	eq
 800db38:	6d6a      	ldreq	r2, [r5, #84]	; 0x54
	fs->fsize = fasize;
 800db3a:	61aa      	str	r2, [r5, #24]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d8c5      	bhi.n	800dacc <find_volume.lto_priv.87+0x7c>
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 800db40:	f895 e03d 	ldrb.w	lr, [r5, #61]	; 0x3d
 800db44:	f885 e002 	strb.w	lr, [r5, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800db48:	f1be 0f00 	cmp.w	lr, #0
 800db4c:	d0be      	beq.n	800dacc <find_volume.lto_priv.87+0x7c>
 800db4e:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 800db52:	ea13 0f0e 	tst.w	r3, lr
 800db56:	d1b9      	bne.n	800dacc <find_volume.lto_priv.87+0x7c>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 800db58:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 800db5c:	f895 4041 	ldrb.w	r4, [r5, #65]	; 0x41
 800db60:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
 800db64:	0723      	lsls	r3, r4, #28
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 800db66:	812c      	strh	r4, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
 800db68:	d1b0      	bne.n	800dacc <find_volume.lto_priv.87+0x7c>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 800db6a:	f895 1044 	ldrb.w	r1, [r5, #68]	; 0x44
 800db6e:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 800db72:	f895 703f 	ldrb.w	r7, [r5, #63]	; 0x3f
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 800db76:	ea53 2301 	orrs.w	r3, r3, r1, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 800db7a:	f895 103e 	ldrb.w	r1, [r5, #62]	; 0x3e
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 800db7e:	bf08      	it	eq
 800db80:	6d2b      	ldreq	r3, [r5, #80]	; 0x50
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800db82:	ea51 2107 	orrs.w	r1, r1, r7, lsl #8
 800db86:	d0a1      	beq.n	800dacc <find_volume.lto_priv.87+0x7c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800db88:	fb02 f000 	mul.w	r0, r2, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 800db8c:	eb01 1714 	add.w	r7, r1, r4, lsr #4
 800db90:	4407      	add	r7, r0
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800db92:	42bb      	cmp	r3, r7
 800db94:	d39a      	bcc.n	800dacc <find_volume.lto_priv.87+0x7c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800db96:	1bdb      	subs	r3, r3, r7
 800db98:	fbb3 f3fe 	udiv	r3, r3, lr
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d095      	beq.n	800dacc <find_volume.lto_priv.87+0x7c>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800dba0:	f640 7ef5 	movw	lr, #4085	; 0xff5
 800dba4:	4573      	cmp	r3, lr
 800dba6:	d96f      	bls.n	800dc88 <find_volume.lto_priv.87+0x238>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800dba8:	f64f 7ef5 	movw	lr, #65525	; 0xfff5
 800dbac:	4573      	cmp	r3, lr
 800dbae:	d950      	bls.n	800dc52 <find_volume.lto_priv.87+0x202>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800dbb0:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800dbb2:	4431      	add	r1, r6
	fs->database = bsect + sysect;						/* Data start sector */
 800dbb4:	4437      	add	r7, r6
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800dbb6:	616b      	str	r3, [r5, #20]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800dbb8:	6229      	str	r1, [r5, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800dbba:	62af      	str	r7, [r5, #40]	; 0x28
	fs->volbase = bsect;								/* Volume start sector */
 800dbbc:	61ee      	str	r6, [r5, #28]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800dbbe:	2c00      	cmp	r4, #0
 800dbc0:	d184      	bne.n	800dacc <find_volume.lto_priv.87+0x7c>
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800dbc2:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
 800dbc4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 800dbc8:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800dbca:	6269      	str	r1, [r5, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
 800dbcc:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 800dbd0:	f4ff af7c 	bcc.w	800dacc <find_volume.lto_priv.87+0x7c>
		&& LD_WORD(fs->win+BPB_FSInfo) == 1
 800dbd4:	f895 1061 	ldrb.w	r1, [r5, #97]	; 0x61
 800dbd8:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 800dbdc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800dbe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	fs->fsi_flag = 0x80;
 800dbe4:	2180      	movs	r1, #128	; 0x80
		&& LD_WORD(fs->win+BPB_FSInfo) == 1
 800dbe6:	2b01      	cmp	r3, #1
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800dbe8:	612a      	str	r2, [r5, #16]
 800dbea:	60ea      	str	r2, [r5, #12]
	fs->fsi_flag = 0x80;
 800dbec:	7169      	strb	r1, [r5, #5]
		&& LD_WORD(fs->win+BPB_FSInfo) == 1
 800dbee:	d00b      	beq.n	800dc08 <find_volume.lto_priv.87+0x1b8>
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 800dbf0:	2303      	movs	r3, #3
	fs->id = ++Fsid;	/* File system mount ID */
 800dbf2:	4a36      	ldr	r2, [pc, #216]	; (800dccc <find_volume.lto_priv.87+0x27c>)
	fs->fs_type = fmt;	/* FAT sub-type */
 800dbf4:	702b      	strb	r3, [r5, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800dbf6:	8813      	ldrh	r3, [r2, #0]
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	8013      	strh	r3, [r2, #0]
 800dbfe:	80eb      	strh	r3, [r5, #6]
	return FR_OK;
 800dc00:	2000      	movs	r0, #0
 800dc02:	e745      	b.n	800da90 <find_volume.lto_priv.87+0x40>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dc04:	2001      	movs	r0, #1
 800dc06:	e743      	b.n	800da90 <find_volume.lto_priv.87+0x40>
		&& move_window(fs, bsect + 1) == FR_OK)
 800dc08:	1c71      	adds	r1, r6, #1
 800dc0a:	4628      	mov	r0, r5
 800dc0c:	f7fb faa0 	bl	8009150 <move_window.lto_priv.88>
 800dc10:	2800      	cmp	r0, #0
 800dc12:	d1ed      	bne.n	800dbf0 <find_volume.lto_priv.87+0x1a0>
		if (LD_WORD(fs->win+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dc14:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
 800dc18:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
		fs->fsi_flag = 0;
 800dc1c:	716c      	strb	r4, [r5, #5]
		if (LD_WORD(fs->win+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dc1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dc22:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d1e2      	bne.n	800dbf0 <find_volume.lto_priv.87+0x1a0>
			&& LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252
 800dc2a:	4b29      	ldr	r3, [pc, #164]	; (800dcd0 <find_volume.lto_priv.87+0x280>)
 800dc2c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d1de      	bne.n	800dbf0 <find_volume.lto_priv.87+0x1a0>
			&& LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272)
 800dc32:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 800dc36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dc3a:	f8d5 2214 	ldr.w	r2, [r5, #532]	; 0x214
 800dc3e:	3320      	adds	r3, #32
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d1d5      	bne.n	800dbf0 <find_volume.lto_priv.87+0x1a0>
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 800dc44:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 800dc48:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 800dc4c:	612a      	str	r2, [r5, #16]
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 800dc4e:	60eb      	str	r3, [r5, #12]
 800dc50:	e7ce      	b.n	800dbf0 <find_volume.lto_priv.87+0x1a0>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800dc52:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800dc54:	4431      	add	r1, r6
	fs->database = bsect + sysect;						/* Data start sector */
 800dc56:	4437      	add	r7, r6
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800dc58:	616b      	str	r3, [r5, #20]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800dc5a:	6229      	str	r1, [r5, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800dc5c:	62af      	str	r7, [r5, #40]	; 0x28
	fs->volbase = bsect;								/* Volume start sector */
 800dc5e:	61ee      	str	r6, [r5, #28]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800dc60:	2c00      	cmp	r4, #0
 800dc62:	f43f af33 	beq.w	800dacc <find_volume.lto_priv.87+0x7c>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dc66:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
 800dc68:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800dc6c:	4401      	add	r1, r0
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
 800dc6e:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800dc72:	6269      	str	r1, [r5, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
 800dc74:	f4ff af2a 	bcc.w	800dacc <find_volume.lto_priv.87+0x7c>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800dc78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	fs->fsi_flag = 0x80;
 800dc7c:	2280      	movs	r2, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800dc7e:	612b      	str	r3, [r5, #16]
 800dc80:	60eb      	str	r3, [r5, #12]
	fs->fsi_flag = 0x80;
 800dc82:	716a      	strb	r2, [r5, #5]
 800dc84:	2302      	movs	r3, #2
 800dc86:	e7b4      	b.n	800dbf2 <find_volume.lto_priv.87+0x1a2>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800dc88:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800dc8a:	4431      	add	r1, r6
	fs->database = bsect + sysect;						/* Data start sector */
 800dc8c:	4437      	add	r7, r6
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800dc8e:	616b      	str	r3, [r5, #20]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800dc90:	6229      	str	r1, [r5, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800dc92:	62af      	str	r7, [r5, #40]	; 0x28
	fs->volbase = bsect;								/* Volume start sector */
 800dc94:	61ee      	str	r6, [r5, #28]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800dc96:	2c00      	cmp	r4, #0
 800dc98:	f43f af18 	beq.w	800dacc <find_volume.lto_priv.87+0x7c>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dc9c:	f003 0401 	and.w	r4, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
 800dca0:	f204 14ff 	addw	r4, r4, #511	; 0x1ff
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dca4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
 800dca8:	eb04 0353 	add.w	r3, r4, r3, lsr #1
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800dcac:	4401      	add	r1, r0
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
 800dcae:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800dcb2:	6269      	str	r1, [r5, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
 800dcb4:	f4ff af0a 	bcc.w	800dacc <find_volume.lto_priv.87+0x7c>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800dcb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	fs->fsi_flag = 0x80;
 800dcbc:	2280      	movs	r2, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800dcbe:	612b      	str	r3, [r5, #16]
 800dcc0:	60eb      	str	r3, [r5, #12]
	fs->fsi_flag = 0x80;
 800dcc2:	716a      	strb	r2, [r5, #5]
	fmt = FS_FAT12;
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	e794      	b.n	800dbf2 <find_volume.lto_priv.87+0x1a2>
 800dcc8:	20000c88 	.word	0x20000c88
 800dccc:	200015fa 	.word	0x200015fa
 800dcd0:	41615252 	.word	0x41615252
	...

0800dce0 <follow_path.lto_priv.129>:
{
 800dce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800dce4:	780b      	ldrb	r3, [r1, #0]
 800dce6:	2b2f      	cmp	r3, #47	; 0x2f
{
 800dce8:	460e      	mov	r6, r1
 800dcea:	4680      	mov	r8, r0
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800dcec:	d06d      	beq.n	800ddca <follow_path.lto_priv.129+0xea>
 800dcee:	2b5c      	cmp	r3, #92	; 0x5c
 800dcf0:	d06b      	beq.n	800ddca <follow_path.lto_priv.129+0xea>
	dp->sclust = 0;							/* Always start from the root directory */
 800dcf2:	2400      	movs	r4, #0
 800dcf4:	f8c8 4008 	str.w	r4, [r8, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dcf8:	7833      	ldrb	r3, [r6, #0]
 800dcfa:	2b1f      	cmp	r3, #31
 800dcfc:	d96c      	bls.n	800ddd8 <follow_path.lto_priv.129+0xf8>
 800dcfe:	f8d8 7018 	ldr.w	r7, [r8, #24]
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800dd02:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 800ded4 <follow_path.lto_priv.129+0x1f4>
 800dd06:	f107 050b 	add.w	r5, r7, #11
 800dd0a:	e001      	b.n	800dd10 <follow_path.lto_priv.129+0x30>
 800dd0c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800dd10:	2b2f      	cmp	r3, #47	; 0x2f
 800dd12:	d0fb      	beq.n	800dd0c <follow_path.lto_priv.129+0x2c>
 800dd14:	2b5c      	cmp	r3, #92	; 0x5c
 800dd16:	d0f9      	beq.n	800dd0c <follow_path.lto_priv.129+0x2c>
 800dd18:	463b      	mov	r3, r7
		*d++ = (BYTE)val;
 800dd1a:	2220      	movs	r2, #32
 800dd1c:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
 800dd20:	42ab      	cmp	r3, r5
 800dd22:	d1fb      	bne.n	800dd1c <follow_path.lto_priv.129+0x3c>
 800dd24:	2000      	movs	r0, #0
 800dd26:	4604      	mov	r4, r0
 800dd28:	4605      	mov	r5, r0
 800dd2a:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 800dd2e:	f04f 0c08 	mov.w	ip, #8
		c = (BYTE)p[si++];
 800dd32:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800dd36:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 800dd38:	f104 0401 	add.w	r4, r4, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800dd3c:	d922      	bls.n	800dd84 <follow_path.lto_priv.129+0xa4>
 800dd3e:	2b2f      	cmp	r3, #47	; 0x2f
 800dd40:	d03e      	beq.n	800ddc0 <follow_path.lto_priv.129+0xe0>
 800dd42:	2b5c      	cmp	r3, #92	; 0x5c
 800dd44:	d03c      	beq.n	800ddc0 <follow_path.lto_priv.129+0xe0>
		if (c == '.' || i >= ni) {
 800dd46:	2b2e      	cmp	r3, #46	; 0x2e
 800dd48:	d022      	beq.n	800dd90 <follow_path.lto_priv.129+0xb0>
 800dd4a:	4584      	cmp	ip, r0
 800dd4c:	d91d      	bls.n	800dd8a <follow_path.lto_priv.129+0xaa>
		if (c >= 0x80) {				/* Extended character? */
 800dd4e:	0619      	lsls	r1, r3, #24
 800dd50:	d430      	bmi.n	800ddb4 <follow_path.lto_priv.129+0xd4>
	while (*str && *str != chr) str++;
 800dd52:	2b22      	cmp	r3, #34	; 0x22
 800dd54:	d019      	beq.n	800dd8a <follow_path.lto_priv.129+0xaa>
 800dd56:	495e      	ldr	r1, [pc, #376]	; (800ded0 <follow_path.lto_priv.129+0x1f0>)
 800dd58:	222a      	movs	r2, #42	; 0x2a
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d015      	beq.n	800dd8a <follow_path.lto_priv.129+0xaa>
 800dd5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dd62:	2a00      	cmp	r2, #0
 800dd64:	d1f9      	bne.n	800dd5a <follow_path.lto_priv.129+0x7a>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800dd66:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800dd6a:	2a19      	cmp	r2, #25
 800dd6c:	d819      	bhi.n	800dda2 <follow_path.lto_priv.129+0xc2>
				b |= 2;
 800dd6e:	f045 0502 	orr.w	r5, r5, #2
			sfn[i++] = c;
 800dd72:	543b      	strb	r3, [r7, r0]
		c = (BYTE)p[si++];
 800dd74:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800dd78:	2b20      	cmp	r3, #32
			sfn[i++] = c;
 800dd7a:	f100 0001 	add.w	r0, r0, #1
		c = (BYTE)p[si++];
 800dd7e:	f104 0401 	add.w	r4, r4, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800dd82:	d8dc      	bhi.n	800dd3e <follow_path.lto_priv.129+0x5e>
	*path = &p[si];						/* Return pointer to the next segment */
 800dd84:	4426      	add	r6, r4
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800dd86:	2304      	movs	r3, #4
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800dd88:	bb70      	cbnz	r0, 800dde8 <follow_path.lto_priv.129+0x108>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800dd8a:	2006      	movs	r0, #6
 800dd8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd90:	f1bc 0f08 	cmp.w	ip, #8
 800dd94:	d1f9      	bne.n	800dd8a <follow_path.lto_priv.129+0xaa>
			b <<= 2; continue;
 800dd96:	00ad      	lsls	r5, r5, #2
			i = 8; ni = 11;
 800dd98:	4660      	mov	r0, ip
			b <<= 2; continue;
 800dd9a:	b2ed      	uxtb	r5, r5
			i = 8; ni = 11;
 800dd9c:	f04f 0c0b 	mov.w	ip, #11
 800dda0:	e7c7      	b.n	800dd32 <follow_path.lto_priv.129+0x52>
				if (IsLower(c)) {		/* ASCII small capital? */
 800dda2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800dda6:	2a19      	cmp	r2, #25
 800dda8:	d8e3      	bhi.n	800dd72 <follow_path.lto_priv.129+0x92>
					b |= 1; c -= 0x20;
 800ddaa:	3b20      	subs	r3, #32
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	f045 0501 	orr.w	r5, r5, #1
 800ddb2:	e7de      	b.n	800dd72 <follow_path.lto_priv.129+0x92>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ddb4:	3b80      	subs	r3, #128	; 0x80
			b |= 3;						/* Eliminate NT flag */
 800ddb6:	f045 0503 	orr.w	r5, r5, #3
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ddba:	f81a 3003 	ldrb.w	r3, [sl, r3]
 800ddbe:	e7c8      	b.n	800dd52 <follow_path.lto_priv.129+0x72>
	*path = &p[si];						/* Return pointer to the next segment */
 800ddc0:	4426      	add	r6, r4
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800ddc2:	2300      	movs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	d0e0      	beq.n	800dd8a <follow_path.lto_priv.129+0xaa>
 800ddc8:	e00e      	b.n	800dde8 <follow_path.lto_priv.129+0x108>
		path++;
 800ddca:	3601      	adds	r6, #1
	dp->sclust = 0;							/* Always start from the root directory */
 800ddcc:	2400      	movs	r4, #0
 800ddce:	f8c8 4008 	str.w	r4, [r8, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ddd2:	7833      	ldrb	r3, [r6, #0]
 800ddd4:	2b1f      	cmp	r3, #31
 800ddd6:	d892      	bhi.n	800dcfe <follow_path.lto_priv.129+0x1e>
		res = dir_sdi(dp, 0);
 800ddd8:	4621      	mov	r1, r4
 800ddda:	4640      	mov	r0, r8
 800dddc:	f7fa ff80 	bl	8008ce0 <dir_sdi.lto_priv.131>
		dp->dir = 0;
 800dde0:	f8c8 4014 	str.w	r4, [r8, #20]
 800dde4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 */
 800dde8:	783a      	ldrb	r2, [r7, #0]
 800ddea:	2ae5      	cmp	r2, #229	; 0xe5
 800ddec:	bf04      	itt	eq
 800ddee:	2205      	moveq	r2, #5
 800ddf0:	703a      	strbeq	r2, [r7, #0]
	if (ni == 8) b <<= 2;
 800ddf2:	f1bc 0f08 	cmp.w	ip, #8
 800ddf6:	bf04      	itt	eq
 800ddf8:	00ad      	lsleq	r5, r5, #2
 800ddfa:	b2ed      	uxtbeq	r5, r5
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800ddfc:	f005 0203 	and.w	r2, r5, #3
 800de00:	2a01      	cmp	r2, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800de02:	f005 050c 	and.w	r5, r5, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800de06:	bf08      	it	eq
 800de08:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800de0c:	2d04      	cmp	r5, #4
 800de0e:	bf08      	it	eq
 800de10:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NS] = c;		/* Store NT flag, File name is created */
 800de14:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800de16:	2100      	movs	r1, #0
 800de18:	4640      	mov	r0, r8
 800de1a:	f7fa ff61 	bl	8008ce0 <dir_sdi.lto_priv.131>
	if (res != FR_OK) return res;
 800de1e:	2800      	cmp	r0, #0
 800de20:	d13b      	bne.n	800de9a <follow_path.lto_priv.129+0x1ba>
		res = move_window(dp->fs, dp->sect);
 800de22:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800de26:	f8d8 0000 	ldr.w	r0, [r8]
 800de2a:	f7fb f991 	bl	8009150 <move_window.lto_priv.88>
		if (res != FR_OK) break;
 800de2e:	bba0      	cbnz	r0, 800de9a <follow_path.lto_priv.129+0x1ba>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800de30:	f8d8 c014 	ldr.w	ip, [r8, #20]
		c = dir[DIR_Name];
 800de34:	f89c 2000 	ldrb.w	r2, [ip]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800de38:	b39a      	cbz	r2, 800dea2 <follow_path.lto_priv.129+0x1c2>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800de3a:	f89c 900b 	ldrb.w	r9, [ip, #11]
 800de3e:	f019 0f08 	tst.w	r9, #8
 800de42:	d124      	bne.n	800de8e <follow_path.lto_priv.129+0x1ae>
 800de44:	f8d8 7018 	ldr.w	r7, [r8, #24]
 800de48:	f10c 0401 	add.w	r4, ip, #1
 800de4c:	f107 050b 	add.w	r5, r7, #11
 800de50:	463b      	mov	r3, r7
 800de52:	e001      	b.n	800de58 <follow_path.lto_priv.129+0x178>
 800de54:	f814 2b01 	ldrb.w	r2, [r4], #1
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800de58:	f813 1b01 	ldrb.w	r1, [r3], #1
 800de5c:	4291      	cmp	r1, r2
 800de5e:	d116      	bne.n	800de8e <follow_path.lto_priv.129+0x1ae>
 800de60:	42ab      	cmp	r3, r5
 800de62:	d1f7      	bne.n	800de54 <follow_path.lto_priv.129+0x174>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de64:	7afb      	ldrb	r3, [r7, #11]
 800de66:	075a      	lsls	r2, r3, #29
 800de68:	d42c      	bmi.n	800dec4 <follow_path.lto_priv.129+0x1e4>
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800de6a:	f019 0f10 	tst.w	r9, #16
 800de6e:	d01d      	beq.n	800deac <follow_path.lto_priv.129+0x1cc>
	if (fs->fs_type == FS_FAT32)
 800de70:	f8d8 3000 	ldr.w	r3, [r8]
	cl = LD_WORD(dir+DIR_FstClusLO);
 800de74:	f89c 101b 	ldrb.w	r1, [ip, #27]
	if (fs->fs_type == FS_FAT32)
 800de78:	781a      	ldrb	r2, [r3, #0]
	cl = LD_WORD(dir+DIR_FstClusLO);
 800de7a:	f89c 301a 	ldrb.w	r3, [ip, #26]
	if (fs->fs_type == FS_FAT32)
 800de7e:	2a03      	cmp	r2, #3
	cl = LD_WORD(dir+DIR_FstClusLO);
 800de80:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (fs->fs_type == FS_FAT32)
 800de84:	d015      	beq.n	800deb2 <follow_path.lto_priv.129+0x1d2>
			dp->sclust = ld_clust(dp->fs, dir);
 800de86:	f8c8 3008 	str.w	r3, [r8, #8]
 800de8a:	7833      	ldrb	r3, [r6, #0]
 800de8c:	e740      	b.n	800dd10 <follow_path.lto_priv.129+0x30>
		res = dir_next(dp, 0);		/* Next entry */
 800de8e:	2100      	movs	r1, #0
 800de90:	4640      	mov	r0, r8
 800de92:	f7fa ffdd 	bl	8008e50 <dir_next.lto_priv.132>
	} while (res == FR_OK);
 800de96:	2800      	cmp	r0, #0
 800de98:	d0c3      	beq.n	800de22 <follow_path.lto_priv.129+0x142>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800de9a:	2804      	cmp	r0, #4
 800de9c:	d001      	beq.n	800dea2 <follow_path.lto_priv.129+0x1c2>
}
 800de9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ns = dp->fn[NS];
 800dea2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800dea6:	7adb      	ldrb	r3, [r3, #11]
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dea8:	075b      	lsls	r3, r3, #29
 800deaa:	d40d      	bmi.n	800dec8 <follow_path.lto_priv.129+0x1e8>
 800deac:	2005      	movs	r0, #5
 800deae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 800deb2:	f89c 1015 	ldrb.w	r1, [ip, #21]
 800deb6:	f89c 2014 	ldrb.w	r2, [ip, #20]
 800deba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800debe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dec2:	e7e0      	b.n	800de86 <follow_path.lto_priv.129+0x1a6>
 800dec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dec8:	2004      	movs	r0, #4
 800deca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dece:	bf00      	nop
 800ded0:	08010191 	.word	0x08010191
 800ded4:	08010110 	.word	0x08010110
	...

0800dee0 <dir_remove.lto_priv.127>:
{
 800dee0:	b510      	push	{r4, lr}
	res = dir_sdi(dp, dp->index);
 800dee2:	88c1      	ldrh	r1, [r0, #6]
{
 800dee4:	4604      	mov	r4, r0
	res = dir_sdi(dp, dp->index);
 800dee6:	f7fa fefb 	bl	8008ce0 <dir_sdi.lto_priv.131>
	if (res == FR_OK) {
 800deea:	b100      	cbz	r0, 800deee <dir_remove.lto_priv.127+0xe>
}
 800deec:	bd10      	pop	{r4, pc}
		res = move_window(dp->fs, dp->sect);
 800deee:	6921      	ldr	r1, [r4, #16]
 800def0:	6820      	ldr	r0, [r4, #0]
 800def2:	f7fb f92d 	bl	8009150 <move_window.lto_priv.88>
		if (res == FR_OK) {
 800def6:	2800      	cmp	r0, #0
 800def8:	d1f8      	bne.n	800deec <dir_remove.lto_priv.127+0xc>
			mem_set(dp->dir, 0, SZ_DIR);	/* Clear and mark the entry "deleted" */
 800defa:	6963      	ldr	r3, [r4, #20]
		*d++ = (BYTE)val;
 800defc:	4601      	mov	r1, r0
 800defe:	f103 0220 	add.w	r2, r3, #32
 800df02:	f803 1b01 	strb.w	r1, [r3], #1
	while (cnt--)
 800df06:	4293      	cmp	r3, r2
 800df08:	d1fb      	bne.n	800df02 <dir_remove.lto_priv.127+0x22>
			*dp->dir = DDE;
 800df0a:	6963      	ldr	r3, [r4, #20]
 800df0c:	22e5      	movs	r2, #229	; 0xe5
 800df0e:	701a      	strb	r2, [r3, #0]
			dp->fs->wflag = 1;
 800df10:	6823      	ldr	r3, [r4, #0]
 800df12:	2201      	movs	r2, #1
 800df14:	711a      	strb	r2, [r3, #4]
}
 800df16:	bd10      	pop	{r4, pc}
	...

0800df20 <dir_register.lto_priv.128>:
{
 800df20:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 800df22:	2100      	movs	r1, #0
{
 800df24:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);
 800df26:	f7fa fedb 	bl	8008ce0 <dir_sdi.lto_priv.131>
	if (res == FR_OK) {
 800df2a:	b138      	cbz	r0, 800df3c <dir_register.lto_priv.128+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800df2c:	2804      	cmp	r0, #4
 800df2e:	bf08      	it	eq
 800df30:	2007      	moveq	r0, #7
}
 800df32:	bd38      	pop	{r3, r4, r5, pc}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800df34:	f7fa ff8c 	bl	8008e50 <dir_next.lto_priv.132>
		} while (res == FR_OK);
 800df38:	2800      	cmp	r0, #0
 800df3a:	d1f7      	bne.n	800df2c <dir_register.lto_priv.128+0xc>
			res = move_window(dp->fs, dp->sect);
 800df3c:	6921      	ldr	r1, [r4, #16]
 800df3e:	6820      	ldr	r0, [r4, #0]
 800df40:	f7fb f906 	bl	8009150 <move_window.lto_priv.88>
			if (res != FR_OK) break;
 800df44:	2800      	cmp	r0, #0
 800df46:	d1f1      	bne.n	800df2c <dir_register.lto_priv.128+0xc>
			if (dp->dir[0] == DDE || dp->dir[0] == 0) {	/* Is it a blank entry? */
 800df48:	6963      	ldr	r3, [r4, #20]
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	2be5      	cmp	r3, #229	; 0xe5
 800df4e:	d003      	beq.n	800df58 <dir_register.lto_priv.128+0x38>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800df50:	2101      	movs	r1, #1
 800df52:	4620      	mov	r0, r4
			if (dp->dir[0] == DDE || dp->dir[0] == 0) {	/* Is it a blank entry? */
 800df54:	2b00      	cmp	r3, #0
 800df56:	d1ed      	bne.n	800df34 <dir_register.lto_priv.128+0x14>
		res = move_window(dp->fs, dp->sect);
 800df58:	6921      	ldr	r1, [r4, #16]
 800df5a:	6820      	ldr	r0, [r4, #0]
 800df5c:	f7fb f8f8 	bl	8009150 <move_window.lto_priv.88>
		if (res == FR_OK) {
 800df60:	b9b0      	cbnz	r0, 800df90 <dir_register.lto_priv.128+0x70>
			mem_set(dp->dir, 0, SZ_DIR);	/* Clean the entry */
 800df62:	6963      	ldr	r3, [r4, #20]
		*d++ = (BYTE)val;
 800df64:	4601      	mov	r1, r0
 800df66:	f103 0220 	add.w	r2, r3, #32
 800df6a:	f803 1b01 	strb.w	r1, [r3], #1
	while (cnt--)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d1fb      	bne.n	800df6a <dir_register.lto_priv.128+0x4a>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800df72:	69a3      	ldr	r3, [r4, #24]
 800df74:	6962      	ldr	r2, [r4, #20]
 800df76:	f103 050b 	add.w	r5, r3, #11
 800df7a:	3a01      	subs	r2, #1
		*d++ = *s++;
 800df7c:	f813 1b01 	ldrb.w	r1, [r3], #1
 800df80:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 800df84:	429d      	cmp	r5, r3
 800df86:	d1f9      	bne.n	800df7c <dir_register.lto_priv.128+0x5c>
			dp->fs->wflag = 1;
 800df88:	6823      	ldr	r3, [r4, #0]
 800df8a:	2201      	movs	r2, #1
 800df8c:	711a      	strb	r2, [r3, #4]
 800df8e:	bd38      	pop	{r3, r4, r5, pc}
 800df90:	bd38      	pop	{r3, r4, r5, pc}
 800df92:	bf00      	nop
	...

0800dfa0 <f_open>:
{
 800dfa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfa4:	b08d      	sub	sp, #52	; 0x34
 800dfa6:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 800dfa8:	b330      	cbz	r0, 800dff8 <f_open+0x58>
	fp->fs = 0;			/* Clear file object */
 800dfaa:	2300      	movs	r3, #0
 800dfac:	6003      	str	r3, [r0, #0]
 800dfae:	4605      	mov	r5, r0
 800dfb0:	4614      	mov	r4, r2
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800dfb2:	a805      	add	r0, sp, #20
 800dfb4:	f002 021e 	and.w	r2, r2, #30
 800dfb8:	a901      	add	r1, sp, #4
 800dfba:	f7ff fd49 	bl	800da50 <find_volume.lto_priv.87>
	if (res == FR_OK) {
 800dfbe:	4606      	mov	r6, r0
 800dfc0:	b118      	cbz	r0, 800dfca <f_open+0x2a>
}
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	b00d      	add	sp, #52	; 0x34
 800dfc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		INIT_BUF(dj);
 800dfca:	ab02      	add	r3, sp, #8
		res = follow_path(&dj, path);	/* Follow the file path */
 800dfcc:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800dfce:	930b      	str	r3, [sp, #44]	; 0x2c
		res = follow_path(&dj, path);	/* Follow the file path */
 800dfd0:	a805      	add	r0, sp, #20
 800dfd2:	f7ff fe85 	bl	800dce0 <follow_path.lto_priv.129>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800dfd6:	f004 081f 	and.w	r8, r4, #31
		dir = dj.dir;
 800dfda:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		if (res == FR_OK) {
 800dfdc:	b988      	cbnz	r0, 800e002 <f_open+0x62>
			if (!dir)	/* Default directory itself */
 800dfde:	2f00      	cmp	r7, #0
 800dfe0:	d055      	beq.n	800e08e <f_open+0xee>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dfe2:	f014 0f1c 	tst.w	r4, #28
 800dfe6:	d013      	beq.n	800e010 <f_open+0x70>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dfe8:	7afb      	ldrb	r3, [r7, #11]
 800dfea:	f013 0f11 	tst.w	r3, #17
 800dfee:	d136      	bne.n	800e05e <f_open+0xbe>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800dff0:	0761      	lsls	r1, r4, #29
 800dff2:	d540      	bpl.n	800e076 <f_open+0xd6>
						res = FR_EXIST;
 800dff4:	2608      	movs	r6, #8
 800dff6:	e7e4      	b.n	800dfc2 <f_open+0x22>
	if (!fp) return FR_INVALID_OBJECT;
 800dff8:	2609      	movs	r6, #9
}
 800dffa:	4630      	mov	r0, r6
 800dffc:	b00d      	add	sp, #52	; 0x34
 800dffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e002:	f014 0f1c 	tst.w	r4, #28
 800e006:	d001      	beq.n	800e00c <f_open+0x6c>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800e008:	2804      	cmp	r0, #4
 800e00a:	d02c      	beq.n	800e066 <f_open+0xc6>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800e00c:	4606      	mov	r6, r0
 800e00e:	e7d8      	b.n	800dfc2 <f_open+0x22>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800e010:	7afb      	ldrb	r3, [r7, #11]
 800e012:	06da      	lsls	r2, r3, #27
 800e014:	d425      	bmi.n	800e062 <f_open+0xc2>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800e016:	07a0      	lsls	r0, r4, #30
 800e018:	d501      	bpl.n	800e01e <f_open+0x7e>
 800e01a:	07d9      	lsls	r1, r3, #31
 800e01c:	d41f      	bmi.n	800e05e <f_open+0xbe>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e01e:	0722      	lsls	r2, r4, #28
 800e020:	9b05      	ldr	r3, [sp, #20]
 800e022:	d501      	bpl.n	800e028 <f_open+0x88>
				mode |= FA__WRITTEN;
 800e024:	f048 0820 	orr.w	r8, r8, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800e028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e02a:	61ea      	str	r2, [r5, #28]
			fp->err = 0;						/* Clear error flag */
 800e02c:	2200      	movs	r2, #0
			fp->dir_ptr = dir;
 800e02e:	622f      	str	r7, [r5, #32]
			fp->flag = mode;					/* File access mode */
 800e030:	f885 8006 	strb.w	r8, [r5, #6]
			fp->err = 0;						/* Clear error flag */
 800e034:	71ea      	strb	r2, [r5, #7]
	if (fs->fs_type == FS_FAT32)
 800e036:	7819      	ldrb	r1, [r3, #0]
	cl = LD_WORD(dir+DIR_FstClusLO);
 800e038:	7ef8      	ldrb	r0, [r7, #27]
 800e03a:	7eba      	ldrb	r2, [r7, #26]
	if (fs->fs_type == FS_FAT32)
 800e03c:	2903      	cmp	r1, #3
	cl = LD_WORD(dir+DIR_FstClusLO);
 800e03e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32)
 800e042:	d01d      	beq.n	800e080 <f_open+0xe0>
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800e044:	612a      	str	r2, [r5, #16]
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 800e046:	69fa      	ldr	r2, [r7, #28]
			fp->id = fp->fs->id;
 800e048:	88d9      	ldrh	r1, [r3, #6]
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 800e04a:	60ea      	str	r2, [r5, #12]
}
 800e04c:	4630      	mov	r0, r6
			fp->fptr = 0;						/* File pointer */
 800e04e:	2200      	movs	r2, #0
			fp->fs = dj.fs;	 					/* Validate file object */
 800e050:	602b      	str	r3, [r5, #0]
			fp->id = fp->fs->id;
 800e052:	80a9      	strh	r1, [r5, #4]
			fp->fptr = 0;						/* File pointer */
 800e054:	60aa      	str	r2, [r5, #8]
			fp->dsect = 0;
 800e056:	61aa      	str	r2, [r5, #24]
}
 800e058:	b00d      	add	sp, #52	; 0x34
 800e05a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					res = FR_DENIED;
 800e05e:	2607      	movs	r6, #7
 800e060:	e7af      	b.n	800dfc2 <f_open+0x22>
					res = FR_NO_FILE;
 800e062:	2604      	movs	r6, #4
 800e064:	e7ad      	b.n	800dfc2 <f_open+0x22>
					res = dir_register(&dj);
 800e066:	a805      	add	r0, sp, #20
 800e068:	f7ff ff5a 	bl	800df20 <dir_register.lto_priv.128>
 800e06c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e06e:	2800      	cmp	r0, #0
 800e070:	d1cc      	bne.n	800e00c <f_open+0x6c>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e072:	f048 0808 	orr.w	r8, r8, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e076:	f018 0f08 	tst.w	r8, #8
 800e07a:	d10e      	bne.n	800e09a <f_open+0xfa>
 800e07c:	9b05      	ldr	r3, [sp, #20]
 800e07e:	e7d3      	b.n	800e028 <f_open+0x88>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 800e080:	7d78      	ldrb	r0, [r7, #21]
 800e082:	7d39      	ldrb	r1, [r7, #20]
 800e084:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800e088:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e08c:	e7da      	b.n	800e044 <f_open+0xa4>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e08e:	f014 0f1c 	tst.w	r4, #28
 800e092:	d03f      	beq.n	800e114 <f_open+0x174>
				res = FR_INVALID_NAME;
 800e094:	2006      	movs	r0, #6
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800e096:	4606      	mov	r6, r0
 800e098:	e793      	b.n	800dfc2 <f_open+0x22>
				ST_DWORD(dir+DIR_CrtTime, dw);
 800e09a:	2200      	movs	r2, #0
 800e09c:	2121      	movs	r1, #33	; 0x21
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800e09e:	9b05      	ldr	r3, [sp, #20]
				ST_DWORD(dir+DIR_CrtTime, dw);
 800e0a0:	7439      	strb	r1, [r7, #16]
 800e0a2:	73ba      	strb	r2, [r7, #14]
 800e0a4:	73fa      	strb	r2, [r7, #15]
 800e0a6:	747a      	strb	r2, [r7, #17]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800e0a8:	72fa      	strb	r2, [r7, #11]
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
 800e0aa:	773a      	strb	r2, [r7, #28]
 800e0ac:	777a      	strb	r2, [r7, #29]
 800e0ae:	77ba      	strb	r2, [r7, #30]
 800e0b0:	77fa      	strb	r2, [r7, #31]
	if (fs->fs_type == FS_FAT32)
 800e0b2:	781a      	ldrb	r2, [r3, #0]
	cl = LD_WORD(dir+DIR_FstClusLO);
 800e0b4:	7ef9      	ldrb	r1, [r7, #27]
 800e0b6:	7ebc      	ldrb	r4, [r7, #26]
	if (fs->fs_type == FS_FAT32)
 800e0b8:	2a03      	cmp	r2, #3
	cl = LD_WORD(dir+DIR_FstClusLO);
 800e0ba:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
	if (fs->fs_type == FS_FAT32)
 800e0be:	d00f      	beq.n	800e0e0 <f_open+0x140>
	ST_WORD(dir+DIR_FstClusLO, cl);
 800e0c0:	2200      	movs	r2, #0
				dj.fs->wflag = 1;
 800e0c2:	2101      	movs	r1, #1
	ST_WORD(dir+DIR_FstClusLO, cl);
 800e0c4:	76ba      	strb	r2, [r7, #26]
 800e0c6:	76fa      	strb	r2, [r7, #27]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 800e0c8:	753a      	strb	r2, [r7, #20]
 800e0ca:	757a      	strb	r2, [r7, #21]
				dj.fs->wflag = 1;
 800e0cc:	7119      	strb	r1, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800e0ce:	2c00      	cmp	r4, #0
 800e0d0:	d0a8      	beq.n	800e024 <f_open+0x84>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800e0d2:	428c      	cmp	r4, r1
 800e0d4:	d002      	beq.n	800e0dc <f_open+0x13c>
 800e0d6:	695a      	ldr	r2, [r3, #20]
 800e0d8:	4294      	cmp	r4, r2
 800e0da:	d308      	bcc.n	800e0ee <f_open+0x14e>
 800e0dc:	2602      	movs	r6, #2
 800e0de:	e770      	b.n	800dfc2 <f_open+0x22>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 800e0e0:	7d79      	ldrb	r1, [r7, #21]
 800e0e2:	7d3a      	ldrb	r2, [r7, #20]
 800e0e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e0e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e0ec:	e7e8      	b.n	800e0c0 <f_open+0x120>
 800e0ee:	4621      	mov	r1, r4
 800e0f0:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 800e0f2:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
 800e0f6:	f7fd fe2b 	bl	800bd50 <remove_chain.part.10.lto_priv.130>
					if (res == FR_OK) {
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	d186      	bne.n	800e00c <f_open+0x6c>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800e0fe:	9805      	ldr	r0, [sp, #20]
 800e100:	3c01      	subs	r4, #1
						res = move_window(dj.fs, dw);
 800e102:	4649      	mov	r1, r9
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800e104:	60c4      	str	r4, [r0, #12]
						res = move_window(dj.fs, dw);
 800e106:	f7fb f823 	bl	8009150 <move_window.lto_priv.88>
		if (res == FR_OK) {
 800e10a:	2800      	cmp	r0, #0
 800e10c:	f47f af7e 	bne.w	800e00c <f_open+0x6c>
 800e110:	9b05      	ldr	r3, [sp, #20]
 800e112:	e787      	b.n	800e024 <f_open+0x84>
				res = FR_INVALID_NAME;
 800e114:	2606      	movs	r6, #6
 800e116:	e754      	b.n	800dfc2 <f_open+0x22>
	...

0800e120 <emr3_log>:
{
 800e120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e124:	4e39      	ldr	r6, [pc, #228]	; (800e20c <emr3_log+0xec>)
        if(read_eeprom(SD_logemr3) == 0) break;
 800e126:	f896 3085 	ldrb.w	r3, [r6, #133]	; 0x85
{
 800e12a:	4605      	mov	r5, r0
 800e12c:	460c      	mov	r4, r1
 800e12e:	4617      	mov	r7, r2
        if(read_eeprom(SD_logemr3) == 0) break;
 800e130:	b133      	cbz	r3, 800e140 <emr3_log+0x20>
        chThdSleepMilliseconds(10);
 800e132:	2064      	movs	r0, #100	; 0x64
 800e134:	f7fe fc84 	bl	800ca40 <chThdSleep>
        if(read_eeprom(SD_logemr3) == 0) break;
 800e138:	f896 3085 	ldrb.w	r3, [r6, #133]	; 0x85
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d1f8      	bne.n	800e132 <emr3_log+0x12>
    if(dta_emr3 == 1)
 800e140:	2f01      	cmp	r7, #1
 800e142:	d033      	beq.n	800e1ac <emr3_log+0x8c>
    else if(dta_emr3 == 2)
 800e144:	2f02      	cmp	r7, #2
 800e146:	d001      	beq.n	800e14c <emr3_log+0x2c>
 800e148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        log_Rx[0]='R';
 800e14c:	4f30      	ldr	r7, [pc, #192]	; (800e210 <emr3_log+0xf0>)
 800e14e:	2152      	movs	r1, #82	; 0x52
        log_Rx[1]='x';
 800e150:	2278      	movs	r2, #120	; 0x78
        log_Rx[2]=':';
 800e152:	233a      	movs	r3, #58	; 0x3a
        log_Rx[0]='R';
 800e154:	7039      	strb	r1, [r7, #0]
        log_Rx[1]='x';
 800e156:	707a      	strb	r2, [r7, #1]
        log_Rx[2]=':';
 800e158:	70bb      	strb	r3, [r7, #2]
        for(i=0;i<Tx;i++)
 800e15a:	2c00      	cmp	r4, #0
 800e15c:	d052      	beq.n	800e204 <emr3_log+0xe4>
 800e15e:	3401      	adds	r4, #1
 800e160:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800e164:	fa5f f884 	uxtb.w	r8, r4
 800e168:	3d01      	subs	r5, #1
 800e16a:	2403      	movs	r4, #3
            log_Rx[k] = ',';
 800e16c:	f04f 092c 	mov.w	r9, #44	; 0x2c
            log_Rx[k] = ascii(((DataTx[i] >> 4) & 0X0F));
 800e170:	7868      	ldrb	r0, [r5, #1]
 800e172:	0900      	lsrs	r0, r0, #4
 800e174:	f001 f8d4 	bl	800f320 <ascii>
 800e178:	5538      	strb	r0, [r7, r4]
            log_Rx[k] = ascii((DataTx[i] & 0X0F));
 800e17a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800e17e:	f000 000f 	and.w	r0, r0, #15
 800e182:	f001 f8cd 	bl	800f320 <ascii>
            k++;
 800e186:	1c62      	adds	r2, r4, #1
            k++;
 800e188:	1ca3      	adds	r3, r4, #2
            k++;
 800e18a:	3403      	adds	r4, #3
            log_Rx[k] = ascii((DataTx[i] & 0X0F));
 800e18c:	b2d2      	uxtb	r2, r2
            log_Rx[k] = ',';
 800e18e:	b2db      	uxtb	r3, r3
            k++;
 800e190:	b2e4      	uxtb	r4, r4
        for(i=0;i<Tx;i++)
 800e192:	45a0      	cmp	r8, r4
            log_Rx[k] = ascii((DataTx[i] & 0X0F));
 800e194:	54b8      	strb	r0, [r7, r2]
            log_Rx[k] = ',';
 800e196:	f807 9003 	strb.w	r9, [r7, r3]
        for(i=0;i<Tx;i++)
 800e19a:	d1e9      	bne.n	800e170 <emr3_log+0x50>
        log_Rx[k]=0x00;        
 800e19c:	2300      	movs	r3, #0
 800e19e:	f807 3008 	strb.w	r3, [r7, r8]
	dato_emr3[num] = inf;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	f886 3085 	strb.w	r3, [r6, #133]	; 0x85
 800e1a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        log_Tx[0]='T';
 800e1ac:	4f19      	ldr	r7, [pc, #100]	; (800e214 <emr3_log+0xf4>)
 800e1ae:	2154      	movs	r1, #84	; 0x54
        log_Tx[1]='x';
 800e1b0:	2278      	movs	r2, #120	; 0x78
        log_Tx[2]=':';
 800e1b2:	233a      	movs	r3, #58	; 0x3a
        log_Tx[0]='T';
 800e1b4:	7039      	strb	r1, [r7, #0]
        log_Tx[1]='x';
 800e1b6:	707a      	strb	r2, [r7, #1]
        log_Tx[2]=':';
 800e1b8:	70bb      	strb	r3, [r7, #2]
        for(i=0;i<Tx;i++)
 800e1ba:	b30c      	cbz	r4, 800e200 <emr3_log+0xe0>
 800e1bc:	3401      	adds	r4, #1
 800e1be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800e1c2:	b2e6      	uxtb	r6, r4
 800e1c4:	3d01      	subs	r5, #1
 800e1c6:	2403      	movs	r4, #3
            log_Tx[j] = ',';
 800e1c8:	f04f 082c 	mov.w	r8, #44	; 0x2c
            log_Tx[j] = ascii(((DataTx[i] >> 4) & 0X0F));
 800e1cc:	7868      	ldrb	r0, [r5, #1]
 800e1ce:	0900      	lsrs	r0, r0, #4
 800e1d0:	f001 f8a6 	bl	800f320 <ascii>
 800e1d4:	5538      	strb	r0, [r7, r4]
            log_Tx[j] = ascii((DataTx[i] & 0X0F));
 800e1d6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800e1da:	f000 000f 	and.w	r0, r0, #15
 800e1de:	f001 f89f 	bl	800f320 <ascii>
            j++;
 800e1e2:	1c62      	adds	r2, r4, #1
            j++;
 800e1e4:	1ca3      	adds	r3, r4, #2
            j++;
 800e1e6:	3403      	adds	r4, #3
            log_Tx[j] = ascii((DataTx[i] & 0X0F));
 800e1e8:	b2d2      	uxtb	r2, r2
            log_Tx[j] = ',';
 800e1ea:	b2db      	uxtb	r3, r3
            j++;
 800e1ec:	b2e4      	uxtb	r4, r4
        for(i=0;i<Tx;i++)
 800e1ee:	42b4      	cmp	r4, r6
            log_Tx[j] = ascii((DataTx[i] & 0X0F));
 800e1f0:	54b8      	strb	r0, [r7, r2]
            log_Tx[j] = ',';
 800e1f2:	f807 8003 	strb.w	r8, [r7, r3]
        for(i=0;i<Tx;i++)
 800e1f6:	d1e9      	bne.n	800e1cc <emr3_log+0xac>
        log_Tx[j]=0x00;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	553b      	strb	r3, [r7, r4]
 800e1fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for(i=0;i<Tx;i++)
 800e200:	2403      	movs	r4, #3
 800e202:	e7f9      	b.n	800e1f8 <emr3_log+0xd8>
        for(i=0;i<Tx;i++)
 800e204:	f04f 0803 	mov.w	r8, #3
 800e208:	e7c8      	b.n	800e19c <emr3_log+0x7c>
 800e20a:	bf00      	nop
 800e20c:	20001c74 	.word	0x20001c74
 800e210:	20001380 	.word	0x20001380
 800e214:	200013bc 	.word	0x200013bc
	...

0800e220 <emr3_sale2>:
{
 800e220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return (dato_emr3[num]);
 800e224:	4e39      	ldr	r6, [pc, #228]	; (800e30c <emr3_sale2+0xec>)
        if(read_eeprom(SD_emr3_sale2) == 0) break;
 800e226:	f896 308a 	ldrb.w	r3, [r6, #138]	; 0x8a
{
 800e22a:	4605      	mov	r5, r0
 800e22c:	460c      	mov	r4, r1
 800e22e:	4617      	mov	r7, r2
        if(read_eeprom(SD_emr3_sale2) == 0) break;
 800e230:	b133      	cbz	r3, 800e240 <emr3_sale2+0x20>
        chThdSleepMilliseconds(10);
 800e232:	2064      	movs	r0, #100	; 0x64
 800e234:	f7fe fc04 	bl	800ca40 <chThdSleep>
        if(read_eeprom(SD_emr3_sale2) == 0) break;
 800e238:	f896 308a 	ldrb.w	r3, [r6, #138]	; 0x8a
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d1f8      	bne.n	800e232 <emr3_sale2+0x12>
    if(dta_emr3 == 1)
 800e240:	2f01      	cmp	r7, #1
 800e242:	d033      	beq.n	800e2ac <emr3_sale2+0x8c>
    else if(dta_emr3 == 2)
 800e244:	2f02      	cmp	r7, #2
 800e246:	d001      	beq.n	800e24c <emr3_sale2+0x2c>
 800e248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        Data_Rx2[0]='R';
 800e24c:	4f30      	ldr	r7, [pc, #192]	; (800e310 <emr3_sale2+0xf0>)
 800e24e:	2152      	movs	r1, #82	; 0x52
        Data_Rx2[1]='x';
 800e250:	2278      	movs	r2, #120	; 0x78
        Data_Rx2[2]=':';
 800e252:	233a      	movs	r3, #58	; 0x3a
        Data_Rx2[0]='R';
 800e254:	7039      	strb	r1, [r7, #0]
        Data_Rx2[1]='x';
 800e256:	707a      	strb	r2, [r7, #1]
        Data_Rx2[2]=':';
 800e258:	70bb      	strb	r3, [r7, #2]
        for(i=0;i<Tx;i++)
 800e25a:	2c00      	cmp	r4, #0
 800e25c:	d052      	beq.n	800e304 <emr3_sale2+0xe4>
 800e25e:	3401      	adds	r4, #1
 800e260:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800e264:	fa5f f884 	uxtb.w	r8, r4
 800e268:	3d01      	subs	r5, #1
 800e26a:	2403      	movs	r4, #3
            Data_Rx2[k] = ',';
 800e26c:	f04f 092c 	mov.w	r9, #44	; 0x2c
            Data_Rx2[k] = ascii(((DataTx[i] >> 4) & 0X0F));
 800e270:	7868      	ldrb	r0, [r5, #1]
 800e272:	0900      	lsrs	r0, r0, #4
 800e274:	f001 f854 	bl	800f320 <ascii>
 800e278:	5538      	strb	r0, [r7, r4]
            Data_Rx2[k] = ascii((DataTx[i] & 0X0F));
 800e27a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800e27e:	f000 000f 	and.w	r0, r0, #15
 800e282:	f001 f84d 	bl	800f320 <ascii>
            k++;
 800e286:	1c62      	adds	r2, r4, #1
            k++;
 800e288:	1ca3      	adds	r3, r4, #2
            k++;
 800e28a:	3403      	adds	r4, #3
            Data_Rx2[k] = ascii((DataTx[i] & 0X0F));
 800e28c:	b2d2      	uxtb	r2, r2
            Data_Rx2[k] = ',';
 800e28e:	b2db      	uxtb	r3, r3
            k++;
 800e290:	b2e4      	uxtb	r4, r4
        for(i=0;i<Tx;i++)
 800e292:	45a0      	cmp	r8, r4
            Data_Rx2[k] = ascii((DataTx[i] & 0X0F));
 800e294:	54b8      	strb	r0, [r7, r2]
            Data_Rx2[k] = ',';
 800e296:	f807 9003 	strb.w	r9, [r7, r3]
        for(i=0;i<Tx;i++)
 800e29a:	d1e9      	bne.n	800e270 <emr3_sale2+0x50>
        Data_Rx2[k]=0x00;        
 800e29c:	2300      	movs	r3, #0
 800e29e:	f807 3008 	strb.w	r3, [r7, r8]
	dato_emr3[num] = inf;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	f886 308a 	strb.w	r3, [r6, #138]	; 0x8a
 800e2a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        Data_Tx2[0]='T';
 800e2ac:	4f19      	ldr	r7, [pc, #100]	; (800e314 <emr3_sale2+0xf4>)
 800e2ae:	2154      	movs	r1, #84	; 0x54
        Data_Tx2[1]='x';
 800e2b0:	2278      	movs	r2, #120	; 0x78
        Data_Tx2[2]=':';
 800e2b2:	233a      	movs	r3, #58	; 0x3a
        Data_Tx2[0]='T';
 800e2b4:	7039      	strb	r1, [r7, #0]
        Data_Tx2[1]='x';
 800e2b6:	707a      	strb	r2, [r7, #1]
        Data_Tx2[2]=':';
 800e2b8:	70bb      	strb	r3, [r7, #2]
        for(i=0;i<Tx;i++)
 800e2ba:	b30c      	cbz	r4, 800e300 <emr3_sale2+0xe0>
 800e2bc:	3401      	adds	r4, #1
 800e2be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800e2c2:	b2e6      	uxtb	r6, r4
 800e2c4:	3d01      	subs	r5, #1
 800e2c6:	2403      	movs	r4, #3
            Data_Tx2[j] = ',';
 800e2c8:	f04f 082c 	mov.w	r8, #44	; 0x2c
            Data_Tx2[j] = ascii(((DataTx[i] >> 4) & 0X0F));
 800e2cc:	7868      	ldrb	r0, [r5, #1]
 800e2ce:	0900      	lsrs	r0, r0, #4
 800e2d0:	f001 f826 	bl	800f320 <ascii>
 800e2d4:	5538      	strb	r0, [r7, r4]
            Data_Tx2[j] = ascii((DataTx[i] & 0X0F));
 800e2d6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800e2da:	f000 000f 	and.w	r0, r0, #15
 800e2de:	f001 f81f 	bl	800f320 <ascii>
            j++;
 800e2e2:	1c62      	adds	r2, r4, #1
            j++;
 800e2e4:	1ca3      	adds	r3, r4, #2
            j++;
 800e2e6:	3403      	adds	r4, #3
            Data_Tx2[j] = ascii((DataTx[i] & 0X0F));
 800e2e8:	b2d2      	uxtb	r2, r2
            Data_Tx2[j] = ',';
 800e2ea:	b2db      	uxtb	r3, r3
            j++;
 800e2ec:	b2e4      	uxtb	r4, r4
        for(i=0;i<Tx;i++)
 800e2ee:	42b4      	cmp	r4, r6
            Data_Tx2[j] = ascii((DataTx[i] & 0X0F));
 800e2f0:	54b8      	strb	r0, [r7, r2]
            Data_Tx2[j] = ',';
 800e2f2:	f807 8003 	strb.w	r8, [r7, r3]
        for(i=0;i<Tx;i++)
 800e2f6:	d1e9      	bne.n	800e2cc <emr3_sale2+0xac>
        Data_Tx2[j]=0x00;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	553b      	strb	r3, [r7, r4]
 800e2fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for(i=0;i<Tx;i++)
 800e300:	2403      	movs	r4, #3
 800e302:	e7f9      	b.n	800e2f8 <emr3_sale2+0xd8>
        for(i=0;i<Tx;i++)
 800e304:	f04f 0803 	mov.w	r8, #3
 800e308:	e7c8      	b.n	800e29c <emr3_sale2+0x7c>
 800e30a:	bf00      	nop
 800e30c:	20001c74 	.word	0x20001c74
 800e310:	20000974 	.word	0x20000974
 800e314:	20000b1c 	.word	0x20000b1c
	...

0800e320 <emr3_sale1>:
{
 800e320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return (dato_emr3[num]);
 800e324:	4e39      	ldr	r6, [pc, #228]	; (800e40c <emr3_sale1+0xec>)
        if(read_eeprom(SD_emr3_sale1) == 0) break;
 800e326:	f896 3089 	ldrb.w	r3, [r6, #137]	; 0x89
{
 800e32a:	4605      	mov	r5, r0
 800e32c:	460c      	mov	r4, r1
 800e32e:	4617      	mov	r7, r2
        if(read_eeprom(SD_emr3_sale1) == 0) break;
 800e330:	b133      	cbz	r3, 800e340 <emr3_sale1+0x20>
        chThdSleepMilliseconds(10);
 800e332:	2064      	movs	r0, #100	; 0x64
 800e334:	f7fe fb84 	bl	800ca40 <chThdSleep>
        if(read_eeprom(SD_emr3_sale1) == 0) break;
 800e338:	f896 3089 	ldrb.w	r3, [r6, #137]	; 0x89
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d1f8      	bne.n	800e332 <emr3_sale1+0x12>
    if(dta_emr3 == 1)
 800e340:	2f01      	cmp	r7, #1
 800e342:	d033      	beq.n	800e3ac <emr3_sale1+0x8c>
    else if(dta_emr3 == 2)
 800e344:	2f02      	cmp	r7, #2
 800e346:	d001      	beq.n	800e34c <emr3_sale1+0x2c>
 800e348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        Data_Rx[0]='R';
 800e34c:	4f30      	ldr	r7, [pc, #192]	; (800e410 <emr3_sale1+0xf0>)
 800e34e:	2152      	movs	r1, #82	; 0x52
        Data_Rx[1]='x';
 800e350:	2278      	movs	r2, #120	; 0x78
        Data_Rx[2]=':';
 800e352:	233a      	movs	r3, #58	; 0x3a
        Data_Rx[0]='R';
 800e354:	7039      	strb	r1, [r7, #0]
        Data_Rx[1]='x';
 800e356:	707a      	strb	r2, [r7, #1]
        Data_Rx[2]=':';
 800e358:	70bb      	strb	r3, [r7, #2]
        for(i=0;i<Tx;i++)
 800e35a:	2c00      	cmp	r4, #0
 800e35c:	d052      	beq.n	800e404 <emr3_sale1+0xe4>
 800e35e:	3401      	adds	r4, #1
 800e360:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800e364:	fa5f f884 	uxtb.w	r8, r4
 800e368:	3d01      	subs	r5, #1
 800e36a:	2403      	movs	r4, #3
            Data_Rx[k] = ',';
 800e36c:	f04f 092c 	mov.w	r9, #44	; 0x2c
            Data_Rx[k] = ascii(((DataTx[i] >> 4) & 0X0F));
 800e370:	7868      	ldrb	r0, [r5, #1]
 800e372:	0900      	lsrs	r0, r0, #4
 800e374:	f000 ffd4 	bl	800f320 <ascii>
 800e378:	5538      	strb	r0, [r7, r4]
            Data_Rx[k] = ascii((DataTx[i] & 0X0F));
 800e37a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800e37e:	f000 000f 	and.w	r0, r0, #15
 800e382:	f000 ffcd 	bl	800f320 <ascii>
            k++;
 800e386:	1c62      	adds	r2, r4, #1
            k++;
 800e388:	1ca3      	adds	r3, r4, #2
            k++;
 800e38a:	3403      	adds	r4, #3
            Data_Rx[k] = ascii((DataTx[i] & 0X0F));
 800e38c:	b2d2      	uxtb	r2, r2
            Data_Rx[k] = ',';
 800e38e:	b2db      	uxtb	r3, r3
            k++;
 800e390:	b2e4      	uxtb	r4, r4
        for(i=0;i<Tx;i++)
 800e392:	45a0      	cmp	r8, r4
            Data_Rx[k] = ascii((DataTx[i] & 0X0F));
 800e394:	54b8      	strb	r0, [r7, r2]
            Data_Rx[k] = ',';
 800e396:	f807 9003 	strb.w	r9, [r7, r3]
        for(i=0;i<Tx;i++)
 800e39a:	d1e9      	bne.n	800e370 <emr3_sale1+0x50>
        Data_Rx[k]=0x00;        
 800e39c:	2300      	movs	r3, #0
 800e39e:	f807 3008 	strb.w	r3, [r7, r8]
	dato_emr3[num] = inf;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	f886 3089 	strb.w	r3, [r6, #137]	; 0x89
 800e3a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        Data_Tx[0]='T';
 800e3ac:	4f19      	ldr	r7, [pc, #100]	; (800e414 <emr3_sale1+0xf4>)
 800e3ae:	2154      	movs	r1, #84	; 0x54
        Data_Tx[1]='x';
 800e3b0:	2278      	movs	r2, #120	; 0x78
        Data_Tx[2]=':';
 800e3b2:	233a      	movs	r3, #58	; 0x3a
        Data_Tx[0]='T';
 800e3b4:	7039      	strb	r1, [r7, #0]
        Data_Tx[1]='x';
 800e3b6:	707a      	strb	r2, [r7, #1]
        Data_Tx[2]=':';
 800e3b8:	70bb      	strb	r3, [r7, #2]
        for(i=0;i<Tx;i++)
 800e3ba:	b30c      	cbz	r4, 800e400 <emr3_sale1+0xe0>
 800e3bc:	3401      	adds	r4, #1
 800e3be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800e3c2:	b2e6      	uxtb	r6, r4
 800e3c4:	3d01      	subs	r5, #1
 800e3c6:	2403      	movs	r4, #3
            Data_Tx[j] = ',';
 800e3c8:	f04f 082c 	mov.w	r8, #44	; 0x2c
            Data_Tx[j] = ascii(((DataTx[i] >> 4) & 0X0F));
 800e3cc:	7868      	ldrb	r0, [r5, #1]
 800e3ce:	0900      	lsrs	r0, r0, #4
 800e3d0:	f000 ffa6 	bl	800f320 <ascii>
 800e3d4:	5538      	strb	r0, [r7, r4]
            Data_Tx[j] = ascii((DataTx[i] & 0X0F));
 800e3d6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800e3da:	f000 000f 	and.w	r0, r0, #15
 800e3de:	f000 ff9f 	bl	800f320 <ascii>
            j++;
 800e3e2:	1c62      	adds	r2, r4, #1
            j++;
 800e3e4:	1ca3      	adds	r3, r4, #2
            j++;
 800e3e6:	3403      	adds	r4, #3
            Data_Tx[j] = ascii((DataTx[i] & 0X0F));
 800e3e8:	b2d2      	uxtb	r2, r2
            Data_Tx[j] = ',';
 800e3ea:	b2db      	uxtb	r3, r3
            j++;
 800e3ec:	b2e4      	uxtb	r4, r4
        for(i=0;i<Tx;i++)
 800e3ee:	42b4      	cmp	r4, r6
            Data_Tx[j] = ascii((DataTx[i] & 0X0F));
 800e3f0:	54b8      	strb	r0, [r7, r2]
            Data_Tx[j] = ',';
 800e3f2:	f807 8003 	strb.w	r8, [r7, r3]
        for(i=0;i<Tx;i++)
 800e3f6:	d1e9      	bne.n	800e3cc <emr3_sale1+0xac>
        Data_Tx[j]=0x00;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	553b      	strb	r3, [r7, r4]
 800e3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for(i=0;i<Tx;i++)
 800e400:	2403      	movs	r4, #3
 800e402:	e7f9      	b.n	800e3f8 <emr3_sale1+0xd8>
        for(i=0;i<Tx;i++)
 800e404:	f04f 0803 	mov.w	r8, #3
 800e408:	e7c8      	b.n	800e39c <emr3_sale1+0x7c>
 800e40a:	bf00      	nop
 800e40c:	20001c74 	.word	0x20001c74
 800e410:	20000938 	.word	0x20000938
 800e414:	20000ae0 	.word	0x20000ae0
	...

0800e420 <borrar_sd2>:
{
 800e420:	b570      	push	{r4, r5, r6, lr}
    fr2 = f_unlink("trans2h.txt");
 800e422:	4e0e      	ldr	r6, [pc, #56]	; (800e45c <borrar_sd2+0x3c>)
    fr2 = f_unlink("s2emr3h.txt");
 800e424:	4d0e      	ldr	r5, [pc, #56]	; (800e460 <borrar_sd2+0x40>)
    fr2 = f_unlink("s2wireh.txt");
 800e426:	4c0f      	ldr	r4, [pc, #60]	; (800e464 <borrar_sd2+0x44>)
    fr2 = f_unlink("trans2h.txt");
 800e428:	4630      	mov	r0, r6
 800e42a:	f7fc fd39 	bl	800aea0 <f_unlink>
    fr2 = f_unlink("s2emr3h.txt");
 800e42e:	4628      	mov	r0, r5
 800e430:	f7fc fd36 	bl	800aea0 <f_unlink>
    fr2 = f_unlink("s2wireh.txt");
 800e434:	4620      	mov	r0, r4
 800e436:	f7fc fd33 	bl	800aea0 <f_unlink>
    fr2 = f_rename("trans2.txt","trans2h.txt");
 800e43a:	4631      	mov	r1, r6
 800e43c:	480a      	ldr	r0, [pc, #40]	; (800e468 <borrar_sd2+0x48>)
 800e43e:	f7fc fc87 	bl	800ad50 <f_rename>
    fr2 = f_rename("s2emr3.txt","s2emr3h.txt");
 800e442:	4629      	mov	r1, r5
 800e444:	4809      	ldr	r0, [pc, #36]	; (800e46c <borrar_sd2+0x4c>)
 800e446:	f7fc fc83 	bl	800ad50 <f_rename>
    fr2 = f_rename("s2wire.txt","s2wireh.txt");
 800e44a:	4621      	mov	r1, r4
 800e44c:	4808      	ldr	r0, [pc, #32]	; (800e470 <borrar_sd2+0x50>)
 800e44e:	f7fc fc7f 	bl	800ad50 <f_rename>
    ventas_2 = false;
 800e452:	4b08      	ldr	r3, [pc, #32]	; (800e474 <borrar_sd2+0x54>)
 800e454:	2200      	movs	r2, #0
 800e456:	701a      	strb	r2, [r3, #0]
 800e458:	bd70      	pop	{r4, r5, r6, pc}
 800e45a:	bf00      	nop
 800e45c:	080101d0 	.word	0x080101d0
 800e460:	080101dc 	.word	0x080101dc
 800e464:	080101e8 	.word	0x080101e8
 800e468:	0800fb34 	.word	0x0800fb34
 800e46c:	0800fb40 	.word	0x0800fb40
 800e470:	0800fb4c 	.word	0x0800fb4c
 800e474:	20001401 	.word	0x20001401
	...

0800e480 <borrar_sd1>:
{
 800e480:	b570      	push	{r4, r5, r6, lr}
    fr2 = f_unlink("transh.txt");
 800e482:	4e0e      	ldr	r6, [pc, #56]	; (800e4bc <borrar_sd1+0x3c>)
    fr2 = f_unlink("s1emr3h.txt");
 800e484:	4d0e      	ldr	r5, [pc, #56]	; (800e4c0 <borrar_sd1+0x40>)
    fr2 = f_unlink("s1wireh.txt");
 800e486:	4c0f      	ldr	r4, [pc, #60]	; (800e4c4 <borrar_sd1+0x44>)
    fr2 = f_unlink("transh.txt");
 800e488:	4630      	mov	r0, r6
 800e48a:	f7fc fd09 	bl	800aea0 <f_unlink>
    fr2 = f_unlink("s1emr3h.txt");
 800e48e:	4628      	mov	r0, r5
 800e490:	f7fc fd06 	bl	800aea0 <f_unlink>
    fr2 = f_unlink("s1wireh.txt");
 800e494:	4620      	mov	r0, r4
 800e496:	f7fc fd03 	bl	800aea0 <f_unlink>
    fr2 = f_rename("trans.txt","transh.txt");
 800e49a:	4631      	mov	r1, r6
 800e49c:	480a      	ldr	r0, [pc, #40]	; (800e4c8 <borrar_sd1+0x48>)
 800e49e:	f7fc fc57 	bl	800ad50 <f_rename>
    fr2 = f_rename("s1emr3.txt","s1emr3h.txt");
 800e4a2:	4629      	mov	r1, r5
 800e4a4:	4809      	ldr	r0, [pc, #36]	; (800e4cc <borrar_sd1+0x4c>)
 800e4a6:	f7fc fc53 	bl	800ad50 <f_rename>
    fr2 = f_rename("s1wire.txt","s1wireh.txt");
 800e4aa:	4621      	mov	r1, r4
 800e4ac:	4808      	ldr	r0, [pc, #32]	; (800e4d0 <borrar_sd1+0x50>)
 800e4ae:	f7fc fc4f 	bl	800ad50 <f_rename>
    ventas_1 = false;
 800e4b2:	4b08      	ldr	r3, [pc, #32]	; (800e4d4 <borrar_sd1+0x54>)
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	701a      	strb	r2, [r3, #0]
 800e4b8:	bd70      	pop	{r4, r5, r6, pc}
 800e4ba:	bf00      	nop
 800e4bc:	080101a0 	.word	0x080101a0
 800e4c0:	080101ac 	.word	0x080101ac
 800e4c4:	080101b8 	.word	0x080101b8
 800e4c8:	0800fb10 	.word	0x0800fb10
 800e4cc:	0800fb1c 	.word	0x0800fb1c
 800e4d0:	0800fb28 	.word	0x0800fb28
 800e4d4:	20001400 	.word	0x20001400
	...

0800e4e0 <mult>:
    return; 
}

uint16_t mult(uint8_t punto)
{
	switch(punto)
 800e4e0:	2803      	cmp	r0, #3
 800e4e2:	d808      	bhi.n	800e4f6 <mult+0x16>
 800e4e4:	e8df f000 	tbb	[pc, r0]
 800e4e8:	040a0208 	.word	0x040a0208
	{
		case 0: return 1;
		break;

		case 1: return 10;
 800e4ec:	200a      	movs	r0, #10
 800e4ee:	4770      	bx	lr
		break;

		case 2: return 100;
		break;

		case 3: return 1000;
 800e4f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e4f4:	4770      	bx	lr
 800e4f6:	4770      	bx	lr
		case 0: return 1;
 800e4f8:	2001      	movs	r0, #1
 800e4fa:	4770      	bx	lr
		case 2: return 100;
 800e4fc:	2064      	movs	r0, #100	; 0x64
		break;
	}
}
 800e4fe:	4770      	bx	lr

0800e500 <Pf_p>:
{
 800e500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e504:	4603      	mov	r3, r0
 800e506:	b083      	sub	sp, #12
    dato1 = dato_f[12];
 800e508:	7b1f      	ldrb	r7, [r3, #12]
    dato7 = dato_f[6];
 800e50a:	799a      	ldrb	r2, [r3, #6]
    dato2 = dato_f[11];
 800e50c:	7adc      	ldrb	r4, [r3, #11]
    dato3 = dato_f[10];
 800e50e:	f893 a00a 	ldrb.w	sl, [r3, #10]
    dato4 = dato_f[9];
 800e512:	f893 8009 	ldrb.w	r8, [r3, #9]
    dato5 = dato_f[8];
 800e516:	f893 9008 	ldrb.w	r9, [r3, #8]
    dato6 = dato_f[7];
 800e51a:	f893 b007 	ldrb.w	fp, [r3, #7]
    dato8 = dato_f[5];
 800e51e:	795b      	ldrb	r3, [r3, #5]
    dato7 = dato_f[6];
 800e520:	9200      	str	r2, [sp, #0]
    chThdSleepMilliseconds(5);
 800e522:	2032      	movs	r0, #50	; 0x32
    dato8 = dato_f[5];
 800e524:	9301      	str	r3, [sp, #4]
    chThdSleepMilliseconds(5);
 800e526:	f7fe fa8b 	bl	800ca40 <chThdSleep>
    if(dato1 != 0)
 800e52a:	2f00      	cmp	r7, #0
 800e52c:	f000 80ba 	beq.w	800e6a4 <Pf_p+0x1a4>
    fraction = dato2 & 0x0F;
 800e530:	f004 010f 	and.w	r1, r4, #15
    fraction = (fraction << 8);
 800e534:	2300      	movs	r3, #0
 800e536:	020a      	lsls	r2, r1, #8
    fraction = (fraction | dato3);
 800e538:	ea42 020a 	orr.w	r2, r2, sl
    fraction = (fraction << 8);
 800e53c:	0219      	lsls	r1, r3, #8
 800e53e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800e542:	0210      	lsls	r0, r2, #8
    fraction = (fraction | dato4);
 800e544:	460b      	mov	r3, r1
 800e546:	ea40 0208 	orr.w	r2, r0, r8
    fraction = (fraction << 8);
 800e54a:	0219      	lsls	r1, r3, #8
 800e54c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800e550:	0210      	lsls	r0, r2, #8
    fraction = (fraction | dato5);
 800e552:	ea40 0009 	orr.w	r0, r0, r9
    fraction = (fraction << 8);
 800e556:	020b      	lsls	r3, r1, #8
 800e558:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e55c:	0202      	lsls	r2, r0, #8
    fraction = (fraction | dato6);
 800e55e:	ea42 020b 	orr.w	r2, r2, fp
    fraction = (fraction << 8);
 800e562:	0219      	lsls	r1, r3, #8
    fraction = (fraction | dato7);
 800e564:	9b00      	ldr	r3, [sp, #0]
    fraction = (fraction << 8);
 800e566:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800e56a:	0210      	lsls	r0, r2, #8
    expon = expon | aux_expo;
 800e56c:	0924      	lsrs	r4, r4, #4
    fraction = (fraction | dato7);
 800e56e:	4318      	orrs	r0, r3
    fraction = (fraction << 8);
 800e570:	ea4f 2901 	mov.w	r9, r1, lsl #8
    expon = expon | aux_expo;
 800e574:	ea44 1707 	orr.w	r7, r4, r7, lsl #4
        if(expon >= 1023)
 800e578:	f240 31fe 	movw	r1, #1022	; 0x3fe
    fraction = (fraction | dato8);
 800e57c:	9b01      	ldr	r3, [sp, #4]
    fraction = (fraction << 8);
 800e57e:	ea4f 2800 	mov.w	r8, r0, lsl #8
        if(expon >= 1023)
 800e582:	428f      	cmp	r7, r1
    fraction = (fraction << 8);
 800e584:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
    fraction = (fraction | dato8);
 800e588:	ea48 0803 	orr.w	r8, r8, r3
        if(expon >= 1023)
 800e58c:	d941      	bls.n	800e612 <Pf_p+0x112>
 800e58e:	2534      	movs	r5, #52	; 0x34
 800e590:	2001      	movs	r0, #1
 800e592:	2100      	movs	r1, #0
            mul = mul * 2;
 800e594:	1800      	adds	r0, r0, r0
 800e596:	4149      	adcs	r1, r1
        for(i = 0 ; i < eleva ; i++)
 800e598:	3d01      	subs	r5, #1
 800e59a:	d1fb      	bne.n	800e594 <Pf_p+0x94>
            float_data = 1000000000 + (fraction / ((expo2(1,(52)) / 1000000000) ));
 800e59c:	a346      	add	r3, pc, #280	; (adr r3, 800e6b8 <Pf_p+0x1b8>)
 800e59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a2:	f7f1 fe95 	bl	80002d0 <__aeabi_uldivmod>
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	4640      	mov	r0, r8
 800e5ac:	4649      	mov	r1, r9
 800e5ae:	f7f1 fe8f 	bl	80002d0 <__aeabi_uldivmod>
 800e5b2:	a341      	add	r3, pc, #260	; (adr r3, 800e6b8 <Pf_p+0x1b8>)
 800e5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b8:	1880      	adds	r0, r0, r2
 800e5ba:	4159      	adcs	r1, r3
            float_data = (float_data * expo2(1,(expon-1023))) / (1000000000 / mult(read_eeprom(PV)));
 800e5bc:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	2300      	movs	r3, #0
        for(i = 0 ; i < eleva ; i++)
 800e5c4:	42af      	cmp	r7, r5
 800e5c6:	d903      	bls.n	800e5d0 <Pf_p+0xd0>
            mul = mul * 2;
 800e5c8:	1892      	adds	r2, r2, r2
 800e5ca:	415b      	adcs	r3, r3
        for(i = 0 ; i < eleva ; i++)
 800e5cc:	3501      	adds	r5, #1
 800e5ce:	e7f9      	b.n	800e5c4 <Pf_p+0xc4>
	return (dato_emr3[num]);
 800e5d0:	4c3b      	ldr	r4, [pc, #236]	; (800e6c0 <Pf_p+0x1c0>)
            float_data = (float_data * expo2(1,(expon-1023))) / (1000000000 / mult(read_eeprom(PV)));
 800e5d2:	fb00 f303 	mul.w	r3, r0, r3
	switch(punto)
 800e5d6:	7ba4      	ldrb	r4, [r4, #14]
            float_data = (float_data * expo2(1,(expon-1023))) / (1000000000 / mult(read_eeprom(PV)));
 800e5d8:	fb02 3301 	mla	r3, r2, r1, r3
 800e5dc:	fba0 0102 	umull	r0, r1, r0, r2
 800e5e0:	4419      	add	r1, r3
	switch(punto)
 800e5e2:	2c03      	cmp	r4, #3
 800e5e4:	d80b      	bhi.n	800e5fe <Pf_p+0xfe>
 800e5e6:	e8df f004 	tbb	[pc, r4]
 800e5ea:	0402      	.short	0x0402
 800e5ec:	0806      	.short	0x0806
		case 0: return 1;
 800e5ee:	2601      	movs	r6, #1
 800e5f0:	e005      	b.n	800e5fe <Pf_p+0xfe>
		case 1: return 10;
 800e5f2:	260a      	movs	r6, #10
 800e5f4:	e003      	b.n	800e5fe <Pf_p+0xfe>
		case 2: return 100;
 800e5f6:	2664      	movs	r6, #100	; 0x64
 800e5f8:	e001      	b.n	800e5fe <Pf_p+0xfe>
		case 3: return 1000;
 800e5fa:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            float_data = (float_data * expo2(1,(expon-1023))) / (1000000000 / mult(read_eeprom(PV)));
 800e5fe:	4a31      	ldr	r2, [pc, #196]	; (800e6c4 <Pf_p+0x1c4>)
 800e600:	fb92 f2f6 	sdiv	r2, r2, r6
 800e604:	17d3      	asrs	r3, r2, #31
 800e606:	f7f1 fe63 	bl	80002d0 <__aeabi_uldivmod>
 800e60a:	4b2f      	ldr	r3, [pc, #188]	; (800e6c8 <Pf_p+0x1c8>)
 800e60c:	e9c3 0100 	strd	r0, r1, [r3]
 800e610:	e04d      	b.n	800e6ae <Pf_p+0x1ae>
        if(expon >= 1023)
 800e612:	2434      	movs	r4, #52	; 0x34
 800e614:	2001      	movs	r0, #1
 800e616:	2100      	movs	r1, #0
            mul = mul * 2;
 800e618:	1800      	adds	r0, r0, r0
 800e61a:	4149      	adcs	r1, r1
        for(i = 0 ; i < eleva ; i++)
 800e61c:	3c01      	subs	r4, #1
 800e61e:	d1fb      	bne.n	800e618 <Pf_p+0x118>
            float_data = 1000000000 + (fraction / ((expo2(1,(52)) / 1000000000)));
 800e620:	a325      	add	r3, pc, #148	; (adr r3, 800e6b8 <Pf_p+0x1b8>)
 800e622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e626:	f7f1 fe53 	bl	80002d0 <__aeabi_uldivmod>
 800e62a:	460b      	mov	r3, r1
 800e62c:	4602      	mov	r2, r0
 800e62e:	4649      	mov	r1, r9
 800e630:	4640      	mov	r0, r8
 800e632:	f7f1 fe4d 	bl	80002d0 <__aeabi_uldivmod>
 800e636:	f20f 0980 	addw	r9, pc, #128	; 0x80
 800e63a:	e9d9 8900 	ldrd	r8, r9, [r9]
            float_data = (float_data / expo2(1,(1023-expon))) / (1000000000 / mult(read_eeprom(PV)));
 800e63e:	f5c7 777f 	rsb	r7, r7, #1020	; 0x3fc
            float_data = 1000000000 + (fraction / ((expo2(1,(52)) / 1000000000)));
 800e642:	eb10 0008 	adds.w	r0, r0, r8
            float_data = (float_data / expo2(1,(1023-expon))) / (1000000000 / mult(read_eeprom(PV)));
 800e646:	f107 0703 	add.w	r7, r7, #3
 800e64a:	4623      	mov	r3, r4
            float_data = 1000000000 + (fraction / ((expo2(1,(52)) / 1000000000)));
 800e64c:	eb41 0109 	adc.w	r1, r1, r9
            float_data = (float_data / expo2(1,(1023-expon))) / (1000000000 / mult(read_eeprom(PV)));
 800e650:	f04f 0a01 	mov.w	sl, #1
 800e654:	f04f 0b00 	mov.w	fp, #0
            mul = mul * 2;
 800e658:	eb1a 0a0a 	adds.w	sl, sl, sl
        for(i = 0 ; i < eleva ; i++)
 800e65c:	f103 0301 	add.w	r3, r3, #1
            mul = mul * 2;
 800e660:	eb4b 0b0b 	adc.w	fp, fp, fp
        for(i = 0 ; i < eleva ; i++)
 800e664:	429f      	cmp	r7, r3
 800e666:	d8f7      	bhi.n	800e658 <Pf_p+0x158>
            float_data = (float_data / expo2(1,(1023-expon))) / (1000000000 / mult(read_eeprom(PV)));
 800e668:	465b      	mov	r3, fp
 800e66a:	4652      	mov	r2, sl
 800e66c:	f7f1 fe30 	bl	80002d0 <__aeabi_uldivmod>
 800e670:	4b13      	ldr	r3, [pc, #76]	; (800e6c0 <Pf_p+0x1c0>)
	switch(punto)
 800e672:	7b9b      	ldrb	r3, [r3, #14]
 800e674:	2b03      	cmp	r3, #3
 800e676:	d80b      	bhi.n	800e690 <Pf_p+0x190>
 800e678:	e8df f003 	tbb	[pc, r3]
 800e67c:	08060402 	.word	0x08060402
		case 0: return 1;
 800e680:	2501      	movs	r5, #1
 800e682:	e005      	b.n	800e690 <Pf_p+0x190>
		case 1: return 10;
 800e684:	250a      	movs	r5, #10
 800e686:	e003      	b.n	800e690 <Pf_p+0x190>
		case 2: return 100;
 800e688:	2564      	movs	r5, #100	; 0x64
 800e68a:	e001      	b.n	800e690 <Pf_p+0x190>
		case 3: return 1000;
 800e68c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
            float_data = (float_data / expo2(1,(1023-expon))) / (1000000000 / mult(read_eeprom(PV)));
 800e690:	4a0c      	ldr	r2, [pc, #48]	; (800e6c4 <Pf_p+0x1c4>)
 800e692:	fb92 f2f5 	sdiv	r2, r2, r5
 800e696:	17d3      	asrs	r3, r2, #31
 800e698:	f7f1 fe1a 	bl	80002d0 <__aeabi_uldivmod>
 800e69c:	4b0a      	ldr	r3, [pc, #40]	; (800e6c8 <Pf_p+0x1c8>)
 800e69e:	e9c3 0100 	strd	r0, r1, [r3]
 800e6a2:	e004      	b.n	800e6ae <Pf_p+0x1ae>
        float_data = 0;
 800e6a4:	4b08      	ldr	r3, [pc, #32]	; (800e6c8 <Pf_p+0x1c8>)
 800e6a6:	2000      	movs	r0, #0
 800e6a8:	2100      	movs	r1, #0
 800e6aa:	e9c3 0100 	strd	r0, r1, [r3]
}
 800e6ae:	b003      	add	sp, #12
 800e6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b4:	f3af 8000 	nop.w
 800e6b8:	3b9aca00 	.word	0x3b9aca00
 800e6bc:	00000000 	.word	0x00000000
 800e6c0:	20001c74 	.word	0x20001c74
 800e6c4:	3b9aca00 	.word	0x3b9aca00
 800e6c8:	20000908 	.word	0x20000908
 800e6cc:	00000000 	.word	0x00000000

0800e6d0 <f_pf>:
    if(tipo == 1) Divi = mult(read_eeprom(pppu));
 800e6d0:	2a01      	cmp	r2, #1
{
 800e6d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6d6:	4d9d      	ldr	r5, [pc, #628]	; (800e94c <f_pf+0x27c>)
    if(tipo == 1) Divi = mult(read_eeprom(pppu));
 800e6d8:	d106      	bne.n	800e6e8 <f_pf+0x18>
	switch(punto)
 800e6da:	792b      	ldrb	r3, [r5, #4]
 800e6dc:	2b03      	cmp	r3, #3
 800e6de:	d81b      	bhi.n	800e718 <f_pf+0x48>
 800e6e0:	e8df f003 	tbb	[pc, r3]
 800e6e4:	18161412 	.word	0x18161412
    else if(tipo == 3) Divi = mult(read_eeprom(PD));
 800e6e8:	2a03      	cmp	r2, #3
 800e6ea:	d106      	bne.n	800e6fa <f_pf+0x2a>
	switch(punto)
 800e6ec:	7eeb      	ldrb	r3, [r5, #27]
 800e6ee:	2b03      	cmp	r3, #3
 800e6f0:	d812      	bhi.n	800e718 <f_pf+0x48>
 800e6f2:	e8df f003 	tbb	[pc, r3]
 800e6f6:	0b09      	.short	0x0b09
 800e6f8:	0f0d      	.short	0x0f0d
 800e6fa:	7bab      	ldrb	r3, [r5, #14]
 800e6fc:	2b03      	cmp	r3, #3
 800e6fe:	d80b      	bhi.n	800e718 <f_pf+0x48>
 800e700:	e8df f003 	tbb	[pc, r3]
 800e704:	08060402 	.word	0x08060402
		case 0: return 1;
 800e708:	2401      	movs	r4, #1
 800e70a:	e005      	b.n	800e718 <f_pf+0x48>
		case 1: return 10;
 800e70c:	240a      	movs	r4, #10
 800e70e:	e003      	b.n	800e718 <f_pf+0x48>
		case 2: return 100;
 800e710:	2464      	movs	r4, #100	; 0x64
 800e712:	e001      	b.n	800e718 <f_pf+0x48>
		case 3: return 1000;
 800e714:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    if(Y>0)
 800e718:	2800      	cmp	r0, #0
 800e71a:	f000 80ce 	beq.w	800e8ba <f_pf+0x1ea>
 800e71e:	2214      	movs	r2, #20
          I--;                                //LE RESTAMOS 1 PARA EMPEZAR EN LA POSICION 19 Y SI NO ESTA SE EMPIEZA A DISMINUIR
 800e720:	1e53      	subs	r3, r2, #1
 800e722:	b2db      	uxtb	r3, r3
          D= (Y>>I) & 1;                      //TESTEO SI EL BIT EN LA POSICION I ES IGUAL A 1, SI LO ES SALTO LA FUNCION CICLICA SINO SIGO BUSCANDO EN OTRAS POSICIONES
 800e724:	fa20 f603 	lsr.w	r6, r0, r3
          if(D==1) break;
 800e728:	07f6      	lsls	r6, r6, #31
 800e72a:	d401      	bmi.n	800e730 <f_pf+0x60>
          I--;                                //LE RESTAMOS 1 PARA EMPEZAR EN LA POSICION 19 Y SI NO ESTA SE EMPIEZA A DISMINUIR
 800e72c:	461a      	mov	r2, r3
 800e72e:	e7f7      	b.n	800e720 <f_pf+0x50>
       VALOR=127+I;                              //DETERMINO EL PRACTICAMENTE EL B1 POR NORMA
 800e730:	f102 0e7e 	add.w	lr, r2, #126	; 0x7e
 800e734:	fa5f fe8e 	uxtb.w	lr, lr
       if (CI>=8)                              //PREGUNTO SI TENGA LA CANTIDAD DE BIT PARA HACER EL SIGUENTE BYTE(B2)
 800e738:	2a07      	cmp	r2, #7
       B1=VALOR>>1;                              //CORREMOS EL VALOR 1 BIT A LA DERECHA PARA DARLE CABIA EL BIT DEL SIGNO(0)
 800e73a:	ea4f 065e 	mov.w	r6, lr, lsr #1
 800e73e:	f00e 0e01 	and.w	lr, lr, #1
       if (CI>=8)                              //PREGUNTO SI TENGA LA CANTIDAD DE BIT PARA HACER EL SIGUENTE BYTE(B2)
 800e742:	d971      	bls.n	800e828 <f_pf+0x158>
          CI=CI-8;                              //LE RESTAMOS LA CANTIDAD DE BIT 8 POSICIONES
 800e744:	f1a2 0c08 	sub.w	ip, r2, #8
 800e748:	fa5f fc8c 	uxtb.w	ip, ip
            if(I == 0)
 800e74c:	b10b      	cbz	r3, 800e752 <f_pf+0x82>
          CY=Y>>CI;                             //CORREMOS A LA IZQUIERDA LA CANTIDAD DE BIT QUE SOBRAN Y LO GUARDAMOS EN LA COPIA DE Y
 800e74e:	fa20 f30c 	lsr.w	r3, r0, ip
 800e752:	b2db      	uxtb	r3, r3
          if ((VALOR & 1) == 1) 
 800e754:	f1be 0f00 	cmp.w	lr, #0
 800e758:	d002      	beq.n	800e760 <f_pf+0x90>
             B2=0x80 | B2;                   //COMO AL VALOR SE LE QUITO BIT, ESTE SE LO PONEMOS AL BIT MSB DEL BYTE 2
 800e75a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e75e:	e001      	b.n	800e764 <f_pf+0x94>
          else B2=0x7F & B2;                  //TESTIMOS SI EL BIT ES 0 SE PONE UN 0
 800e760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          if(CI>=8)                           //REVISAMO SI LA CANTIDAD DE BIT DEL DATO ENTERO ALCANZA PARA LLENAR EL SIGUENTE BYTE 3
 800e764:	f1bc 0f07 	cmp.w	ip, #7
 800e768:	d929      	bls.n	800e7be <f_pf+0xee>
             CI=CI-8;                        //DESCONTAMOS 8 BIT A LA CANTIDAD EXISTENTE
 800e76a:	3a10      	subs	r2, #16
 800e76c:	fa5f fe82 	uxtb.w	lr, r2
             CY=Y>>CI;                         //CORREMOS LA CANTIDAD BIT EXISTENTE A LA DERECHA
 800e770:	fa20 f20e 	lsr.w	r2, r0, lr
             if(CI>=8)
 800e774:	f1be 0f07 	cmp.w	lr, #7
             CY=Y>>CI;                         //CORREMOS LA CANTIDAD BIT EXISTENTE A LA DERECHA
 800e778:	b2d2      	uxtb	r2, r2
             if(CI>=8)
 800e77a:	d901      	bls.n	800e780 <f_pf+0xb0>
                B4=Y;
 800e77c:	b2c7      	uxtb	r7, r0
 800e77e:	e0db      	b.n	800e938 <f_pf+0x268>
                CI=8-CI;
 800e780:	f1ce 0708 	rsb	r7, lr, #8
                CY=Y<<CI;
 800e784:	b2ff      	uxtb	r7, r7
 800e786:	40b8      	lsls	r0, r7
                CI--;
 800e788:	f1ce 0e07 	rsb	lr, lr, #7
                CY=Y<<CI;
 800e78c:	b2c7      	uxtb	r7, r0
                CI--;
 800e78e:	fa5f fe8e 	uxtb.w	lr, lr
 800e792:	f04f 0c00 	mov.w	ip, #0
                      B4= B4| (1<<W);
 800e796:	f04f 0801 	mov.w	r8, #1
                   DP=DP*2;
 800e79a:	0049      	lsls	r1, r1, #1
                      B4= B4| (1<<W);
 800e79c:	ebae 000c 	sub.w	r0, lr, ip
                   if(DP >= Divi)
 800e7a0:	42a1      	cmp	r1, r4
 800e7a2:	f10c 0c01 	add.w	ip, ip, #1
                for(J=0;J<=CI;J++)
 800e7a6:	fa5f f98c 	uxtb.w	r9, ip
                      B4= B4| (1<<W);
 800e7aa:	b2c0      	uxtb	r0, r0
                   if(DP >= Divi)
 800e7ac:	d304      	bcc.n	800e7b8 <f_pf+0xe8>
                      B4= B4| (1<<W);
 800e7ae:	fa08 f000 	lsl.w	r0, r8, r0
 800e7b2:	4307      	orrs	r7, r0
 800e7b4:	b2ff      	uxtb	r7, r7
                      DP=DP-Divi;
 800e7b6:	1b09      	subs	r1, r1, r4
                for(J=0;J<=CI;J++)
 800e7b8:	45ce      	cmp	lr, r9
 800e7ba:	d2ee      	bcs.n	800e79a <f_pf+0xca>
 800e7bc:	e0bc      	b.n	800e938 <f_pf+0x268>
             CI=8-CI;
 800e7be:	f1cc 0208 	rsb	r2, ip, #8
             CY=Y<<CI;
 800e7c2:	b2d2      	uxtb	r2, r2
 800e7c4:	4090      	lsls	r0, r2
             CI--;
 800e7c6:	f1cc 0c07 	rsb	ip, ip, #7
             CY=Y<<CI;
 800e7ca:	b2c2      	uxtb	r2, r0
             CI--;
 800e7cc:	fa5f fc8c 	uxtb.w	ip, ip
 800e7d0:	f04f 0e00 	mov.w	lr, #0
                   B3=B3 | (1 << W);
 800e7d4:	f04f 0801 	mov.w	r8, #1
                DP=DP*2;
 800e7d8:	0049      	lsls	r1, r1, #1
                   B3=B3 | (1 << W);
 800e7da:	ebac 000e 	sub.w	r0, ip, lr
                if(DP>=Divi)
 800e7de:	42a1      	cmp	r1, r4
 800e7e0:	f10e 0e01 	add.w	lr, lr, #1
             for(J=0;J<=CI;J++)
 800e7e4:	fa5f f98e 	uxtb.w	r9, lr
                   B3=B3 | (1 << W);
 800e7e8:	b2c0      	uxtb	r0, r0
                if(DP>=Divi)
 800e7ea:	d304      	bcc.n	800e7f6 <f_pf+0x126>
                   B3=B3 | (1 << W);
 800e7ec:	fa08 f000 	lsl.w	r0, r8, r0
 800e7f0:	4302      	orrs	r2, r0
 800e7f2:	b2d2      	uxtb	r2, r2
                   DP=DP-Divi;
 800e7f4:	1b09      	subs	r1, r1, r4
             for(J=0;J<=CI;J++)
 800e7f6:	45cc      	cmp	ip, r9
 800e7f8:	d2ee      	bcs.n	800e7d8 <f_pf+0x108>
 800e7fa:	f04f 0e07 	mov.w	lr, #7
                   B4=B4 | (1 << W);
 800e7fe:	f04f 0c01 	mov.w	ip, #1
                DP=DP*2;
 800e802:	0049      	lsls	r1, r1, #1
                if(DP>=Divi)
 800e804:	428c      	cmp	r4, r1
 800e806:	d804      	bhi.n	800e812 <f_pf+0x142>
                   B4=B4 | (1 << W);
 800e808:	fa0c f00e 	lsl.w	r0, ip, lr
 800e80c:	4307      	orrs	r7, r0
                   DP=DP-Divi;
 800e80e:	1b09      	subs	r1, r1, r4
                   B4=B4 | (1 << W);
 800e810:	b2ff      	uxtb	r7, r7
             for(J=0;J<=7;J++)
 800e812:	f11e 3eff 	adds.w	lr, lr, #4294967295	; 0xffffffff
 800e816:	d2f4      	bcs.n	800e802 <f_pf+0x132>
             if(DP >= 600)
 800e818:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
 800e81c:	f0c0 808c 	bcc.w	800e938 <f_pf+0x268>
                B4 = B4 | 1;
 800e820:	f047 0701 	orr.w	r7, r7, #1
 800e824:	b2ff      	uxtb	r7, r7
 800e826:	e087      	b.n	800e938 <f_pf+0x268>
          CI=8-CI;
 800e828:	f1c2 0308 	rsb	r3, r2, #8
          CY=(Y<<CI);
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	fa00 f303 	lsl.w	r3, r0, r3
 800e832:	b2db      	uxtb	r3, r3
          if ((VALOR & 1) == 1) 
 800e834:	f1be 0f00 	cmp.w	lr, #0
 800e838:	d002      	beq.n	800e840 <f_pf+0x170>
             B2=0x80 | B2;                       //COMO AL VALOR SE LE QUITO BIT, ESTE SE LO PONEMOS AL BIT MSB DEL BYTE 2
 800e83a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e83e:	e001      	b.n	800e844 <f_pf+0x174>
          else B2=0x7F & B2;//TESTIMOS SI EL BIT ES 0 SE PONE UN 0
 800e840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          CI--;
 800e844:	f1c2 0207 	rsb	r2, r2, #7
 800e848:	b2d2      	uxtb	r2, r2
 800e84a:	2700      	movs	r7, #0
                B2=B2 | (1 << W);
 800e84c:	f04f 0e01 	mov.w	lr, #1
             DP=DP*2;
 800e850:	0049      	lsls	r1, r1, #1
                B2=B2 | (1 << W);
 800e852:	1bd0      	subs	r0, r2, r7
             if(DP>=Divi)
 800e854:	42a1      	cmp	r1, r4
 800e856:	f107 0701 	add.w	r7, r7, #1
          for(J=0;J<=CI;J++)
 800e85a:	fa5f fc87 	uxtb.w	ip, r7
                B2=B2 | (1 << W);
 800e85e:	b2c0      	uxtb	r0, r0
             if(DP>=Divi)
 800e860:	d304      	bcc.n	800e86c <f_pf+0x19c>
                B2=B2 | (1 << W);
 800e862:	fa0e f000 	lsl.w	r0, lr, r0
 800e866:	4303      	orrs	r3, r0
 800e868:	b2db      	uxtb	r3, r3
                DP=DP-Divi;
 800e86a:	1b09      	subs	r1, r1, r4
          for(J=0;J<=CI;J++)
 800e86c:	4594      	cmp	ip, r2
 800e86e:	d9ef      	bls.n	800e850 <f_pf+0x180>
            if(DP == 0X00)
 800e870:	2900      	cmp	r1, #0
 800e872:	d05f      	beq.n	800e934 <f_pf+0x264>
 800e874:	2707      	movs	r7, #7
 800e876:	2200      	movs	r2, #0
                    B3=B3 | (1 << W);
 800e878:	f04f 0e01 	mov.w	lr, #1
                 DP = DP * 2;
 800e87c:	0049      	lsls	r1, r1, #1
                 if(DP >= Divi)
 800e87e:	428c      	cmp	r4, r1
 800e880:	d804      	bhi.n	800e88c <f_pf+0x1bc>
                    B3=B3 | (1 << W);
 800e882:	fa0e f007 	lsl.w	r0, lr, r7
 800e886:	4302      	orrs	r2, r0
                    DP=DP-Divi;
 800e888:	1b09      	subs	r1, r1, r4
                    B3=B3 | (1 << W);
 800e88a:	b2d2      	uxtb	r2, r2
              for(J=0;J<8;J++)
 800e88c:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
 800e890:	d2f4      	bcs.n	800e87c <f_pf+0x1ac>
 800e892:	f04f 0e07 	mov.w	lr, #7
 800e896:	2700      	movs	r7, #0
                    B4=B4 | (1 << W);
 800e898:	f04f 0c01 	mov.w	ip, #1
                 DP = DP * 2;
 800e89c:	0049      	lsls	r1, r1, #1
                 if(DP >= Divi)
 800e89e:	428c      	cmp	r4, r1
 800e8a0:	d804      	bhi.n	800e8ac <f_pf+0x1dc>
                    B4=B4 | (1 << W);
 800e8a2:	fa0c f00e 	lsl.w	r0, ip, lr
 800e8a6:	4307      	orrs	r7, r0
                    DP=DP-Divi;
 800e8a8:	1b09      	subs	r1, r1, r4
                    B4=B4 | (1 << W);
 800e8aa:	b2ff      	uxtb	r7, r7
              for(J=0;J<8;J++)
 800e8ac:	f11e 3eff 	adds.w	lr, lr, #4294967295	; 0xffffffff
 800e8b0:	d2f4      	bcs.n	800e89c <f_pf+0x1cc>
 800e8b2:	e041      	b.n	800e938 <f_pf+0x268>
            DP=DP*2;
 800e8b4:	0049      	lsls	r1, r1, #1
            if(DP>=Divi) break;
 800e8b6:	42a1      	cmp	r1, r4
 800e8b8:	d203      	bcs.n	800e8c2 <f_pf+0x1f2>
 800e8ba:	b2c6      	uxtb	r6, r0
 800e8bc:	3001      	adds	r0, #1
        while(DP>=1)
 800e8be:	2900      	cmp	r1, #0
 800e8c0:	d1f8      	bne.n	800e8b4 <f_pf+0x1e4>
        VALOR=126-I;
 800e8c2:	f1c6 067e 	rsb	r6, r6, #126	; 0x7e
 800e8c6:	b2f6      	uxtb	r6, r6
            B2 = (0x80 | B2);                       //COMO AL VALOR SE LE QUITO BIT, ESTE SE LO PONEMOS AL BIT MSB DEL BYTE 2
 800e8c8:	f016 0f01 	tst.w	r6, #1
        DP = (DP - Divi);
 800e8cc:	eba1 0104 	sub.w	r1, r1, r4
        B1=VALOR>>1;
 800e8d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
            B2 = (0x80 | B2);                       //COMO AL VALOR SE LE QUITO BIT, ESTE SE LO PONEMOS AL BIT MSB DEL BYTE 2
 800e8d4:	bf0c      	ite	eq
 800e8d6:	2300      	moveq	r3, #0
 800e8d8:	2380      	movne	r3, #128	; 0x80
        B2 = 0;
 800e8da:	2206      	movs	r2, #6
                B2 = (B2 | (1 << W));
 800e8dc:	2701      	movs	r7, #1
            DP = DP*2;
 800e8de:	0049      	lsls	r1, r1, #1
            if(DP >= Divi)
 800e8e0:	428c      	cmp	r4, r1
 800e8e2:	d804      	bhi.n	800e8ee <f_pf+0x21e>
                B2 = (B2 | (1 << W));
 800e8e4:	fa07 f002 	lsl.w	r0, r7, r2
 800e8e8:	4303      	orrs	r3, r0
                DP = DP-Divi;
 800e8ea:	1b09      	subs	r1, r1, r4
                B2 = (B2 | (1 << W));
 800e8ec:	b2db      	uxtb	r3, r3
        for(J=0;J<7;J++)
 800e8ee:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 800e8f2:	d2f4      	bcs.n	800e8de <f_pf+0x20e>
 800e8f4:	2707      	movs	r7, #7
 800e8f6:	2200      	movs	r2, #0
                B3 = (B3 | (1 << W));
 800e8f8:	f04f 0e01 	mov.w	lr, #1
            DP = DP * 2;
 800e8fc:	0049      	lsls	r1, r1, #1
            if(DP >= Divi)
 800e8fe:	428c      	cmp	r4, r1
 800e900:	d804      	bhi.n	800e90c <f_pf+0x23c>
                B3 = (B3 | (1 << W));
 800e902:	fa0e f007 	lsl.w	r0, lr, r7
 800e906:	4302      	orrs	r2, r0
                DP = DP-Divi;
 800e908:	1b09      	subs	r1, r1, r4
                B3 = (B3 | (1 << W));
 800e90a:	b2d2      	uxtb	r2, r2
        for(J=0;J<8;J++)
 800e90c:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
 800e910:	d2f4      	bcs.n	800e8fc <f_pf+0x22c>
 800e912:	f04f 0e07 	mov.w	lr, #7
 800e916:	2700      	movs	r7, #0
                B4 = (B4 | (1 << W));
 800e918:	f04f 0c01 	mov.w	ip, #1
            DP = DP*2;
 800e91c:	0049      	lsls	r1, r1, #1
            if(DP >= Divi)
 800e91e:	428c      	cmp	r4, r1
 800e920:	d804      	bhi.n	800e92c <f_pf+0x25c>
                B4 = (B4 | (1 << W));
 800e922:	fa0c f00e 	lsl.w	r0, ip, lr
 800e926:	4307      	orrs	r7, r0
                DP = DP-Divi;
 800e928:	1b09      	subs	r1, r1, r4
                B4 = (B4 | (1 << W));
 800e92a:	b2ff      	uxtb	r7, r7
        for(J=0;J<8;J++)
 800e92c:	f11e 3eff 	adds.w	lr, lr, #4294967295	; 0xffffffff
 800e930:	d2f4      	bcs.n	800e91c <f_pf+0x24c>
 800e932:	e001      	b.n	800e938 <f_pf+0x268>
                B4 = 0;
 800e934:	460f      	mov	r7, r1
                B3 = 0;
 800e936:	460a      	mov	r2, r1
	dato_emr3[num] = inf;
 800e938:	f885 7079 	strb.w	r7, [r5, #121]	; 0x79
 800e93c:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
 800e940:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
 800e944:	f885 607c 	strb.w	r6, [r5, #124]	; 0x7c
 800e948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e94c:	20001c74 	.word	0x20001c74

0800e950 <LeerTotales>:
{
 800e950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e954:	4d4a      	ldr	r5, [pc, #296]	; (800ea80 <LeerTotales+0x130>)
 800e956:	b086      	sub	sp, #24
 800e958:	4604      	mov	r4, r0
 800e95a:	e003      	b.n	800e964 <LeerTotales+0x14>
    } while(recibo[11] != '.');
 800e95c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800e960:	2b2e      	cmp	r3, #46	; 0x2e
 800e962:	d01e      	beq.n	800e9a2 <LeerTotales+0x52>
        chThdSleepMilliseconds(300);
 800e964:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800e968:	f7fe f86a 	bl	800ca40 <chThdSleep>
        ButtonEmr(TOTAL_VOLUMEN,pos);
 800e96c:	4621      	mov	r1, r4
 800e96e:	201b      	movs	r0, #27
 800e970:	f7fe f8e6 	bl	800cb40 <ButtonEmr>
        uartStartReceive(&UARTD1,17, recibo);
 800e974:	a901      	add	r1, sp, #4
 800e976:	2011      	movs	r0, #17
 800e978:	f000 fb22 	bl	800efc0 <uartStartReceive.constprop.23>
        chThdSleepMilliseconds(500);
 800e97c:	f241 3088 	movw	r0, #5000	; 0x1388
 800e980:	f7fe f85e 	bl	800ca40 <chThdSleep>
        uartStopReceive(&UARTD1);
 800e984:	f000 fb7c 	bl	800f080 <uartStopReceive.constprop.21>
        if(read_eeprom(log) == 1) emr3_log(&recibo,17,2);
 800e988:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d1e5      	bne.n	800e95c <LeerTotales+0xc>
 800e990:	2202      	movs	r2, #2
 800e992:	2111      	movs	r1, #17
 800e994:	a801      	add	r0, sp, #4
 800e996:	f7ff fbc3 	bl	800e120 <emr3_log>
    } while(recibo[11] != '.');
 800e99a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800e99e:	2b2e      	cmp	r3, #46	; 0x2e
 800e9a0:	d1e0      	bne.n	800e964 <LeerTotales+0x14>
    if(pos == 0x01)
 800e9a2:	2c01      	cmp	r4, #1
 800e9a4:	d038      	beq.n	800ea18 <LeerTotales+0xc8>
    else if (pos == 0x02)
 800e9a6:	2c02      	cmp	r4, #2
 800e9a8:	d002      	beq.n	800e9b0 <LeerTotales+0x60>
}
 800e9aa:	b006      	add	sp, #24
 800e9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	write_eeprom(tv2_1,(recibo[5] & 0X0F));
 800e9b0:	f89d 8009 	ldrb.w	r8, [sp, #9]
		write_eeprom(tv2_2,(recibo[6] & 0X0F));
 800e9b4:	f89d c00a 	ldrb.w	ip, [sp, #10]
		write_eeprom(tv2_3,(recibo[7] & 0X0F));
 800e9b8:	f89d e00b 	ldrb.w	lr, [sp, #11]
		write_eeprom(tv2_4,(recibo[8] & 0X0F));
 800e9bc:	f89d 700c 	ldrb.w	r7, [sp, #12]
		write_eeprom(tv2_5,(recibo[9] & 0X0F));
 800e9c0:	f89d 600d 	ldrb.w	r6, [sp, #13]
		write_eeprom(tv2_6,(recibo[10] & 0X0F));
 800e9c4:	f89d 100e 	ldrb.w	r1, [sp, #14]
		write_eeprom(tv2_7,(recibo[12] & 0X0F));
 800e9c8:	f89d 2010 	ldrb.w	r2, [sp, #16]
		write_eeprom(tv2_8,(recibo[13] & 0X0F));
 800e9cc:	f89d 3011 	ldrb.w	r3, [sp, #17]
		sd_Tvolumen(pos);
 800e9d0:	4620      	mov	r0, r4
    	write_eeprom(tv2_1,(recibo[5] & 0X0F));
 800e9d2:	f008 080f 	and.w	r8, r8, #15
		write_eeprom(tv2_2,(recibo[6] & 0X0F));
 800e9d6:	f00c 0c0f 	and.w	ip, ip, #15
		write_eeprom(tv2_3,(recibo[7] & 0X0F));
 800e9da:	f00e 0e0f 	and.w	lr, lr, #15
		write_eeprom(tv2_4,(recibo[8] & 0X0F));
 800e9de:	f007 070f 	and.w	r7, r7, #15
		write_eeprom(tv2_5,(recibo[9] & 0X0F));
 800e9e2:	f006 040f 	and.w	r4, r6, #15
		write_eeprom(tv2_6,(recibo[10] & 0X0F));
 800e9e6:	f001 010f 	and.w	r1, r1, #15
		write_eeprom(tv2_7,(recibo[12] & 0X0F));
 800e9ea:	f002 020f 	and.w	r2, r2, #15
		write_eeprom(tv2_8,(recibo[13] & 0X0F));
 800e9ee:	f003 030f 	and.w	r3, r3, #15
 800e9f2:	f885 803e 	strb.w	r8, [r5, #62]	; 0x3e
 800e9f6:	f885 c03f 	strb.w	ip, [r5, #63]	; 0x3f
 800e9fa:	f885 e040 	strb.w	lr, [r5, #64]	; 0x40
 800e9fe:	f885 7041 	strb.w	r7, [r5, #65]	; 0x41
 800ea02:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
 800ea06:	f885 1043 	strb.w	r1, [r5, #67]	; 0x43
 800ea0a:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
 800ea0e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
		sd_Tvolumen(pos);
 800ea12:	f7fc feb5 	bl	800b780 <sd_Tvolumen>
 800ea16:	e7c8      	b.n	800e9aa <LeerTotales+0x5a>
    	write_eeprom(tv1_1,(recibo[5] & 0X0F));
 800ea18:	f89d 8009 	ldrb.w	r8, [sp, #9]
		write_eeprom(tv1_2,(recibo[6] & 0X0F));
 800ea1c:	f89d c00a 	ldrb.w	ip, [sp, #10]
		write_eeprom(tv1_3,(recibo[7] & 0X0F));
 800ea20:	f89d e00b 	ldrb.w	lr, [sp, #11]
		write_eeprom(tv1_4,(recibo[8] & 0X0F));
 800ea24:	f89d 700c 	ldrb.w	r7, [sp, #12]
		write_eeprom(tv1_5,(recibo[9] & 0X0F));
 800ea28:	f89d 600d 	ldrb.w	r6, [sp, #13]
		write_eeprom(tv1_6,(recibo[10] & 0X0F));
 800ea2c:	f89d 100e 	ldrb.w	r1, [sp, #14]
		write_eeprom(tv1_7,(recibo[12] & 0X0F));
 800ea30:	f89d 2010 	ldrb.w	r2, [sp, #16]
		write_eeprom(tv1_8,(recibo[13] & 0X0F));
 800ea34:	f89d 3011 	ldrb.w	r3, [sp, #17]
		sd_Tvolumen(pos);
 800ea38:	4620      	mov	r0, r4
    	write_eeprom(tv1_1,(recibo[5] & 0X0F));
 800ea3a:	f008 080f 	and.w	r8, r8, #15
		write_eeprom(tv1_2,(recibo[6] & 0X0F));
 800ea3e:	f00c 0c0f 	and.w	ip, ip, #15
		write_eeprom(tv1_3,(recibo[7] & 0X0F));
 800ea42:	f00e 0e0f 	and.w	lr, lr, #15
		write_eeprom(tv1_4,(recibo[8] & 0X0F));
 800ea46:	f007 070f 	and.w	r7, r7, #15
		write_eeprom(tv1_5,(recibo[9] & 0X0F));
 800ea4a:	f006 040f 	and.w	r4, r6, #15
		write_eeprom(tv1_6,(recibo[10] & 0X0F));
 800ea4e:	f001 010f 	and.w	r1, r1, #15
		write_eeprom(tv1_7,(recibo[12] & 0X0F));
 800ea52:	f002 020f 	and.w	r2, r2, #15
		write_eeprom(tv1_8,(recibo[13] & 0X0F));
 800ea56:	f003 030f 	and.w	r3, r3, #15
 800ea5a:	f885 8036 	strb.w	r8, [r5, #54]	; 0x36
 800ea5e:	f885 c037 	strb.w	ip, [r5, #55]	; 0x37
 800ea62:	f885 e038 	strb.w	lr, [r5, #56]	; 0x38
 800ea66:	f885 7039 	strb.w	r7, [r5, #57]	; 0x39
 800ea6a:	f885 403a 	strb.w	r4, [r5, #58]	; 0x3a
 800ea6e:	f885 103b 	strb.w	r1, [r5, #59]	; 0x3b
 800ea72:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
 800ea76:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
		sd_Tvolumen(pos);
 800ea7a:	f7fc fe81 	bl	800b780 <sd_Tvolumen>
 800ea7e:	e794      	b.n	800e9aa <LeerTotales+0x5a>
 800ea80:	20001c74 	.word	0x20001c74
	...

0800ea90 <chThdDequeueNextI.constprop.51>:
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800ea90:	6803      	ldr	r3, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 800ea92:	4298      	cmp	r0, r3
 800ea94:	d010      	beq.n	800eab8 <chThdDequeueNextI.constprop.51+0x28>
  tqp->p_next = tp->p_next;
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	6002      	str	r2, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800ea9a:	6050      	str	r0, [r2, #4]

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");
 800ea9c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800eaa0:	2a04      	cmp	r2, #4
 800eaa2:	d004      	beq.n	800eaae <chThdDequeueNextI.constprop.51+0x1e>
 800eaa4:	b672      	cpsid	i
 800eaa6:	4b05      	ldr	r3, [pc, #20]	; (800eabc <chThdDequeueNextI.constprop.51+0x2c>)
 800eaa8:	4a05      	ldr	r2, [pc, #20]	; (800eac0 <chThdDequeueNextI.constprop.51+0x30>)
 800eaaa:	62da      	str	r2, [r3, #44]	; 0x2c
 800eaac:	e7fe      	b.n	800eaac <chThdDequeueNextI.constprop.51+0x1c>

  tp->p_u.rdymsg = msg;
 800eaae:	2200      	movs	r2, #0
 800eab0:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fd bd84 	b.w	800c5c0 <chSchReadyI>
 800eab8:	4770      	bx	lr
 800eaba:	bf00      	nop
 800eabc:	20001698 	.word	0x20001698
 800eac0:	08010230 	.word	0x08010230
	...

0800ead0 <chEvtBroadcastFlagsI.constprop.49>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800ead0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 800ead4:	4e20      	ldr	r6, [pc, #128]	; (800eb58 <chEvtBroadcastFlagsI.constprop.49+0x88>)
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800ead6:	4607      	mov	r7, r0
  chDbgCheckClassI();
 800ead8:	f7fd fc92 	bl	800c400 <chDbgCheckClassI>
  elp = esp->es_next;
 800eadc:	f856 4f04 	ldr.w	r4, [r6, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800eae0:	42b4      	cmp	r4, r6
 800eae2:	d028      	beq.n	800eb36 <chEvtBroadcastFlagsI.constprop.49+0x66>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800eae4:	f04f 0800 	mov.w	r8, #0
 800eae8:	e002      	b.n	800eaf0 <chEvtBroadcastFlagsI.constprop.49+0x20>
    elp = elp->el_next;
 800eaea:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800eaec:	42b4      	cmp	r4, r6
 800eaee:	d022      	beq.n	800eb36 <chEvtBroadcastFlagsI.constprop.49+0x66>
    elp->el_flags |= flags;
 800eaf0:	68e3      	ldr	r3, [r4, #12]
 800eaf2:	433b      	orrs	r3, r7
 800eaf4:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 800eaf6:	b117      	cbz	r7, 800eafe <chEvtBroadcastFlagsI.constprop.49+0x2e>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 800eaf8:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 800eafa:	4213      	tst	r3, r2
 800eafc:	d0f5      	beq.n	800eaea <chEvtBroadcastFlagsI.constprop.49+0x1a>
      chEvtSignalI(elp->el_listener, elp->el_events);
 800eafe:	6865      	ldr	r5, [r4, #4]
 800eb00:	f8d4 9008 	ldr.w	r9, [r4, #8]
  chDbgCheckClassI();
 800eb04:	f7fd fc7c 	bl	800c400 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 800eb08:	b305      	cbz	r5, 800eb4c <chEvtBroadcastFlagsI.constprop.49+0x7c>
  tp->p_epending |= events;
 800eb0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800eb0c:	f895 2020 	ldrb.w	r2, [r5, #32]
  tp->p_epending |= events;
 800eb10:	ea49 0303 	orr.w	r3, r9, r3
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800eb14:	2a0a      	cmp	r2, #10
  tp->p_epending |= events;
 800eb16:	63ab      	str	r3, [r5, #56]	; 0x38
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800eb18:	d00f      	beq.n	800eb3a <chEvtBroadcastFlagsI.constprop.49+0x6a>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800eb1a:	2a0b      	cmp	r2, #11
 800eb1c:	d1e5      	bne.n	800eaea <chEvtBroadcastFlagsI.constprop.49+0x1a>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 800eb1e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800eb20:	ea32 0303 	bics.w	r3, r2, r3
 800eb24:	d1e1      	bne.n	800eaea <chEvtBroadcastFlagsI.constprop.49+0x1a>
    tp->p_u.rdymsg = MSG_OK;
 800eb26:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	f7fd fd48 	bl	800c5c0 <chSchReadyI>
    elp = elp->el_next;
 800eb30:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800eb32:	42b4      	cmp	r4, r6
 800eb34:	d1dc      	bne.n	800eaf0 <chEvtBroadcastFlagsI.constprop.49+0x20>
 800eb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800eb3a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800eb3c:	4213      	tst	r3, r2
 800eb3e:	d0d4      	beq.n	800eaea <chEvtBroadcastFlagsI.constprop.49+0x1a>
    tp->p_u.rdymsg = MSG_OK;
 800eb40:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 800eb44:	4628      	mov	r0, r5
 800eb46:	f7fd fd3b 	bl	800c5c0 <chSchReadyI>
 800eb4a:	e7f1      	b.n	800eb30 <chEvtBroadcastFlagsI.constprop.49+0x60>
 800eb4c:	b672      	cpsid	i
 800eb4e:	4b03      	ldr	r3, [pc, #12]	; (800eb5c <chEvtBroadcastFlagsI.constprop.49+0x8c>)
 800eb50:	4a03      	ldr	r2, [pc, #12]	; (800eb60 <chEvtBroadcastFlagsI.constprop.49+0x90>)
 800eb52:	62da      	str	r2, [r3, #44]	; 0x2c
 800eb54:	e7fe      	b.n	800eb54 <chEvtBroadcastFlagsI.constprop.49+0x84>
 800eb56:	bf00      	nop
 800eb58:	200015fc 	.word	0x200015fc
 800eb5c:	20001698 	.word	0x20001698
 800eb60:	08010290 	.word	0x08010290
	...

0800eb70 <LCDSetCursor.constprop.5>:
void LCDSetCursor(uint8_t col, uint8_t row)
 800eb70:	b510      	push	{r4, lr}
   palWritePad(GPIOD, RW, 0);
 800eb72:	4b08      	ldr	r3, [pc, #32]	; (800eb94 <LCDSetCursor.constprop.5+0x24>)
  LCDCommand(LCD_SETDDRAMADDR | (row_offsets[row]+col));
 800eb74:	f040 0480 	orr.w	r4, r0, #128	; 0x80
   palWritePad(GPIOD, RW, 0);
 800eb78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   palWritePad(GPIOD, RS, mode);
 800eb7c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   LCDWrite4bits(value>>4);
 800eb80:	0920      	lsrs	r0, r4, #4
   palWritePad(GPIOD, RW, 0);
 800eb82:	6199      	str	r1, [r3, #24]
   palWritePad(GPIOD, RS, mode);
 800eb84:	619a      	str	r2, [r3, #24]
   LCDWrite4bits(value>>4);
 800eb86:	f7fd f84b 	bl	800bc20 <LCDWrite4bits>
   LCDWrite4bits(value);
 800eb8a:	4620      	mov	r0, r4
}
 800eb8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   LCDWrite4bits(value);
 800eb90:	f7fd b846 	b.w	800bc20 <LCDWrite4bits>
 800eb94:	40020c00 	.word	0x40020c00
	...

0800eba0 <LCDBegin.constprop.4>:
void LCDBegin(uint8_t cols, uint8_t lines)
 800eba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
       _displayfunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 800eba2:	4d27      	ldr	r5, [pc, #156]	; (800ec40 <LCDBegin.constprop.4+0xa0>)
   palClearPad(GPIOD, RW);
 800eba4:	4c27      	ldr	r4, [pc, #156]	; (800ec44 <LCDBegin.constprop.4+0xa4>)
       _displayfunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 800eba6:	2380      	movs	r3, #128	; 0x80
   chThdSleepMilliseconds(50);
 800eba8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
       _displayfunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 800ebac:	702b      	strb	r3, [r5, #0]
   chThdSleepMilliseconds(50);
 800ebae:	f7fd ff47 	bl	800ca40 <chThdSleep>
   palClearPad(GPIOD, EP);
 800ebb2:	2310      	movs	r3, #16
   palClearPad(GPIOD, RW);
 800ebb4:	2120      	movs	r1, #32
   palClearPad(GPIOD, RS);
 800ebb6:	2240      	movs	r2, #64	; 0x40
   palClearPad(GPIOD, RW);
 800ebb8:	8361      	strh	r1, [r4, #26]
   LCDWrite4bits(0x03);
 800ebba:	2003      	movs	r0, #3
   palClearPad(GPIOD, RS);
 800ebbc:	8362      	strh	r2, [r4, #26]
   palClearPad(GPIOD, EP);
 800ebbe:	8363      	strh	r3, [r4, #26]
   LCDWrite4bits(0x03);
 800ebc0:	f7fd f82e 	bl	800bc20 <LCDWrite4bits>
   chThdSleepMicroseconds(4500);
 800ebc4:	202d      	movs	r0, #45	; 0x2d
 800ebc6:	f7fd ff3b 	bl	800ca40 <chThdSleep>
   LCDWrite4bits(0x03);
 800ebca:	2003      	movs	r0, #3
 800ebcc:	f7fd f828 	bl	800bc20 <LCDWrite4bits>
   chThdSleepMicroseconds(4500);
 800ebd0:	202d      	movs	r0, #45	; 0x2d
 800ebd2:	f7fd ff35 	bl	800ca40 <chThdSleep>
   LCDWrite4bits(0x03);
 800ebd6:	2003      	movs	r0, #3
 800ebd8:	f7fd f822 	bl	800bc20 <LCDWrite4bits>
    chThdSleepMicroseconds(150);
 800ebdc:	2002      	movs	r0, #2
 800ebde:	f7fd ff2f 	bl	800ca40 <chThdSleep>
    LCDWrite4bits(0x02);
 800ebe2:	2002      	movs	r0, #2
 800ebe4:	f7fd f81c 	bl	800bc20 <LCDWrite4bits>
    LCDCommand(LCD_FUNCTIONSET | _displayfunction);
 800ebe8:	782f      	ldrb	r7, [r5, #0]
   palWritePad(GPIOD, RW, 0);
 800ebea:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
   palWritePad(GPIOD, RS, mode);
 800ebee:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
    LCDCommand(LCD_FUNCTIONSET | _displayfunction);
 800ebf2:	f047 0720 	orr.w	r7, r7, #32
   LCDWrite4bits(value>>4);
 800ebf6:	0938      	lsrs	r0, r7, #4
   palWritePad(GPIOD, RW, 0);
 800ebf8:	61a6      	str	r6, [r4, #24]
   palWritePad(GPIOD, RS, mode);
 800ebfa:	61a5      	str	r5, [r4, #24]
   LCDWrite4bits(value>>4);
 800ebfc:	f7fd f810 	bl	800bc20 <LCDWrite4bits>
   LCDWrite4bits(value);
 800ec00:	4638      	mov	r0, r7
 800ec02:	f7fd f80d 	bl	800bc20 <LCDWrite4bits>
   palWritePad(GPIOD, RW, 0);
 800ec06:	61a6      	str	r6, [r4, #24]
   LCDWrite4bits(value>>4);
 800ec08:	2000      	movs	r0, #0
   palWritePad(GPIOD, RS, mode);
 800ec0a:	61a5      	str	r5, [r4, #24]
   LCDWrite4bits(value>>4);
 800ec0c:	f7fd f808 	bl	800bc20 <LCDWrite4bits>
   LCDWrite4bits(value);
 800ec10:	200e      	movs	r0, #14
 800ec12:	f7fd f805 	bl	800bc20 <LCDWrite4bits>
   palWritePad(GPIOD, RW, 0);
 800ec16:	61a6      	str	r6, [r4, #24]
   LCDWrite4bits(value>>4);
 800ec18:	2000      	movs	r0, #0
   palWritePad(GPIOD, RS, mode);
 800ec1a:	61a5      	str	r5, [r4, #24]
   LCDWrite4bits(value>>4);
 800ec1c:	f7fd f800 	bl	800bc20 <LCDWrite4bits>
   LCDWrite4bits(value);
 800ec20:	2001      	movs	r0, #1
 800ec22:	f7fc fffd 	bl	800bc20 <LCDWrite4bits>
  chThdSleepMicroseconds(2000);  // this command takes a long time!
 800ec26:	2014      	movs	r0, #20
 800ec28:	f7fd ff0a 	bl	800ca40 <chThdSleep>
   palWritePad(GPIOD, RW, 0);
 800ec2c:	61a6      	str	r6, [r4, #24]
   LCDWrite4bits(value>>4);
 800ec2e:	2000      	movs	r0, #0
   palWritePad(GPIOD, RS, mode);
 800ec30:	61a5      	str	r5, [r4, #24]
   LCDWrite4bits(value>>4);
 800ec32:	f7fc fff5 	bl	800bc20 <LCDWrite4bits>
   LCDWrite4bits(value);
 800ec36:	2006      	movs	r0, #6
}
 800ec38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   LCDWrite4bits(value);
 800ec3c:	f7fc bff0 	b.w	800bc20 <LCDWrite4bits>
 800ec40:	20001690 	.word	0x20001690
 800ec44:	40020c00 	.word	0x40020c00
	...

0800ec50 <LCDPrintRow.constprop.3>:
inline void LCDPrintRow(uint8_t row_number ,uint8_t row_string [])
 800ec50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec54:	4607      	mov	r7, r0
    LCDSetCursor(0x00, row_number);
 800ec56:	2000      	movs	r0, #0
 800ec58:	f7ff ff8a 	bl	800eb70 <LCDSetCursor.constprop.5>
   palWritePad(GPIOD, RW, 0);
 800ec5c:	4e0b      	ldr	r6, [pc, #44]	; (800ec8c <LCDPrintRow.constprop.3+0x3c>)
 800ec5e:	1e7c      	subs	r4, r7, #1
 800ec60:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 800ec64:	370f      	adds	r7, #15
   palWritePad(GPIOD, RS, mode);
 800ec66:	f04f 0840 	mov.w	r8, #64	; 0x40
    LCDSend(row_string[i], HIGH);
 800ec6a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
   palWritePad(GPIOD, RW, 0);
 800ec6e:	f8c6 9018 	str.w	r9, [r6, #24]
   LCDWrite4bits(value>>4);
 800ec72:	0928      	lsrs	r0, r5, #4
   palWritePad(GPIOD, RS, mode);
 800ec74:	f8c6 8018 	str.w	r8, [r6, #24]
   LCDWrite4bits(value>>4);
 800ec78:	f7fc ffd2 	bl	800bc20 <LCDWrite4bits>
   LCDWrite4bits(value);
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	f7fc ffcf 	bl	800bc20 <LCDWrite4bits>
    for (i=0; i<16; i++)
 800ec82:	42bc      	cmp	r4, r7
 800ec84:	d1f1      	bne.n	800ec6a <LCDPrintRow.constprop.3+0x1a>
}
 800ec86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec8a:	bf00      	nop
 800ec8c:	40020c00 	.word	0x40020c00

0800ec90 <chThdCreateStatic.constprop.55>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 800ec90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec94:	4604      	mov	r4, r0
  _thread_memfill((uint8_t *)wsp,
 800ec96:	f100 0660 	add.w	r6, r0, #96	; 0x60
 800ec9a:	4605      	mov	r5, r0
thread_t *chThdCreateStatic(void *wsp, size_t size,
 800ec9c:	460f      	mov	r7, r1
 800ec9e:	4690      	mov	r8, r2
 800eca0:	4699      	mov	r9, r3
    *startp++ = v;
 800eca2:	20ff      	movs	r0, #255	; 0xff
 800eca4:	f805 0b01 	strb.w	r0, [r5], #1
  while (startp < endp) {
 800eca8:	42ae      	cmp	r6, r5
 800ecaa:	d1fb      	bne.n	800eca4 <chThdCreateStatic.constprop.55+0x14>
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
 800ecac:	19e3      	adds	r3, r4, r7
  while (startp < endp) {
 800ecae:	429d      	cmp	r5, r3
 800ecb0:	d205      	bcs.n	800ecbe <chThdCreateStatic.constprop.55+0x2e>
 800ecb2:	462a      	mov	r2, r5
    *startp++ = v;
 800ecb4:	2155      	movs	r1, #85	; 0x55
 800ecb6:	f802 1b01 	strb.w	r1, [r2], #1
  while (startp < endp) {
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d1fb      	bne.n	800ecb6 <chThdCreateStatic.constprop.55+0x26>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800ecbe:	2320      	movs	r3, #32
 800ecc0:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800ecc4:	f7fd fad4 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800ecc8:	f7fd fd4a 	bl	800c760 <_dbg_check_lock>
  chDbgCheckClassI();
 800eccc:	f7fd fb98 	bl	800c400 <chDbgCheckClassI>
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
 800ecd0:	2c00      	cmp	r4, #0
 800ecd2:	d078      	beq.n	800edc6 <chThdCreateStatic.constprop.55+0x136>
 800ecd4:	2fe7      	cmp	r7, #231	; 0xe7
 800ecd6:	d976      	bls.n	800edc6 <chThdCreateStatic.constprop.55+0x136>
 800ecd8:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800ecdc:	d873      	bhi.n	800edc6 <chThdCreateStatic.constprop.55+0x136>
 800ecde:	f1b9 0f00 	cmp.w	r9, #0
 800ece2:	d070      	beq.n	800edc6 <chThdCreateStatic.constprop.55+0x136>
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800ece4:	3f24      	subs	r7, #36	; 0x24
 800ece6:	19e2      	adds	r2, r4, r7
 800ece8:	2300      	movs	r3, #0
  REG_INSERT(tp);
 800ecea:	4e41      	ldr	r6, [pc, #260]	; (800edf0 <chThdCreateStatic.constprop.55+0x160>)
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800ecec:	4941      	ldr	r1, [pc, #260]	; (800edf4 <chThdCreateStatic.constprop.55+0x164>)
 800ecee:	60e2      	str	r2, [r4, #12]
 800ecf0:	f844 9007 	str.w	r9, [r4, r7]
 800ecf4:	6053      	str	r3, [r2, #4]
 800ecf6:	6211      	str	r1, [r2, #32]
  REG_INSERT(tp);
 800ecf8:	6126      	str	r6, [r4, #16]
 800ecfa:	6971      	ldr	r1, [r6, #20]
 800ecfc:	6161      	str	r1, [r4, #20]
  tp->p_state = CH_STATE_WTSTART;
 800ecfe:	2002      	movs	r0, #2
  tp->p_refs = (trefs_t)1;
 800ed00:	2201      	movs	r2, #1
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800ed02:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  tp->p_mtxlist = NULL;
 800ed06:	63e3      	str	r3, [r4, #60]	; 0x3c
  tp->p_epending = (eventmask_t)0;
 800ed08:	63a3      	str	r3, [r4, #56]	; 0x38
  tp->p_name = NULL;
 800ed0a:	61a3      	str	r3, [r4, #24]
  tp->p_prio = prio;
 800ed0c:	f8c4 8008 	str.w	r8, [r4, #8]
  tp->p_state = CH_STATE_WTSTART;
 800ed10:	f884 0020 	strb.w	r0, [r4, #32]
  tp->p_refs = (trefs_t)1;
 800ed14:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  tmp->cumulative = (rttime_t)0;
 800ed18:	2000      	movs	r0, #0
  queue_init(&tp->p_msgqueue);
 800ed1a:	f104 022c 	add.w	r2, r4, #44	; 0x2c
  tp->p_realprio = prio;
 800ed1e:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  list_init(&tp->p_waiting);
 800ed22:	f104 0728 	add.w	r7, r4, #40	; 0x28
  REG_INSERT(tp);
 800ed26:	610c      	str	r4, [r1, #16]
  tmp->best       = (rtcnt_t)-1;
 800ed28:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
  tmp->cumulative = (rttime_t)0;
 800ed2c:	2100      	movs	r1, #0
  tmp->worst      = (rtcnt_t)0;
 800ed2e:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmp->last       = (rtcnt_t)0;
 800ed30:	6523      	str	r3, [r4, #80]	; 0x50
  tmp->n          = (ucnt_t)0;
 800ed32:	6563      	str	r3, [r4, #84]	; 0x54
  tlp->p_next = (thread_t *)tlp;
 800ed34:	62a7      	str	r7, [r4, #40]	; 0x28
  tmp->cumulative = (rttime_t)0;
 800ed36:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 800ed3a:	61e5      	str	r5, [r4, #28]
  tqp->p_next = (thread_t *)tqp;
 800ed3c:	62e2      	str	r2, [r4, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800ed3e:	6322      	str	r2, [r4, #48]	; 0x30
  tmp->best       = (rtcnt_t)-1;
 800ed40:	f8c4 e048 	str.w	lr, [r4, #72]	; 0x48
  REG_INSERT(tp);
 800ed44:	6174      	str	r4, [r6, #20]
  chDbgCheckClassS();
 800ed46:	f7fd fafb 	bl	800c340 <chDbgCheckClassS>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800ed4a:	6833      	ldr	r3, [r6, #0]
 800ed4c:	69b0      	ldr	r0, [r6, #24]
 800ed4e:	42b3      	cmp	r3, r6
  chTMObjectInit(&tp->p_stats);
 800ed50:	f104 0748 	add.w	r7, r4, #72	; 0x48
 800ed54:	d003      	beq.n	800ed5e <chThdCreateStatic.constprop.55+0xce>
 800ed56:	689b      	ldr	r3, [r3, #8]
 800ed58:	6882      	ldr	r2, [r0, #8]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d33c      	bcc.n	800edd8 <chThdCreateStatic.constprop.55+0x148>
  ntp->p_u.rdymsg = msg;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	6263      	str	r3, [r4, #36]	; 0x24
  if (ntp->p_prio <= currp->p_prio) {
 800ed62:	6883      	ldr	r3, [r0, #8]
 800ed64:	4598      	cmp	r8, r3
 800ed66:	d93b      	bls.n	800ede0 <chThdCreateStatic.constprop.55+0x150>
    thread_t *otp = chSchReadyI(currp);
 800ed68:	f7fd fc2a 	bl	800c5c0 <chSchReadyI>
    ntp->p_state = CH_STATE_CURRENT;
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	f884 3020 	strb.w	r3, [r4, #32]
    thread_t *otp = chSchReadyI(currp);
 800ed72:	4605      	mov	r5, r0
    setcurrp(ntp);
 800ed74:	61b4      	str	r4, [r6, #24]
    chSysSwitch(ntp, otp);
 800ed76:	f7fd fa83 	bl	800c280 <_dbg_trace>
  ch.kernel_stats.n_ctxswc++;
 800ed7a:	f8d6 34ac 	ldr.w	r3, [r6, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 800ed7e:	4639      	mov	r1, r7
  ch.kernel_stats.n_ctxswc++;
 800ed80:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 800ed82:	f105 0048 	add.w	r0, r5, #72	; 0x48
  ch.kernel_stats.n_ctxswc++;
 800ed86:	f8c6 34ac 	str.w	r3, [r6, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 800ed8a:	f7fd fa09 	bl	800c1a0 <chTMChainMeasurementToX>
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800ed8e:	f3ef 8309 	mrs	r3, PSP
 800ed92:	69ea      	ldr	r2, [r5, #28]
 800ed94:	3b24      	subs	r3, #36	; 0x24
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d81a      	bhi.n	800edd0 <chThdCreateStatic.constprop.55+0x140>
 800ed9a:	4629      	mov	r1, r5
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	f7f1 fa77 	bl	8000290 <_port_switch>
  _dbg_check_unlock();
 800eda2:	f7fd fccd 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800eda6:	f7fd fa4b 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800edaa:	6833      	ldr	r3, [r6, #0]
 800edac:	42b3      	cmp	r3, r6
 800edae:	d004      	beq.n	800edba <chThdCreateStatic.constprop.55+0x12a>
 800edb0:	69b2      	ldr	r2, [r6, #24]
 800edb2:	689b      	ldr	r3, [r3, #8]
 800edb4:	6892      	ldr	r2, [r2, #8]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d316      	bcc.n	800ede8 <chThdCreateStatic.constprop.55+0x158>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800edba:	2300      	movs	r3, #0
 800edbc:	f383 8811 	msr	BASEPRI, r3
}
 800edc0:	4620      	mov	r0, r4
 800edc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800edc6:	b672      	cpsid	i
 800edc8:	4b09      	ldr	r3, [pc, #36]	; (800edf0 <chThdCreateStatic.constprop.55+0x160>)
 800edca:	4a0b      	ldr	r2, [pc, #44]	; (800edf8 <chThdCreateStatic.constprop.55+0x168>)
 800edcc:	62da      	str	r2, [r3, #44]	; 0x2c
 800edce:	e7fe      	b.n	800edce <chThdCreateStatic.constprop.55+0x13e>
 800edd0:	b672      	cpsid	i
 800edd2:	4b0a      	ldr	r3, [pc, #40]	; (800edfc <chThdCreateStatic.constprop.55+0x16c>)
 800edd4:	62f3      	str	r3, [r6, #44]	; 0x2c
 800edd6:	e7fe      	b.n	800edd6 <chThdCreateStatic.constprop.55+0x146>
 800edd8:	b672      	cpsid	i
 800edda:	4b09      	ldr	r3, [pc, #36]	; (800ee00 <chThdCreateStatic.constprop.55+0x170>)
 800eddc:	62f3      	str	r3, [r6, #44]	; 0x2c
 800edde:	e7fe      	b.n	800edde <chThdCreateStatic.constprop.55+0x14e>
    (void) chSchReadyI(ntp);
 800ede0:	4620      	mov	r0, r4
 800ede2:	f7fd fbed 	bl	800c5c0 <chSchReadyI>
 800ede6:	e7dc      	b.n	800eda2 <chThdCreateStatic.constprop.55+0x112>
 800ede8:	b672      	cpsid	i
 800edea:	4b06      	ldr	r3, [pc, #24]	; (800ee04 <chThdCreateStatic.constprop.55+0x174>)
 800edec:	62f3      	str	r3, [r6, #44]	; 0x2c
 800edee:	e7fe      	b.n	800edee <chThdCreateStatic.constprop.55+0x15e>
 800edf0:	20001698 	.word	0x20001698
 800edf4:	080002a1 	.word	0x080002a1
 800edf8:	08010270 	.word	0x08010270
 800edfc:	08010080 	.word	0x08010080
 800ee00:	08010280 	.word	0x08010280
 800ee04:	08010200 	.word	0x08010200
	...

0800ee10 <chEvtRegisterMaskWithFlags.constprop.50>:
void chEvtRegisterMaskWithFlags(event_source_t *esp,
 800ee10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck((esp != NULL) && (elp != NULL));
 800ee12:	b350      	cbz	r0, 800ee6a <chEvtRegisterMaskWithFlags.constprop.50+0x5a>
 800ee14:	b349      	cbz	r1, 800ee6a <chEvtRegisterMaskWithFlags.constprop.50+0x5a>
 800ee16:	4606      	mov	r6, r0
 800ee18:	4617      	mov	r7, r2
 800ee1a:	460c      	mov	r4, r1
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800ee1c:	2320      	movs	r3, #32
 800ee1e:	f383 8811 	msr	BASEPRI, r3
  elp->el_listener = currp;
 800ee22:	4d14      	ldr	r5, [pc, #80]	; (800ee74 <chEvtRegisterMaskWithFlags.constprop.50+0x64>)
  _stats_start_measure_crit_thd();
 800ee24:	f7fd fa24 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800ee28:	f7fd fc9a 	bl	800c760 <_dbg_check_lock>
  elp->el_next     = esp->es_next;
 800ee2c:	6833      	ldr	r3, [r6, #0]
  elp->el_listener = currp;
 800ee2e:	69a9      	ldr	r1, [r5, #24]
  elp->el_next     = esp->es_next;
 800ee30:	6023      	str	r3, [r4, #0]
  elp->el_flags    = (eventflags_t)0;
 800ee32:	2200      	movs	r2, #0
  elp->el_wflags   = wflags;
 800ee34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  esp->es_next     = elp;
 800ee38:	6034      	str	r4, [r6, #0]
  elp->el_wflags   = wflags;
 800ee3a:	6123      	str	r3, [r4, #16]
  elp->el_listener = currp;
 800ee3c:	6061      	str	r1, [r4, #4]
  elp->el_flags    = (eventflags_t)0;
 800ee3e:	60e2      	str	r2, [r4, #12]
  elp->el_events   = events;
 800ee40:	60a7      	str	r7, [r4, #8]
  _dbg_check_unlock();
 800ee42:	f7fd fc7d 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800ee46:	f7fd f9fb 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800ee4a:	682b      	ldr	r3, [r5, #0]
 800ee4c:	42ab      	cmp	r3, r5
 800ee4e:	d004      	beq.n	800ee5a <chEvtRegisterMaskWithFlags.constprop.50+0x4a>
 800ee50:	69aa      	ldr	r2, [r5, #24]
 800ee52:	689b      	ldr	r3, [r3, #8]
 800ee54:	6892      	ldr	r2, [r2, #8]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d303      	bcc.n	800ee62 <chEvtRegisterMaskWithFlags.constprop.50+0x52>
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	f383 8811 	msr	BASEPRI, r3
 800ee60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800ee62:	b672      	cpsid	i
 800ee64:	4b04      	ldr	r3, [pc, #16]	; (800ee78 <chEvtRegisterMaskWithFlags.constprop.50+0x68>)
 800ee66:	62eb      	str	r3, [r5, #44]	; 0x2c
 800ee68:	e7fe      	b.n	800ee68 <chEvtRegisterMaskWithFlags.constprop.50+0x58>
 800ee6a:	b672      	cpsid	i
 800ee6c:	4b01      	ldr	r3, [pc, #4]	; (800ee74 <chEvtRegisterMaskWithFlags.constprop.50+0x64>)
 800ee6e:	4a03      	ldr	r2, [pc, #12]	; (800ee7c <chEvtRegisterMaskWithFlags.constprop.50+0x6c>)
 800ee70:	62da      	str	r2, [r3, #44]	; 0x2c
 800ee72:	e7fe      	b.n	800ee72 <chEvtRegisterMaskWithFlags.constprop.50+0x62>
 800ee74:	20001698 	.word	0x20001698
 800ee78:	08010210 	.word	0x08010210
 800ee7c:	08010250 	.word	0x08010250

0800ee80 <uartStartSend.constprop.27>:
 * @param[in] n         number of data frames to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void uartStartSend(UARTDriver *uartp, size_t n, const void *txbuf) {
 800ee80:	b538      	push	{r3, r4, r5, lr}

  osalDbgCheck((uartp != NULL) && (n > 0U) && (txbuf != NULL));
 800ee82:	b190      	cbz	r0, 800eeaa <uartStartSend.constprop.27+0x2a>
 800ee84:	b189      	cbz	r1, 800eeaa <uartStartSend.constprop.27+0x2a>
 800ee86:	4605      	mov	r5, r0
 800ee88:	460c      	mov	r4, r1
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800ee8a:	2320      	movs	r3, #32
 800ee8c:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800ee90:	f7fd f9ee 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800ee94:	f7fd fc64 	bl	800c760 <_dbg_check_lock>
             
  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "is active");
 800ee98:	4b21      	ldr	r3, [pc, #132]	; (800ef20 <uartStartSend.constprop.27+0xa0>)
 800ee9a:	781a      	ldrb	r2, [r3, #0]
 800ee9c:	2a02      	cmp	r2, #2
 800ee9e:	d009      	beq.n	800eeb4 <uartStartSend.constprop.27+0x34>
  __ASM volatile ("cpsid i" : : : "memory");
 800eea0:	b672      	cpsid	i
 800eea2:	4b20      	ldr	r3, [pc, #128]	; (800ef24 <uartStartSend.constprop.27+0xa4>)
 800eea4:	4a20      	ldr	r2, [pc, #128]	; (800ef28 <uartStartSend.constprop.27+0xa8>)
 800eea6:	62da      	str	r2, [r3, #44]	; 0x2c
 800eea8:	e7fe      	b.n	800eea8 <uartStartSend.constprop.27+0x28>
 800eeaa:	b672      	cpsid	i
 800eeac:	4b1d      	ldr	r3, [pc, #116]	; (800ef24 <uartStartSend.constprop.27+0xa4>)
 800eeae:	4a1e      	ldr	r2, [pc, #120]	; (800ef28 <uartStartSend.constprop.27+0xa8>)
 800eeb0:	62da      	str	r2, [r3, #44]	; 0x2c
 800eeb2:	e7fe      	b.n	800eeb2 <uartStartSend.constprop.27+0x32>
  osalDbgAssert(uartp->txstate != UART_TX_ACTIVE, "tx active");
 800eeb4:	785a      	ldrb	r2, [r3, #1]
 800eeb6:	2a01      	cmp	r2, #1
 800eeb8:	d029      	beq.n	800ef0e <uartStartSend.constprop.27+0x8e>
 * @notapi
 */
void uart_lld_start_send(UARTDriver *uartp, size_t n, const void *txbuf) {

  /* TX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 800eeba:	695a      	ldr	r2, [r3, #20]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
                                 STM32_DMA_CR_MINC | STM32_DMA_CR_TCIE);

  /* Only enable TC interrupt if there's a callback attached to it.
     Also we need to clear TC flag which could be set before. */
  if (uartp->config->txend2_cb != NULL) {
 800eebc:	6858      	ldr	r0, [r3, #4]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 800eebe:	68d9      	ldr	r1, [r3, #12]
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 800eec0:	6812      	ldr	r2, [r2, #0]
  if (uartp->config->txend2_cb != NULL) {
 800eec2:	6840      	ldr	r0, [r0, #4]
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 800eec4:	60d4      	str	r4, [r2, #12]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 800eec6:	f441 618a 	orr.w	r1, r1, #1104	; 0x450
  dmaStreamSetTransactionSize(uartp->dmatx, n);
 800eeca:	6055      	str	r5, [r2, #4]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 800eecc:	6011      	str	r1, [r2, #0]
  if (uartp->config->txend2_cb != NULL) {
 800eece:	b138      	cbz	r0, 800eee0 <uartStartSend.constprop.27+0x60>
    uartp->usart->SR = ~USART_SR_TC;
 800eed0:	6899      	ldr	r1, [r3, #8]
 800eed2:	f06f 0040 	mvn.w	r0, #64	; 0x40
 800eed6:	6008      	str	r0, [r1, #0]
    uartp->usart->CR1 |= USART_CR1_TCIE;
 800eed8:	68c8      	ldr	r0, [r1, #12]
 800eeda:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800eede:	60c8      	str	r0, [r1, #12]
  }

  /* Starting transfer.*/
  dmaStreamEnable(uartp->dmatx);
 800eee0:	6811      	ldr	r1, [r2, #0]
 800eee2:	f041 0101 	orr.w	r1, r1, #1
 800eee6:	6011      	str	r1, [r2, #0]

  uart_lld_start_send(uartp, n, txbuf);
  uartp->txstate = UART_TX_ACTIVE;
 800eee8:	2201      	movs	r2, #1
 800eeea:	705a      	strb	r2, [r3, #1]
  _dbg_check_unlock();
 800eeec:	f7fd fc28 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800eef0:	f7fd f9a6 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800eef4:	4b0b      	ldr	r3, [pc, #44]	; (800ef24 <uartStartSend.constprop.27+0xa4>)
 800eef6:	681a      	ldr	r2, [r3, #0]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d004      	beq.n	800ef06 <uartStartSend.constprop.27+0x86>
 800eefc:	6999      	ldr	r1, [r3, #24]
 800eefe:	6892      	ldr	r2, [r2, #8]
 800ef00:	6889      	ldr	r1, [r1, #8]
 800ef02:	4291      	cmp	r1, r2
 800ef04:	d308      	bcc.n	800ef18 <uartStartSend.constprop.27+0x98>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800ef06:	2300      	movs	r3, #0
 800ef08:	f383 8811 	msr	BASEPRI, r3
 800ef0c:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800ef0e:	b672      	cpsid	i
 800ef10:	4b04      	ldr	r3, [pc, #16]	; (800ef24 <uartStartSend.constprop.27+0xa4>)
 800ef12:	4a05      	ldr	r2, [pc, #20]	; (800ef28 <uartStartSend.constprop.27+0xa8>)
 800ef14:	62da      	str	r2, [r3, #44]	; 0x2c
 800ef16:	e7fe      	b.n	800ef16 <uartStartSend.constprop.27+0x96>
 800ef18:	b672      	cpsid	i
 800ef1a:	4a04      	ldr	r2, [pc, #16]	; (800ef2c <uartStartSend.constprop.27+0xac>)
 800ef1c:	62da      	str	r2, [r3, #44]	; 0x2c
 800ef1e:	e7fe      	b.n	800ef1e <uartStartSend.constprop.27+0x9e>
 800ef20:	20001674 	.word	0x20001674
 800ef24:	20001698 	.word	0x20001698
 800ef28:	080102a0 	.word	0x080102a0
 800ef2c:	08010220 	.word	0x08010220

0800ef30 <uartStopSend.constprop.25>:
 *                      stopped transmit operation.
 * @retval 0            There was no transmit operation in progress.
 *
 * @api
 */
size_t uartStopSend(UARTDriver *uartp) {
 800ef30:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800ef32:	2320      	movs	r3, #32
 800ef34:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800ef38:	f7fd f99a 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800ef3c:	f7fd fc10 	bl	800c760 <_dbg_check_lock>
  size_t n;

  osalDbgCheck(uartp != NULL);

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "not active");
 800ef40:	4b1a      	ldr	r3, [pc, #104]	; (800efac <uartStopSend.constprop.25+0x7c>)
 800ef42:	781a      	ldrb	r2, [r3, #0]
 800ef44:	2a02      	cmp	r2, #2
 800ef46:	d004      	beq.n	800ef52 <uartStopSend.constprop.25+0x22>
  __ASM volatile ("cpsid i" : : : "memory");
 800ef48:	b672      	cpsid	i
 800ef4a:	4b19      	ldr	r3, [pc, #100]	; (800efb0 <uartStopSend.constprop.25+0x80>)
 800ef4c:	4a19      	ldr	r2, [pc, #100]	; (800efb4 <uartStopSend.constprop.25+0x84>)
 800ef4e:	62da      	str	r2, [r3, #44]	; 0x2c
 800ef50:	e7fe      	b.n	800ef50 <uartStopSend.constprop.25+0x20>

  if (uartp->txstate == UART_TX_ACTIVE) {
 800ef52:	785a      	ldrb	r2, [r3, #1]
 800ef54:	2a01      	cmp	r2, #1
 800ef56:	d012      	beq.n	800ef7e <uartStopSend.constprop.25+0x4e>
    n = uart_lld_stop_send(uartp);
    uartp->txstate = UART_TX_IDLE;
  }
  else {
    n = 0;
 800ef58:	2400      	movs	r4, #0
  _dbg_check_unlock();
 800ef5a:	f7fd fbf1 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800ef5e:	f7fd f96f 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800ef62:	4b13      	ldr	r3, [pc, #76]	; (800efb0 <uartStopSend.constprop.25+0x80>)
 800ef64:	681a      	ldr	r2, [r3, #0]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d004      	beq.n	800ef74 <uartStopSend.constprop.25+0x44>
 800ef6a:	6999      	ldr	r1, [r3, #24]
 800ef6c:	6892      	ldr	r2, [r2, #8]
 800ef6e:	6889      	ldr	r1, [r1, #8]
 800ef70:	4291      	cmp	r1, r2
 800ef72:	d316      	bcc.n	800efa2 <uartStopSend.constprop.25+0x72>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800ef74:	2300      	movs	r3, #0
 800ef76:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();

  return n;
}
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @notapi
 */
size_t uart_lld_stop_send(UARTDriver *uartp) {

  dmaStreamDisable(uartp->dmatx);
 800ef7e:	6958      	ldr	r0, [r3, #20]
 800ef80:	6801      	ldr	r1, [r0, #0]
 800ef82:	680a      	ldr	r2, [r1, #0]
 800ef84:	f022 021f 	bic.w	r2, r2, #31
 800ef88:	600a      	str	r2, [r1, #0]
 800ef8a:	680a      	ldr	r2, [r1, #0]
 800ef8c:	f012 0201 	ands.w	r2, r2, #1
 800ef90:	d1fb      	bne.n	800ef8a <uartStopSend.constprop.25+0x5a>
 800ef92:	7a05      	ldrb	r5, [r0, #8]
 800ef94:	6844      	ldr	r4, [r0, #4]
 800ef96:	203d      	movs	r0, #61	; 0x3d
 800ef98:	40a8      	lsls	r0, r5
 800ef9a:	6020      	str	r0, [r4, #0]

  return dmaStreamGetTransactionSize(uartp->dmatx);
 800ef9c:	684c      	ldr	r4, [r1, #4]
    uartp->txstate = UART_TX_IDLE;
 800ef9e:	705a      	strb	r2, [r3, #1]
 800efa0:	e7db      	b.n	800ef5a <uartStopSend.constprop.25+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800efa2:	b672      	cpsid	i
 800efa4:	4a04      	ldr	r2, [pc, #16]	; (800efb8 <uartStopSend.constprop.25+0x88>)
 800efa6:	62da      	str	r2, [r3, #44]	; 0x2c
 800efa8:	e7fe      	b.n	800efa8 <uartStopSend.constprop.25+0x78>
 800efaa:	bf00      	nop
 800efac:	20001674 	.word	0x20001674
 800efb0:	20001698 	.word	0x20001698
 800efb4:	080102b0 	.word	0x080102b0
 800efb8:	08010220 	.word	0x08010220
 800efbc:	00000000 	.word	0x00000000

0800efc0 <uartStartReceive.constprop.23>:
 *
 * @api
 */
void uartStartReceive(UARTDriver *uartp, size_t n, void *rxbuf) {

  osalDbgCheck((uartp != NULL) && (n > 0U) && (rxbuf != NULL));
 800efc0:	b198      	cbz	r0, 800efea <uartStartReceive.constprop.23+0x2a>
 800efc2:	b191      	cbz	r1, 800efea <uartStartReceive.constprop.23+0x2a>
void uartStartReceive(UARTDriver *uartp, size_t n, void *rxbuf) {
 800efc4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800efc6:	2320      	movs	r3, #32
 800efc8:	4604      	mov	r4, r0
 800efca:	460d      	mov	r5, r1
 800efcc:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800efd0:	f7fd f94e 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800efd4:	f7fd fbc4 	bl	800c760 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "is active");
 800efd8:	4a22      	ldr	r2, [pc, #136]	; (800f064 <uartStartReceive.constprop.23+0xa4>)
 800efda:	7813      	ldrb	r3, [r2, #0]
 800efdc:	2b02      	cmp	r3, #2
 800efde:	d009      	beq.n	800eff4 <uartStartReceive.constprop.23+0x34>
  __ASM volatile ("cpsid i" : : : "memory");
 800efe0:	b672      	cpsid	i
 800efe2:	4b21      	ldr	r3, [pc, #132]	; (800f068 <uartStartReceive.constprop.23+0xa8>)
 800efe4:	4a21      	ldr	r2, [pc, #132]	; (800f06c <uartStartReceive.constprop.23+0xac>)
 800efe6:	62da      	str	r2, [r3, #44]	; 0x2c
 800efe8:	e7fe      	b.n	800efe8 <uartStartReceive.constprop.23+0x28>
 800efea:	b672      	cpsid	i
 800efec:	4b1e      	ldr	r3, [pc, #120]	; (800f068 <uartStartReceive.constprop.23+0xa8>)
 800efee:	4a1f      	ldr	r2, [pc, #124]	; (800f06c <uartStartReceive.constprop.23+0xac>)
 800eff0:	62da      	str	r2, [r3, #44]	; 0x2c
 800eff2:	e7fe      	b.n	800eff2 <uartStartReceive.constprop.23+0x32>
  osalDbgAssert(uartp->rxstate != UART_RX_ACTIVE, "rx active");
 800eff4:	7893      	ldrb	r3, [r2, #2]
 800eff6:	2b01      	cmp	r3, #1
 800eff8:	d02a      	beq.n	800f050 <uartStartReceive.constprop.23+0x90>
 * @notapi
 */
void uart_lld_start_receive(UARTDriver *uartp, size_t n, void *rxbuf) {

  /* Stopping previous activity (idle state).*/
  dmaStreamDisable(uartp->dmarx);
 800effa:	6911      	ldr	r1, [r2, #16]
 800effc:	680b      	ldr	r3, [r1, #0]
 800effe:	6818      	ldr	r0, [r3, #0]
 800f000:	f020 001f 	bic.w	r0, r0, #31
 800f004:	6018      	str	r0, [r3, #0]
 800f006:	6818      	ldr	r0, [r3, #0]
 800f008:	07c0      	lsls	r0, r0, #31
 800f00a:	d4fc      	bmi.n	800f006 <uartStartReceive.constprop.23+0x46>
 800f00c:	7a0e      	ldrb	r6, [r1, #8]
 800f00e:	6848      	ldr	r0, [r1, #4]
 800f010:	213d      	movs	r1, #61	; 0x3d
 800f012:	40b1      	lsls	r1, r6
 800f014:	6001      	str	r1, [r0, #0]

  /* RX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmarx, rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, n);
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode    | STM32_DMA_CR_DIR_P2M |
 800f016:	68d1      	ldr	r1, [r2, #12]
  dmaStreamSetMemory0(uartp->dmarx, rxbuf);
 800f018:	60dd      	str	r5, [r3, #12]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode    | STM32_DMA_CR_DIR_P2M |
 800f01a:	f441 6182 	orr.w	r1, r1, #1040	; 0x410
  dmaStreamSetTransactionSize(uartp->dmarx, n);
 800f01e:	605c      	str	r4, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode    | STM32_DMA_CR_DIR_P2M |
 800f020:	6019      	str	r1, [r3, #0]
                                 STM32_DMA_CR_MINC | STM32_DMA_CR_TCIE);

  /* Starting transfer.*/
  dmaStreamEnable(uartp->dmarx);
 800f022:	6819      	ldr	r1, [r3, #0]
 800f024:	f041 0101 	orr.w	r1, r1, #1
 800f028:	6019      	str	r1, [r3, #0]

  uart_lld_start_receive(uartp, n, rxbuf);
  uartp->rxstate = UART_RX_ACTIVE;
 800f02a:	2301      	movs	r3, #1
 800f02c:	7093      	strb	r3, [r2, #2]
  _dbg_check_unlock();
 800f02e:	f7fd fb87 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800f032:	f7fd f905 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800f036:	4b0c      	ldr	r3, [pc, #48]	; (800f068 <uartStartReceive.constprop.23+0xa8>)
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d004      	beq.n	800f048 <uartStartReceive.constprop.23+0x88>
 800f03e:	6999      	ldr	r1, [r3, #24]
 800f040:	6892      	ldr	r2, [r2, #8]
 800f042:	6889      	ldr	r1, [r1, #8]
 800f044:	4291      	cmp	r1, r2
 800f046:	d308      	bcc.n	800f05a <uartStartReceive.constprop.23+0x9a>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800f048:	2300      	movs	r3, #0
 800f04a:	f383 8811 	msr	BASEPRI, r3
 800f04e:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800f050:	b672      	cpsid	i
 800f052:	4b05      	ldr	r3, [pc, #20]	; (800f068 <uartStartReceive.constprop.23+0xa8>)
 800f054:	4a05      	ldr	r2, [pc, #20]	; (800f06c <uartStartReceive.constprop.23+0xac>)
 800f056:	62da      	str	r2, [r3, #44]	; 0x2c
 800f058:	e7fe      	b.n	800f058 <uartStartReceive.constprop.23+0x98>
 800f05a:	b672      	cpsid	i
 800f05c:	4a04      	ldr	r2, [pc, #16]	; (800f070 <uartStartReceive.constprop.23+0xb0>)
 800f05e:	62da      	str	r2, [r3, #44]	; 0x2c
 800f060:	e7fe      	b.n	800f060 <uartStartReceive.constprop.23+0xa0>
 800f062:	bf00      	nop
 800f064:	20001674 	.word	0x20001674
 800f068:	20001698 	.word	0x20001698
 800f06c:	080102c0 	.word	0x080102c0
 800f070:	08010220 	.word	0x08010220
	...

0800f080 <uartStopReceive.constprop.21>:
 *                      stopped receive operation.
 * @retval 0            There was no receive operation in progress.
 *
 * @api
 */
size_t uartStopReceive(UARTDriver *uartp) {
 800f080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800f082:	2320      	movs	r3, #32
 800f084:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800f088:	f7fd f8f2 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800f08c:	f7fd fb68 	bl	800c760 <_dbg_check_lock>
  size_t n;

  osalDbgCheck(uartp != NULL);

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "not active");
 800f090:	4a23      	ldr	r2, [pc, #140]	; (800f120 <uartStopReceive.constprop.21+0xa0>)
 800f092:	7813      	ldrb	r3, [r2, #0]
 800f094:	2b02      	cmp	r3, #2
 800f096:	d004      	beq.n	800f0a2 <uartStopReceive.constprop.21+0x22>
  __ASM volatile ("cpsid i" : : : "memory");
 800f098:	b672      	cpsid	i
 800f09a:	4b22      	ldr	r3, [pc, #136]	; (800f124 <uartStopReceive.constprop.21+0xa4>)
 800f09c:	4a22      	ldr	r2, [pc, #136]	; (800f128 <uartStopReceive.constprop.21+0xa8>)
 800f09e:	62da      	str	r2, [r3, #44]	; 0x2c
 800f0a0:	e7fe      	b.n	800f0a0 <uartStopReceive.constprop.21+0x20>

  if (uartp->rxstate == UART_RX_ACTIVE) {
 800f0a2:	7893      	ldrb	r3, [r2, #2]
 800f0a4:	2b01      	cmp	r3, #1
 800f0a6:	d012      	beq.n	800f0ce <uartStopReceive.constprop.21+0x4e>
    n = uart_lld_stop_receive(uartp);
    uartp->rxstate = UART_RX_IDLE;
  }
  else {
    n = 0;
 800f0a8:	2500      	movs	r5, #0
  _dbg_check_unlock();
 800f0aa:	f7fd fb49 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800f0ae:	f7fd f8c7 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800f0b2:	4b1c      	ldr	r3, [pc, #112]	; (800f124 <uartStopReceive.constprop.21+0xa4>)
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d004      	beq.n	800f0c4 <uartStopReceive.constprop.21+0x44>
 800f0ba:	6999      	ldr	r1, [r3, #24]
 800f0bc:	6892      	ldr	r2, [r2, #8]
 800f0be:	6889      	ldr	r1, [r1, #8]
 800f0c0:	4291      	cmp	r1, r2
 800f0c2:	d328      	bcc.n	800f116 <uartStopReceive.constprop.21+0x96>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();

  return n;
}
 800f0ca:	4628      	mov	r0, r5
 800f0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @notapi
 */
size_t uart_lld_stop_receive(UARTDriver *uartp) {
  size_t n;

  dmaStreamDisable(uartp->dmarx);
 800f0ce:	6911      	ldr	r1, [r2, #16]
 800f0d0:	680b      	ldr	r3, [r1, #0]
 800f0d2:	6818      	ldr	r0, [r3, #0]
 800f0d4:	f020 001f 	bic.w	r0, r0, #31
 800f0d8:	6018      	str	r0, [r3, #0]
 800f0da:	681c      	ldr	r4, [r3, #0]
 800f0dc:	f014 0401 	ands.w	r4, r4, #1
 800f0e0:	d1fb      	bne.n	800f0da <uartStopReceive.constprop.21+0x5a>
 800f0e2:	7a0d      	ldrb	r5, [r1, #8]
  if (uartp->config->rxchar_cb == NULL)
 800f0e4:	6856      	ldr	r6, [r2, #4]
  dmaStreamDisable(uartp->dmarx);
 800f0e6:	6848      	ldr	r0, [r1, #4]
  if (uartp->config->rxchar_cb == NULL)
 800f0e8:	68f6      	ldr	r6, [r6, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 800f0ea:	4f10      	ldr	r7, [pc, #64]	; (800f12c <uartStopReceive.constprop.21+0xac>)
  dmaStreamDisable(uartp->dmarx);
 800f0ec:	213d      	movs	r1, #61	; 0x3d
 800f0ee:	40a9      	lsls	r1, r5
 800f0f0:	6001      	str	r1, [r0, #0]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 800f0f2:	68d0      	ldr	r0, [r2, #12]
  n = dmaStreamGetTransactionSize(uartp->dmarx);
 800f0f4:	685d      	ldr	r5, [r3, #4]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 800f0f6:	60df      	str	r7, [r3, #12]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
 800f0f8:	2e00      	cmp	r6, #0
 800f0fa:	bf0c      	ite	eq
 800f0fc:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800f100:	f44f 7188 	movne.w	r1, #272	; 0x110
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 800f104:	4301      	orrs	r1, r0
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 800f106:	2001      	movs	r0, #1
 800f108:	6058      	str	r0, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 800f10a:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(uartp->dmarx);
 800f10c:	6819      	ldr	r1, [r3, #0]
 800f10e:	4301      	orrs	r1, r0
 800f110:	6019      	str	r1, [r3, #0]
    uartp->rxstate = UART_RX_IDLE;
 800f112:	7094      	strb	r4, [r2, #2]
 800f114:	e7c9      	b.n	800f0aa <uartStopReceive.constprop.21+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800f116:	b672      	cpsid	i
 800f118:	4a05      	ldr	r2, [pc, #20]	; (800f130 <uartStopReceive.constprop.21+0xb0>)
 800f11a:	62da      	str	r2, [r3, #44]	; 0x2c
 800f11c:	e7fe      	b.n	800f11c <uartStopReceive.constprop.21+0x9c>
 800f11e:	bf00      	nop
 800f120:	20001674 	.word	0x20001674
 800f124:	20001698 	.word	0x20001698
 800f128:	080102e0 	.word	0x080102e0
 800f12c:	2000168c 	.word	0x2000168c
 800f130:	08010220 	.word	0x08010220
	...

0800f140 <sd_volumen>:
	if(pos == 1)
 800f140:	2801      	cmp	r0, #1
{
 800f142:	b538      	push	{r3, r4, r5, lr}
	if(pos == 1)
 800f144:	d171      	bne.n	800f22a <sd_volumen+0xea>
	return (dato_emr3[num]);
 800f146:	4c72      	ldr	r4, [pc, #456]	; (800f310 <sd_volumen+0x1d0>)
		switch(read_eeprom(PV))
 800f148:	7ba3      	ldrb	r3, [r4, #14]
 800f14a:	2b03      	cmp	r3, #3
 800f14c:	f200 80df 	bhi.w	800f30e <sd_volumen+0x1ce>
 800f150:	e8df f003 	tbb	[pc, r3]
 800f154:	4f3a1e02 	.word	0x4f3a1e02
	            VOL1[0] = ascii(read_eeprom(v1_1));
 800f158:	7be0      	ldrb	r0, [r4, #15]
 800f15a:	4d6e      	ldr	r5, [pc, #440]	; (800f314 <sd_volumen+0x1d4>)
 800f15c:	f000 f8e0 	bl	800f320 <ascii>
 800f160:	7028      	strb	r0, [r5, #0]
	            VOL1[1] = ascii(read_eeprom(v2_1));
 800f162:	7c20      	ldrb	r0, [r4, #16]
 800f164:	f000 f8dc 	bl	800f320 <ascii>
 800f168:	7068      	strb	r0, [r5, #1]
	            VOL1[2] = ascii(read_eeprom(v3_1));
 800f16a:	7c60      	ldrb	r0, [r4, #17]
 800f16c:	f000 f8d8 	bl	800f320 <ascii>
 800f170:	70a8      	strb	r0, [r5, #2]
	            VOL1[3] = ascii(read_eeprom(v4_1));
 800f172:	7ca0      	ldrb	r0, [r4, #18]
 800f174:	f000 f8d4 	bl	800f320 <ascii>
 800f178:	70e8      	strb	r0, [r5, #3]
	            VOL1[4] = ascii(read_eeprom(v5_1));
 800f17a:	7ce0      	ldrb	r0, [r4, #19]
 800f17c:	f000 f8d0 	bl	800f320 <ascii>
 800f180:	7128      	strb	r0, [r5, #4]
	            VOL1[5] = ascii(read_eeprom(v6_1));
 800f182:	7d20      	ldrb	r0, [r4, #20]
 800f184:	f000 f8cc 	bl	800f320 <ascii>
	            VOL1[6] = '.';
 800f188:	232e      	movs	r3, #46	; 0x2e
	            VOL1[5] = ascii(read_eeprom(v6_1));
 800f18a:	7168      	strb	r0, [r5, #5]
	            VOL1[6] = '.';
 800f18c:	71ab      	strb	r3, [r5, #6]
 800f18e:	bd38      	pop	{r3, r4, r5, pc}
	            VOL1[0] = ascii(read_eeprom(v1_1));
 800f190:	7be0      	ldrb	r0, [r4, #15]
 800f192:	4d60      	ldr	r5, [pc, #384]	; (800f314 <sd_volumen+0x1d4>)
 800f194:	f000 f8c4 	bl	800f320 <ascii>
 800f198:	7028      	strb	r0, [r5, #0]
                VOL1[1] = ascii(read_eeprom(v2_1));
 800f19a:	7c20      	ldrb	r0, [r4, #16]
 800f19c:	f000 f8c0 	bl	800f320 <ascii>
 800f1a0:	7068      	strb	r0, [r5, #1]
                VOL1[2] = ascii(read_eeprom(v3_1));
 800f1a2:	7c60      	ldrb	r0, [r4, #17]
 800f1a4:	f000 f8bc 	bl	800f320 <ascii>
 800f1a8:	70a8      	strb	r0, [r5, #2]
                VOL1[3] = ascii(read_eeprom(v4_1));
 800f1aa:	7ca0      	ldrb	r0, [r4, #18]
 800f1ac:	f000 f8b8 	bl	800f320 <ascii>
 800f1b0:	70e8      	strb	r0, [r5, #3]
                VOL1[4] = ascii(read_eeprom(v5_1));
 800f1b2:	7ce0      	ldrb	r0, [r4, #19]
 800f1b4:	f000 f8b4 	bl	800f320 <ascii>
                VOL1[5] = '.';
 800f1b8:	232e      	movs	r3, #46	; 0x2e
                VOL1[4] = ascii(read_eeprom(v5_1));
 800f1ba:	7128      	strb	r0, [r5, #4]
                VOL1[6] = ascii(read_eeprom(v6_1));
 800f1bc:	7d20      	ldrb	r0, [r4, #20]
                VOL1[5] = '.';
 800f1be:	716b      	strb	r3, [r5, #5]
                VOL1[6] = ascii(read_eeprom(v6_1));
 800f1c0:	f000 f8ae 	bl	800f320 <ascii>
 800f1c4:	71a8      	strb	r0, [r5, #6]
 800f1c6:	bd38      	pop	{r3, r4, r5, pc}
	            VOL1[0] = ascii(read_eeprom(v1_1));
 800f1c8:	7be0      	ldrb	r0, [r4, #15]
 800f1ca:	4d52      	ldr	r5, [pc, #328]	; (800f314 <sd_volumen+0x1d4>)
 800f1cc:	f000 f8a8 	bl	800f320 <ascii>
 800f1d0:	7028      	strb	r0, [r5, #0]
                VOL1[1] = ascii(read_eeprom(v2_1));
 800f1d2:	7c20      	ldrb	r0, [r4, #16]
 800f1d4:	f000 f8a4 	bl	800f320 <ascii>
 800f1d8:	7068      	strb	r0, [r5, #1]
                VOL1[2] = ascii(read_eeprom(v3_1));
 800f1da:	7c60      	ldrb	r0, [r4, #17]
 800f1dc:	f000 f8a0 	bl	800f320 <ascii>
 800f1e0:	70a8      	strb	r0, [r5, #2]
                VOL1[3] = ascii(read_eeprom(v4_1));
 800f1e2:	7ca0      	ldrb	r0, [r4, #18]
 800f1e4:	f000 f89c 	bl	800f320 <ascii>
                VOL1[4] = '.';
 800f1e8:	232e      	movs	r3, #46	; 0x2e
                VOL1[3] = ascii(read_eeprom(v4_1));
 800f1ea:	70e8      	strb	r0, [r5, #3]
                VOL1[4] = '.';
 800f1ec:	712b      	strb	r3, [r5, #4]
                VOL1[5] = ascii(read_eeprom(v5_1));
 800f1ee:	7ce0      	ldrb	r0, [r4, #19]
 800f1f0:	e013      	b.n	800f21a <sd_volumen+0xda>
	            VOL1[0] = ascii(read_eeprom(v1_1));
 800f1f2:	7be0      	ldrb	r0, [r4, #15]
 800f1f4:	4d47      	ldr	r5, [pc, #284]	; (800f314 <sd_volumen+0x1d4>)
 800f1f6:	f000 f893 	bl	800f320 <ascii>
 800f1fa:	7028      	strb	r0, [r5, #0]
                VOL1[1] = ascii(read_eeprom(v2_1));
 800f1fc:	7c20      	ldrb	r0, [r4, #16]
 800f1fe:	f000 f88f 	bl	800f320 <ascii>
 800f202:	7068      	strb	r0, [r5, #1]
                VOL1[2] = ascii(read_eeprom(v3_1));
 800f204:	7c60      	ldrb	r0, [r4, #17]
 800f206:	f000 f88b 	bl	800f320 <ascii>
                VOL1[3] = '.';
 800f20a:	232e      	movs	r3, #46	; 0x2e
                VOL1[2] = ascii(read_eeprom(v3_1));
 800f20c:	70a8      	strb	r0, [r5, #2]
                VOL1[4] = ascii(read_eeprom(v4_1));
 800f20e:	7ca0      	ldrb	r0, [r4, #18]
                VOL1[3] = '.';
 800f210:	70eb      	strb	r3, [r5, #3]
                VOL1[4] = ascii(read_eeprom(v4_1));
 800f212:	f000 f885 	bl	800f320 <ascii>
 800f216:	7128      	strb	r0, [r5, #4]
                VOL1[5] = ascii(read_eeprom(v5_1));
 800f218:	7ce0      	ldrb	r0, [r4, #19]
 800f21a:	f000 f881 	bl	800f320 <ascii>
 800f21e:	7168      	strb	r0, [r5, #5]
                VOL1[6] = ascii(read_eeprom(v6_1));
 800f220:	7d20      	ldrb	r0, [r4, #20]
 800f222:	f000 f87d 	bl	800f320 <ascii>
 800f226:	71a8      	strb	r0, [r5, #6]
 800f228:	bd38      	pop	{r3, r4, r5, pc}
    else if(pos == 2)
 800f22a:	2802      	cmp	r0, #2
 800f22c:	d16f      	bne.n	800f30e <sd_volumen+0x1ce>
 800f22e:	4c38      	ldr	r4, [pc, #224]	; (800f310 <sd_volumen+0x1d0>)
        switch(read_eeprom(PV))
 800f230:	7ba3      	ldrb	r3, [r4, #14]
 800f232:	2b03      	cmp	r3, #3
 800f234:	d86b      	bhi.n	800f30e <sd_volumen+0x1ce>
 800f236:	e8df f003 	tbb	[pc, r3]
 800f23a:	1e02      	.short	0x1e02
 800f23c:	4f3a      	.short	0x4f3a
                VOL1[0] = ascii(read_eeprom(v1_2));
 800f23e:	7d60      	ldrb	r0, [r4, #21]
 800f240:	4d34      	ldr	r5, [pc, #208]	; (800f314 <sd_volumen+0x1d4>)
 800f242:	f000 f86d 	bl	800f320 <ascii>
 800f246:	7028      	strb	r0, [r5, #0]
                VOL1[1] = ascii(read_eeprom(v2_2));
 800f248:	7da0      	ldrb	r0, [r4, #22]
 800f24a:	f000 f869 	bl	800f320 <ascii>
 800f24e:	7068      	strb	r0, [r5, #1]
                VOL1[2] = ascii(read_eeprom(v3_2));
 800f250:	7de0      	ldrb	r0, [r4, #23]
 800f252:	f000 f865 	bl	800f320 <ascii>
 800f256:	70a8      	strb	r0, [r5, #2]
                VOL1[3] = ascii(read_eeprom(v4_2));
 800f258:	7e20      	ldrb	r0, [r4, #24]
 800f25a:	f000 f861 	bl	800f320 <ascii>
 800f25e:	70e8      	strb	r0, [r5, #3]
                VOL1[4] = ascii(read_eeprom(v5_2));
 800f260:	7e60      	ldrb	r0, [r4, #25]
 800f262:	f000 f85d 	bl	800f320 <ascii>
 800f266:	7128      	strb	r0, [r5, #4]
                VOL1[5] = ascii(read_eeprom(v6_2));
 800f268:	7ea0      	ldrb	r0, [r4, #26]
 800f26a:	f000 f859 	bl	800f320 <ascii>
                VOL1[6] = '.';
 800f26e:	232e      	movs	r3, #46	; 0x2e
                VOL1[5] = ascii(read_eeprom(v6_2));
 800f270:	7168      	strb	r0, [r5, #5]
                VOL1[6] = '.';
 800f272:	71ab      	strb	r3, [r5, #6]
 800f274:	bd38      	pop	{r3, r4, r5, pc}
                VOL1[0] = ascii(read_eeprom(v1_2));
 800f276:	7d60      	ldrb	r0, [r4, #21]
 800f278:	4d26      	ldr	r5, [pc, #152]	; (800f314 <sd_volumen+0x1d4>)
 800f27a:	f000 f851 	bl	800f320 <ascii>
 800f27e:	7028      	strb	r0, [r5, #0]
                VOL1[1] = ascii(read_eeprom(v2_2));
 800f280:	7da0      	ldrb	r0, [r4, #22]
 800f282:	f000 f84d 	bl	800f320 <ascii>
 800f286:	7068      	strb	r0, [r5, #1]
                VOL1[2] = ascii(read_eeprom(v3_2));
 800f288:	7de0      	ldrb	r0, [r4, #23]
 800f28a:	f000 f849 	bl	800f320 <ascii>
 800f28e:	70a8      	strb	r0, [r5, #2]
                VOL1[3] = ascii(read_eeprom(v4_2));
 800f290:	7e20      	ldrb	r0, [r4, #24]
 800f292:	f000 f845 	bl	800f320 <ascii>
 800f296:	70e8      	strb	r0, [r5, #3]
                VOL1[4] = ascii(read_eeprom(v5_2));
 800f298:	7e60      	ldrb	r0, [r4, #25]
 800f29a:	f000 f841 	bl	800f320 <ascii>
                VOL1[5] = '.';
 800f29e:	232e      	movs	r3, #46	; 0x2e
                VOL1[4] = ascii(read_eeprom(v5_2));
 800f2a0:	7128      	strb	r0, [r5, #4]
                VOL1[6] = ascii(read_eeprom(v6_2));
 800f2a2:	7ea0      	ldrb	r0, [r4, #26]
                VOL1[5] = '.';
 800f2a4:	716b      	strb	r3, [r5, #5]
                VOL1[6] = ascii(read_eeprom(v6_2));
 800f2a6:	f000 f83b 	bl	800f320 <ascii>
 800f2aa:	71a8      	strb	r0, [r5, #6]
 800f2ac:	bd38      	pop	{r3, r4, r5, pc}
                VOL1[0] = ascii(read_eeprom(v1_2));
 800f2ae:	7d60      	ldrb	r0, [r4, #21]
 800f2b0:	4d18      	ldr	r5, [pc, #96]	; (800f314 <sd_volumen+0x1d4>)
 800f2b2:	f000 f835 	bl	800f320 <ascii>
 800f2b6:	7028      	strb	r0, [r5, #0]
                VOL1[1] = ascii(read_eeprom(v2_2));
 800f2b8:	7da0      	ldrb	r0, [r4, #22]
 800f2ba:	f000 f831 	bl	800f320 <ascii>
 800f2be:	7068      	strb	r0, [r5, #1]
                VOL1[2] = ascii(read_eeprom(v3_2));
 800f2c0:	7de0      	ldrb	r0, [r4, #23]
 800f2c2:	f000 f82d 	bl	800f320 <ascii>
 800f2c6:	70a8      	strb	r0, [r5, #2]
                VOL1[3] = ascii(read_eeprom(v4_2));
 800f2c8:	7e20      	ldrb	r0, [r4, #24]
 800f2ca:	f000 f829 	bl	800f320 <ascii>
                VOL1[4] = '.';
 800f2ce:	232e      	movs	r3, #46	; 0x2e
                VOL1[3] = ascii(read_eeprom(v4_2));
 800f2d0:	70e8      	strb	r0, [r5, #3]
                VOL1[4] = '.';
 800f2d2:	712b      	strb	r3, [r5, #4]
                VOL1[5] = ascii(read_eeprom(v5_2));
 800f2d4:	7e60      	ldrb	r0, [r4, #25]
 800f2d6:	e013      	b.n	800f300 <sd_volumen+0x1c0>
                VOL1[0] = ascii(read_eeprom(v1_2));
 800f2d8:	7d60      	ldrb	r0, [r4, #21]
 800f2da:	4d0e      	ldr	r5, [pc, #56]	; (800f314 <sd_volumen+0x1d4>)
 800f2dc:	f000 f820 	bl	800f320 <ascii>
 800f2e0:	7028      	strb	r0, [r5, #0]
                VOL1[1] = ascii(read_eeprom(v2_2));
 800f2e2:	7da0      	ldrb	r0, [r4, #22]
 800f2e4:	f000 f81c 	bl	800f320 <ascii>
 800f2e8:	7068      	strb	r0, [r5, #1]
                VOL1[2] = ascii(read_eeprom(v3_2));
 800f2ea:	7de0      	ldrb	r0, [r4, #23]
 800f2ec:	f000 f818 	bl	800f320 <ascii>
                VOL1[3] = '.';
 800f2f0:	232e      	movs	r3, #46	; 0x2e
                VOL1[2] = ascii(read_eeprom(v3_2));
 800f2f2:	70a8      	strb	r0, [r5, #2]
                VOL1[4] = ascii(read_eeprom(v4_2));
 800f2f4:	7e20      	ldrb	r0, [r4, #24]
                VOL1[3] = '.';
 800f2f6:	70eb      	strb	r3, [r5, #3]
                VOL1[4] = ascii(read_eeprom(v4_2));
 800f2f8:	f000 f812 	bl	800f320 <ascii>
 800f2fc:	7128      	strb	r0, [r5, #4]
                VOL1[5] = ascii(read_eeprom(v5_2));
 800f2fe:	7e60      	ldrb	r0, [r4, #25]
 800f300:	f000 f80e 	bl	800f320 <ascii>
 800f304:	7168      	strb	r0, [r5, #5]
                VOL1[6] = ascii(read_eeprom(v6_2));
 800f306:	7ea0      	ldrb	r0, [r4, #26]
 800f308:	f000 f80a 	bl	800f320 <ascii>
 800f30c:	71a8      	strb	r0, [r5, #6]
 800f30e:	bd38      	pop	{r3, r4, r5, pc}
 800f310:	20001c74 	.word	0x20001c74
 800f314:	200008b4 	.word	0x200008b4
	...

0800f320 <ascii>:


char ascii(uint8_t data)
{

	switch(data)
 800f320:	280f      	cmp	r0, #15
 800f322:	d829      	bhi.n	800f378 <ascii+0x58>
 800f324:	e8df f000 	tbb	[pc, r0]
 800f328:	0a082624 	.word	0x0a082624
 800f32c:	12100e0c 	.word	0x12100e0c
 800f330:	1a181614 	.word	0x1a181614
 800f334:	22201e1c 	.word	0x22201e1c
		break;

		case 1: return '1';
		break;

		case 2: return '2';
 800f338:	2032      	movs	r0, #50	; 0x32

		case 15: return 'F';
		break;

	}	
}
 800f33a:	4770      	bx	lr
		case 3: return '3';
 800f33c:	2033      	movs	r0, #51	; 0x33
 800f33e:	4770      	bx	lr
		case 4: return '4';
 800f340:	2034      	movs	r0, #52	; 0x34
 800f342:	4770      	bx	lr
		case 5: return '5';
 800f344:	2035      	movs	r0, #53	; 0x35
 800f346:	4770      	bx	lr
		case 6: return '6';
 800f348:	2036      	movs	r0, #54	; 0x36
 800f34a:	4770      	bx	lr
		case 7: return '7';
 800f34c:	2037      	movs	r0, #55	; 0x37
 800f34e:	4770      	bx	lr
		case 8: return '8';
 800f350:	2038      	movs	r0, #56	; 0x38
 800f352:	4770      	bx	lr
		case 9: return '9';
 800f354:	2039      	movs	r0, #57	; 0x39
 800f356:	4770      	bx	lr
		case 10: return 'A';
 800f358:	2041      	movs	r0, #65	; 0x41
 800f35a:	4770      	bx	lr
		case 11: return 'B';
 800f35c:	2042      	movs	r0, #66	; 0x42
 800f35e:	4770      	bx	lr
		case 12: return 'C';
 800f360:	2043      	movs	r0, #67	; 0x43
 800f362:	4770      	bx	lr
		case 13: return 'D';
 800f364:	2044      	movs	r0, #68	; 0x44
 800f366:	4770      	bx	lr
		case 14: return 'E';
 800f368:	2045      	movs	r0, #69	; 0x45
 800f36a:	4770      	bx	lr
		case 15: return 'F';
 800f36c:	2046      	movs	r0, #70	; 0x46
 800f36e:	4770      	bx	lr
		case 0: return '0';
 800f370:	2030      	movs	r0, #48	; 0x30
 800f372:	4770      	bx	lr
		case 1: return '1';
 800f374:	2031      	movs	r0, #49	; 0x31
 800f376:	4770      	bx	lr
 800f378:	4770      	bx	lr
 800f37a:	bf00      	nop
 800f37c:	0000      	movs	r0, r0
	...

0800f380 <ConfEmr3>:
*EL PUNTO DEL TOTALIZADOR DEBE SER 2.
*LAS DOS CABEZA DEBE TIENE LOS MISMO PUNTO.
*********************************************/

uint8_t ConfEmr3(void)
{
 800f380:	b530      	push	{r4, r5, lr}
	uint8_t recibo[17];
	
    ButtonEmr(TEST_PUNTO,0x01);
 800f382:	2101      	movs	r1, #1
{
 800f384:	b087      	sub	sp, #28
    ButtonEmr(TEST_PUNTO,0x01);
 800f386:	2025      	movs	r0, #37	; 0x25
 800f388:	f7fd fbda 	bl	800cb40 <ButtonEmr>

    uartStartReceive(&UARTD1, 17, recibo);
 800f38c:	a901      	add	r1, sp, #4
 800f38e:	2011      	movs	r0, #17
 800f390:	f7ff fe16 	bl	800efc0 <uartStartReceive.constprop.23>
    chThdSleepMilliseconds(2000);
 800f394:	f644 6020 	movw	r0, #20000	; 0x4e20
 800f398:	f7fd fb52 	bl	800ca40 <chThdSleep>
    uartStopReceive(&UARTD1);
 800f39c:	f7ff fe70 	bl	800f080 <uartStopReceive.constprop.21>

    if(recibo[0x03] == 0x43)
 800f3a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f3a4:	2b43      	cmp	r3, #67	; 0x43
 800f3a6:	d002      	beq.n	800f3ae <ConfEmr3+0x2e>
        }        
    }

    else
    {
        return 0;
 800f3a8:	2000      	movs	r0, #0
    }
		
}
 800f3aa:	b007      	add	sp, #28
 800f3ac:	bd30      	pop	{r4, r5, pc}
        if(recibo[7] == recibo[10] && recibo[8] == recibo[12] && recibo[9] == recibo[13] && recibo[14] == 0X02)
 800f3ae:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800f3b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	d1f6      	bne.n	800f3a8 <ConfEmr3+0x28>
 800f3ba:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800f3be:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800f3c2:	428a      	cmp	r2, r1
 800f3c4:	d1f0      	bne.n	800f3a8 <ConfEmr3+0x28>
 800f3c6:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800f3ca:	f89d 0011 	ldrb.w	r0, [sp, #17]
 800f3ce:	4288      	cmp	r0, r1
 800f3d0:	d1ea      	bne.n	800f3a8 <ConfEmr3+0x28>
 800f3d2:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800f3d6:	2902      	cmp	r1, #2
 800f3d8:	d1e6      	bne.n	800f3a8 <ConfEmr3+0x28>
	dato_emr3[num] = inf;
 800f3da:	4c20      	ldr	r4, [pc, #128]	; (800f45c <ConfEmr3+0xdc>)
            if(read_eeprom(turno_aux) == 0x00 && read_eeprom(lado2) == 0x01)
 800f3dc:	f894 507f 	ldrb.w	r5, [r4, #127]	; 0x7f
 800f3e0:	73a3      	strb	r3, [r4, #14]
 800f3e2:	76e2      	strb	r2, [r4, #27]
 800f3e4:	7120      	strb	r0, [r4, #4]
 800f3e6:	b91d      	cbnz	r5, 800f3f0 <ConfEmr3+0x70>
 800f3e8:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d003      	beq.n	800f3f8 <ConfEmr3+0x78>
                            sd_punto();       
 800f3f0:	f7fe fa1e 	bl	800d830 <sd_punto>
                            return 1; 
 800f3f4:	2001      	movs	r0, #1
 800f3f6:	e7d8      	b.n	800f3aa <ConfEmr3+0x2a>
                ButtonEmr(TEST_PUNTO,0x02);
 800f3f8:	2025      	movs	r0, #37	; 0x25
 800f3fa:	f7fd fba1 	bl	800cb40 <ButtonEmr>
                uartStartReceive(&UARTD1, 17, recibo);
 800f3fe:	a901      	add	r1, sp, #4
 800f400:	2011      	movs	r0, #17
 800f402:	f7ff fddd 	bl	800efc0 <uartStartReceive.constprop.23>
                chThdSleepMilliseconds(2000);
 800f406:	f644 6020 	movw	r0, #20000	; 0x4e20
 800f40a:	f7fd fb19 	bl	800ca40 <chThdSleep>
                uartStopReceive(&UARTD1);
 800f40e:	f7ff fe37 	bl	800f080 <uartStopReceive.constprop.21>
                if(recibo[0x03] == 0x43)
 800f412:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f416:	2b43      	cmp	r3, #67	; 0x43
 800f418:	d1c6      	bne.n	800f3a8 <ConfEmr3+0x28>
                    if(recibo[7] == recibo[10] && recibo[8] == recibo[12] && recibo[9] == recibo[13] && recibo[14] == 0X02)
 800f41a:	f89d 100b 	ldrb.w	r1, [sp, #11]
 800f41e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800f422:	428b      	cmp	r3, r1
 800f424:	d1c0      	bne.n	800f3a8 <ConfEmr3+0x28>
 800f426:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800f42a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800f42e:	4293      	cmp	r3, r2
 800f430:	d1ba      	bne.n	800f3a8 <ConfEmr3+0x28>
 800f432:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800f436:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800f43a:	4283      	cmp	r3, r0
 800f43c:	d1b4      	bne.n	800f3a8 <ConfEmr3+0x28>
 800f43e:	f89d 0012 	ldrb.w	r0, [sp, #18]
 800f442:	2802      	cmp	r0, #2
 800f444:	d1b0      	bne.n	800f3a8 <ConfEmr3+0x28>
                        if(read_eeprom(PV) == recibo[10] && read_eeprom(PD) == recibo[12] && read_eeprom(pppu) == recibo[9])
 800f446:	7ba0      	ldrb	r0, [r4, #14]
 800f448:	4288      	cmp	r0, r1
 800f44a:	d1ad      	bne.n	800f3a8 <ConfEmr3+0x28>
 800f44c:	7ee1      	ldrb	r1, [r4, #27]
 800f44e:	4291      	cmp	r1, r2
 800f450:	d1aa      	bne.n	800f3a8 <ConfEmr3+0x28>
 800f452:	7922      	ldrb	r2, [r4, #4]
 800f454:	429a      	cmp	r2, r3
 800f456:	d1a7      	bne.n	800f3a8 <ConfEmr3+0x28>
 800f458:	e7ca      	b.n	800f3f0 <ConfEmr3+0x70>
 800f45a:	bf00      	nop
 800f45c:	20001c74 	.word	0x20001c74

0800f460 <desconexion>:
    if(pos == 0x01)
 800f460:	2801      	cmp	r0, #1
{
 800f462:	b538      	push	{r3, r4, r5, lr}
    if(pos == 0x01)
 800f464:	d00f      	beq.n	800f486 <desconexion+0x26>
    else if(pos == 0x02)
 800f466:	2802      	cmp	r0, #2
 800f468:	d000      	beq.n	800f46c <desconexion+0xc>
 800f46a:	bd38      	pop	{r3, r4, r5, pc}
	return (dato_emr3[num]);
 800f46c:	4c44      	ldr	r4, [pc, #272]	; (800f580 <desconexion+0x120>)
        if(read_eeprom(Flag1) == 0X01)
 800f46e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800f472:	2b01      	cmp	r3, #1
 800f474:	d014      	beq.n	800f4a0 <desconexion+0x40>
 800f476:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
        else if (read_eeprom(CB_Flag1) == 0X02)
 800f47a:	2b02      	cmp	r3, #2
 800f47c:	d054      	beq.n	800f528 <desconexion+0xc8>
            write_eeprom(CB_Flag1,(read_eeprom(CB_Flag1) + 0x01));
 800f47e:	3301      	adds	r3, #1
	dato_emr3[num] = inf;
 800f480:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800f484:	e7f1      	b.n	800f46a <desconexion+0xa>
	return (dato_emr3[num]);
 800f486:	4c3e      	ldr	r4, [pc, #248]	; (800f580 <desconexion+0x120>)
        if(read_eeprom(Flag1) == 0X01)
 800f488:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d021      	beq.n	800f4d4 <desconexion+0x74>
 800f490:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
        else if (read_eeprom(CA_Flag1) == 0X02)
 800f494:	2b02      	cmp	r3, #2
 800f496:	d041      	beq.n	800f51c <desconexion+0xbc>
            write_eeprom(CA_Flag1,(read_eeprom(CA_Flag1) + 0x01));
 800f498:	3301      	adds	r3, #1
	dato_emr3[num] = inf;
 800f49a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 800f49e:	bd38      	pop	{r3, r4, r5, pc}
            if(read_eeprom(lado2) == 0X00)
 800f4a0:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d143      	bne.n	800f530 <desconexion+0xd0>
                if(read_eeprom(estado2) == 0X09 )
 800f4a8:	78a2      	ldrb	r2, [r4, #2]
 800f4aa:	2a09      	cmp	r2, #9
 800f4ac:	d064      	beq.n	800f578 <desconexion+0x118>
 800f4ae:	2206      	movs	r2, #6
 800f4b0:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 800f4b4:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 800f4b8:	70a2      	strb	r2, [r4, #2]
                chThdSleepMilliseconds(2000);
 800f4ba:	f644 6020 	movw	r0, #20000	; 0x4e20
 800f4be:	f7fd fabf 	bl	800ca40 <chThdSleep>
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
 800f4ca:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800f4ce:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800f4d2:	bd38      	pop	{r3, r4, r5, pc}
            if(read_eeprom(lado1) == 0X00)
 800f4d4:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d139      	bne.n	800f550 <desconexion+0xf0>
                    LCDPrintRow2(0,"   Error=0007   "); 
 800f4dc:	4d29      	ldr	r5, [pc, #164]	; (800f584 <desconexion+0x124>)
 800f4de:	e001      	b.n	800f4e4 <desconexion+0x84>
 800f4e0:	f000 f89e 	bl	800f620 <LCDPrintRow2.constprop.2>
                    aux_punto = ConfEmr3();
 800f4e4:	f7ff ff4c 	bl	800f380 <ConfEmr3>
                    if(aux_punto == 0x01) break;
 800f4e8:	2801      	cmp	r0, #1
                    LCDPrintRow2(0,"   Error=0007   "); 
 800f4ea:	4628      	mov	r0, r5
                    if(aux_punto == 0x01) break;
 800f4ec:	d1f8      	bne.n	800f4e0 <desconexion+0x80>
                if(read_eeprom(estado1) == 0X09 )
 800f4ee:	7823      	ldrb	r3, [r4, #0]
 800f4f0:	2b09      	cmp	r3, #9
 800f4f2:	d03d      	beq.n	800f570 <desconexion+0x110>
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	2206      	movs	r2, #6
 800f4f8:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 800f4fc:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 800f500:	7022      	strb	r2, [r4, #0]
                chThdSleepMilliseconds(2000);
 800f502:	f644 6020 	movw	r0, #20000	; 0x4e20
 800f506:	f7fd fa9b 	bl	800ca40 <chThdSleep>
 800f50a:	2300      	movs	r3, #0
 800f50c:	2201      	movs	r2, #1
 800f50e:	f884 2056 	strb.w	r2, [r4, #86]	; 0x56
 800f512:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800f516:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 800f51a:	bd38      	pop	{r3, r4, r5, pc}
 800f51c:	2300      	movs	r3, #0
 800f51e:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
 800f522:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 800f526:	bd38      	pop	{r3, r4, r5, pc}
 800f528:	2300      	movs	r3, #0
 800f52a:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 800f52e:	bd38      	pop	{r3, r4, r5, pc}
            else if (read_eeprom(inicio2) == 0X01)
 800f530:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800f534:	2b01      	cmp	r3, #1
 800f536:	d1c4      	bne.n	800f4c2 <desconexion+0x62>
                if(read_eeprom(estado2) == 0X09)
 800f538:	78a3      	ldrb	r3, [r4, #2]
 800f53a:	2b09      	cmp	r3, #9
 800f53c:	f04f 0200 	mov.w	r2, #0
 800f540:	bf08      	it	eq
 800f542:	230a      	moveq	r3, #10
 800f544:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
 800f548:	bf08      	it	eq
 800f54a:	f884 3088 	strbeq.w	r3, [r4, #136]	; 0x88
 800f54e:	e7b8      	b.n	800f4c2 <desconexion+0x62>
            else if (read_eeprom(inicio1) == 0X01)
 800f550:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800f554:	2b01      	cmp	r3, #1
 800f556:	d1d8      	bne.n	800f50a <desconexion+0xaa>
                if(read_eeprom(estado1) == 0X09)
 800f558:	7823      	ldrb	r3, [r4, #0]
 800f55a:	2b09      	cmp	r3, #9
 800f55c:	f04f 0200 	mov.w	r2, #0
 800f560:	bf08      	it	eq
 800f562:	230a      	moveq	r3, #10
 800f564:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
 800f568:	bf08      	it	eq
 800f56a:	f884 3087 	strbeq.w	r3, [r4, #135]	; 0x87
 800f56e:	e7cc      	b.n	800f50a <desconexion+0xaa>
 800f570:	230a      	movs	r3, #10
 800f572:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
 800f576:	e7c4      	b.n	800f502 <desconexion+0xa2>
 800f578:	230a      	movs	r3, #10
 800f57a:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
 800f57e:	e79c      	b.n	800f4ba <desconexion+0x5a>
 800f580:	20001c74 	.word	0x20001c74
 800f584:	0800fab4 	.word	0x0800fab4
	...

0800f590 <LED_thread_3.lto_priv.64>:
  ch.rlist.r_current->p_name = name;
 800f590:	4c1c      	ldr	r4, [pc, #112]	; (800f604 <LED_thread_3.lto_priv.64+0x74>)
 800f592:	4a1d      	ldr	r2, [pc, #116]	; (800f608 <LED_thread_3.lto_priv.64+0x78>)
 800f594:	69a3      	ldr	r3, [r4, #24]
      	palClearPad(GPIOE, 0);
 800f596:	4e1d      	ldr	r6, [pc, #116]	; (800f60c <LED_thread_3.lto_priv.64+0x7c>)
{
 800f598:	b580      	push	{r7, lr}
      	palClearPad(GPIOE, 0);
 800f59a:	2501      	movs	r5, #1
 800f59c:	4f1c      	ldr	r7, [pc, #112]	; (800f610 <LED_thread_3.lto_priv.64+0x80>)
 800f59e:	619a      	str	r2, [r3, #24]
 800f5a0:	46a8      	mov	r8, r5
 800f5a2:	f8a6 801a 	strh.w	r8, [r6, #26]
      	chThdSleepMilliseconds(500);
 800f5a6:	f241 3088 	movw	r0, #5000	; 0x1388
 800f5aa:	f7fd fa49 	bl	800ca40 <chThdSleep>
      	palSetPad(GPIOE, 0);
 800f5ae:	8335      	strh	r5, [r6, #24]
      	chThdSleepMilliseconds(500);
 800f5b0:	f241 3088 	movw	r0, #5000	; 0x1388
 800f5b4:	f7fd fa44 	bl	800ca40 <chThdSleep>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800f5b8:	2320      	movs	r3, #32
 800f5ba:	f383 8811 	msr	BASEPRI, r3
  _stats_start_measure_crit_thd();
 800f5be:	f7fc fe57 	bl	800c270 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800f5c2:	f7fd f8cd 	bl	800c760 <_dbg_check_lock>
void wdgReset(WDGDriver *wdgp) {

  osalDbgCheck(wdgp != NULL);

  osalSysLock();
  osalDbgAssert(wdgp->state == WDG_READY, "not ready");
 800f5c6:	783b      	ldrb	r3, [r7, #0]
 800f5c8:	2b02      	cmp	r3, #2
 800f5ca:	d003      	beq.n	800f5d4 <LED_thread_3.lto_priv.64+0x44>
  __ASM volatile ("cpsid i" : : : "memory");
 800f5cc:	b672      	cpsid	i
 800f5ce:	4b11      	ldr	r3, [pc, #68]	; (800f614 <LED_thread_3.lto_priv.64+0x84>)
 800f5d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f5d2:	e7fe      	b.n	800f5d2 <LED_thread_3.lto_priv.64+0x42>
 *
 * @notapi
 */
void wdg_lld_reset(WDGDriver * wdgp) {

  wdgp->wdg->KR = KR_KEY_RELOAD;
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800f5da:	601a      	str	r2, [r3, #0]
  _dbg_check_unlock();
 800f5dc:	f7fd f8b0 	bl	800c740 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800f5e0:	f7fc fe2e 	bl	800c240 <_stats_stop_measure_crit_thd>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800f5e4:	6823      	ldr	r3, [r4, #0]
 800f5e6:	42a3      	cmp	r3, r4
 800f5e8:	d004      	beq.n	800f5f4 <LED_thread_3.lto_priv.64+0x64>
 800f5ea:	69a2      	ldr	r2, [r4, #24]
 800f5ec:	689b      	ldr	r3, [r3, #8]
 800f5ee:	6892      	ldr	r2, [r2, #8]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d303      	bcc.n	800f5fc <LED_thread_3.lto_priv.64+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	f383 8811 	msr	BASEPRI, r3
 800f5fa:	e7d2      	b.n	800f5a2 <LED_thread_3.lto_priv.64+0x12>
  __ASM volatile ("cpsid i" : : : "memory");
 800f5fc:	b672      	cpsid	i
 800f5fe:	4b06      	ldr	r3, [pc, #24]	; (800f618 <LED_thread_3.lto_priv.64+0x88>)
 800f600:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f602:	e7fe      	b.n	800f602 <LED_thread_3.lto_priv.64+0x72>
 800f604:	20001698 	.word	0x20001698
 800f608:	080102f0 	.word	0x080102f0
 800f60c:	40021000 	.word	0x40021000
 800f610:	20001278 	.word	0x20001278
 800f614:	08010300 	.word	0x08010300
 800f618:	0800f7f0 	.word	0x0800f7f0
 800f61c:	00000000 	.word	0x00000000

0800f620 <LCDPrintRow2.constprop.2>:
inline void LCDPrintRow2(uint8_t row_number ,uint8_t row_string [])
 800f620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f624:	4607      	mov	r7, r0
    LCDSetCursor(0x40, row_number);
 800f626:	2040      	movs	r0, #64	; 0x40
 800f628:	f7ff faa2 	bl	800eb70 <LCDSetCursor.constprop.5>
   palWritePad(GPIOD, RW, 0);
 800f62c:	4e0b      	ldr	r6, [pc, #44]	; (800f65c <LCDPrintRow2.constprop.2+0x3c>)
 800f62e:	1e7c      	subs	r4, r7, #1
 800f630:	f44f 1900 	mov.w	r9, #2097152	; 0x200000
 800f634:	370f      	adds	r7, #15
   palWritePad(GPIOD, RS, mode);
 800f636:	f04f 0840 	mov.w	r8, #64	; 0x40
    LCDSend(row_string[i], HIGH);
 800f63a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
   palWritePad(GPIOD, RW, 0);
 800f63e:	f8c6 9018 	str.w	r9, [r6, #24]
   LCDWrite4bits(value>>4);
 800f642:	0928      	lsrs	r0, r5, #4
   palWritePad(GPIOD, RS, mode);
 800f644:	f8c6 8018 	str.w	r8, [r6, #24]
   LCDWrite4bits(value>>4);
 800f648:	f7fc faea 	bl	800bc20 <LCDWrite4bits>
   LCDWrite4bits(value);
 800f64c:	4628      	mov	r0, r5
 800f64e:	f7fc fae7 	bl	800bc20 <LCDWrite4bits>
    for (i=0; i<16; i++)
 800f652:	42bc      	cmp	r4, r7
 800f654:	d1f1      	bne.n	800f63a <LCDPrintRow2.constprop.2+0x1a>
}
 800f656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f65a:	bf00      	nop
 800f65c:	40020c00 	.word	0x40020c00

0800f660 <data_recibo.constprop.1>:
void data_recibo(uint8_t P)
 800f660:	b500      	push	{lr}
 800f662:	b087      	sub	sp, #28
   	uartStartReceive(&UARTD1, P, recibo);
 800f664:	a901      	add	r1, sp, #4
 800f666:	2007      	movs	r0, #7
 800f668:	f7ff fcaa 	bl	800efc0 <uartStartReceive.constprop.23>
   	chThdSleepMilliseconds(500);
 800f66c:	f241 3088 	movw	r0, #5000	; 0x1388
 800f670:	f7fd f9e6 	bl	800ca40 <chThdSleep>
   	uartStopReceive(&UARTD1);
 800f674:	f7ff fd04 	bl	800f080 <uartStopReceive.constprop.21>
	return (dato_emr3[num]);
 800f678:	4b08      	ldr	r3, [pc, #32]	; (800f69c <data_recibo.constprop.1+0x3c>)
   	aux_pasos = recibo[4];
 800f67a:	4a09      	ldr	r2, [pc, #36]	; (800f6a0 <data_recibo.constprop.1+0x40>)
    if(read_eeprom(log) == 1) emr3_log(&recibo,P,2);
 800f67c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   	aux_pasos = recibo[4];
 800f680:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800f684:	7011      	strb	r1, [r2, #0]
    if(read_eeprom(log) == 1) emr3_log(&recibo,P,2);
 800f686:	2b01      	cmp	r3, #1
 800f688:	d104      	bne.n	800f694 <data_recibo.constprop.1+0x34>
 800f68a:	a801      	add	r0, sp, #4
 800f68c:	2202      	movs	r2, #2
 800f68e:	2107      	movs	r1, #7
 800f690:	f7fe fd46 	bl	800e120 <emr3_log>
}
 800f694:	b007      	add	sp, #28
 800f696:	f85d fb04 	ldr.w	pc, [sp], #4
 800f69a:	bf00      	nop
 800f69c:	20001c74 	.word	0x20001c74
 800f6a0:	20001c70 	.word	0x20001c70
	...
 800f6b0:	5443454c 	.word	0x5443454c
 800f6b4:	00415255 	.word	0x00415255
 800f6b8:	43202020 	.word	0x43202020
 800f6bc:	4f534e4f 	.word	0x4f534e4f
 800f6c0:	3020454c 	.word	0x3020454c
 800f6c4:	20202033 	.word	0x20202033
 800f6c8:	00000000 	.word	0x00000000
 800f6cc:	20202020 	.word	0x20202020
 800f6d0:	41534944 	.word	0x41534944
 800f6d4:	44454c42 	.word	0x44454c42
 800f6d8:	20202020 	.word	0x20202020
 800f6dc:	00000000 	.word	0x00000000
 800f6e0:	41202020 	.word	0x41202020
 800f6e4:	45524444 	.word	0x45524444
 800f6e8:	31205353 	.word	0x31205353
 800f6ec:	20202020 	.word	0x20202020
 800f6f0:	00000000 	.word	0x00000000
 800f6f4:	41532020 	.word	0x41532020
 800f6f8:	41204556 	.word	0x41204556
 800f6fc:	45524444 	.word	0x45524444
 800f700:	20205353 	.word	0x20205353
 800f704:	00000000 	.word	0x00000000
 800f708:	41202020 	.word	0x41202020
 800f70c:	45524444 	.word	0x45524444
 800f710:	4f205353 	.word	0x4f205353
 800f714:	2020204b 	.word	0x2020204b
 800f718:	00000000 	.word	0x00000000
 800f71c:	41202020 	.word	0x41202020
 800f720:	45524444 	.word	0x45524444
 800f724:	32205353 	.word	0x32205353
 800f728:	20202020 	.word	0x20202020
 800f72c:	00000000 	.word	0x00000000
 800f730:	20202020 	.word	0x20202020
 800f734:	534e4f43 	.word	0x534e4f43
 800f738:	20454c4f 	.word	0x20454c4f
 800f73c:	20202020 	.word	0x20202020
 800f740:	00000000 	.word	0x00000000
 800f744:	41532020 	.word	0x41532020
 800f748:	43204556 	.word	0x43204556
 800f74c:	4f534e4f 	.word	0x4f534e4f
 800f750:	2020454c 	.word	0x2020454c
 800f754:	00000000 	.word	0x00000000
 800f758:	43202020 	.word	0x43202020
 800f75c:	4f534e4f 	.word	0x4f534e4f
 800f760:	4f20454c 	.word	0x4f20454c
 800f764:	2020204b 	.word	0x2020204b
 800f768:	00000000 	.word	0x00000000
 800f76c:	20202020 	.word	0x20202020
 800f770:	49525020 	.word	0x49525020
 800f774:	20204543 	.word	0x20204543
 800f778:	20202020 	.word	0x20202020
 800f77c:	00000000 	.word	0x00000000
 800f780:	20202020 	.word	0x20202020
 800f784:	4f4c2020 	.word	0x4f4c2020
 800f788:	20202047 	.word	0x20202047
 800f78c:	20202020 	.word	0x20202020
 800f790:	00000000 	.word	0x00000000
 800f794:	20202020 	.word	0x20202020
 800f798:	4f202020 	.word	0x4f202020
 800f79c:	2020204e 	.word	0x2020204e
 800f7a0:	20202020 	.word	0x20202020
 800f7a4:	00000000 	.word	0x00000000
 800f7a8:	20202020 	.word	0x20202020
 800f7ac:	464f2020 	.word	0x464f2020
 800f7b0:	20202046 	.word	0x20202046
 800f7b4:	20202020 	.word	0x20202020
 800f7b8:	00000000 	.word	0x00000000
 800f7bc:	20202020 	.word	0x20202020
 800f7c0:	45534e49 	.word	0x45534e49
 800f7c4:	20544550 	.word	0x20544550
 800f7c8:	20202020 	.word	0x20202020
 800f7cc:	00000000 	.word	0x00000000
 800f7d0:	45524957 	.word	0x45524957
	...

0800f7e0 <__func__.5976.lto_priv.70>:
 800f7e0:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

0800f7f0 <__func__.5976.lto_priv.71>:
 800f7f0:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

0800f800 <__func__.7673>:
 800f800:	53676477 74726174 00000000 00000000     wdgStart........

0800f810 <__func__.7676>:
 800f810:	74726175 72617453 00000074 00000000     uartStart.......

0800f820 <__func__.7717>:
 800f820:	74536473 00747261 00000000 00000000     sdStart.........

0800f830 <__func__.7719>:
 800f830:	74726175 646c6c5f 6174735f 00007472     uart_lld_start..

0800f840 <_stm32_dma_streams>:
 800f840:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 800f850:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 800f860:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 800f870:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 800f880:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 800f890:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 800f8a0:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 800f8b0:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 800f8c0:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 800f8d0:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 800f8e0:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 800f8f0:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

0800f900 <ch_debug>:
 800f900:	6e69616d 18451600 08600404 1814100c     main..E...`.....
 800f910:	2221201c 00000000 00000000 00000000     . !"............

0800f920 <hs_spicfg>:
 800f920:	00000000 40020000 00300004 00000000     .......@..0.....

0800f930 <ls_spicfg>:
 800f930:	00000000 40020000 00300004 00000000     .......@..0.....
 800f940:	33235653 00000000 656c6469 00000000     SV#3....idle....
 800f950:	54534953 20414d45 534e4920 54455045     SISTEMA  INSEPET
 800f960:	00000000 2e777777 65736e69 2e746570     ....www.insepet.
 800f970:	206d6f63 00000000 52455620 4e4f4953     com .... VERSION
 800f980:	322e3220 2020452e 00000000 6d452020      2.2.E  ....  Em
 800f990:	74203372 6947206f 2020206c 00000000     r3 to Gil   ....
 800f9a0:	20202020 7263696d 3a44536f 20202020         microSD:    
 800f9b0:	00000000 20202020 20202020 20202020     ....            
 800f9c0:	20202020 00000000 45202020 726f7272         ....   Error
 800f9d0:	3030303d 20202031 00000000 0000002f     =0001   ..../...
 800f9e0:	45202020 726f7272 3030303d 20202032        Error=0002   
 800f9f0:	00000000 6f202020 696d206b 536f7263     ....   ok microS
 800fa00:	20202044 00000000 45202020 726f7272     D   ....   Error
 800fa10:	3030303d 20202033 00000000 666e6f63     =0003   ....conf
 800fa20:	742e6769 00007478 45202020 726f7272     ig.txt..   Error
 800fa30:	3030303d 20202035 00000000 45202020     =0005   ....   E
 800fa40:	726f7272 3030303d 20202034 00000000     rror=0004   ....
 800fa50:	54202020 5f545345 33524d45 20202020        TEST_EMR3    
 800fa60:	00000000 45202020 5f33524d 4e4f3d31     ....   EMR3_1=ON
 800fa70:	20202020 00000000 45202020 5f33524d         ....   EMR3_
 800fa80:	4e4f3d32 20202020 00000000 45202020     2=ON    ....   E
 800fa90:	5f33524d 464f3d32 20202046 00000000     MR3_2=OFF   ....
 800faa0:	54202020 20545345 4e494f50 20202053        TEST POINS   
 800fab0:	00000000 45202020 726f7272 3030303d     ....   Error=000
 800fac0:	20202037 00000000 20202020 50204b4f     7   ....    OK P
 800fad0:	534e494f 20202020 00000000 41455220     OINS    .... REA
 800fae0:	54205344 4c41544f 20205345 00000000     DS TOTALES  ....
 800faf0:	2e757070 00747874 7269776c 78742e65     ppu.txt.lwire.tx
 800fb00:	00000074 726d656c 78742e33 00000074     t...lemr3.txt...
 800fb10:	6e617274 78742e73 00000074 6d653173     trans.txt...s1em
 800fb20:	742e3372 00007478 69773173 742e6572     r3.txt..s1wire.t
 800fb30:	00007478 6e617274 742e3273 00007478     xt..trans2.txt..
 800fb40:	6d653273 742e3372 00007478 69773273     s2emr3.txt..s2wi
 800fb50:	742e6572 00007478 00000000 00000000     re.txt..........

0800fb60 <mmc_vmt>:
 800fb60:	08008871 08008861 08009681 08009c41     q...a.......A...
 800fb70:	08009b71 080099e1 08009641 08009341     q.......A...A...

0800fb80 <vmt>:
 800fb80:	0800a421 0800a401 0800a461 0800a441     !.......a...A...
 800fb90:	0800a451 0800a431 0800a411 0800a3f1     Q...1...........

0800fba0 <wdgcfg>:
 800fba0:	00000004 00001388 00000000 00000000     ................

0800fbb0 <__func__.6757>:
 800fbb0:	68546863 73655264 49656d75 00000000     chThdResumeI....

0800fbc0 <__func__.8223.lto_priv.147>:
 800fbc0:	53636d6d 53706f74 65757165 6169746e     mmcStopSequentia
 800fbd0:	6165526c 00000064 00000000 00000000     lRead...........

0800fbe0 <__func__.8235.lto_priv.146>:
 800fbe0:	53636d6d 65757165 6169746e 6972576c     mmcSequentialWri
 800fbf0:	00006574 00000000 00000000 00000000     te..............

0800fc00 <__func__.8240.lto_priv.144>:
 800fc00:	53636d6d 53706f74 65757165 6169746e     mmcStopSequentia
 800fc10:	6972576c 00006574 00000000 00000000     lWrite..........

0800fc20 <stop.8239.lto_priv.145>:
 800fc20:	0000fffd 00000000 00000000 00000000     ................
 800fc30:	20414d44 6c696166 00657275 00000000     DMA failure.....

0800fc40 <__func__.5976.lto_priv.150>:
 800fc40:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

0800fc50 <__func__.5976.lto_priv.151>:
 800fc50:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

0800fc60 <__func__.6354>:
 800fc60:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

0800fc70 <__func__.6738>:
 800fc70:	514f6863 74697257 6d695465 74756f65     chOQWriteTimeout
	...

0800fc90 <__func__.7675>:
 800fc90:	636d6d5f 675f6473 735f7465 6563696c     _mmcsd_get_slice
	...

0800fcb0 <__func__.7679>:
 800fcb0:	65537473 616c4174 00006d72 00000000     stSetAlarm......

0800fcc0 <__func__.8192>:
 800fcc0:	43636d6d 656e6e6f 00007463 00000000     mmcConnect......

0800fcd0 <__func__.8204>:
 800fcd0:	44636d6d 6f637369 63656e6e 00000074     mmcDisconnect...

0800fce0 <__func__.8209>:
 800fce0:	53636d6d 74726174 75716553 69746e65     mmcStartSequenti
 800fcf0:	65526c61 00006461 00000000 00000000     alRead..........

0800fd00 <__func__.8215>:
 800fd00:	53636d6d 65757165 6169746e 6165526c     mmcSequentialRea
 800fd10:	00000064 00000000 00000000 00000000     d...............

0800fd20 <__func__.8228>:
 800fd20:	53636d6d 74726174 75716553 69746e65     mmcStartSequenti
 800fd30:	72576c61 00657469 00000000 00000000     alWrite.........

0800fd40 <__func__.8244>:
 800fd40:	53636d6d 00636e79 00000000 00000000     mmcSync.........

0800fd50 <__func__.8249>:
 800fd50:	47636d6d 6e497465 00006f66 00000000     mmcGetInfo......

0800fd60 <crc7_lookup_table>:
 800fd60:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
 800fd70:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
 800fd80:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
 800fd90:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
 800fda0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
 800fdb0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
 800fdc0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
 800fdd0:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
 800fde0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
 800fdf0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
 800fe00:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
 800fe10:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
 800fe20:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
 800fe30:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
 800fe40:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
 800fe50:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy

0800fe60 <start.8233>:
 800fe60:	0000fcff 00000000 00000000 00000000     ................

0800fe70 <stopcmd.8222>:
 800fe70:	0000004c 00ff0100 00000000 00000000     L...............

0800fe80 <__func__.5976>:
 800fe80:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

0800fe90 <__func__.6065>:
 800fe90:	54566863 69546f44 00496b63 00000000     chVTDoTickI.....

0800fea0 <__func__.7676>:
 800fea0:	53697073 74726174 00000000 00000000     spiStart........

0800feb0 <__func__.7680>:
 800feb0:	53697073 00706f74 00000000 00000000     spiStop.........

0800fec0 <__func__.7684>:
 800fec0:	53697073 63656c65 00000074 00000000     spiSelect.......

0800fed0 <__func__.7688>:
 800fed0:	55697073 6c65736e 00746365 00000000     spiUnselect.....

0800fee0 <__func__.7690>:
 800fee0:	5f697073 5f646c6c 72617473 00000074     spi_lld_start...

0800fef0 <__func__.7717>:
 800fef0:	49697073 726f6e67 00000065 00000000     spiIgnore.......

0800ff00 <__func__.7730>:
 800ff00:	53697073 00646e65 00000000 00000000     spiSend.........

0800ff10 <__func__.7736>:
 800ff10:	52697073 69656365 00006576 00000000     spiReceive......

0800ff20 <__func__.7750>:
 800ff20:	53616d64 61657274 6c6c416d 7461636f     dmaStreamAllocat
 800ff30:	00000065 00000000 00000000 00000000     e...............

0800ff40 <__func__.7757>:
 800ff40:	53616d64 61657274 6c65526d 65736165     dmaStreamRelease
	...
 800ff60:	65522020 6d206461 6f726369 20204453       Read microSD  
 800ff70:	00000000 45202020 726f7272 3030303d     ....   Error=000
 800ff80:	20202036 00000000 00000000 00000000     6   ............

0800ff90 <__func__.6150>:
 800ff90:	68546863 656c5364 00537065 00000000     chThdSleepS.....

0800ffa0 <__func__.6679>:
 800ffa0:	63536863 61655268 00497964 00000000     chSchReadyI.....

0800ffb0 <__func__.6682>:
 800ffb0:	54566863 65536f44 00004974 00000000     chVTDoSetI......

0800ffc0 <__func__.6702>:
 800ffc0:	51496863 64616552 656d6954 0074756f     chIQReadTimeout.

0800ffd0 <__func__.6735>:
 800ffd0:	68546863 69784564 00005374 00000000     chThdExitS......

0800ffe0 <__func__.6745>:
 800ffe0:	68546863 73755364 646e6570 00000053     chThdSuspendS...

0800fff0 <__func__.7672>:
 800fff0:	74537473 41747261 6d72616c 00000000     stStartAlarm....
 8010000:	38235653 00000000 00000000 00000000     SV#8............
 8010010:	39235653 00000000 00000000 00000000     SV#9............
 8010020:	34235653 00000000 00000000 00000000     SV#4............
 8010030:	36235653 00000000 00000000 00000000     SV#6............
 8010040:	35235653 00000000 00000000 00000000     SV#5............
 8010050:	37235653 00000000 00000000 00000000     SV#7............
 8010060:	31235653 00000030 00000000 00000000     SV#10...........
 8010070:	31235653 00000031 00000000 00000000     SV#11...........
 8010080:	63617473 766f206b 6c667265 0000776f     stack overflow..

08010090 <ram_areas>:
 8010090:	08010418 20001d10 20001d10 20001d10     ....... ... ... 
 80100a0:	08010418 20000000 20000000 20000000     ....... ... ... 
 80100b0:	08010418 2001c000 2001c000 2001c000     ....... ... ... 
 80100c0:	08010418 00000000 00000000 00000000     ................
 80100d0:	08010418 10000000 10000000 10000000     ................
 80100e0:	08010418 40024000 40024000 40024000     .....@.@.@.@.@.@
 80100f0:	08010418 00000000 00000000 00000000     ................
 8010100:	08010418 00000000 00000000 00000000     ................

08010110 <ExCvt>:
 8010110:	83828180 87868584 8b8a8988 8f8e8d8c     ................
 8010120:	93929190 97969594 9bad9998 9fae9d8c     ................
 8010130:	a3a221a0 a7a6a5a4 abaaa9a8 afaeadac     .!..............
 8010140:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
 8010150:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
 8010160:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
 8010170:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
 8010180:	d3d2d1d0 f7d6d5d4 dbdad9d8 9fdedddc     ................
 8010190:	2c2b2a22 3d3c3b3a 5d5b3f3e 00007f7c     "*+,:;<=>?[]|...
 80101a0:	6e617274 742e6873 00007478 6d653173     transh.txt..s1em
 80101b0:	2e683372 00747874 69773173 2e686572     r3h.txt.s1wireh.
 80101c0:	00747874 00000000 00000000 00000000     txt.............
 80101d0:	6e617274 2e683273 00747874 6d653273     trans2h.txt.s2em
 80101e0:	2e683372 00747874 69773273 2e686572     r3h.txt.s2wireh.
 80101f0:	00747874 00000000 00000000 00000000     txt.............

08010200 <__func__.5976.lto_priv.61>:
 8010200:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08010210 <__func__.5976.lto_priv.62>:
 8010210:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08010220 <__func__.5976.lto_priv.63>:
 8010220:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08010230 <__func__.6162>:
 8010230:	68546863 446f4464 65757165 654e6575     chThdDoDequeueNe
 8010240:	00497478 00000000 00000000 00000000     xtI.............

08010250 <__func__.6677>:
 8010250:	76456863 67655274 65747369 73614d72     chEvtRegisterMas
 8010260:	7469576b 616c4668 00007367 00000000     kWithFlags......

08010270 <__func__.6691>:
 8010270:	68546863 65724364 49657461 00000000     chThdCreateI....

08010280 <__func__.6707>:
 8010280:	63536863 6b615768 53707565 00000000     chSchWakeupS....

08010290 <__func__.6716>:
 8010290:	76456863 67695374 496c616e 00000000     chEvtSignalI....

080102a0 <__func__.7686>:
 80102a0:	74726175 72617453 6e655374 00000064     uartStartSend...

080102b0 <__func__.7697>:
 80102b0:	74726175 706f7453 646e6553 00000000     uartStopSend....

080102c0 <__func__.7708>:
 80102c0:	74726175 72617453 63655274 65766965     uartStartReceive
	...

080102e0 <__func__.7719>:
 80102e0:	74726175 706f7453 65636552 00657669     uartStopReceive.
 80102f0:	0044454c 00000000 00000000 00000000     LED.............

08010300 <__func__.7681>:
 8010300:	52676477 74657365 00000000                       wdgReset.
